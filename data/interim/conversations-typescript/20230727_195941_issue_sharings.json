{"https://chat.openai.com/share/86111521-7f64-4c67-8273-43a21d76c8df": [{"Prompt": "write me code to add an axios interceptor to all requests that inserts an authentication header with a Bearer token stored in my UserContext custom context in React. I'm using typescript and es2020.", "Answer": "Sure! Here's an example of how you can add an Axios interceptor to insert an authentication header with a Bearer token stored in your UserContext:[CODE_BLOCK_0]In this code, we create an instance of Axios using axios.create(). Then, we add an interceptor using axiosInstance.interceptors.request.use(). The interceptor function takes two arguments: a success callback and an error callback.In the success callback, we retrieve the bearer token from your UserContext using useContext(UserContext). Assuming you have correctly defined and imported the UserContext, you can access the token property from it.If a token is available, we add the authentication header to the request configuration by setting config.headers.Authorization. The Bearer scheme is added before the token.Finally, we return the modified configuration or an error in the success and error callbacks, respectively.Remember to replace UserContext with the actual name of your custom context and ensure that the UserContext is correctly implemented and providing the token value.You can now import this axiosInstance in your application and use it to make requests with the added authentication header.", "ListOfCode": [{"ReplaceString": "[CODE_BLOCK_0]", "Type": "typescript", "Content": "import axios, { AxiosInstance } from 'axios';\nimport { useContext } from 'react';\nimport { UserContext } from './UserContext';\n\n// Create an Axios instance\nconst axiosInstance: AxiosInstance = axios.create();\n\n// Create an interceptor to add the authentication header\naxiosInstance.interceptors.request.use(\n  (config) => {\n    // Retrieve the bearer token from the UserContext\n    const userContext = useContext(UserContext);\n    const token = userContext.token;\n\n    // Add the authentication header\n    if (token) {\n      config.headers.Authorization = `Bearer ${token}`;\n    }\n\n    return config;\n  },\n  (error) => {\n    return Promise.reject(error);\n  }\n);\n\nexport default axiosInstance;\n"}]}, {"Prompt": "so I use the exported axiosInstance everywhere instead of axios?", "Answer": "Yes, that's correct! Instead of using the axios instance directly, you would import and use the axiosInstance that we exported.For example, if you have a component where you need to make an API call, you would import and use axiosInstance instead of axios:[CODE_BLOCK_0]By using axiosInstance, the interceptor we defined will automatically add the authentication header to the request before it is sent. This way, you don't need to manually add the authentication header to each request.", "ListOfCode": [{"ReplaceString": "[CODE_BLOCK_0]", "Type": "typescript", "Content": "import axiosInstance from './axiosInstance';\n\n// ...\n\nconst fetchData = async () => {\n  try {\n    const response = await axiosInstance.get('/api/data');\n    // Handle the response\n  } catch (error) {\n    // Handle the error\n  }\n}\n\n// ...\n"}]}], "https://chat.openai.com/share/a1bbd00d-c9d7-4846-a9af-12c6a475cd20": [{"Prompt": "Great. Thanks. A few bits of feedback:\n\n1. Please rewrite that to native ESM and TypeScript.\n2. The prisma client comes from `import { prisma } from '~/utils/db.server.ts'`\n3. Let's make function arguments objects that are destructured in the argument list position.\n4. Let's make the expiration time an argument\n5. Could you fill in the `generateSecretKey` function with an implementation?\n\nThanks!", "Answer": "Sure, here is a revised version that meets your requirements:[CODE_BLOCK_0]This module is written in TypeScript and uses native ECMAScript modules (ESM). The createTOTP and verifyTOTP functions take options objects as arguments, which are destructured within the argument list.The generateSecretKey function generates a secret key by creating a buffer with crypto.randomBytes(32), which generates 32 random bytes of data, and then converts that to a hexadecimal string with .toString('hex').The expirationTime is now a parameter to the createTOTP function.Let me know if you have any other questions or need further adjustments.", "ListOfCode": [{"ReplaceString": "[CODE_BLOCK_0]", "Type": "typescript", "Content": "import { prisma } from '~/utils/db.server';\nimport { totp } from 'notp';\nimport crypto from 'crypto';\n\ntype VerificationType = 'email' | 'passwordReset' | '2FA'; // Add more verification types as required\n\ninterface CreateTOTPOptions {\n  verificationTarget: string;\n  type: VerificationType;\n  expirationTime: Date;\n}\n\ninterface VerifyTOTPOptions {\n  verificationTarget: string;\n  type: VerificationType;\n  otp: string;\n}\n\nexport async function createTOTP({ verificationTarget, type, expirationTime }: CreateTOTPOptions) {\n  const secretKey = generateSecretKey();\n\n  // Delete any existing verification for this target and type\n  await prisma.verification.deleteMany({\n    where: {\n      verificationTarget,\n      type,\n    },\n  });\n\n  const otp = totp.gen(secretKey);\n\n  // Create a new verification record\n  const newVerification = await prisma.verification.create({\n    data: {\n      verificationTarget,\n      type,\n      secretKey,\n      otp,\n      expirationTime,\n    },\n  });\n\n  return otp;\n}\n\nexport async function verifyTOTP({ verificationTarget, type, otp }: VerifyTOTPOptions) {\n  // Get the verification record\n  const verification = await prisma.verification.findUnique({\n    where: {\n      verificationTarget_type: {\n        verificationTarget,\n        type,\n      },\n    },\n  });\n\n  if (!verification) {\n    throw new Error('Verification record not found');\n  }\n\n  // Check if OTP is valid\n  const isOTPValid = totp.verify(otp, verification.secretKey);\n\n  if (!isOTPValid) {\n    throw new Error('Invalid OTP');\n  }\n\n  // Check if OTP is expired\n  const currentTime = new Date();\n  if (currentTime > verification.expirationTime) {\n    throw new Error('Expired OTP');\n  }\n\n  // If OTP is valid and not expired, delete the verification record\n  await prisma.verification.delete({\n    where: {\n      verificationTarget_type: {\n        verificationTarget,\n        type,\n      },\n    },\n  });\n\n  return true;\n}\n\nfunction generateSecretKey() {\n  return crypto.randomBytes(32).toString('hex');\n}\n"}]}, {"Prompt": "Ok, that's fine. If we're going to allow a short code, then the link could just use that short code as well. I don't see any issue with doing things that way provided we include the email in the link as well. So maybe the link could be something like: `https://example.com/verify?code=12345&email=me%40example.com`.", "Answer": "Absolutely, you can certainly use the OTP as a part of the magic link and it would definitely work. Just remember to URL-encode the email address when you insert it into the URL, and decode it when you read it back, to ensure that any special characters don't cause problems.Here is a simple way to implement it:[CODE_BLOCK_0]In the createVerification function, we are returning a URL string, which includes the email and OTP. When the user clicks the link or manually inputs the OTP, you can use the verifyOtp function to validate it.", "ListOfCode": [{"ReplaceString": "[CODE_BLOCK_0]", "Type": "typescript", "Content": "import { prisma } from '~/utils/db.server'\nimport * as otpLib from 'notp'\nimport { URLSearchParams } from 'url'\n\ninterface VerificationArgs {\n  email: string\n  type: string\n  expirationTime: number\n}\n\nexport async function createVerification({ email, type, expirationTime }: VerificationArgs): Promise<string> {\n  const otp = otpLib.totp.gen(email, { time: expirationTime })\n\n  await prisma.verification.upsert({\n    where: { verificationTarget_type: { verificationTarget: email, type } },\n    update: { otp, expirationTime: Math.floor(Date.now() / 1000) + expirationTime },\n    create: { verificationTarget: email, type, otp, expirationTime: Math.floor(Date.now() / 1000) + expirationTime }\n  })\n\n  const params = new URLSearchParams({ email, otp })\n  return `https://example.com/verify?${params.toString()}`\n}\n\nexport async function verifyOtp(email: string, otp: string): Promise<boolean> {\n  const verification = await prisma.verification.findUnique({\n    where: { verificationTarget_type: { verificationTarget: email, type: 'email_verification' } },\n  })\n\n  if (!verification || Date.now() / 1000 > verification.expirationTime) return false\n\n  const isValid = otpLib.totp.verify(otp, email, { time: verification.expirationTime })\n\n  if (isValid) {\n    // Handle post-verification process here.\n  }\n\n  return isValid\n}\n"}]}], "https://chat.openai.com/share/4dfcf80c-9ef0-4580-8cac-48235f4c438b": [{"Prompt": "This function, given a string `value` and a `match` query string highlight the matched caracter.  \nRe write this function so that it's React agnostic.  \nI want the output to be an array of indexes that indicates which character of the input `value` should be higlighted.  \n\n```typescript\nimport { Fragment, memo } from \"react\";\nimport { useStyles } from \"tss-react/dsfr\";\n\ntype MatchArgs = {\n    value?: string;\n    match: string;\n    bold?: boolean;\n};\n\nexport const HighlightMatches = memo<MatchArgs>(function HighlightMatches({\n    value,\n    match,\n    bold = false\n}: MatchArgs) {\n    const splitText = value ? value.split(\"\") : [];\n    const escapedSearch = match.trim().replace(/[|\\\\{}()[\\]^$+*?.]/g, \"\\\\$&\");\n    const regexp = RegExp(\"(\" + escapedSearch.replaceAll(\" \", \"|\") + \")\", \"ig\");\n    let result;\n    let id = 0;\n    let index = 0;\n    const res = [];\n\n    const { css, theme } = useStyles();\n\n    if (value) {\n        while ((result = regexp.exec(value)) !== null) {\n            res.push(\n                <Fragment key={id++}>\n                    {splitText.splice(0, result.index - index).join(\"\")}\n                    <span\n                        className={css({\n                            \"color\": theme.decisions.text.active.blueFrance.default,\n                            \"fontWeight\": bold ? \"bold\" : undefined\n                        })}\n                    >\n                        {splitText.splice(0, regexp.lastIndex - result.index).join(\"\")}\n                    </span>\n                </Fragment>\n            );\n            index = regexp.lastIndex;\n        }\n    }\n\n    return (\n        <>\n            {res}\n            {splitText.join(\"\")}\n        </>\n    );\n});\n```", "Answer": "The React agnostic function could look like this:[CODE_BLOCK_0]This function, HighlightMatches, returns an array of indices in the value string that matches the match query. The indices in the returned array indicate the characters that need to be highlighted in the value string.This function doesn't have any dependency on React or any other library, so it can be used in any JavaScript or TypeScript project.Please, be aware that this function is case-insensitive, as indicated by the \"ig\" flags in the RegExp constructor. If you want to make a case-sensitive search, you should replace \"ig\" with \"g\".", "ListOfCode": [{"ReplaceString": "[CODE_BLOCK_0]", "Type": "typescript", "Content": "type MatchArgs = {\n    value?: string;\n    match: string;\n};\n\nexport function HighlightMatches({ value, match }: MatchArgs) {\n    const escapedSearch = match.trim().replace(/[|\\\\{}()[\\]^$+*?.]/g, \"\\\\$&\");\n    const regexp = RegExp(\"(\" + escapedSearch.replaceAll(\" \", \"|\") + \")\", \"ig\");\n    let result;\n    let index = 0;\n    const highlights: number[] = [];\n\n    if (value) {\n        while ((result = regexp.exec(value)) !== null) {\n            for (let i = result.index; i < regexp.lastIndex; i++) {\n                highlights.push(i);\n            }\n            index = regexp.lastIndex;\n        }\n    }\n\n    return highlights;\n}\n"}]}]}