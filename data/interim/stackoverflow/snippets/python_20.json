[[], [], ["evaluate = eval(text.get(1.0, END))\n"], ["TypeError: eval() arg 1 must be a string, bytes or code object\n", "evaluate = eval(text.get(\"1.0\", tk.END))\n"], [], ["df = df.groupby('Fruit').sum()\nprint(df)\n", "Fruit      Count     \nApple      25\nBanana     19\nPear       28\n"], [], ["df.groupby(\"Fruit\").sum()\n", "Fruit      Count       \nApple      25\nBanana     19\nPear       28\n"], [">>> df.groupby('Fruit',as_index=False)['Count'].sum()\n    Fruit  Count\n0   Apple     25\n1  Banana     19\n2    Pear     28\n>>> \n"], ["import pandas as pd\ndf = pd.DataFrame([[\"Apple\", 10], [\"Pear\", 20], [\"Apple\", 5], [\"Banana\", 7], [\"Banana\", 12], [\"Pear\", 8], [\"Apple\", 10]], columns=[\"Fruit\", \"Count\"])\ndf = df.groupby(['Fruit'])['Count'].sum()\nprint(df)\n", "Fruit\nApple     25\nBanana    19\nPear      28\n"], ["loop = True\ndef main():\n    global loop\n    while loop:\n        print('''MENU CHOICE''')\n        print('''1: go here''')\n        print('''2: go there''')\n        print('''3: You get the point''')\n        print('''0: Terminate program''')\n        print()\n\n        try:\n            answer = int(input('''I want to go to program: '''))\n        except:\n            print('''Not a valid menu choice, please try again''')\n            print()\n\n        if answer != 1 and answer != 2 and answer != 3 and answer != 0:\n            print('''Not a valid menu choice, please try again''')\n            print()\n        elif answer == 1:\n            program1()\n        elif answer == 2:\n            program2()\n        elif answer == 3:\n            program3()\n        else:\n            loop = False\n\ndef program1():\n    global loop\n    print('''This is program 1''')\n    itdontwork = input('''Do you want to go back to the menu? Y/N''')\n\n    if itdontwork == 'Y' or itdontwork == 'y':\n        print()\n    else:\n        print('''SHUTTING DOWN''')\n        loop = False #Here is the issue\n\n#The rest of the programs would be the same\n\nmain()\n"], ["def main():\n    loop = True\n    while loop:\n        loop = program1()\n\ndef program1():\n    itdontwork = input('''Do you want to go back to the menu? Y/N''')\n    if itdontwork == 'Y' or itdontwork == 'y':\n        print()\n    else:\n        print('''SHUTTING DOWN''')\n        return False\n"], ["#Issue is almost at the bottom\n#Feel free to comment on the rest of the code as well,\n#Always looking to improve\ndef main():\n    loop = True\n    while loop:\n        print('''MENU CHOICE''')\n        print('''1: go here''')\n        print('''2: go there''')\n        print('''3: You get the point''')\n        print('''0: Terminate program''')\n        print()\n\n        try:\n            answer = int(input('''I want to go to program: '''))\n        except:\n            print('''Not a valid menu choice, please try again''')\n            print()\n\n        if answer != 1 and answer != 2 and answer != 3 and answer != 0:\n            print('''Not a valid menu choice, please try again''')\n            print()\n        elif answer == 1:\n            return program1() # Return the output of this function\n        elif answer == 2:\n            return program2() # Return the output of this function\n        elif answer == 3:\n            return program3() # Return the output of this function\n        else:\n            loop = False\n\ndef program1():\n    print('''This is program 1''')\n    itdontwork = input('''Do you want to go back to the menu? Y/N''')\n\n    if itdontwork == 'Y' or itdontwork == 'y':\n        print()\n    else:\n        print('''SHUTTING DOWN''')\n        return False # Return the output of this function\n\n#The rest of the programs would be the same\n\nmain()\n"], ["if answer != 1 and answer != 2 and answer != 3 and answer != 0:\n    print('''Not a valid menu choice, please try again''')\n    print()\nelif answer == 1:\n    try:\n        program1()\n    except ValueError:\n        break\nelif answer == 2:\n    try:\n        program2()\n    except ValueError:\n        break\nelif answer == 3:\n    try:\n        program3()\n    except ValueError:\n        break\nelse:\n    loop = False\n\n\ndef program1():\n    print('''This is program 1''')\n    itdontwork = input('''Do you want to go back to the menu? Y/N''')\n\n    if itdontwork == 'Y' or itdontwork == 'y':\n        print()\n    else:\n        print('''SHUTTING DOWN''')\n        # loop = False #Here is the issue\n        raise ValueError('BOOM SHAKA LAKA!')\n"], ["...\n        elif answer == 1:\n            loop = program1()\n        elif answer == 2:\n            loop = program2()\n        elif answer == 3:\n            loop = program3()\n        else:\n            loop = False\n\ndef program1():\n    print('''This is program 1''')\n    itdontwork = input('''Do you want to go back to the menu? Y/N''')\n\n    if itdontwork == 'Y' or itdontwork == 'y':\n        print()\n        return 1 # back to menu...\n    else:\n        print('''SHUTTING DOWN''')\n        return 0\n"], ["with open('TA103019.95.txt', 'r') as f:\n    for idx, line in enumerate(f):\n        if idx > 1:                    \n            cols = line.split('\\t'): #for space delimited change '\\t' to ' '\n            tmax = float(col[1])\n            tmin = float(col[2])\n            #calc mean\n\n            mean = (tmax + tmin) / 2\n            #not sure what you want to do with the result\n"], ["a = '111020220113111111'\nwhile a.find('11') != -1:\n  i = 0\n  j = 1\n  while i < len(a):\n    for c in a:\n        if a[i] == '1':\n            if a[j] == '1':\n                a = a.replace(a[i],'x')\n    i = i + 1\n    j = i + 1\n  a = a.replace(\"xx\",\"1\")\n  a = a.replace(\"x\",\"1\")\nprint(a)\n", "a = '111020220113111111'          >> 1020220131\na = '020220111311811001001001001' >> 02022013181001001001001\na = '0202201131181'               >> 02022013181\n"], ["a = '110202201111311811'\nnew_str = []\n\nwhile (not end of string) :\n    while ((a[i]!='1') and (not end of string))\n        new_str.append(a[i])\n        i++\n\n    if (a[i+1] is not out of range ) and (a[i+1] != '1') :\n        i++\n    else :\n        new_str.append(a[i])\n        while a[i]=='1' :\n            i++\n\nprint (\"\".join(x for x in new_str))\n"], ["with open('TA103019.95.txt', 'r') as f:\n    for line in f:\n        list_line = re.findall(r'\\d+\\.\\d+', line)\n        if len(list_line) == 2 :\n            list_b.append(float(list_line[0])) #appends second column\n            list_d.append(float(list_line[1])) #appends fourth column\n\nprint list_b\nprint list_d\n"], ["a = '110202201111311811'\nnew_str = []\n\nfor i in range(len(a)):\n   if a[i] == '1':\n       if (i!= (len(a)-1) and a[i+1] == '1') and (i!=0 and a[i-1] != '1'):\n           new_str.append(a[i])\n   else:\n       new_str.append(a[i])\n\nprint (\"\".join(x for x in new_str))\n", "02022013181\n"], ["import re\n\na = '020220111311811001001001001'\n\na = re.sub(r'1{2,}', '1', re.sub(r'(?<!1)1(?=[^1]|$)', '', a))\nprint(a)\n", "0202201318100000000\n", "a = re.sub(r'(?<!1)1(?=[^1]|$)', '', a)\na = re.sub(r'1{2,}', '1', a)\n"], ["a = '0202201131181'\ntmp =[ i.replace('1', '') for i in a.split('11')]\nprint(('1').join(tmp))\n", "a = '0202201131181'\ntmp =[]\n\nfor i in a.split('11'):\n  i = i.replace('1','')\n  tmp.append(i)\n\nprint(('1').join(tmp))\n"], ["number = int(input('Enter an integer: '))\ndivislbes = []\n\nfor divisor in range (2,number):\n    if number % divisor == 0:\n        divislbes.append(divisor)\n\nprint((number, \"has no divisors in range.\") if not divislbes else \"The divisbles of \", number, \" are: \", divislbes)\n", "Enter an integer: 5\n5 has no divisors in  range.\n"], ["import math\n\nnumber = int(input('Enter an integer: '))\ndivisor = 2\nhave_divisor = False\n\nwhile divisor <= math.sqrt(number):\n    if number % divisor == 0:\n        print (divisor)\n        print (number/divisor)\n        have_divisor = True\n    divisor += 1\n\nif not have_divisor:\n    print (number, 'has no divisors')\n"], ["number = int(input('Enter an integer: '))\nhas_divisors = False\nfor divisor in range (2, number):\n    if number % divisor == 0:\n        print (divisor)\n        has_divisors = True\nif not has_divisors:\n    print (number, 'has no divisors in the range')\n"], ["number = int(input('Enter an integer: '))\ncount = 0\nfor divisor in range (2, number):\n    if number % divisor == 0:\n        print (divisor)\n        count += 1\nif count == 0:\n    print (number, 'has no divisors in the range')\n"], ["number = int(input('Enter an integer: '))\nis_divisor_found = False\nfor divisor in range(2, number):\n    if number % divisor == 0:\n        is_divisor_found = True\n        print(divisor)\nif not is_divisor_found:\n    print(number, 'has no divisors in the range')\n"], ["def readit(file_name,start_line = 2): # start_line - where your data starts (2 line mean 3rd line, because we start from 0th line) \n    with open(file_name,'r') as f:\n        data = f.read().split('\\n')\n    data = [i.split(' ') for i in data[start_line:]]\n    for i in range(len(data)):\n        row = [(sub) for sub in data[i] if len(sub)!=0]\n        yield int(row[0]),float(row[1]),float(row[2])\n\n\niterator = readit('TA103019.95.txt')\n\n\nindex, tmax, tmin = zip(*iterator)\n\n\nmean_Tmax = sum(tmax)/len(tmax)\nmean_Tmin = sum(tmin)/len(tmin)\nprint('Mean Tmax: ',mean_Tmax)\nprint('Mean Tmnin: ',mean_Tmin)\n\n>>> ('Mean Tmax: ', 18.439999999999998)\n>>> ('Mean Tmnin: ', 1.5)\n"], ["import re\nlist_b = []\nlist_d = []\n\nwith open('TA103019.95.txt', 'r') as f:\n    for line in f:\n        # regex is corrected to match the decimal values only\n        list_line = re.findall(r\"\\d+\\.\\d+\", line) \n\n        # error condition handled where the values are not found \n        if len(list_line) < 2: \n            continue\n\n        # indexes are corrected below\n        list_b.append(float(list_line[0])) #appends second column\n        list_d.append(float(list_line[1])) #appends fourth column\n\nprint list_b\nprint list_d\n"], ["['1', '18.8', '2.4']\n['2', '19.0', '1.1']\n['3', '18.3', '1.7']\n['4', '18.3', '1.0']\n['5', '17.8', '1.3']\n"], ["with open(file_name, 'r') as f:\n    f.readline()  # burn the header row\n    for line in f:\n        tokens = line.strip().split(' ')   # tokenize the row based on spaces\n"], ["a_list = [['1', 2], ['2', 1], ['1', 1]]\n\nb_list = {'1', '2'}\n\nfor j in b_list:\n    sum = 0\n    for i in a_list:\n        if i[0] == j:\n            sum += i[1]\n    print(j, sum)\n", "('1', 3)\n('2', 1)\n", "from collections import defaultdict\n#\na_list = [['1', 2], ['2', 1], ['1', 1]]\nb_list = {'1', '2'}\n\ndict = defaultdict(int)\n\nfor key, val in a_list:\n    if key in b_list:\n        dict[key] += val\n\nprint([[key, dict[key]] for key in b_list])\n"], ["In [1]: a_list = [['1', 2], ['2', 1], ['1', 1]]\n   ...:\n   ...: b_list = {'1', '2'}\n\nIn [2]: out = [[i, sum(j[1] for j in a_list if j[0] == i)] for i in b_list]\n\nIn [3]: out\nOut[3]: [['1', 3], ['2', 1]]\n"], ["items = [['1', 2], ['2', 1], ['1', 1], ['3',1]]\nfind = {'1', '2'}\nresults = {}\n\nfor item in items:\n    key = item[0]\n    value = item[1]\n    if key in find:\n        results[key] = results.get(key,0) + value\n\n[[key, value] for key, value in results.items()] \n\n"], ["d = {}\nfor k, v in a_list:\n    d[k] = d.get(k, 0) + v\nprint([[k, d[k]] for k in b_list])\n", "[['2', 1], ['1', 3]]\n"], [">>> d = dict.fromkeys(b_list, 0)\n>>> for k, n in a_list: \n...     if k in d: \n...         d[k] += n \n...\n>>> [[k, n] for k, n in d.items()]\n[['1', 3], ['2', 1]]\n"], ["c = set(a) - set(b)\n[a.index(i) for i in c]\n"], ["array3 = np.where((array1-array2) != 0)\n"], ["a1 = [1,2,3]\na2 = [1,2,4]\narr=list(set(a1)-set(a2)) #arr=[3]\nprint(a1.index(arr[0]))   #2\n"], ["array1 = np.array([1,2,3])\narray2 = np.array([1,2,4])\n\nres = np.flatnonzero(array1 != array2)\n\nprint(res)\n# array([2], dtype=int64)\n"], ["array1 = [1,2,3]\narray2 = [1,2,4]\n\nprint([i for i, (x, y) in enumerate(zip(array1, array2)) if x != y])\n# [2]\n"], ["with open(\"file_1.txt\", \"r+\") as file1:\n    our_data = []\n    count = 0\n    for line in file1:\n        first_comma_pos = line.find(',')\n        # extract cols 2&3 including the leading comma\n        our_data.append(line[first_comma_pos:])\n        count += 1\n\n    for i in range(count):\n        sentence = str(i + count) + our_data[i] + '\\n'\n        file1.write(sentence)\n"], [], ["df['Country'] = df['Country'].map({'Albania': 'AL', 'Algeria': 'DZ'})\n", ">>> df.Country.replace(to_replace=dict(Albania='AL', Algeria='DZ'))\n0    AL\n1    DZ\n2    DZ\nName: Country, dtype: object\n", "new_vals = {\n  'Albania': 'AL',\n  'Algeria': 'DZ',\n  }\n\n\ndf['Country'].replace(new_vals)\n# df['Country'].replace(new_vals, inplace=True)\n"], ["  Country\n0      AL\n1      DZ\n2      DZ\n"], ["# setup dataframe\ndf = pd.DataFrame({'Country': ['Albania', 'Algeria', 'Algeria']})\n\n# construct mapping dictionary and apply mapping\nmapper = {dct['name']: dct['alpha-2'] for dct in countries}\ndf['Country'] = df['Country'].map(mapper).fillna(df['Country'])\n\nprint(df)\n#   Country\n# 0      AL\n# 1      DZ\n# 2      DZ\n"], [], ["complete_word_list = ['3', 'May', '.', 'Bistritz', '.', 'Left', 'Munich', 'at', '8:35', 'P.', 'M.', ',', 'on', '1st', 'May', ',', 'arriving', 'atVienna', 'early', 'next', 'morning', ';', 'should', 'have', 'arrived', 'at', '6:46', ',', 'but', 'train', 'dracula', 'anhour', 'late']\n\ndracula_list = ['dracula','Dracula']\nnearby_words = []\n\nfor i in dracula_list:\n    if i in complete_word_list: #if word was found in list\n        found_word = complete_word_list.index(i) #returns index of word to find\n        nearby_words.append(complete_word_list[found_word-1]) #index-1 is the element to the left\n        if found_word+1 < len(complete_word_list): #include a check to keep indices in range of list\n            nearby_words.append(complete_word_list[found_word+1]) #index+1 is element to the right\nprint(nearby_words)\n", "complete_word_list = ['3', 'May', '.', 'Bistritz', '.', 'Left', 'Munich', 'at', '8:35', 'P.', 'M.', ',', 'on', '1st', 'May', ',', 'arriving', 'atVienna', 'early', 'next', 'morning', ';', 'should', 'have', 'arrived', 'at', '6:46', ',', 'but', 'train', 'dracula', 'anhour', 'late']\ndracula_list = ['dracula','Dracula']\nnearby_words = []\n\nfor i in dracula_list:\n    try:\n        found_word = complete_word_list.index(i)\n        nearby_words.append(complete_word_list[found_word-1])\n        nearby_words.append(complete_word_list[found_word+1])\n    except (ValueError, IndexError):\n        print('this is either not in the list of there was not an adjacent element on either side.')\nprint(nearby_words)\n"], ["complete_word_list = ['3', 'May', '.', 'Bistritz', '.', 'Left', 'Munich', 'at', '8:35', 'P.', 'M.', ',', 'on', '1st', 'May', ',', 'arriving', 'atVienna', 'early', 'next', 'morning', ';', 'should', 'have', 'arrived', 'at', '6:46', ',', 'but', 'train', 'dracula', 'anhour', 'late']\n\ndracula_list = ['dracula','Dracula']\n\nnearby_words = []\nfor w1, w2, w3 in zip(complete_word_list[0:-1], complete_word_list[1:-1], complete_word_list[1:]):\n    if w2 in dracula_list:\n        nearby_words.append((w1, w3))\n"], [" right= [ complete_word_list[complete_word_list.index(i)+1] for i in dracula_list if i in complete_word_list and complete_word_list.index(i)+1<len(complete_word_list)]\n\n left= [ complete_word_list[complete_word_list.index(i)-1] for i in dracula_list if i in complete_word_list and complete_word_list.index(i)-1>=0]\n\n nearby_words = left + right\n", "['train', 'anhour']\n"], ["for i, word in enumerate(complete_word_list):\n    if word in dracula_list:\n        if i: \n            nearby_words.append(complete_word_list[i-1])\n        if i < len(complete_word_list) - 1:\n            nearby_words.append(complete_word_list[i+1])\n"], ["df = pd.DataFrame(d).transpose()\ndf['states']=pd.Series(states)\ndf.groupby('states').sum()\n\n>>            a     b     c     d\n>>states                        \n>>AL      21.0   7.0  17.0  26.0\n>>TX      10.0  22.0  10.0  18.0\n"], ["complete_word_list = ['3', 'May', '.', 'Bistritz', '.', 'Left', 'Munich', 'at', '8:35', 'P.', 'M.', ',', 'on', '1st', 'May', ',', 'arriving', 'atVienna', 'early', 'next', 'morning', ';', 'should', 'have', 'arrived', 'at', '6:46', ',', 'but', 'train', 'dracula', 'anhour', 'late']\n\ndracula_list = ['dracula','Dracula']\nnearby_words = []\n\nfor i in range(len(complete_word_list)):\n    if complete_word_list[i] in dracula_list:\n        if i >= 1: # Check if there is an element to the left to append it.\n            nearby_words.append(complete_word_list[i-1])\n        if i <= len(complete_word_list)-2: # Check if there is an element to the right to append it.\n            nearby_words.append(complete_word_list[i+1])\n\nprint(nearby_words)\n", "['train', 'anhour']\n"], [], ["from collections import Counter\n\nd = { 94111: {'a': 5,  'b': 7,  'd': 7}, \n      95413: {'a': 6,  'd': 4}, \n      84131: {'a': 5,  'b': 15, 'c': 10, 'd': 11}, \n      73173: {'a': 15, 'c': 10, 'd': 15}, \n      80132: {'b': 7,  'c': 7,  'd': 7} }\n\nstates = {94111: \"TX\", 84131: \"TX\", 95413: \"AL\", 73173: \"AL\", 80132: \"AL\"}\n\nnew_d = {}\nfor k, v in d.items():\n    if k in states:\n        new_d.setdefault(states[k], Counter()).update(v)\n\nprint(new_d)\n# {'TX': Counter({'b': 22, 'd': 18, 'a': 10, 'c': 10}), 'AL': Counter({'d': 26, 'a': 21, 'c': 17, 'b': 7})}\n", "for k, v in new_d.items():\n    new_d[k] = dict(v)\n\nprint(new_d)\n# {'TX': {'a': 10, 'b': 22, 'd': 18, 'c': 10}, 'AL': {'a': 21, 'd': 26, 'c': 17, 'b': 7}}\n"], ["d = { 94111: {'a': 5,  'b': 7,  'd': 7},                                                                                                                                                \n      95413: {'a': 6,  'd': 4},                                                                 \n      84131: {'a': 5,  'b': 15, 'c': 10, 'd': 11},                                              \n      73173: {'a': 15, 'c': 10, 'd': 15},                                                       \n      80132: {'b': 7,  'c': 7,  'd': 7} }                                                       \nstates = {94111: \"TX\", 84131: \"TX\", 95413: \"AL\", 73173: \"AL\", 80132: \"AL\"}                         \n\nout = {i: 0 for i in states.values()}                                                              \nfor key, value in d.items():                                                                       \n    if key in states:                                                                              \n        if not out[states[key]]:                                                                   \n            out[states[key]] = value                                                               \n        else:                                                                                      \n            for k, v in value.items():                                                             \n                if k in out[states[key]]:                                                          \n                    out[states[key]][k] += v                                                       \n                else:                                                                              \n                    out[states[key]][k] = v                                                        \n# out -> {'TX': {'a': 10, 'b': 22, 'd': 18, 'c': 10}, 'AL': {'a': 21, 'd': 26, 'c': 17, 'b': 7}}\n"], ["res = {v:{} for v in states.values()}\n\nfor k,v in states.items():\n    if k in d:\n        sub_dict = d[k]\n        output_dict = res[v]\n        for sub_k,sub_v in sub_dict.items():\n            output_dict[sub_k] = output_dict.get(sub_k, 0) + sub_v\n"], ["expected_output = defaultdict(lambda: defaultdict(int))\nfor postcode, state in states.items():\n     for key, value in d.get(postcode, {}).items():\n         expected_output[state][key] += value\n"], ["from collections import defaultdict, Counter\n\nd = { 94111: {'a': 5,  'b': 7,  'd': 7}, \n      95413: {'a': 6,  'd': 4}, \n      84131: {'a': 5,  'b': 15, 'c': 10, 'd': 11}, \n      73173: {'a': 15, 'c': 10, 'd': 15}, \n      80132: {'b': 7,  'c': 7,  'd': 7} }\n\nstates = {94111: \"TX\", 84131: \"TX\", 95413: \"AL\", 73173: \"AL\", 80132: \"AL\"}\n\nresult = defaultdict(Counter)\nfor k,v in d.items():\n    if k in states:\n        result[states[k]] += Counter(v)\nprint(result)\n", "defaultdict(<class 'collections.Counter'>, {'AL': Counter({'d': 26, 'a': 21, 'c': 17, 'b': 7}), \n'TX': Counter({'b': 22, 'd': 18, 'a': 10, 'c': 10})})\n"], [], ["print (myseries.index[myseries].tolist())\n['a', 'b', 'd']\n", "print (myseries.index.values[myseries.values].tolist())\n['a', 'b', 'd']\n"], ["with open('file_1.txt', 'r+') as f:\n    for num, content in enumerate(f.readlines()):\n        f.write(f'{num+6}, {content[3:]}')\n"], ["myseries.where(myseries).dropna().index\nIndex(['a', 'b', 'd'], dtype='object')\n"], ["myindex=['a', 'b', 'c' , 'd']\nmyseries=pd.Series([True, True, False, True], index=myindex)\n\na     True\nb     True\nc    False\nd     True\ndtype: bool\n\nmyseries[myseries].index\n>> Index(['a', 'b', 'd'], dtype='object')\n", "myseries[myseries].index.tolist()\n>> ['a', 'b', 'd']\n"], ["import pandas as pd \n\nmyindex=['a', 'b', 'c' , 'd']\nmyseries=pd.Series([True, True, False, True], index=myindex)\nvals = [i for i,j in myseries.items() if j==True]\nprint(vals)\n", " ['a', 'b', 'd']\n"], ["a    True\nb    True\nd    True\ndtype: bool\n"], ["import json\n\nwith open(\"data.txt\", \"r\", encoding=\"utf-8\", errors='ignore') as f:\n    cleaned = ''.join([item.strip() if item.strip() is not '' else '-split_here-' for item in f.readlines() if '|INFO|' not in item]).split('-split_here-')\n\njson_data = json.loads(json.dumps(('{\"entries\":[' + ''.join([entry + ', ' for entry in cleaned])[:-2] + ']}')))\n", "{\"entries\":[{\"name\": \"1111\",\"results\": [{\"filename\": \"xxxx\",\"numberID\": \"7412\"}, {\"filename\": \"xgjhh\",\"numberID\": \"E52\"}]}, {\"name\": \"jfkjgjkf\",\"results\": [{\"filename\": \"hhhhh\",\"numberID\": \"478962\"}, {\"filename\": \"jkhgfc\",\"number\": \"12544\"}]}]}\n"], ["def edit(nrows, filename):\n    nrows +=1 #to avoid off-by-one error because dealing with lists\n\n    outf = open(filename, 'a')\n\n    column_1 = [1, 2, 3, 4, 5]\n    column_2 = [10, 20, 30, 35, 50]\n    column_3 = [20, 30, 50, 60, 100]\n\n    last_column_1 = column_1[-1]\n    list_1 = list(range(last_column_1+1, last_column_1+nrows))\n    list_2 = nrows//len(column_2)*column_2 + column_2[0:nrows%len(column_2)]\n    list_3 = nrows//len(column_3)*column_3 + column_3[0:nrows%len(column_3)]\n\n    for c1, c2, c3 in zip(list_1, list_2, list_3):\n        outf.write(\"{}, {}, {}\\n\".format(c1, c2, c3))\n\nif __name__ == '__main__':\n    edit(10, 'file.txt')\n", "1, 10, 20\n2, 20, 30\n3, 30, 50\n4, 35, 60\n5, 50, 100\n"], [], ["data = []\n\nwith open(\"file_1.txt\", \"r+\") as file1:\n\n    # read the data\n\n    for line in file1:\n        # .strip() to remove the newline\n        # .split(\", \") to split into 3 values\n        # map(int, ...) to convert each from string to integer\n        index, column2, column3 = map(int, line.strip().split(\", \"))\n\n        #save the second and third coluumn\n        data.append((column2, column3))\n\n    # now write it back again:\n\n    for column2, column3 in data:\n        index += 1  # continue incrementing the index\n\n        # format the lines and write them into the file\n        file1.write(\"{}, {}, {}\\n\".format(index, column2, column3))\n"], ["import pandas as pd\ndf = pd.read_csv(\"<path_to_data_file>\", header=None)\ndf = pd.concat([df, df])\ndf[0] = list(range(1, 11))\ndf.to_csv(\"result.csv\", header=None, index=None)\n"], ["with open(\"test.txt\", \"r+\") as file1:\n    lines = file1.readlines()\n    index = 0\n    i = 6\n    imax = 10\n    while i <= imax:\n        sentence = lines[index].split(\", \")[1:]\n        sentence.insert(0, str(i))\n        file1.write(\", \".join(sentence))\n        i += 1\n        index += 1\n", "1, 10, 20\n2, 20, 30\n3, 30, 50\n4, 35, 60\n5, 50, 100\n6, 10, 20\n7, 20, 30\n8, 30, 50\n9, 35, 60\n10, 50, 100\n"], ["with open('sample.txt', 'r') as f:\nl = [i.strip() for i in f.readlines()]\nmax_row = int(l[-1].split(',')[0])\n\nx = [str(i) for i in range(max_row+1,11)]\ny = [i.split(',', 1)[-1] for i in l]\n\nwith open('sample.txt', 'a') as f:\n    for item in [x[i]+',' + y[i] for i in range(len(x))]:\n        f.write(\"%s\\n\" % item)\n"], ["import re\nimport json\n\ndef is_text(line):\n    # returns True if line starts with a date and time in \"YYYY-MM-DD HH:MM:SS\" format\n    line = line.lstrip('|') # you said some lines start with a leading |, remove it\n    return re.match(\"^(\\d{4})-(\\d{2})-(\\d{2}) (\\d{2}):(\\d{2}):(\\d{2})\", line)\n\njson_objects = []\n\nwith open(\"data.txt\") as f:\n    json_lines = []\n\n    for line in f:\n        if not is_text(line):\n            json_lines.append(line)\n        else:\n            # if there's multiple text lines in a row json_lines will be empty\n            if json_lines:\n                json_objects.append(json.loads(\"\".join(json_lines)))\n                json_lines = []\n\n    # we still need to parse the remaining object in json_lines\n    # if the file doesn't end in a text line\n    if json_lines:\n        json_objects.append(json.loads(\"\".join(json_lines)))\n\nprint(json_objects)\n"], ["import re\n\nfragments = iter(re.split('([{}])', f.read()))\nwhile True:\n    try:\n        while True:\n            candidate = next(fragments)\n            if candidate == '{':\n                break\n        while True:\n            candidate += next(fragments)\n            try:\n                print(json.loads(candidate))\n                break\n            except json.decoder.JSONDecodeError:\n                pass\n    except StopIteration:\n        break\n", "{'name': '1111', 'results': [{'filename': 'xxxx', 'numberID': '7412'}, {'filename': 'xgjhh', 'numberID': 'E52'}]}\n{'name': 'jfkjgjkf', 'results': [{'filename': 'hhhhh', 'numberID': '478962'}, {'filename': 'jkhgfc', 'number': '12544'}]}\n"], [], ["import json\n\nopen_chars = 0\nsaved_content = []\n\nfound_jsons = []\n\nfor i in content.splitlines():\n    open_chars += i.count('{')\n\n    if open_chars:\n        saved_content.append(i)\n\n    open_chars -= i.count('}')\n\n\n    if open_chars == 0 and saved_content:\n        found_jsons.append(json.loads('\\n'.join(saved_content)))\n        saved_content = []\n\n\nfor i in found_jsons:\n    print(json.dumps(i, indent=4))\n", "{\n    \"results\": [\n        {\n            \"numberID\": \"7412\",\n            \"filename\": \"xxxx\"\n        },\n        {\n            \"numberID\": \"E52\",\n            \"filename\": \"xgjhh\"\n        }\n    ],\n    \"name\": \"1111\"\n}\n{\n    \"results\": [\n        {\n            \"numberID\": \"478962\",\n            \"filename\": \"hhhhh\"\n        },\n        {\n            \"number\": \"12544\",\n            \"filename\": \"jkhgfc\"\n        }\n    ],\n    \"name\": \"jfkjgjkf\"\n}\n"], [], [], [], ["nums = [ 9,5,8,6,3,4 ]\n\n#assuming the first element as our biggest number\nbiggest_number = nums[0]\n\nfor i in range(0, len(nums)):\n  if nums[i] > biggest_number:  #comparing each number with the biggest number we assumed\n    biggest_number = nums[i]   #if our current number bigger than biggest_number then replace the value\n\nprint(biggest_number)\n"], [], [], [">>> words = [\"dan\",\"kar\",\"dream\",\"adsadsadad\",\"AHAHAHAHAHAHHHAAHAHA\",\"aaa\"]\n>>> \n>>> reduce(lambda a, b: a if len(a) > len(b) else b, words)\n'AHAHAHAHAHAHHHAAHAHA'\n>>> \n>>> len(reduce(lambda a, b: a if len(a) > len(b) else b, words))\n20\n>>> \n"], [], [], ["words = [\"dan\",\"kar\",\"dream\",\"adsadsadad\",\"AHAHAHAHAHAHHHAAHAHA\",\"aaa\"]\nbest = 0\nfor index in range(len(words)):\n    if len(words[index]) > len(words[best]):\n        best = index\nprint(words[best])\n", "words = [\"dan\",\"kar\",\"dream\",\"adsadsadad\",\"AHAHAHAHAHAHHHAAHAHA\",\"aaa\"]\n", "best = 0\n", "for index in range(len(words)):\n", "    if len(words[index]) > len(words[best]):\n", "        best = index\n", "print(words[best])\n"], ["import pandas as pd                                                                                                                                    \nimport numpy as np\n\nraw_data = [\n    ['Steve', 'Invalid Postcode', 'GBP', np.nan ],\n    ['Robyn', 'Invalid Postcode', 'EUR', np.nan],\n    ['James', 'Valid Postcode', 'GBP', 'GBR'],\n    ['Halo', 'Invalid Postcode', 'EUR', np.nan],\n    ['Jesus', 'Valid Postcode', 'GBP', 'GBR']\n    ]\n\ndf = pd.DataFrame(columns=[\"Name\", \"PostCode\", \"Currency\", \"CountryISOCode\"], data=raw_data)\n\ndef func(row):\n    if row['CountryISOCode'] is np.nan and row['Currency'] == 'EUR':\n        return 'IRE'\n    elif row['CountryISOCode'] is np.nan and row['Currency'] == 'GBP':\n        return 'GBR'\n    else:\n        return row['CountryISOCode']\n\ndf['CountryISOCode'] = df.apply(func, axis=1)\n\nprint(df)\n"], ["cmap = {'GBP': 'GBR', 'EUR': 'IRE'}\ndf['CountryISOCode'] = df['CountryISOCode'].fillna(df['CurrencyCode'].map(cmap))\n\nprint(df)\n\n    Name          PostCode CurrencyCode CountryISOCode\n0  Steve  Invalid Postcode          GBP            GBR\n1  Robyn  Invalid Postcode          EUR            IRE\n2  James    Valid Postcode          GBP            GBR\n3   Halo  Invalid Postcode          EUR            IRE\n4  Jesus    Valid Postcode          GBP            GBR\n"], ["df['CountryISOCode'] = df['CountryISOCode'] \\\n    .mask(df['CountryISOCode'].isna() & df['Currency'].eq('GBP'), 'GBR') \\\n    .mask(df['CountryISOCode'].isna() & df['Currency'].eq('EUR'), 'IRE')\n"], ["df['CountryISOCode']=np.select([(df.CurrencyCode=='GBP')&(df.CountryISOCode.isna()),\\\n                            (df.CurrencyCode=='EUR')&df.CountryISOCode.isna()],['GBR','IRE'],\\\n                           default=df.CountryISOCode)\n\n    Name          PostCode CurrencyCode CountryISOCode\n0  Steve  Invalid Postcode          GBP            GBR\n1  Robyn  Invalid Postcode          EUR            IRE\n2  James    Valid Postcode          GBP            GBR\n3   Halo  Invalid Postcode          EUR            IRE\n4  Jesus    Valid Postcode          GBP            GBR\n"], ["m1 = df.CountryISOCode.isna()\nm2 = df.CurrencyCode.eq('GBP')\nm3 = df.CurrencyCode.eq('EUR')\ndf.loc[:,'CountryISOCode'] = np.select([m1&m2, m1&m3], ['GBP','IRE'], \n                                       default=df.CountryISOCode)\n\n Name          PostCode CurrencyCode CountryISOCode\n0  Steve  Invalid Postcode          GBP            GBP\n1  Robyn  Invalid Postcode          EUR            IRE\n2  James    Valid Postcode          GBP            GBR\n3   Halo  Invalid Postcode          EUR            IRE\n4  Jesus    Valid Postcode          GBP            GBR\n"], ["my_dict = {'Stock A': (100, 0.5), 'Stock B': (20, 0.9), 'Stock C': (40, 0.75), 'Stock D': (45, 0.3)}\n\nmy_dict_out = dict([ (k,r) for k,r in my_dict.items() if r[0]>30 and r[1] <0.6])\n\nprint(my_dict_out)\n    {'Stock A': (100, 0.5), 'Stock D': (45, 0.3)}\n"], ["Primary_df_job = pool.apply_async(import_xlsx, (Primary_File, ))\nSecondary_1_df_job = pool.apply_async(import_csv, (Secondary_File_1, ))\nSecondary_2_df_job = pool.apply_async(import_csv, (Secondary_File_2, ))\n", "Secondary_1_df = Secondary_1_df_job.get()\nSecondary_2_df = Secondary_2_df_job.get()\n", "Secondary_df = Secondary_1_df.merge(Secondary_2_df, how='inner', on=['ID'])\n", "Primary_df = Primary_df_job.get()\n"], ["import math\n\nsymbols = {'sqrt': math.sqrt, 'x': 5, 'y': 6}\n\nfunc_strings = [\"y + x + 3\", \"x**2 + y**2 - 17\", \"sqrt(1764)\"]\n\nfor expression in func_strings:\n    result = eval(expression, {'__builtins__': None}, symbols)\n    print('{} -> {}'.format(expression, result))\n"], ["from sympy import Symbol\nzs = [Symbol('x'), Symbol('y')]\neval('x+y', None, dict([z.name, z] for z in zs))\n", "from sympy import Symbol\nfrom sympy.parsing.sympy_parser import parse_expr\nzs = [Symbol('x'), Symbol('y')]\nparse_expr('x+y', local_dict=dict([z.name, z] for z in zs))\n"], ["eval(\"x + 3\", {\"x\":1}) # Result should be 4\n"], ["symbols = [Symbol(x), Symbol(y)]\nlocals().update({symbol.name:symbol for symbol in symbols})\n\neval(\"x+y\") # Should return the value of x+y\n"], ["import ast\n\nx = 5\ny = 6\n\nfunction_str = \"y + x + 3\"\nfunction_str = function_str.replace('x', '{x}')\nfunction_str = function_str.replace('y', '{y}')\n\nprint(ast.literal_eval(function_str.format(x=x, y=y)))\n# 14\n"], ["from datetime import timedelta\n\nx = ['59:55:00', '59:55:00', '59:58:00', '1:00:02', '1:00:05', '1:01:26']\n\ndef converter(value, limit=59):\n    var1, var2, var3 = map(int, value.split(':'))\n    switch = var1 < limit\n    mins = var1 * 60 + var2 if switch else var1\n    secs = var3 if switch else var2\n    return f'00:{mins:02}:{secs:02}'\n\nres = list(map(converter, x))\n\nprint(res)\n# ['00:59:55', '00:59:55', '00:59:58', '00:60:02', '00:60:05', '00:61:26']\n"], ["import datetime\n\nclass Minutes:\n  d = datetime.datetime.now()\n  def __init__(self, _str, _year = None):\n    self._val = _str\n    d = datetime.datetime.now()\n    self.year = _year if _year is not None else '-'.join(str(getattr(d, i)) for i in ['year', 'month', 'day'])\n  @property\n  def to_date(self):\n    return datetime.datetime(*map(int, self.year.split('-')), *map(int, str(self).split(':')))\n  def __str__(self):\n    _h, _m, _s = map(int, self._val.split(':'))\n    h, m, s = 0 if _h else _h, _m+(_h*60) if _h else _m, _s\n    return f'{self.year} '+':'.join(str(i).zfill(2) for i in [h, m, s])\n  def __repr__(self):\n    return str(self)\n\nx = ['59:55:00', '59:55:00', '59:58:00', '1:00:02', '1:00:05', '1:01:26']\nnew_x = [Minutes(i, '1900-01-01') for i in x]    \n", "[1900-01-01 00:3595:00, \n 1900-01-01 00:3595:00, \n 1900-01-01 00:3598:00, \n 1900-01-01 00:60:02, \n 1900-01-01 00:60:05, \n 1900-01-01 00:61:26]\n"], ["00:59:55\n00:59:55\n00:59:58\n01:00:02\n01:00:05\n01:01:26\n"], ["def convert(s):\n    parts = [int(i) for i in s.split(\":\")]\n\n    if parts[0] < 3:  # 3 is arbitrary value, may need adaption\n        # Assuming format hour:min:sec\n        h, m, s = parts\n        millis = 0\n    else:\n        # Assuming format min:sec:millisec\n        m, s, millis = parts\n        h = 0\n\n    return \"1900-01-01 00:{:02}:{:02}\".format(h * 60 + m, s)\n\n\nx = ['59:55:00', '59:55:00', '59:58:00', '1:00:02', '1:00:05', '1:01:26']\n\nprint(*(convert(i) for i in x), sep=\"\\n\")\n", "1900-01-01 00:59:55\n1900-01-01 00:59:55\n1900-01-01 00:59:58\n1900-01-01 00:60:02\n1900-01-01 00:60:05\n1900-01-01 00:61:26\n"], [], ["my_dict = {'Stock_A': (100, 0.5), 'Stock B': (20, 0.9), 'Stock C': (40, 0.75), 'Stock D': (45, 0.3)}\nnew_dict = {} # Dictionary in which the TRUE conditions are stores\n\n\n# Function which makes the comparison\ndef comp(Val1,Val2):\n    Values = [30,0.6]\n    if Val1 > Values[0] and Val2 < Values[1]:\n        return True,(Val1,Val2)\n    else:\n        return False,None\n\n# Creates the new dictionary   \nfor key in my_dict:\n    Res = comp(my_dict[key][0],my_dict[key][1])\n    if Res[0]:\n        new_dict[key] = Res[1]\n\n\nprint(new_dict)\n\n\n\n\n\n\n\n{'Stock_A': (100, 0.5), 'Stock D': (45, 0.3)}\n"], ["my_dict = {'Stock A': (100, 0.5), 'Stock B': (20, 0.9), 'Stock C': (40, 0.75), 'Stock D': (45, 0.3)}\nnew_dict = {}\n\nfor key, v in my_dict.items():\n    firstVal, secondVal = v\n\n    if firstVal > 30 and secondVal < 0.6:\n        new_dict[key] = v\n\nprint new_dict\n", "{'Stock D': (45, 0.3), 'Stock A': (100, 0.5)}\n"], ["my_dict = {'Stock A': (100, 0.5), 'Stock B': (20, 0.9), 'Stock C': (40, 0.75), 'Stock D': (45, 0.3)}\n\nresult={key:value for key,value in my_dict.items() if value[0]>30 and value[1]<.6}\n\nprint(result)\n", "{'Stock A': (100, 0.5), 'Stock D': (45, 0.3)}\n"], ["my_dict = {'Stock A': (100, 0.5), 'Stock B': (20, 0.9), 'Stock C': (40, 0.75), 'Stock D': (45, 0.3)}\n\nnew_dict = {k:v for k,v in my_dict.items() if v[0]>30 and v[1] <0.6}\nprint (new_dict)\n", "{'Stock A': (100, 0.5), 'Stock D': (45, 0.3)}\n"], ["my_dict = {'Stock A': (100, 0.5), 'Stock B': (20, 0.9), 'Stock C': (40, 0.75), 'Stock D': (45, 0.3)}\n\nnew={}\nfor (stock,values) in my_dict.items():\n     first=values[0]\n     second=values[1]\n     if (first>30 and second<0.6):\n          new[name]=(first,second)\n"], ["from time import time \nimport pandas as pd\nfrom multiprocessing.pool import ThreadPool\n\n\nstart_time = time()\n\npool = ThreadPool(processes=3)\n\nPrimary_File = \"//ServerA/Testing Folder File Open/Report.xlsx\"\nSecondary_File_1 = \"//ServerA/Testing Folder File Open/Report2.csv\"\nSecondary_File_2 = \"//ServerA/Testing Folder File Open/Report2.csv\"\n\n\n# Define a function for the thread\ndef import_xlsx(file_name):\n    df_xlsx = pd.read_excel(file_name)\n    # print(df_xlsx.head())\n    return df_xlsx\n\n\ndef import_csv(file_name):\n    df_csv = pd.read_csv(file_name)\n    # print(df_csv.head())\n    return df_csv\n\n# Create two threads as follows\n\nPrimary_df = pool.apply_async(import_xlsx, (Primary_File, )).get() \nSecondary_1_df = pool.apply_async(import_csv, (Secondary_File_1, )).get() \nSecondary_2_df = pool.apply_async(import_csv, (Secondary_File_2, )).get() \n\nSecondary_df = Secondary_1_df.merge(Secondary_2_df, how='inner', on=['ID'])\nend_time = time()\n"], ["import numpy\nli = numpy.logspace(0, 2, base=10, dtype = int)\n# li is [1, 10, 100]\n# goes from base^0 to base^2, so from 1 to 100\n", "reps = 100000\nlist_elems = 100\n\nstart = time.perf_counter()\nfor i in range(reps):\n    np.logspace(0, list_elems, base=2, dtype=int)\nend = time.perf_counter()\nnumpy_time = end - start\n\n\nstart = time.perf_counter()\nfor i in range(reps):\n    [2**x for x in range(list_elems)]\nend = time.perf_counter()\npython_time = end - start\n\n# reps = 100000\n# list_elems = 100\n# numpy took 1.70, python took 2.86\n\n# reps = 100000\n# list_elems = 10\n# numpy took 1.65, python took 0.242\n"], [], ["li = [10**x for x in range(0, 3, 1)]\nprint(li)\n"], ["for i in (10 ** x for x in range(2, -1, -1)):\n    print(i)\n# 100\n# 10\n# 1\n", "def powrange(*args, base=10):\n    for i in range(*args):\n        yield base ** i\n\n\nfor i in powrange(2, -1, -1, base=10):\n    print(i)\n# 100\n# 10\n# 1\n"], ["In [10]: import math\nIn [9]:  [10**x for x in range( 0,int(math.log10(1000)))]\nOut[9]: [1, 10, 100]\n"], ["i = 1\nwhile i < 100:\n   ...\n   i *= 10  # or i /= 10 depending on what you want.\n", "li = [10**x for x in range(3) ]  # [1, 10, 100]\nli = [10**x for x in range(2, -1, -1)  # [100, 10, 1]\n"], ["maxA=A[B.index(max(B))]\n"], ["print(max(zip(B,A))[1])\n", "python3 -c 'import timeit; print(timeit.timeit(\"a[b.index(max(b))]\", setup=\"import numpy as np; a=list(np.random.rand(1000000)); b=list(np.random.rand(1000000))\", number=100))'\n4.586365897208452\n\npython3 -c 'import timeit; print(timeit.timeit(\"max(zip(b,a))[1]\", setup=\"import numpy as np; a=list(np.random.rand(1000000)); b=list(np.random.rand(1000000))\", number=100))'\n6.770604271441698\n"], ["d = dict(zip(A, B)) # {1: 0.1, 2: 0.2, 3: 0.3, 4: 0.4, 5: 0.15, 6: 0.6, 7: 0.22, 8: 0.4, 9: 0.3}\nm = max(d, key=lambda x: d[x]) # 6\n"], ["A = [1,2,3,4,5,6,7,8,9,10]\nB = [0.1,0.2,0.3,0.4,0.15,0.6,0.22,0.4,0.3,0.32]\n>>> A[max(enumerate(B), key=lambda x:x[1])[0]]\n6\n", ">>> max(zip(A,B), key=lambda x:x[1])\n6\n"], ["import numpy as np\nprint(A[np.argmax(B)])\n"], ["list1 = [1, 2, 2, 4, 5]\nlist2 = [5, 6, 1, 2, 9]\nf = (x for x in list1 if list2.count(x) == 2)\n", ">>> lst = [1, 2, 2]\n>>> f = (x for x in lst if lst.count(x) == 2)\n>>> lst = [1, 1, 2]\n>>> list(f)\n[1]\n", "def keep_only_duplicated_items(lst):\n    for item in lst:\n        if lst.count(item) == 2:\n            yield item\n", "lst = [1, 2, 2, 4, 5]\nf = keep_only_duplicated_items(lst)\nlst = [5, 6, 1, 2, 9]\n\n>>> list(f)\n[2, 2]\n", "from collections import Counter\n\ndef keep_only_duplicated_items(lst):\n    cnts = Counter(lst)\n    for item in lst:\n        if cnts[item] == 2:\n            yield item\n", "class MyList(list):\n    def __iter__(self):\n        print(f'__iter__() called on {self!r}')\n        return super().__iter__()\n        \n    def count(self, item):\n        cnt = super().count(item)\n        print(f'count({item!r}) called on {self!r}, result: {cnt}')\n        return cnt\n", ">>> lst = MyList([1, 2, 2, 4, 5])\n\n>>> f = (x for x in lst if lst.count(x) == 2)\n__iter__() called on [1, 2, 2, 4, 5]\n\n>>> lst = MyList([5, 6, 1, 2, 9])\n\n>>> print(list(f))\ncount(1) called on [5, 6, 1, 2, 9], result: 1\ncount(2) called on [5, 6, 1, 2, 9], result: 1\ncount(2) called on [5, 6, 1, 2, 9], result: 1\ncount(4) called on [5, 6, 1, 2, 9], result: 0\ncount(5) called on [5, 6, 1, 2, 9], result: 1\n[]\n"], ["#!/bin/python3\nimport os\nimport glob\nimport datetime\nimport subprocess\n\ndef Copy_Logs():\n    # Variable Declaration to get the month and Curr_date_month\n    Info_month = datetime.datetime.now().strftime(\"%B\")\n    Curr_date_month = datetime.datetime.now().strftime(\"%b_%d_%y\") \n    Sourcedir = \"/data1/logs\"\n    Destdir = \"/data2/logs/\"\n    ###### End of your variable section #######################\n    # The result of the below glob _is_ a full path\n    for filename in glob.glob(\"{2}/{0}/{1}/*.txt\".format(Info_month, Curr_date_month, Sourcedir)):\n        if os.path.getsize(filename) > 0:\n            if not os.path.exists(Destdir + os.path.basename(filename)):\n                subprocess.call(['rsync', '-avz', '--min-size=1', filename, Destdir ])\n\nif __name__ == '__main__':\n    Copy_Logs()\n"], ["def uniqifyColors(l):\n    for elem in l:\n        for item in l:\n            if elem['number'] == item['number'] and elem['favorite'] == item['favorite']:\n                for clr in item['color']:\n                    if clr not in elem['color']:\n                        elem['color'].append(clr)\n    return l\n"], ["def middlesplit(s,delim=\" \"):\n    if delim not in s:\n        return (s,)\n    midpoint=(len(s)+1)//2\n    left=s[:midpoint].rfind(delim)\n    right=s[:midpoint-1:-1].rfind(delim)    \n    if right>left:\n        return (s[:-right-1],s[-right:])\n    else:\n        return (s[:left],s[left+1:])\n"], [], ["def split_text(text):\n    middle = len(text)//2\n    under = text.rfind(\" \", 0, middle)\n    over = text.find(\" \", middle)\n    if over > under and under != -1:\n        return (text[:,middle - under], text[middle - under,:])\n    else:\n        if over is -1:\n              raise ValueError(\"No separator found in text '{}'\".format(text))\n        return (text[:,middle + over], text[middle + over,:])\n"], ["s = \"The cat jumped over the moon very quickly.\"\n\nmid = min((i for i, c in enumerate(s) if c == ' '), key=lambda i: abs(i - len(s) // 2))\n\nfst, snd = s[:mid], s[mid+1:]\n\nprint(fst)\nprint(snd)\n", "The cat jumped over\nthe moon very quickly.\n"], ["phrase = \"The cat jumped over the moon very quickly.\"\n\n#indexes of separator, here the ' '\nsep_idxs = [i for i, j in enumerate(phrase) if j == ' ']\n\n#getting the separator index closer to half the length of the string\nsep = min(sep_idxs, key=lambda x:abs(x-(len(phrase) // 2)))\n\nfirst_half = phrase[:sep]\nlast_half = phrase[sep+1:]\n\nprint([first_half, last_half])\n"], ["sOdd = \"The cat jumped over the moon very quickly.\"\nsEven = \"The cat jumped over the moon very quickly now.\"\n\ndef split_on_delim_mid(s, delim=\" \"):\n  delim_indexes = [\n      x[0] for x in enumerate(s) if x[1]==delim\n  ] # [3, 7, 14, 19, 23, 28, 33]\n\n  # Select the correct number from delim_indexes\n  middle = len(delim_indexes)/2\n  if middle % 2 == 0:\n    middle_index = middle\n  else:\n    middle_index = (middle-.5)\n\n  # Return the separated sentances\n  sep = delim_indexes[int(middle_index)]\n  return s[:sep], s[sep:]\n\nsplit_on_delim_mid(sOdd) # ('The cat jumped over', ' the moon very quickly.')\nsplit_on_delim_mid(sEven) # ('The cat jumped over the', ' moon very quickly now.')\n"], ["s = \"The cat jumped over the moon very quickly\"\n\nl = s.split()\n\ns1 = ' '.join(l[:len(l)//2])\ns2 = ' '.join(l[len(l)//2 :])\n\nprint(s1)\nprint(s2)\n"], ["text = \"The cat jumped over the moon very quickly\"\nwords = text.split()\nfirst_half = \" \".join(words[:len(words)//2])\n"], ["s = \"My price is: $1,632.50\"\nextracted = s[s.find('$')+1:s.find('.')].replace(',', '')\nprint(extracted)\n", "# Look for the first dollar sign, followed by any mix of digits and \n# commas, and stop when you've found (if any) character after that\n# which isn't a comma or digit.  So both \"$1,234.50!\" and \"$1,234!\"\n# for example should give back \"1234\".\nresult = re.search(\"(\\$)([\\d,]+)([^,\\d]*)\", s)\nprint(re.sub(',', '', result.group(2)))\n"], ["import re\npattern = r'(\\d{,3})?[.,]?(\\d{3})?'\ntests = ['1,234.50',\n         '456.7',\n         '12']\nfor t in tests:\n    print(''.join([g for g in re.match(pattern, t).groups() if g is not None]))\n# 1234\n# 456\n# 12\n", "pattern = \"\"\" (          # begin capture group\n               \\d{,3}    # up to three digits\n              )          # end capture group\n              ?          # zero or one of these first groups of digits\n              [.,]?      # zero or one period or comma (not captured)\n              (          # begin capture group inside of the non-capture group\n               \\d{3}     # exactly three digits\n              )          # end capture group\n              ?          # zero or one of these\n          \"\"\"\n"], ["REGEXP_REPLACE(str, r'\\..*|[^0-9]', '')   \n", "#standardSQL\nWITH t AS (\n  SELECT '$1,632.50' AS str UNION ALL\n  SELECT  '$500.00'\n)\nSELECT \n  str, \n  REGEXP_REPLACE(str, r'\\..*|[^0-9]', '') AS extracted_number\nFROM t \n", "Row str         extracted_number     \n1   $1,632.50   1632     \n2   $500.00     500  \n"], ["select regexp_replace(regexp_extract(str, '[^.]+'), '[^0-9]', '')\nfrom (select '$1,632.50' as str) x\n"], ["\\$(\\d+(?:,\\d+)?)\n"], [], ["import re\n\ns = \"$1,632.50\"\n\nresult = int(re.search(\"([\\d,]+)\",s).group(1).replace(\",\",\"\"))\n"], ["import re\n\na = ['abd', ' the dog', '4:45 AM', '1234 total', 'etc...','6:31 PM', '2:36']\nregex = re.compile(r'^[0-2]{0,1}[0-9]\\:[0-5][0-9]\\s{0,1}([AP][M]){0,1}')\n\na  = [x for x in a if not regex.match(x)]\nprint(a)\n", "['abd', ' the dog', '1234 total', 'etc...']\n"], ["d1 = {i: i for i in range(5)}\nd2 = {i: j for i, j in zip(range(5), range(5,10))}\nd3 = {i: j for i, j in zip(range(5,10), range(5))}\n\nprint('d1: ', d1)\nprint('d2: ', d2)\n\nprint('Keys of d1 in values of d2: ', not set(d1).isdisjoint(d2.values()))\nprint('Keys of d1 in keys of d2: ', not set(d1).isdisjoint(d2))\nprint()\n\nprint('d2: ', d2)\nprint('d3: ', d3)\n\nprint('Keys of d2 in values of d3: ', not set(d2).isdisjoint(d3.values()))\nprint('Keys of d2 in keys of d3: ', not set(d2).isdisjoint(d3))\n", "# d1:  {0: 0, 1: 1, 2: 2, 3: 3, 4: 4}\n# d2:  {0: 5, 1: 6, 2: 7, 3: 8, 4: 9}\n# Keys of d1 in values of d2:  False\n# Keys of d1 in keys of d2:  True\n# \n# d2:  {0: 5, 1: 6, 2: 7, 3: 8, 4: 9}\n# d3:  {5: 0, 6: 1, 7: 2, 8: 3, 9: 4}\n# Keys of d2 in values of d3:  True\n# Keys of d2 in keys of d3:  False\n"], ["set(dictionary1.keys()) & set(dictionary2.values())\n", "dictionary1 = {1:2, 2:3, 3:4}\ndictionary2 = {2:1, 2:3, 3:4}\nprint set(dictionary1.keys()) & set(dictionary2.values())\n", "set([3])\n"], ["if any(k in d2.values() for k in d1.keys()):\n    # do stuff\n"], ["d = {'1': 'one', '3': 'three', '2': 'two', '5': 'five', '4': 'four'}\nd2 =  {'5': 'five', '6': 'six', '7': 'eight', 'three': '3', '9': 'nine'}\n\nfor key in d:\n    if key in d2.itervalues():\n        print \"found\"\n"], [], ["def removeElements(a):\n    removed_elements = []\n    L = len(a)\n    for i in range(L):\n        element = a[i]\n        if 'am' == element[-2:].lower() or 'pm' ==element[-2:].lower() :\n            removed_elements.append(element)\n        if ':' in element:\n            part1 = element.split(':')\n            part2 = element.split(':')\n            if part1[-1].isdigit() and part2[0].isdigit():\n                removed_elements.append(element)\n    output =  []\n    for element in a:\n        if not(element in removed_elements):\n            output.append(element)\n    return output\n\na = ['abd', ' the dog', '4:45 AM', '1234 total', 'etc...','6:31 PM', '2:36']\noutput = removeElements(a)\nprint output\n\n"], ["import inotify.adapters\n\ndef _main():\n    i = inotify.adapters.Inotify()\n\n    i.add_watch('/tmp')\n\n    with open('/tmp/test_file', 'w'):\n        pass\n\n    for event in i.event_gen(yield_nones=False):\n        (_, type_names, path, filename) = event\n\n        print(\"PATH=[{}] FILENAME=[{}] EVENT_TYPES={}\".format(\n              path, filename, type_names))\n\nif __name__ == '__main__':\n    _main()\n"], ["import diff_match_patch as dmp_module\n\n#...\nif not os.path.exists(\"/data2/logs/\" + os.path.basename(filename)):\n    shutil.copy(filename, \"/data2/logs/\")\nelse:\n    with open(filename) as src, open(\"/data2/logs/\" + os.path.basename(filename),\n                                                                        'r+') as dst:\n        dmp = dmp_module.diff_match_patch()\n\n        src_text = src.read()\n        dst_text = dst.read()\n\n        diff = dmp.diff_main(dst_text, src_text)\n\n        if len(diff) == 1 and diff[0][0] == 0:\n            # No changes\n            continue\n\n        #make patch\n        patch = dmp.patch_make(dst_text, diff)\n        #apply it\n        result = dmp.patch_apply(patch, dst_text)\n\n        #write\n        dst.seek(0)\n        dst.write(result[0])\n        dst.truncate()\n"], ["import datetime\nimport glob\nimport os\nimport shutil\n\nInfo_month = datetime.datetime.now().strftime(\"%B\")\nlist_of_files = sorted(glob.iglob(\"/data1/logs/{0}/*/*.txt\".format(Info_month)), key=os.path.getctime, reverse=True)\nif not os.path.exists(\"track_modifications.txt\"):\n    latest_file_modified_time = os.path.getctime(list_of_files[0])\n    for filename in list_of_files:\n            shutil.copy(filename, \"/data2/logs/\")\n    with open('track_modifications.txt', 'w') as the_file:\n        the_file.write(str(latest_file_modified_time))\nelse:\n    with open('track_modifications.txt', 'r') as the_file:\n        latest_file_modified_time = the_file.readline()\n    should_copy_files = [filename for filename in list_of_files if\n                         os.path.getctime(filename) > float(latest_file_modified_time)]\n    for filename in should_copy_files:\n            shutil.copy(filename, \"/data2/logs/\")\n", "list_of_files = sorted(glob.iglob('directory/*.txt'), key=os.path.getctime, reverse=True)\n", "latest_file_modified_time = os.path.getctime(list_of_files[0])\n", "should_copy_files = [filename for filename in list_of_files if os.path.getctime(filename) > float(latest_file_modified_time)]\n"], ["ID | path        | state before cron\n1  | /myfile.txt | hello\n...| ...         | ...\n", "$ echo 'hello' > old.txt && echo 'hello' > new.txt\n$ diff old.txt new.txt                             # empty\n$ echo 'how are you' >> new.txt                    # your file changed\n$ diff old.txt new.txt > my.patch && cat my.patch  # diff is not empty now\n1a2\n> how are you\n\n$ patch old.txt < my.patch  # apply the changes to the old file\n", "from subprocess import Popen, PIPE\ndiff = Popen(['diff', 'old.txt', 'new.txt']).communicate()[0]\nPopen(['patch', 'old.txt'], stdin=PIPE).communicate(input=diff)\n"], ["from collections import OrderedDict, defaultdict\n\nclass DefaultOrderedDict(OrderedDict):\n    def __missing__(self, k):\n        self[k] = set()\n        return self[k]\n\nd = DefaultOrderedDict()  # Python 3.7+: d = defaultdict(set)\n\nfor i in lst:\n    d[(i['number'], i['favorite'])].add(i['color'])\n\nres = [{'number': num, 'favorite': fav, 'color': col} for (num, fav), col in d.items()]\n\nprint(res)\n# [{'color': {'green', 'red'}, 'favorite': False, 'number': 1},\n#  {'color': {'red'}, 'favorite': True, 'number': 1},\n#  {'color': {'red'}, 'favorite': False, 'number': 2}]\n", "res = [{'number': num, 'favorite': fav, 'color': next(iter(col)) if len(col) == 1 else col} \\\n       for (num, fav), col in d.items()]\n\nprint(res)\n# [{'color': {'green', 'red'}, 'favorite': False, 'number': 1},\n#  {'color': 'red', 'favorite': True, 'number': 1},\n#  {'color': 'red', 'favorite': False, 'number': 2}]\n"], ["import itertools\nlst = [\n{'number': 1, 'favorite': False, 'color': 'red'},\n{'number': 1, 'favorite': False, 'color': 'green'},\n{'number': 1, 'favorite': False, 'color': 'red'},\n{'number': 1, 'favorite': True, 'color': 'red'},\n{'number': 2, 'favorite': False, 'color': 'red'}]\nl=[list(y) for x,y in itertools.groupby(sorted(lst,key=lambda x: (x['number'],x['favorite'])),lambda x: (x['number'],x['favorite']))]\nprint([{k:(v if k!='color' else list(set([x['color'] for x in i]))) for k,v in i[0].items()} for i in l])\n", "[{'number': 1, 'favorite': False, 'color': ['green', 'red']}, {'number': 1, 'favorite': True, 'color': ['red']}, {'number': 2, 'favorite': False, 'color': ['red']}]\n"], ["from collections import defaultdict\n\ndct = defaultdict([])\n\nfor entry in lst:\n    dct[(entry['number'], entry['favorite'])].append(entry['color'])\n\nlst = [{'number': key[0], 'favorite': key[1], color: value if len(value) > 1 else value[0]}\n    for key, value in dct.items()]\n"], ["f = [x for x in array if array.count(x) == 2]\n", "f = (lambda array=array: (x for x in array if array.count(x) == 2))()\n", "array = [1, 2, 2, 4, 5] # Original array\n\nf = (lambda array=array: (x for x in array if array.count(x) == 2))() # Close over array\narray.append(4)  # This *will* be captured\n\narray = [5, 6, 1, 2, 9] # Updates original to something else\n\nprint(list(f)) # Outputs [2, 2, 4, 4]\n"], ["from collections import OrderedDict\n\nd = OrderedDict()\nfor l in lst:\n    d.setdefault((l['number'], l['favorite']), set()).add(l['color'])\n\n[{'number': k[0], 'favorite': k[1], 'color': v.pop() if len(v) == 1 else v} \n    for k, v in d.items()]   \n# [{'color': {'green', 'red'}, 'favorite': False, 'number': 1},\n#  {'color': 'red', 'favorite': True, 'number': 1},\n#  {'color': 'red', 'favorite': False, 'number': 2}]\n", "import pandas as pd\n\nd = (pd.DataFrame(lst)\n       .groupby(['number', 'favorite'])\n       .color\n       .agg(set)\n       .reset_index()\n       .to_dict('r'))\nd\n# [{'color': {'green', 'red'}, 'favorite': False, 'number': 1},\n#  {'color': {'red'}, 'favorite': True, 'number': 1},\n#  {'color': {'red'}, 'favorite': False, 'number': 2}]\n", "[{'color': (lambda v: v.pop() if len(v) == 1 else v)(d_.pop('color')), **d_} \n     for d_ in d]\n# [{'color': {'green', 'red'}, 'favorite': False, 'number': 1},\n#  {'color': 'red', 'favorite': True, 'number': 1},\n#  {'color': 'red', 'favorite': False, 'number': 2}]\n"], ["new_dict = {}\n\nfor item in lst:\n    try: # if already exists then append to the list\n        new_dict.get((item['number'], item['favorite']))\n        new_dict[(item['number'], item['favorite'])].append(item['color'])\n    except KeyError: # if it doesn't then create a new entry to that key\n        new_dict[(item['number'], item['favorite'])] = [item['color']]\n\n\nfinal_list = []\nfor k, v in new_dict.items(): # keep appending dicts to our list\n    final_list.append({'number': k[0], 'favorite': k[1], 'color':set(v)})\n\nprint(final_list)\n", "[{'number': 1, 'favorite': False, 'color': {'green', 'red'}}, {'number': 1, 'favorite': True, 'color': {'red'}}, {'number': 2, 'favorite': False, 'color': {'red'}}]\n"], [">>> l = [1, 2, 2, 4, 5, 5, 5]\n>>> filtered = (x for x in l if l.count(x) == 2)\n>>> l = [1, 2, 4, 4, 5, 6, 6]\n>>> list(filtered)\n[4]\n", ">>> l = [1, 2, 2, 4, 5]\n>>> filtered = (x for x in l if l.count(x) == 2)\n>>> l = [1, 2, 4, 4, 5, 6, 6]\n>>> list(filtered)\n[4]\n>>> def f(original, new, count):\n    current = original\n    filtered = (x for x in current if current.count(x) == count)\n    current = new\n    return list(filtered)\n\n>>> from dis import dis\n>>> dis(f)\n  2           0 LOAD_FAST                0 (original)\n              3 STORE_DEREF              1 (current)\n\n  3           6 LOAD_CLOSURE             0 (count)\n              9 LOAD_CLOSURE             1 (current)\n             12 BUILD_TUPLE              2\n             15 LOAD_CONST               1 (<code object <genexpr> at 0x02DD36B0, file \"<pyshell#17>\", line 3>)\n             18 LOAD_CONST               2 ('f.<locals>.<genexpr>')\n             21 MAKE_CLOSURE             0\n             24 LOAD_DEREF               1 (current)\n             27 GET_ITER\n             28 CALL_FUNCTION            1 (1 positional, 0 keyword pair)\n             31 STORE_FAST               3 (filtered)\n\n  4          34 LOAD_FAST                1 (new)\n             37 STORE_DEREF              1 (current)\n\n  5          40 LOAD_GLOBAL              0 (list)\n             43 LOAD_FAST                3 (filtered)\n             46 CALL_FUNCTION            1 (1 positional, 0 keyword pair)\n             49 RETURN_VALUE\n>>> f.__code__.co_varnames\n('original', 'new', 'count', 'filtered')\n>>> f.__code__.co_cellvars\n('count', 'current')\n>>> f.__code__.co_consts\n(None, <code object <genexpr> at 0x02DD36B0, file \"<pyshell#17>\", line 3>, 'f.<locals>.<genexpr>')\n>>> f.__code__.co_consts[1]\n<code object <genexpr> at 0x02DD36B0, file \"<pyshell#17>\", line 3>\n>>> dis(f.__code__.co_consts[1])\n  3           0 LOAD_FAST                0 (.0)\n        >>    3 FOR_ITER                32 (to 38)\n              6 STORE_FAST               1 (x)\n              9 LOAD_DEREF               1 (current)  # This loads the current list every time, as opposed to loading a constant.\n             12 LOAD_ATTR                0 (count)\n             15 LOAD_FAST                1 (x)\n             18 CALL_FUNCTION            1 (1 positional, 0 keyword pair)\n             21 LOAD_DEREF               0 (count)\n             24 COMPARE_OP               2 (==)\n             27 POP_JUMP_IF_FALSE        3\n             30 LOAD_FAST                1 (x)\n             33 YIELD_VALUE\n             34 POP_TOP\n             35 JUMP_ABSOLUTE            3\n        >>   38 LOAD_CONST               0 (None)\n             41 RETURN_VALUE\n>>> f.__code__.co_consts[1].co_consts\n(None,)\n"], ["from collections import Counter\n\narray = [1, 2, 2, 4, 5]   # original array\ncounts = Counter(array)   # count each value in array\nold_array = array.copy()  # make copy\narray = [5, 6, 1, 2, 9]   # updates array\n\n# order relevant\nres = [x for x in old_array if counts[x] >= 2]\nprint(res)\n# [2, 2]\n\n# order irrelevant\nfrom itertools import chain\nres = list(chain.from_iterable([x]*count for x, count in counts.items() if count >= 2))\nprint(res)\n# [2, 2]\n"], ["f = [x for x in array if array.count(x) == 2] # Filters original\n"], ["f = (x for x in array if array.count(x) == 2) # Filters original\n", "print(list(f)) # Outputs filtered\n", "f = [x for x in array if array.count(x) == 2] # Filters original\n...\nprint(f)\n"], ["array = [1, 2, 2, 4, 5]\nf = [x for x in array if array.count(x) == 2]\narray = [5, 6, 1, 2, 9]\n\nprint(f)\n#[2, 2]\n"], [], ["def foo(username):\n    first = \"/Users/\"\n    last = \"/Desktop/data-code/Testdata\"\n    result = first + username + last \n    return result  \n"], [">>> a = ['abd', ' the dog', '4:45 AM', '1234 total', 'etc...','6:31 PM', '2:36']\n>>> [i for i in a if ':' not in i and not i[-2:] in ['AM','PM']]\n['abd', ' the dog', '1234 total', 'etc...']\n>>> \n", ">>> import re\n>>> a = ['abd', ' the dog', '4:45 AM', '1234 total', 'etc...','6:31 PM', '2:36']\n>>> [i for i in a if not re.search('\\d+:\\d+',i)]\n['abd', ' the dog', '1234 total', 'etc...']\n>>> \n", ">>> a = ['abd', ' the dog', '4:45 AM', '1234 total', 'etc...','6:31 PM', '2:36']\n>>> [i for i in a if ':' not in i]\n['abd', ' the dog', '1234 total', 'etc...']\n>>> \n"], [">>> import re\n>>> no_times = re.compile(r'^(?!\\d\\d?:\\d\\d(\\s*[AP]M)?$).*$')\n>>> a = ['abd', ' the dog', '4:45 AM', '1234 total', 'etc...','6:31 PM', '2:36']\n\n>>> filter(no_times.match, a)\n['abd', ' the dog', '1234 total', 'etc...']\n", ">>> filter(lambda s: not re.match(r'^\\d\\d?:\\d\\d(\\s*[AP]M)?$', s), a)\n['abd', ' the dog', '1234 total', 'etc...']\n"], ["(df.Col1 & (df.Col1 != df.Col1.shift(1))).sum()\n3\n", "df.Col1 != df.Col1.shift(1)\n\n0      True\n1     False\n2     False\n3      True\n4     False\n5     False\n6      True\n7     False\n8     False\n9     False\n10     True\n11    False\n12    False\n13     True\n14    False\n15    False\n16    False\n17    False\nName: Col1, dtype: bool\n", "(df & (df != df.shift(1))).sum()\n\nCol1    3\nCol2    3\ndtype: int64\n"], ["count = 0\nfor item in zip(d['Col1'], d['Col1'][1:]):\n    if item == (True, False):\n        count += 1\nprint(count)\n"], ["import pandas as pd\n\nd = {'Col1': [True, True, True, False, False, False, True, True, True, True, False, False, False, True, True, False, False, True, ]}\n\ndf = pd.DataFrame(data=d)\ndf['delta'] = df['Col1'] - df['Col1'].shift()\nBooleanShifts = df['delta'].value_counts()\nprint(BooleanShifts[-1])\n"], ["res = df['Col1'].astype(int).diff().eq(-1).sum()  # 3\n", "res = df.astype(int).diff().eq(-1).sum()\n"], ["df.cumsum()[~df.Col1].nunique()\nOut[408]: \nCol1    3\ndtype: int64\n"], ["my_list = [480, 9, 104]\npat = r'({})'.format('|'.join(str(i) for i in my_list))\n#'(480|9|104)' <-- This is how the pat looks like\ndf.loc[df.split_categories.astype(str).str.extract(pat, expand=False).dropna().index]\n", "pat = '|'.join(r\"\\b{}\\b\".format(x) for x in my_list)\ndf[df.split_categories.astype(str).str.contains(pat,na=False)]\n\n    album_id    categories  split_categories\n0   66562       480.494     [480, 494]\n3   1709        9.000       [9]\n4   59239       105.104     [105, 104]\n"], ["L = [480, 9, 104]\nmask = np.array([bool(set(map(int, x)) & set(L))  for x in df['split_categories']])\n", "df1 = pd.DataFrame(df['split_categories'].values.tolist(), index=df.index)\nmask = df1.astype(float).isin(L).any(axis=1)\n", "df = df[mask]\nprint (df)\n  album_id categories split_categories\n0    66562    480.494       [480, 494]\n3     1709          9              [9]\n4    59239    105.104       [105, 104]\n"], ["df = pd.DataFrame({'album_id': [66562, 114582, 4846, 1709, 59239],\n                   'categories': ['480.494', '128', '5', '9', '105.104']})\n\nsplit = df['categories'].str.split('.', expand=True).add_prefix('split_').astype(float)\ndf = df.join(split)\n\nprint(df)\n#    album_id categories  split_0  split_1\n# 0     66562    480.494    480.0    494.0\n# 1    114582        128    128.0      NaN\n# 2      4846          5      5.0      NaN\n# 3      1709          9      9.0      NaN\n# 4     59239    105.104    105.0    104.0\n\nL = [480, 9, 104]\nres = df[df.filter(regex='^split_').isin(L).any(1)]\n\nprint(res)\n#    album_id categories  split_0  split_1\n# 0     66562    480.494    480.0    494.0\n# 3      1709          9      9.0      NaN\n# 4     59239    105.104    105.0    104.0\n"], ["l = [480, 9, 104]\ndf[df.categories.str.split('.', expand=True).isin(map(str,l)).any(axis=1)]\n\n   album_id  categories split_categories\n0     66562     480.494        [480,494]\n3      1709       9.000              [9]\n4     59239     105.104        [105,104]\n"], ["print(df[~(df['split_categories'].isin([480, 9, 104])).any()])\n", "  album_id categories split_categories\n0    66562    480.494       [480, 494]\n3     1709          9              [9]\n4    59239    105.104       [105, 104]\n"], ["class SingleCharReplacingFilter:\n\n    def __init__(self, reader, oldchar, newchar):\n        def proxy(obj, attr):\n            a = getattr(obj, attr)\n            if attr in ('read'):\n                def f(*args):\n                    return a(*args).replace(oldchar, newchar)\n                return f\n            else:\n                return a\n\n        for a in dir(reader):\n            if not a.startswith(\"_\") or a == '__iter__':\n                setattr(self, a, proxy(reader, a))\n\ndef csv_reader_6(x):\n    with x as fin:\n        return pd.read_csv(SingleCharReplacingFilter(fin, \";\", \",\"),\n                            sep=',', header=None, usecols=[3, 4, 5])\n"], [">>> df2 + df2.columns\n    a   b\n0  Aa  Ab\n1  Ba  Ab\n2  Aa  Bb\n3  Ba  Bb\n\n>>> pd.factorize((df2 + df2.columns).values.ravel())\n(array([0, 1, 2, 1, 0, 3, 2, 3], dtype=int64),\narray(['Aa', 'Ab', 'Ba', 'Bb'], dtype=object))\n", "from scipy import sparse\n\na = df1.values.ravel()\nb, _ = pd.factorize((df2 + df2.columns).values.ravel())\n\no = sparse.csr_matrix(\n    (a, b, np.arange(a.shape[0] + 1)), (a.shape[0], b.max() + 1)\n).sum(0).A1\n\nres = o[b].reshape(df1.shape)\n", "array([[ 4, 11],\n       [ 6, 11],\n       [ 4, 15],\n       [ 6, 15]], dtype=int64)\n", "def gp_chris(f1, f2):\n    a = f1.values.ravel()\n    b, _ = pd.factorize((f2 + f2.columns).values.ravel())\n\n    o = sparse.csr_matrix(\n        (a, b, np.arange(a.shape[0] + 1)), (a.shape[0], b.max() + 1)\n    ).sum(0).A1\n\n    return pd.DataFrame(o[b].reshape(f1.shape), columns=df1.columns)\n\n\ndef gp_cs(f1, f2):\n    return pd.concat([f1[c].groupby(f2[c]).transform('sum') for c in f1.columns], axis=1)\n\n\ndef gp_scott(f1, f2):\n    return f1.apply(lambda x: x.groupby(f2[x.name]).transform('sum'))\n\n\ndef gp_wen(f1, f2):\n    return f1.stack().groupby([f2.stack().index.get_level_values(level=1), f2.stack()]).transform('sum').unstack()\n", "import numpy as np\nfrom scipy import sparse\nimport pandas as pd\nimport string\nfrom timeit import timeit\nimport matplotlib.pyplot as plt\nres = pd.DataFrame(\n       index=[f'gp_{f}' for f in ('chris', 'cs', 'scott', 'wen')],\n       columns=[10, 50, 100, 200, 400],\n       dtype=float\n)\n\nfor f in res.index:\n    for c in res.columns:\n        df1 = pd.DataFrame(np.random.rand(c, c))\n        df2 = pd.DataFrame(np.random.choice(list(string.ascii_uppercase), (c, c)))\n        df1.columns = df1.columns.astype(str)\n        df2.columns = df2.columns.astype(str)\n\n        stmt = '{}(df1, df2)'.format(f)\n        setp = 'from __main__ import df1, df2, {}'.format(f)\n        res.at[f, c] = timeit(stmt, setp, number=50)\n\n\nax = res.div(res.min()).T.plot(loglog=True)\nax.set_xlabel(\"N\")\nax.set_ylabel(\"time (relative)\")\n\nplt.show()\n", "df1 = pd.DataFrame(np.random.rand(10, 10))\ndf2 = pd.DataFrame(np.random.choice(list(string.ascii_uppercase), (10, 10)))\ndf1.columns = df1.columns.astype(str)\ndf2.columns = df2.columns.astype(str)\n\nv = np.stack([gp_chris(df1, df2), gp_cs(df1, df2), gp_scott(df1, df2), gp_wen(df1, df2)])\nprint(np.all(v[:-1] == v[1:]))\n", "True\n"], ["pd.concat([df1[c].groupby(df2[c]).transform('sum') for c in df1.columns], axis=1)\n\n   a   b\n0  4  11\n1  6  11\n2  4  15\n3  6  15\n"], ["df1.stack().groupby([df2.stack().index.get_level_values(level=1),df2.stack()]).transform('sum').unstack()\nOut[291]: \n   a   b\n0  4  11\n1  6  11\n2  4  15\n3  6  15\n"], ["res = df1.assign(a_sum=lambda df: df['a'].groupby(df2['a']).transform('sum'))\\\n         .assign(b_sum=lambda df: df['b'].groupby(df2['b']).transform('sum'))\n", "   a   b\n0  4  11\n1  6  11\n2  4  15\n3  6  15\n"], ["df1.apply(lambda x: x.groupby(df2[x.name]).transform('sum'))\n", "   a   b\n0  4  11\n1  6  11\n2  4  15\n3  6  15\n"], ["def get_json_location(username=os.getlogin()):\n    first = \"/Users/\"\n    last = \"/Desktop/data-code/Testdata\"\n    result = first + username + last\n    return result\n"], [], ["user_home_dir = os.path.expanduser('~')\nuser = os.path.split(user_home_dir)[-1]\nos.path.join('/Users', user, 'Desktop/data-code/Testdata')\n#/Users\\\\User_1\\\\Desktop/data-code/Testdata'\n"], ["from pathlib import Path\nimport re\n\ndef f_path(path):\n    \"\"\"\n    path: str full path, with user's home folder, \n          would be translated to current user's home folder,\n          for example, \"/Users/jane/some/path\" would be translated to\n          \"/Users/tom/some/path\", if current user is Tom.\n    \"\"\"\n    # current home folder\n    home = str(Path.home())\n    # creating regular expression like \"^/Users/[^/]+\", for later use:\n    path_reg = \"^\" + re.sub(\"[^/]+$\", \"\", home) + \"[^/]+\"\n    # replacing old home path part to a new one\n    return re.sub(path_reg, home, path)\n"], ["import os\ncurrent_directory = os.getcwd()\n"], ["input=raw_input() #took input as string\ninputlist=input.split() #split the string to list\nlsintegers = map(int, list(set(inputlist))) #remove duplicates converted each element to integer\nlsintegers.sort() #sorted \nprint(lsintegers)`\n"], ["    testcase = int(input())\n    n=list(str(testcase))\n    results = map(int, n)\n\n    numbers= sorted(set(results))\n\n\n    print(numbers)\n"], ["x_numbers = input().split()\nnumbers = [int(x) for x in x_numbers]\n"], ["testcases = int(input())\n\nfor _ in range(testcases):\n    print(' '.join(sorted(set(input().split()), key=int)))\n"], ["def sorted_elements(numbers):\n    return sorted(set(numbers))\n\ntestcase = int(input())\nwhile testcase > 0:\n   numbers = map(int, input().split())\n   l = sorted_elements(numbers)\n\n   for x in l:\n      print (x, end = ' ')\n\n   print ()\n   testcase -= 1\n", "numbers = (int(x) for x in input().split())\n"], ["df_gb = df.groupby(['pool']).agg(lambda x: np.average(x['mean'], weights=x['count']))['mean']\n", "df_gb2 = df.groupby(['pool']).agg(newAvg)['mean']\n", "def newAvg(x):\n    cm = x['count']*x['mean']\n    sCount = x['count'].sum()\n    sMean = cm.sum()\n    return sMean/sCount\n", "df_gb2 = df.groupby(['pool']).agg(newAvg)['mean']\nprint(df_gb2)\n\n# pool\n# A     4.0\n# B    11.0\n# Name: mean, dtype: float64\n"], ["df.assign(cm=df['count']*df['mean'])\\\n  .groupby('pool', as_index=False)['cm','count'].sum()\\\n  .eval('AggCol = cm / count')\n", "  pool    cm  count  AggCol\n0    A  28.0      7     4.0\n1    B  77.0      7    11.0\n"], ["df.groupby(['pool']).apply(lambda x : pd.Series({'count':sum(x['count']),'newavg':newAvg(x)}))\nOut[58]: \n      count  newavg\npool               \nA       7.0     4.0\nB       7.0    11.0\n"], ["df_gb = df.assign(cm=df['count']*df['mean']).groupby('pool')['cm','count'].sum()\nprint (df_gb)\n        cm  count\npool             \nA     28.0      7\nB     77.0      7\n\nout = df_gb.pop('cm') / df_gb.pop('count')\nprint (out)\npool\nA     4.0\nB    11.0\ndtype: float64\n"], ["g = df.groupby('pool')\nres = pd.concat([g['count'].sum(), g.apply(newAvg).rename('newAvg')], axis=1)\n\nprint(res)\n\n#       count  newAvg\n# pool               \n# A         7     4.0\n# B         7    11.0\n"], ["from jsonpath_ng.ext import parse\n\nmy_nested_dict = {\n    \"global\": {\n        \"peers\": {\n            \"15.1.1.1\": {\n                \"address_family\": {\n                    \"ipv4\": {\n                        \"accepted_prefixes\": 4,\n                        \"received_prefixes\": 4,\n                        \"sent_prefixes\": 1\n                    }\n                },\n                \"description\": \"== R3 BGP Neighbor ==\",\n                \"is_enabled\": true,\n                \"is_up\": true,\n                \"local_as\": 65002,\n                \"remote_as\": 65002,\n                \"remote_id\": \"15.1.1.1\",\n                \"uptime\": 13002\n            }\n        },\n        \"router_id\": \"15.1.1.2\"\n    }\n}\nfiltered_list = ['peers', 'remote_id', 'remote_as', 'uptime']\n\nfor list_item in filtered_list:\nfound = parse(f'$..{list_item}').find(my_nested_dict)\nif found:\n    if list_item == 'peers':\n        print(f'{list_item} - {\"\".join(found[0].value.keys())}')\n    else:\n        print(f'{list_item} - {found[0].value}')\n"], [], ["def csv_reader_4(x):\n    with x as fin:\n        reader = pd.read_csv(StringIO(fin.getvalue().replace(';',',')), sep=',',header=None)\n    return reader\n", "%timeit csv_reader_4(StringIO(x)) # 3.51 s per loop\n"], ["from typing import Any, Tuple, Generator, FrozenSet\n\ndef search_in_dict(d: Any, keys: FrozenSet[str]) -> Generator[Tuple[str, Any], None, None]:\n    \"\"\"\n    Generate pairs key-value for found keys\n    \"\"\"\n    if not isinstance(d, dict):\n        return\n    for key, value in d.items():\n        if key in keys:\n            if isinstance(value, dict):\n                # Special case: return the first key from nested dict as value\n                yield key, tuple(value.keys())[0]\n            else:\n                yield key, value\n        # continue to search deeper\n        yield from search_in_dict(value, keys)\n", "flatten_dict_with_results = dict(kv for kv in search_in_dict(my_nested_dict, keys=frozenset(filtered_list)))\n"], [">>> df1\n   vouchers  units some_other_data\n0       100     11               a\n1       200     12               b\n2       300     12               c\n3       400     13               d\n", ">>> df2\n   vouchers  units some_other_data\n0       500     11               a\n1       200     12               b\n2       600     12               c\n3       300     13               d\n", ">>> df1[(df1 != df2).any(1)]\n   vouchers  units some_other_data\n0       100     11               a\n2       300     12               c\n3       400     13               d\n", ">>> df1.merge(df2, how='outer', indicator=True).query('_merge == \"left_only\"').drop('_merge', 1)\n   vouchers  units some_other_data\n0       100     11               a\n2       300     12               c\n3       400     13               d\n", ">>> df1[~df1.isin(df2).all(axis=1)]\n   vouchers  units some_other_data\n0       100     11               a\n2       300     12               c\n3       400     13               d\n"], ["excs = [] #will store the index of the values which are equal\n\nfor i, (key, value) in enumerate(zip(df1[\"vouchers\"], df1[\"units\"])):\n  for key2, value2 in zip(df2[\"vouchers\"], df2[\"units\"]):\n    if key == key2 and value == value2:\n      excs.append(i)\n\nfor exc in excs:\n  del(df1[\"vouchers\"][exc])\n  del(df1[\"units\"][exc])\n"], ["df = pd.concat([df1, df2], ignore_index=True)\ndf = df.loc[~df.duplicated(subset=['vouchers', 'units'], keep=False)]\ndf = df.reindex(df.index & df1.index)\n\nprint(df)\n\n#   some_other_data  units  vouchers\n# 0               a     11       100\n# 2               c     12       300\n# 3               d     13       400\n"], ["u = df1.set_index(['vouchers', 'units'])\ndf1[~u.index.isin(pd.MultiIndex.from_arrays([df2.vouchers, df2.units]))]\n\n   vouchers  units some_other_data\n0       100     11               a\n2       300     12               c\n3       400     13               d\n"], ["df1 = {\n    'vouchers': [100, 200, 300, 400],\n    'units': [11, 12, 12, 13],\n    'some_other_data': ['a', 'b', 'c', 'd']\n    }\ndf2 = {\n    'vouchers': [500, 200, 600, 300],\n    'units': [11, 12, 12, 13],\n    'some_other_data': ['a', 'b', 'c', 'd']\n    }  \n\ny = 0\nfor x in range(len(df1['vouchers'])):\n    if df1['vouchers'][x-y] == df2['vouchers'][x]:\n        if df1['units'][x-y] == df2['units'][x]:\n            for key in df1.keys():\n                del df1[key][x]\n            y += 1\n"], ["idx=df1.merge(df2,on=['vouchers','units'],indicator=True,how='left').\\\n     loc[lambda x : x['_merge']=='both'].index\ndf1=df1.drop(idx,axis=0)\ndf1\nOut[374]: \n   vouchers  units some_other_data\n0       100     11               a\n2       300     12               c\n3       400     13               d\n"], ["import io\nimport pandas as pd\n\n# strings in first 3 columns are of arbitrary length\nx = '''ABCD,EFGH,IJKL,34.23;562.45;213.5432\nMNOP,QRST,UVWX,56.23;63.45;625.234\n'''*10**6\n\ndef iterstream(iterable, buffer_size=io.DEFAULT_BUFFER_SIZE):\n    \"\"\"\n    http://stackoverflow.com/a/20260030/190597 (Mechanical snail)\n    Lets you use an iterable (e.g. a generator) that yields bytestrings as a\n    read-only input stream.\n\n    The stream implements Python 3's newer I/O API (available in Python 2's io\n    module).\n\n    For efficiency, the stream is buffered.\n    \"\"\"\n    class IterStream(io.RawIOBase):\n        def __init__(self):\n            self.leftover = None\n        def readable(self):\n            return True\n        def readinto(self, b):\n            try:\n                l = len(b)  # We're supposed to return at most this much\n                chunk = self.leftover or next(iterable)\n                output, self.leftover = chunk[:l], chunk[l:]\n                b[:len(output)] = output\n                return len(output)\n            except StopIteration:\n                return 0    # indicate EOF\n    return io.BufferedReader(IterStream(), buffer_size=buffer_size)\n\ndef replacementgenerator(haystack, needle, replace):\n    for s in haystack:\n        if s == needle:\n            yield str.encode(replace);\n        else:\n            yield str.encode(s);\n\ncsv = pd.read_csv(iterstream(replacementgenerator(x, \";\", \",\")), usecols=[3, 4, 5])\n"], [], ["A in B\n", "B.__contains__(A)  # returns boolean\n", "for A in B :\n    # Body\n", "A = B.next()\nif B.__contains__(A) :\n    # Body\n\nA = B.next()\nif B.__contains__(A) :\n    # Body\n\n# ...\n\nA = B.next()\nif B.__contains__(A) :\n    # B.next() throws \"StopIteration\" if there is no more element\n"], ["print(2 in [1, 2, 3])  # True\nif 3 in range(7, 20):\n   print('3 in range!')\n", "for thing in range(20):\n    print(thing)  # thing is something else on each step\n", "# as aliases ExitStack\nfrom contextlib import ExitStack as ContextStack\n\n# as holds the result of ContextStack().__enter__()\nwith ContextStack() as stack:\n    ...\n"], [], [], [">>> wb=openpyxl.load_workbook('testfile.xlsx')\n>>> wb.get_sheet_names()\n['S1, 'S2', 'S3']\n", ">>> import openpyxl\n>>> wb=openpyxl.load_workbook('testfile.xlsx')\n>>> wb.get_sheet_names()\n['Sheet1', 'Sheet2', 'Sheet3']\n>>> sheet=wb.get_sheet_by_name('Sheet3')\n", ">>> sheet\n<Worksheet \"Sheet3\">\n>>> type(sheet)\n<class 'openpyxl.worksheet.worksheet.Worksheet'>\n>>> sheet.title\n'Sheet3'\n>>> \n", "worksheet = workbook.get_sheet_by_name('Sheet3')    \nfor row_cells in worksheet.iter_rows():\n    for cell in row_cells:\n       print('%s: cell.value=%s' % (cell, cell.value) )\n"], ["    import numpy as np\n    np.zeros(2,2) #it will create [2,2] matrix with all zeros\n    np.ones(2,2)  #it will create [2,2] matrix with all ones\n"], ["np.random.randint(2, size=pop_size)\n"], ["from random import randint\nx = [[randint(0,1) for _ in range(8)] for _ in range(10)]\n"], ["import numpy as np\nmy_matrix = np.random.randint(2,size=3)\n\noutput = ([[0,1,0],\n          [0,0,1],\n          [1,0,1]])\n"], ["matrix = np.random.randint(2, size=pop_size)\n"], ["import os\n\nos.chdir(r'C:\\temp')                       # change directory location\nos.system('fart.exe -c file.csv \";\" \",\"')  # run FART with character to replace\n\ndf = pd.read_csv('file.csv', usecols=[3, 4, 5], header=None)  # read file into Pandas\n"], ["l <- lapply( file.list, readxl::read_excel, sheet = 1 )\n"], ["def csv_reader_4(x):\n    with open(x, 'r') as f:\n        a = f.read()\n    return pd.read_csv(StringIO(unicode(a.replace(';', ','))), usecols=[3, 4, 5])\n", "%timeit csv_reader_2('test.dat')  # 1.6 s per loop\n%timeit csv_reader_4('test.dat')  # 1.2 s per loop\n"], ["# get all xlsx files in given directory\nfilesList <- list.files(\"d:/Test/\", pattern = '.*\\\\.xlsx', full.names = TRUE)\n\n# pre-allocate list of first sheet names\nfirstSheetList <- rep(list(NA),length(filesList))\n\n# loop through files and get the data of first sheets\nfor (k in seq_along(filesList)) \n  firstSheetList[[k]] <- openxlsx::read.xlsx(filesList[k], sheet = 1)\n"], ["from glob import glob\nimport pandas as pd\n\nsheets = []\n\n# Go through each xlsx file\nfor xlsx_file in glob(\"*.xlsx\"):\n\n    # Convert sheet to dataframe\n    xlsx = pd.ExcelFile(xlsx_file)\n\n    # Get first sheet and append it\n    sheet_1 = xlsx.parse(0)\n    sheets.append(sheet_1)\n\nprint(sheets)\n", "[   x  y\n0  1  2\n1  1  2,    x  y\n0  1  2\n1  1  2]\n", "[pd.ExcelFile(xlsx_file).parse(0) for xlsx_file in glob(\"*.xlsx\")]\n", "{xlsx_file: pd.ExcelFile(xlsx_file).parse(0) for xlsx_file in glob(\"*.xlsx\")}\n"], ["import pandas as pd\n\nexcel_file = pd.ExcelFile('A.xlsx')\ndataframes = {sheet: excel_file.parse(sheet) for sheet in excel_file.sheet_names}\n", "for k,v in dataframes.items():\n    print('Sheetname: %s' % k)\n    print(v.head())\n"], ["ans_list = [ element[:6] for element in list_x ]\n"], ["list(map(lambda w: int(w[:6]), x))\n", "list(map(lambda w:list(int(itertools.islice(w, 6))), x))\n"], [">>> array[:3] # 0, 1, 2 (.. then it stops)\n['doctorWho', 'Daleks', 'Cyborgs']\n", ">>> array[::-1]\n['SonicSqrewDriver', 'Tardis', 'Cyborgs', 'Daleks', 'doctorWho']\n", ">>> array[-1]\n'SonicSqrewDriver'\n", ">>> array[-3:]\n['Cyborgs', 'Tardis', 'SonicSqrewDriver']\n"], ["stringList = ['abcdeffadsff', 'afdfsdfdsfsdf', 'fdsfdsfsdf', 'gfhthtgffgf']\nnewList = [string[:6] for string in stringList]\n"], ["y = [z[:6] for z in x]\n", "y = []               # make the list\nfor z in x:          # loop through the list\n    y.append(z[:6])  # add the first 6 letters of the string to y\n"], ["import bs4\n\nmarkup = \"\"\"\n<td>Net Taxes Due</td>\n<td class=\"value-column\">$2,370.00</td>\n<td class=\"value-column\">$2,408.00</td>\n\"\"\"\n\n# Version 4.7.0\nsoup = bs4.BeautifulSoup(markup, \"html.parser\")\ncells = soup.select('td:contains(\"Net Taxes Due\") ~ td.value-column')\ncells = [ele.text.strip() for ele in cells]\nprint(cells)\n\n# Version < 4.7.0 or if you prefer find\nsoup = bs4.BeautifulSoup(markup, \"html.parser\")\ncells = soup.find('td', text=\"Net Taxes Due\").find_next_siblings('td')\ncells = [ele.text.strip() for ele in cells]\nprint(cells)\n", "['$2,370.00', '$2,408.00']\n['$2,370.00', '$2,408.00']\n"], ["from bs4 import BeautifulSoup\n\nhtmldoc = \"\"\"\n<tr>\n    <td>Net Taxes Due</td>\n    <td class=\"value-column\">$2,370.00</td>\n    <td class=\"value-column\">$2,408.00</td>\n</tr>\n\"\"\"    \nsoup = BeautifulSoup(htmldoc, \"html.parser\")\nitem = soup.find('td',text='Net Taxes Due').find_next_sibling(\"td\")\nprint(item)\n"], ["import requests\nfrom lxml.html import fromstring\n# url = ''\n# tree = html.fromstring( requests.get(url).content)\nh = '''\n<td>Net Taxes Due<td>\n<td class=\"value-column\">$2,370.00</td>\n<td class=\"value-column\">$2,408.00</td>\n\n'''\ntree = fromstring(h)\nlinks = [link.text for link in tree.xpath('//td[text() = \"Net Taxes Due\"]/following-sibling::td[2] | //td[text() = \"Net Taxes Due\"]/following-sibling::td[3]' )]\nprint(links)\n"], ["<html>\n<table>\n<tr>\n<td>Net Taxes Due</td>\n<td class=\"value-column\">$2,370.00</td>\n<td class=\"value-column\">$2,408.00</td>\n</tr>\n</table>\n</html>\n\nsoup = BeautifulSoup(url, \"html.parser\")\ntable = soup.find('tr')\ndf = [x.text for x in table.findAll('td', {'class':'value-column'})]\n"], ["<div id=\"Net\">\n    <taxes>\n        <due>...</due>\n    </taxes>\n</div>\n", "table = soup.find(string=\"Net Taxes Due\")\n"], ["import datetime\nimport time\n\ntimedurations = ['0:07:11', '0:15:16', '0:18:17', '0:23:15']\n\ndistances = ['0.6', '0.4', '1.3', '1.7']\n\n# turn times into hours\nhours = [float(timeduration.split(\":\")[0]) + float(timeduration.split(\":\")[1]) / 60 + float(timeduration.split(\":\")[2]) / 3600 for timeduration in timedurations]\n\n# divide each distance by its respective time\nspeeds = [float(distance) / hour for distance, hour in zip(distances, hours)]\n\n\nfor speed in speeds:\n    print(str(speed) + \" mph\")\n"], ["def get_hours(time_duration):\n  h, m, s = time_duration.split(':')\n  return float(h) + float(m) / 60 + float(s) / 3600\n\nKM_TO_MI_CONVERSION_FACTOR = 1.609344\n\ntime_duration = ['0:07:11', '0:15:16', '0:18:17', '0:23:15']\nkm_distances = ['0.6', '0.4', '1.3', '1.7']\nmi_distances = [float(x)/KM_TO_MI_CONVERSION_FACTOR for x in km_distances]\ntime_in_hours = [get_hours(x) for x in time_duration]\nmi_per_hour = [round(x/y, 7) for x, y in zip(mi_distances, time_in_hours)]\nkm_per_hour = [round(float(x)/y, 7) for x, y in zip(km_distances, time_in_hours)]\nprint(mi_per_hour) #[3.1140644, 0.9768281, 2.6508817, 2.7260156]\nprint(km_per_hour) #[5.0116009, 1.5720524, 4.2661805, 4.3870968]\n"], ["import pandas as pd\n\ntimeduration = ['0:07:11', '0:15:16', '0:18:17', '0:23:15']\ndistances = ['0.6', '0.4', '1.3', '1.7']\n\ntimes = pd.to_timedelta(timeduration)  # convert strings to timedeltas\ndists = pd.to_numeric(distances)       # convert strings to floats\n\nmiles_per_km = 0.621371\n\nres = dists / (times / pd.Timedelta('1 hour')) * miles_per_km\n\n# Float64Index([3.11406348028, 0.976827772926, 2.65088083865, 2.72601470968],\n#              dtype='float64')\n"], ["timeduration = ['0:07:11', '0:15:16', '0:18:17', '0:23:15']\ndistances = ['0.6', '0.4', '1.3', '1.7']\nspeed = []\n\nfor i, t in enumerate(timeduration):\n    t = [float(hms)/60**power for power, hms in enumerate(t.split(':'))]\n    d = float(distances[i])\n    v = d / sum(t)\n    speed.append(v)\n\nprint(speed)\n"], ["import datetime,time \ntimeduration = ['0:07:11', '0:15:16', '0:18:17', '0:23:15']\ndistances = ['0.6', '0.4', '1.3', '1.7']\nspeeds=[];y=0\nfor i in timeduration:\n    x = time.strptime(i.split(',')[0],'%H:%M:%S')\n    seconds=datetime.timedelta(hours=x.tm_hour,minutes=x.tm_min,seconds=x.tm_sec).total_seconds()\n    hours=float(seconds)/3600\n    speeds.append(float(distances[y])/hours)\n    y+=1\nprint speeds\n"], ["timeduration = ['0:07:11', '0:15:16', '0:18:17', '0:23:15']\ndistances = ['0.6', '0.4', '1.3', '1.7']\n\ntemp = [ii.split(':') for ii in timeduration]\ntimeduration = [(int(ii[0])*3600+int(ii[1])*60+int(ii[2]))/3600 for ii in temp]\ndistances = [float(ii) for ii in distances]\n\nkmtomile = 0.621371\n\nspeed = [kmtomile*distances[ii]/timeduration[ii] for ii in range(len(distances))]\n", "[3.1140634802784226, 0.9768277729257643, 2.650880838650866, 2.726014709677419]\n"], ["h, m, s = timeduration[0].split(\":\")\nhours = int(h) + int(m)/60 + int(s)/3600\n"], ["from itertools import count\n\ndef gen(value):\n    \"\"\"Returns a generator that first yields `value` and then `value + x * 0.10` (where x is 1, 2, ...).\n    \"\"\"\n    yield value\n    yield from map(lambda x: value + x * 0.10, count(1))\n\nmy_list = [20, 20, 20, 30, 20, 30, 40, 50, 15, 11, 20, 40, 50, 15]\n\n# create a generator for each distinct value in my_list\ngenerators = {k: gen(k) for k in set(my_list)}\n\n# calculate the result list\ndup_list = [next(generators[elmt]) for elmt in sorted(my_list)]\n\nprint(dup_list)\n"], ["my_list = [20,20,20,30,20,30,40,50,15,11,20,40,50,15]\nmy_list.sort()\ndup_list = []\n\n\nfor i in range (len(my_list)):\n    if my_list[i] not in dup_list:\n        dup_list.append(my_list[i])\n    else:\n        j=1\n        res = True\n        while res:\n            val = my_list[i]+j*0.1\n            if val  not in dup_list:\n                dup_list.append(val)\n                res = False\n            j+=1 \n\nprint(dup_list)\n\n#output [11, 15, 15.1, 20, 20.1, 20.2, 20.3, 20.4, 30, 30.1, 40, 40.1, 50, 50.1]\n"], ["from collections import defaultdict\n\nmy_list = [20,20,20,30,20,30,40,50,15,11,20,40,50,15]\nmy_list.sort()\ndup_list = []\noccurrences = defaultdict(int)\n\nfor elmt in my_list:\n    dup_list.append(elmt + occurrences[elmt] * 0.10)\n    occurrences[elmt] += 1\n", "[11.0, 15.0, 15.1, 20.0, 20.1, 20.2, 20.3, 20.4, 30.0, 30.1, 40.0, 40.1, 50.0, 50.1]\n"], ["my_list = [20,20,20,30,20,30,40,50,15,11,20,40,50,15]\nmy_list.sort()\nout_list = []\n\nfor value in my_list:\n    if value in out_list:\n        while value in out_list:\n            value += .1\n    out_list.append(value)\n"], ["my_list = [20,20,20,30,20,30,40,50,15,11,20,40,50,15]\nmy_list.sort()\ndup_list = []\nfeq = {}\n\nfor i in range (len(my_list)):\n    if my_list[i] not in feq:\n        feq[my_list[i]] = 1\n    else:\n        feq[my_list[i]] += 1\n\n    dup_list.append(my_list[i] + (feq[my_list[i]]-1)*0.1)\n"], ["my_list = [20,20,20,30,20,30,40,50,15,11,20,40,50,15]\nmy_list.sort()\ndup_list = []\n\nfor i in range (len(my_list)):\n    if my_list[i] not in dup_list:\n        dup_list.append(my_list[i])\n    else:\n        dup_list.append(dup_list[i-1]+0.1)\n"], ["from itertools import groupby\n\nmy_list = [20,20,20,30,20,30,40,50,15,11,20,40,50,15]\nmy_list.sort()\nresult = [g + i * 0.1 for k, group in groupby(my_list) for i, g in enumerate(group)]\nprint(result)\n", "[11.0, 15.0, 15.1, 20.0, 20.1, 20.2, 20.3, 20.4, 30.0, 30.1, 40.0, 40.1, 50.0, 50.1]\n"], ["df_true = data.filter(data.failed == True).alias(\"df1\")\ndf_false =data.filter(data.failed == False).alias(\"df2\")\n", "from pyspark.sql.functions import col,when\ndf_result = df_true.join(df_false,df_true.card_scheme == df_false.card_scheme, \"outer\") \\\n    .select(when(col(\"df1.card_scheme\").isNotNull(), col(\"df1.card_scheme\")).otherwise(col(\"df2.card_scheme\")).alias(\"card_scheme\") \\\n            , when(col(\"df1.failed\").isNotNull(), (col(\"df2.count\")/(col(\"df1.count\") + col(\"df2.count\")))).otherwise(1).alias(\"X\"))\n"], ["from pyspark.sql import functions as func\nfrom pyspark.sql.functions import col    \ndata = data.groupby(\"card_scheme\", \"failed\").count()\n", "a = data.filter(col(\"failed\") == \"false\").groupby(\"card_scheme\").agg(func.sum(\"count\").alias(\"num\"))\nb = data.groupby(\"card_scheme\").agg(func.sum(\"count\").alias(\"den\"))\n", "c = a.join(b, a.card_scheme == b.card_scheme).drop(b.card_scheme)\n", "c.withColumn('X', c.num/c.den)\n"], ["myValues = [('jcb',False,4),('american express', False, 22084),('AMEX',False,4),('mastercard',True,1122),('visa',True,1975),('visa',False,126372),('CB',False,6),('discover',False,2219),('maestro',False,2),('VISA',False,13),('mastercard',False,40856),('MASTERCARD',False,9)]\ndf = sqlContext.createDataFrame(myValues,['card_Scheme','failed','count'])\ndf.show()\n+----------------+------+------+\n|     card_Scheme|failed| count|\n+----------------+------+------+\n|             jcb| false|     4|\n|american express| false| 22084|\n|            AMEX| false|     4|\n|      mastercard|  true|  1122|\n|            visa|  true|  1975|\n|            visa| false|126372|\n|              CB| false|     6|\n|        discover| false|  2219|\n|         maestro| false|     2|\n|            VISA| false|    13|\n|      mastercard| false| 40856|\n|      MASTERCARD| false|     9|\n+----------------+------+------+\n", "df=df.groupBy(\"card_Scheme\").pivot(\"failed\").sum(\"count\")\ndf=df.withColumn('X',when((col('True').isNotNull()),(col('false')/(col('false')+col('true')))).otherwise(1))\ndf=df.select('card_Scheme','X')\ndf.show()\n+----------------+------------------+\n|     card_Scheme|                 X|\n+----------------+------------------+\n|            VISA|               1.0|\n|             jcb|               1.0|\n|      MASTERCARD|               1.0|\n|         maestro|               1.0|\n|            AMEX|               1.0|\n|      mastercard|0.9732717137548239|\n|american express|               1.0|\n|              CB|               1.0|\n|        discover|               1.0|\n|            visa|0.9846120283294506|\n+----------------+------------------+\n", "from pyspark.sql.window import Window\ndf = df.groupBy(\"card_scheme\", \"failed\").agg(sum(\"count\"))\\\n  .withColumn(\"X\", col(\"sum(count)\")/sum(\"sum(count)\").over(Window.partitionBy(col('card_scheme'))))\\\n  .where(col('failed')== False).drop('failed','sum(count)')\ndf.show()\n\n+----------------+------------------+\n|     card_scheme|                 X|\n+----------------+------------------+\n|            VISA|               1.0|\n|             jcb|               1.0|\n|      MASTERCARD|               1.0|\n|         maestro|               1.0|\n|            AMEX|               1.0|\n|      mastercard|0.9732717137548239|\n|american express|               1.0|\n|              CB|               1.0|\n|        discover|               1.0|\n|            visa|0.9846120283294506|\n+----------------+------------------+\n"], ["val grouped_df = data.groupBy(\"card_scheme\", \"failed\").count() // your dataframe\nval with_countFalse = grouped_df.withColumn(\"countfalse\", when($\"failed\" === \"false\", $\"count\").otherwise(lit(0)))\nwith_countFalse.groupBy(\"card_scheme\").agg(when($\"failed\" === \"false\", $\"count\").otherwise(lit(0)))) / sum($\"count\")).show()\n"], ["# Open main file\nwith open(\"/sh/awlog/Logs_new_1.txt\") as f_in:\n\n    # Read in text\n    file_str = f_in.read()\n\n    # Iterate 1 - 10\n    for i in range(1, 11):\n\n        # Open new file to write to with number\n        with open(\"/sh/logs/logs%d.txt\" % i, mode=\"w\") as f_out:\n            f_out.write(file_str)\n"], [], ["import shutil\n\nfor i in range(10):\n    shutil.copyfile(\n        \"/sh/awlog/Logs_new_1.txt\",\n        \"/sh/logs/logs{}.txt\".format(i+1)\n    )\n"], ["import shutil\n\nfor i in range(10):\n    shutil.copyfile('/path/to/source/file','/destination/path/logs'+str(i+1)+'.txt')\n", "import shutil\n\nfor i in range(1,11):\n    shutil.copyfile('/path/to/source/file','/destination/path/logs{}.txt'.format(i))\n"], ["templ = 'cp /sh/ec_rawlog/Logs_new_{0}.txt /sh/logs/logs{0}.txt'\nfor num in range(1,11):\n    print(templ.format(num))\n", "cp /sh/ec_rawlog/Logs_new_1.txt /sh/logs/logs1.txt\ncp /sh/ec_rawlog/Logs_new_2.txt /sh/logs/logs2.txt\ncp /sh/ec_rawlog/Logs_new_3.txt /sh/logs/logs3.txt\ncp /sh/ec_rawlog/Logs_new_4.txt /sh/logs/logs4.txt\ncp /sh/ec_rawlog/Logs_new_5.txt /sh/logs/logs5.txt\ncp /sh/ec_rawlog/Logs_new_6.txt /sh/logs/logs6.txt\ncp /sh/ec_rawlog/Logs_new_7.txt /sh/logs/logs7.txt\ncp /sh/ec_rawlog/Logs_new_8.txt /sh/logs/logs8.txt\ncp /sh/ec_rawlog/Logs_new_9.txt /sh/logs/logs9.txt\ncp /sh/ec_rawlog/Logs_new_10.txt /sh/logs/logs10.txt\n"], ["i = 1\nwhile i < 11:\n    string = 'cp /sh/ec_rawlog/Logs_new_1.txt /sh/logs/logs%s.txt' % i\n    a = RunCmd()\n    a.cmd_run(string)\n    i += 1\n"], ["{k: [e for e in v if val not in e] for k, v in mydict.items() if any([val not in e for e in v])}\n", "Out[1]: {\n    'Getting links from: https://www.bar.com/': \n    [\n        '+-BROKEN- http://www.broken.com/'\n    ],\n    'Getting links from: https://www.foo.com/': \n    [\n        '+-BROKEN- http://www.broken.com/',\n        '+---OK--- http://www.set.com/',\n        '+---OK--- http://www.one.com/'\n    ]\n}\n"], ["for key, value in mydict.items():\n    if val in value:\n        mydict.pop(key)\n", "    mydict = {'Getting links from: https://www.bar.com/': ['+---OK--- http://www.this.com/',\n  '+---OK--- http://www.is.com/',\n  '+-BROKEN- http://www.broken.com/'],\n 'Getting links from: https://www.boo.com/': ['+---OK--- http://www.this.com/',\n  '+---OK--- http://www.is.com/'],\n 'Getting links from: https://www.foo.com/': ['+---OK--- http://www.this.com/',\n  '+---OK--- http://www.is.com/',\n  '+-BROKEN- http://www.broken.com/',\n  '+---OK--- http://www.set.com/',\n  '+---OK--- http://www.one.com/']}\n"], ["val = \"is\"\n\nnew_dict = dict()\nfor k, v in mydict.items():\n    values = [i for i in v if val not in i]\n    if values: new_dict[k] = values\n\nprint(new_dict)\n", "{'Getting links from: https://www.foo.com/': ['+-BROKEN- http://www.broken.com/', '+---OK--- http://www.set.com/', '+---OK--- http://www.one.com/'], 'Getting links from: https://www.bar.com/': ['+-BROKEN- http://www.broken.com/']}\n"], ["res = {k: [x for x in v if 'is' not in x] for k, v in mydict.items()}\n\n# {'Getting links from: https://www.foo.com/': ['+-BROKEN- http://www.broken.com/',\n#                                               '+---OK--- http://www.set.com/',\n#                                               '+---OK--- http://www.one.com/'],\n#  'Getting links from: https://www.bar.com/': ['+-BROKEN- http://www.broken.com/'],\n#  'Getting links from: https://www.boo.com/': []}\n", "res = {k: v for k, v in res.items() if v}\n"], ["import re\n\nval = 'is'\n\n# step 1 - remove line having is\nmydict = {k:[re.sub(r'.*is*.', '', x) for x in v] for k,v in mydict.items()}\n\n# filtering out keys if there is no value - if needed\nmydict = {k:v for k,v in mydict.items() if len(v) > 0}\n\nprint(mydict)\n\n{'Getting links from: https://www.foo.com/': ['com/',\n  'com/',\n  '+-BROKEN- http://www.broken.com/',\n  '+---OK--- http://www.set.com/',\n  '+---OK--- http://www.one.com/'],\n 'Getting links from: https://www.bar.com/': ['com/',\n  'com/',\n  '+-BROKEN- http://www.broken.com/'],\n 'Getting links from: https://www.boo.com/': ['com/', 'com/']}\n"], [], ["List_of_all = [\n        ['3', '0', '6', '5', '0', '8', '4', '0', '0'],\n        ['5', '2', '0', '0', '0', '0', '0', '0', '0'],\n        ['0', '8', '7', '0', '0', '0', '0', '3', '1'],\n        ['0', '0', '3', '0', '1', '0', '0', '8', '0'],\n        ['9', '0', '0', '8', '6', '3', '0', '0', '5'],\n        ['0', '5', '0', '0', '9', '0', '6', '0', '0'],\n        ['1', '3', '0', '0', '0', '0', '2', '5', '0'],\n        ['0', '0', '0', '0', '0', '0', '0', '7', '4'],\n        ['0', '0', '5', '2', '0', '6', '3', '0', '0']\n        ]\nvertical=[]\nfor i in range(9):\n    print([x[i] for x in List_of_all])#for visual appeal only\n    vertical.append([x[i] for x in List_of_all])\nprint()\n\nfor line_slicer in range(0,9,3):\n    count=0\n    for line in vertical:\n        count+=1\n        print(line[line_slicer:line_slicer+3])\n        if count%3==0:\n            print()\n", "['3', '5', '0', '0', '9', '0', '1', '0', '0']\n['0', '2', '8', '0', '0', '5', '3', '0', '0']\n['6', '0', '7', '3', '0', '0', '0', '0', '5']\n['5', '0', '0', '0', '8', '0', '0', '0', '2']\n['0', '0', '0', '1', '6', '9', '0', '0', '0']\n['8', '0', '0', '0', '3', '0', '0', '0', '6']\n['4', '0', '0', '0', '0', '6', '2', '0', '3']\n['0', '0', '3', '8', '0', '0', '5', '7', '0']\n['0', '0', '1', '0', '5', '0', '0', '4', '0']\n\n['3', '5', '0']\n['0', '2', '8']\n['6', '0', '7']\n\n['5', '0', '0']\n['0', '0', '0']\n['8', '0', '0']\n\n['4', '0', '0']\n['0', '0', '3']\n['0', '0', '1']\n\n['0', '9', '0']\n['0', '0', '5']\n['3', '0', '0']\n\n['0', '8', '0']\n['1', '6', '9']\n['0', '3', '0']\n\n['0', '0', '6']\n['8', '0', '0']\n['0', '5', '0']\n\n['1', '0', '0']\n['3', '0', '0']\n['0', '0', '5']\n\n['0', '0', '2']\n['0', '0', '0']\n['0', '0', '6']\n\n['2', '0', '3']\n['5', '7', '0']\n['0', '4', '0']\n"], [">>> import numpy as np\n>>> items = np.array([[1,2,3], [4,5,6], [7,8,9]])\n>>> items\narray([[1, 2, 3],\n       [4, 5, 6],\n       [7, 8, 9]])\n>>> columns = items.T\n>>> columns\narray([[1, 4, 7],\n       [2, 5, 8],\n       [3, 6, 9]])\n", ">>> columns = [items[:, i] for i in range(len(items[0]))]\n>>> columns\n[array([1, 4, 7]), array([2, 5, 8]), array([3, 6, 9])]\n>>>\n", ">>> columns = []\n>>> for j in range(len(items[0])):\n...     column = []\n...     for i in range(len(items)):\n...         column.append(items[i, j])\n...     columns.append(column)\n...\n>>> columns\n[[1, 4, 7], [2, 5, 8], [3, 6, 9]]\n", ">>> [[items[i][j] for i in range(len(items))] for j in range(len(items[0]))]\n[[1, 4, 7], [2, 5, 8], [3, 6, 9]]\n"], ["from collections import defaultdict\n\nList_of_all = [\n        ['3', '0', '6', '5', '0', '8', '4', '0', '0'],\n        ['5', '2', '0', '0', '0', '0', '0', '0', '0'],\n        ['0', '8', '7', '0', '0', '0', '0', '3', '1'],\n        ['0', '0', '3', '0', '1', '0', '0', '8', '0'],\n        ['9', '0', '0', '8', '6', '3', '0', '0', '5'],\n        ['0', '5', '0', '0', '9', '0', '6', '0', '0'],\n        ['1', '3', '0', '0', '0', '0', '2', '5', '0'],\n        ['0', '0', '0', '0', '0', '0', '0', '7', '4'],\n        ['0', '0', '5', '2', '0', '6', '3', '0', '0']\n        ]\n\nif __name__ == '__main__':\n\n    columns = defaultdict(list)\n\n    for row in List_of_all:\n        for j, item in enumerate(row):\n            columns[j].append(item)\n\n    print(columns[0]) # ['3', '5', '0', '0', '9', '0', '1', '0', '0']\n"], [">>> list(map(list, zip(*List_of_all)))\n[['3', '5', '0', '0', '9', '0', '1', '0', '0'], \n ['0', '2', '8', '0', '0', '5', '3', '0', '0'], \n ['6', '0', '7', '3', '0', '0', '0', '0', '5'], \n ['5', '0', '0', '0', '8', '0', '0', '0', '2'], \n ['0', '0', '0', '1', '6', '9', '0', '0', '0'], \n ['8', '0', '0', '0', '3', '0', '0', '0', '6'], \n ['4', '0', '0', '0', '0', '6', '2', '0', '3'], \n ['0', '0', '3', '8', '0', '0', '5', '7', '0'], \n ['0', '0', '1', '0', '5', '0', '0', '4', '0']]\n"], ["vertical=[i[0] for i in List_of_all]\n", "vertical= ['3','5','0','0','9','0','1','0','0']\n"], ["import numpy as np\nvertical = np.diag(List_of_all)\n\nprint(vertical)\narray(['3', '2', '7', '0', '6', '0', '2', '7', '0'], dtype='<U1')\n\n# to put each element in a list do this\nvertical = [[x] for x in np.diag(List_of_all)]\n\nprint(vertical)\n[['3'], ['2'], ['7'], ['0'], ['6'], ['0'], ['2'], ['7'], ['0']]\n"], ["my_nested_dict = {\"global\": {\"peers\": {\"15.1.1.1\": {\"remote_id\": \"15.1.1.1\", \"address_family\": {\"ipv4\": {\"sent_prefixes\": 1, \"received_prefixes\": 4, \"accepted_prefixes\": 4}}, \"remote_as\": 65002, \"uptime\": 13002, \"is_enabled\": True, \"is_up\": True, \"description\": \"== R3 BGP Neighbor ==\", \"local_as\": 65002}}, \"router_id\": \"15.1.1.2\"}}\n_list = ['peers', 'remote_id', 'remote_as', 'uptime']\n\ndef _join(a, b):\n  return '{}:{}\\n'.format(a, _keys(b, True) if isinstance(b, dict) else b)\n\ndef _keys(_d, flag = False):\n  return ''.join(_join(a, b) if a in _list else (a+'\\n' if flag else '')+_keys(b) \n          for a, b in _d.items())\n\nprint(get_keys(my_nested_dict))\n", "peers:15.1.1.1\nremote_id:15.1.1.1\nremote_as:65002\nuptime:13002\n"], [], ["sentence = \"Mom knock the door\"\n\n\ndef is_same_letter_at_begin_end(word):\n    return word and word[0].lower() == word[-1].lower()\n\n\ntarget_words = list(filter(is_same_letter_at_begin_end, sentence.split()))\nprint(target_words)\nprint(len(target_words))\n"], ["my_nested_dict = {\"global\": {\"peers\": {\"15.1.1.1\": {\"remote_id\": \"15.1.1.1\", \"address_family\": {\"ipv4\": {\"sent_prefixes\": 1, \"received_prefixes\": 4, \"accepted_prefixes\": 4}}, \"remote_as\": 65002, \"uptime\": 13002, \"is_enabled\": True, \"is_up\": True, \"description\": \"== R3 BGP Neighbor ==\", \"local_as\": 65002}}, \"router_id\": \"15.1.1.2\"}}\n\nfiltered_list = ['peers', 'remote_id', 'remote_as', 'uptime']\n\ndef seek_keys(d, key_list):\n    for k, v in d.items():\n        if k in key_list:\n            if isinstance(v, dict):\n                print(k + \": \" + list(v.keys())[0])\n            else:\n                print(k + \": \" + str(v))\n        if isinstance(v, dict):\n            seek_keys(v, key_list)\n\nseek_keys(my_nested_dict, filtered_list)\n"], ["# in-place removal of duplicate lines, while remaining order\nimport os\nfrom collections import OrderedDict\nfrom pathlib import Path\n\nfilepath = Path(\"./duplicates.txt\")\n\nwith filepath.open() as _file:\n    no_duplicates = OrderedDict.fromkeys(line.rstrip('\\n') for line in _file)\n\nfilepath.write_text(\"\\n\".join(no_duplicates))\n"], ["import os\nseen_lines = []\n\nwith open('input.txt','r') as infile:\n    lines=infile.readlines()\n    for line in lines:\n        line_stripped=line.strip()\n        if line_stripped not in seen_lines:\n            seen_lines.append(line_stripped)\n\nwith open('input.txt','w') as outfile:\n    for line in seen_lines:\n        outfile.write(line)\n        if line != seen_lines[-1]:\n            outfile.write(os.linesep)\n", "I really love christmas\nKeep the change ya filthy animal\nPizza is my fav food\nDid someone say peanut butter?\n"], ["from tempfile import NamedTemporaryFile\nfrom shutil import move\n\ninput_file = \"input.txt\"\noutput_file = \"input.txt\"\n\nseen_lines = set()\n\nwith NamedTemporaryFile('w', delete=False) as output, open(input_file) as input:\n    for line in open(input_file, \"r\"):\n        sline = line.rstrip('\\n')\n        if sline not in seen_lines:\n            output.write(line)\n            seen_lines.add(sline)\nmove(output.name, output_file)\n", "input_file = \"input.txt\"\noutput_file = \"input.txt\"\n\nwith open(input_file) as input:\n    unique = set(line.rstrip('\\n') for line in input)\nwith open(output_file, 'w') as output:\n    for line in unique:\n        output.write(line)\n        output.write('\\n')\n", "with open(input_file) as input:\n    unique = set(line.rstrip('\\n') for line in input.readlines())\nwith open(output_file, 'w') as output:\n    output.write('\\n'.join(unique))\n"], ["input_file = \"input.txt\"\noutput_file = \"input.txt\"\nseen_lines = []\noutfile = open(output_file, \"w\")\ninfile = open(input_file, \"r\")\nl = [i.rstrip() for i in infile.readlines()]\noutfile.write('\\n'.join(sorted(set(l,key=l.index))))\noutfile.close()\n"], ["with open('FileName.txt', 'r+') as i:\n    AllLines = i.readlines()\n    for line in AllLines:\n        #write to file\n"], ["with open('input.txt', 'r') as f:\n    lines = f.readlines()\n\nseen_lines = set()\nwith open('input.txt', 'w') as f:\n    for line in lines:\n        if line not in seen_lines:\n            seen_lines.add(line)\n            f.write(line)\n"], ["sentence = \"Mom knock the door, mom\"\nall_words_count = len([ word for word in sentence.split() if word[0].lower() == word[-1].lower() ])\nuniq_words_count = len({word.lower() for word in sentence.split() if word[0].lower() == word[-1].lower()})\n\nprint(all_words_count) #=> 3\nprint(uniq_words_count) #=> 2\n"], ["lst = sentence.split()\nnum_words = 0\nfor i in lst:\n    low = i.lower()\n    if low[0] == low[len(low)-1]:\n        num_words += 1\nreturn num_words\n"], ["list = sentence.split(\" \")\ncount = 0\nfor word in list:\n    lc_word = word.lower()\n    if lc_word[0] == lc_word[-1]:\n        count +=1\n"], ["words_list = sentence.split()\nnew_words_list = []\nfor word in words_list:\n    if word[0] == word[-1]:\n        new_words_list.append(word)\n\nprint('Number of words that starts and ends with same letter - {}'.format(len(new_words_list)))\n", "new_words_list = [word for word in words_list if word[0] == word[-1]]\n"], ["if word[0] == word[-1]:\n", "word = word.lower()\n"], [">>> x = [1,2,3,4]\n>>> x.append('hello')\n>>> x \n[1, 2, 3, 4, 'hello']\n", ">>> x.insert(len(x),5)\n>>> x\n[1, 2, 3, 4, 'hello', 5]\n"], [], ["x = [1, 2, 3]\nx.insert(len(x),'hello')\nx\n   [1, 2, 3, 'hello']\n"], [], ["help(list.insert)\n#Help on method_descriptor:\n#\n#insert(self, index, object, /)\n#    Insert object before index.\n"], ["for h in ans_kin:\n    links = \"\"\n    link = h.find('a')\n    if link:\n        for l in link:\n            links = h.text + link.get('href')\n    else:\n        links = h.text\n\n    answer_kin.append(links)\n"], ["x = 2\nfor i in range(5):\n   y = x**2\n   print(y)\n   x += 1 \n"], ["def squared(start, upper):\n    return [n**2 for n in range(start, upper)]\n\nprint squared(2, 10)\n", "def squared(x):\n    return x**2\n\nprint squared(10)\n"], [], ["x = 2\n[(x+i) ** 2 for i in range(5)]\n[4, 9, 16, 25, 36]\n"], ["x = 2\n\ndef y(x):\n    return x**2\n\nfor i in range(5):\n    print(y(x))\n    x += 1\n", "y = lambda x: x**2\n"], ["with open(\"input\") as f:\n    data_file = f.read()\nf.close()\ndata = data_file.splitlines()\nf = open('output', 'w')\nfor line in data:\n    if line.strip() in b.keys():\n        line = line.strip() + '\\n' + b[line.strip()].rstrip() + '\\n'\n        f.writelines(line)\n    else:\n        f.writelines(line + '\\n')\nf.close()\n"], ["with open('file', 'r') as f:\n    txt = f.readlines()\n\nwith open('file', 'w') as f:\n    for line in txt:\n        f.write(line)\n        if line.strip() in block:\n            f.write(block[line.strip()])\n", "with open('source_file', 'r') as fs, open(target_file,'w') as ft:\n    for line in fs:\n        ft.write(line)\n        if line.strip() in block:\n            ft.write(block[line.strip()])\n", "with open(file, 'r') as f:\n    txt = f.readlines()\n\nwith open(file, 'w') as f:\n    N = 3\n    i = -1\n    for line in txt:\n        f.write(line)\n        if i == N:\n            f.write(block[key])\n            i = -1\n        if line.strip()in block:\n            key = line.strip()\n            i = 0\n        if i >= 0:\n            i += 1\n", "with open('source_file', 'r') as fs, open(target_file,'w') as ft:\n    N = 3\n    i = -1\n    for line in fs:\n        ft.write(line)\n        if i == N:\n            ft.write(block[key])\n            i = -1\n        if line.strip()in block:\n            key = line.strip()\n            i = 0\n        if i >= 0:\n            i += 1      \n"], ["a = [\"apple\", \"apple\", \"banana\", \"orange\", \"orange\", \"banana\", \"banana\", \"apple\", \"banana\"]\nresult =sorted(list(set(a)))\n", "['apple', 'banana', 'orange']\n"], ["from itertools import groupby\n\nL = [\"apple\", \"apple\", \"banana\", \"orange\", \"orange\", \"banana\", \"banana\", \"apple\", \"banana\"] # Input list\n\ncounts = [(i, len(list(c))) for i,c in groupby(sorted(L))]      # Create value-count pairs as list of tuples \ncounts =  sorted(counts, key = lambda i: i[1] , reverse=True)    #sort value-count list\nout = [key for key, value in counts]   #extract key\nprint (out)\n"], ["a = [\"apple\", \"apple\", \"banana\", \"orange\", \"orange\", \"banana\", \"banana\", \"apple\", \"banana\"]\nsorted(set(a), key = lambda x: a.count(x), reverse = True) #reverse for descending\n", "['banana', 'apple', 'orange']\n"], ["from collections import Counter\n\nlst = [\"apple\", \"apple\", \"banana\", \"orange\", \"orange\", \"banana\", \"banana\", \"apple\", \"banana\"]\n\nres = [k for k, _ in Counter(lst).most_common()]\n# ['banana', 'apple', 'orange']\n"], ["from collections import Counter\n\ndata = [\"apple\", \"apple\", \"banana\", \"orange\", \"orange\", \"banana\", \"banana\", \"apple\", \"banana\"]\n\ncounts = Counter(data)\nresult = sorted(counts, key=counts.get, reverse=True)\nprint(result)\n", "['banana', 'apple', 'orange']\n"], ["divs = soup.find_all('div')\nfor div in divs:\n  print(div.contents[0]) # Text of AAA\n  link = div.find('a')\n  if link:\n    print(link.text) # Display text of URL A\n    print(link['href']) # ......AAA/url\n"], ["from bs4 import BeautifulSoup\nhtml=\"\"\"\n<div class=\"AAA\">Text of AAA<a href=\"......AAA/url\">Display text of URL A</a></div>\n<div class=\"BBB\">Text of BBB<a href=\"......BBB/url\">Display text of URL B</a></div>\n<div class=\"CCC\">Text of CCC</div>\n<div class=\"DDD\">Text of DDD</div>\n\"\"\"\nsoup = BeautifulSoup(html, \"lxml\")\nfor div in soup.findAll('div'):\n    print(div.text)\n    try:\n        print(div.find('a').text)\n        print(div.find('a')[\"href\"])\n    except AttributeError:\n        pass\n", "Text of AAADisplay text of URL A\nDisplay text of URL A\n......AAA/url\nText of BBBDisplay text of URL B\nDisplay text of URL B\n......BBB/url\nText of CCC\nText of DDD\n"], ["s = \"\"\"\n<div class=\"AAA\">Text of AAA<a href=\"......AAA/url\">Display text of URL A</a> . \n</div>\n<div class=\"BBB\">Text of BBB<a href=\"......BBB/url\">Display text of URL B</a> . \n</div>\n<div class=\"CCC\">Text of CCC</div>\n<div class=\"DDD\">Text of DDD</div>\n\"\"\"\nfrom bs4 import BeautifulSoup as soup\nfor _text, *_next in map(lambda x:x.contents, soup(s, 'html.parser').find_all('div')):\n  print(_text)\n  if _next:\n    print(_next[0].text)\n    print(_next[0]['href'])\n", "Text of AAA\nDisplay text of URL A\n......AAA/url\nText of BBB\nDisplay text of URL B\n......BBB/url\nText of CCC\nText of DDD\n"], ["data = soup.findAll('div')\nfor div in data:\n    links = div.findAll('a')\n    for a in links:\n        print(a['href'])\n        print(a.text)\n"], [], ["dictionary = {'text-which-matches-a-key': 'value corresponding to the key'}\n\n# Open file and fill a list in which each element is a line.\nf = open('file', 'r')\nlines = f.readlines()\nf.close()\n\n# Empty the file.\nf = open('file', 'w')\nf.close()\n\n# Insert dictionary value at the right place.\nfor index, line in enumerate(lines):\n    '''Remove the newline character '\\n'\n    to the right of the strings in the file.\n    The lines don't match dictionary keys if\n    the dictionary keys don't have newlines\n    appended.'''\n    line = line.rstrip()\n    # Check if any line is a key in the dictionary.\n    if line in dictionary.keys():\n        key_occurs_in_text = True\n        key_occurring_in_text = line\n    ''' 'some important lines' is reached and a key\n    of the dictionary has appeared as a line in the\n    file. Save the list index which corresponds to\n    the line after or before 'some important lines' in\n    the variable insert_index. '''\n    if 'some important lines' == line and key_occurs_in_text:\n        insert_index = index + 1\n        # insert_index = index - 1\n\n'''A line in the file\nis a key in the dictionary.\nInsert the value of the key at the index we saved\nin insert_index.\nPrepend and append newline characters to match\nthe file format.'''\nif key_occurs_in_text:\n    lines.insert(insert_index, '\\n'+dictionary[key_occurring_in_text]+'\\n')\n\n# Write the changed file content to the empty file.\nf = open('file', 'w')\nfor line in lines:\n    f.write(line)\nf.close\n"], ["import fileinput\n\nfile = fileinput.FileInput(your_text_file, inplace=True)\nfor line in file:\n    for key, value in yourdictionary.iteritems():\n        line.replace(key, key + '\\n' + value)\nfile.close()\n"], [], ["list_of_starting_delimiters = ['tag/delimiter 1', 'tag/delimiter 2', 'tag/delimiter n']\nenddel = 'tag/ending_delimiter'\n\nblock ={}\nsection = ''\nwith open(file, 'r') as f:\n    for line in f:\n        if line.strip() == enddel:\n            section = ''\n        if section:\n            block[section] = block.get(section, '') + line\n        if line.strip() in list_of_starting_delimiters:\n            section = line.strip()\n\nprint(block)\n", "{'tag/delimiter 1':\n'\\ntext 1   #extract\\n\\ntext 2   #extract\\n\\n...      #extract\\n\\n...      #extract\\n\\ntext n   #extract\\n\\n', \n'tag/delimiter 2':\n'\\ntext 1   #extract\\n\\ntext 2   #extract\\n\\n...      #extract\\n\\n...      #extract\\n\\ntext n   #extract\\n\\n', \n'tag/delimiter n':\n'\\ntext 1   #extract\\n\\ntext 2   #extract\\n\\n...      #extract\\n\\n...      #extract\\n\\ntext n   #extract\\n\\n'}                            \n"], ["def insert_something(element, value, appendix):\n    index_after = element.find(value) + len(value)\n    return element[:index_after] + appendix + element[index_after:]\n", "new_list = [insert_something(item, '\"value1', to_place) for item in mylist]\n", "element = [element1, element2, element3]\ns = 'something_to_append'\nfor idx, u in enumerate(element):\n    if 'object1=\"value\"' in u.split():\n        u = u[:-1] + s + '\"'\n        element[idx] = u\n"], ["mylist = [element1, element2, element3, ...... ,elementn]\nto_place = \"something_to_append\"\nnewlist = [elem.replace(\"value1\",\"value1\"+to_place) for elem in mylist]\n"], ["import shlex\nfrom collections import OrderedDict\n\ndef f(text, **kwargs):\n    split = shlex.split(text)\n    d = OrderedDict(zip(split[::3], split[2::3]))\n    d.update((k, d[k] + v) for k, v in kwargs.items() if k in d)\n    return ' '.join('{} = \"{}\"'.format(k, v) for k, v in d.items())\n", "element1 = 'object1 = \"value1\" object2 = \"value2\" object3 = \"value3\"'\nupdated_string = f(element1, object1='append here')\n# 'object1 = \"value1append here\" object2 = \"value2\" object3 = \"value3\"'\n"], ["import re\n\ndef append_to(in_value, value_to_search, value_to_append):\n    value_to_search = re.escape(value_to_search)\n    return re.sub(\n        '\"({})\"'.format(value_to_search),\n        '\"\\\\1{}\"'.format(value_to_append),\n        in_value,\n    )\n\nmy_list = [append_to(item, 'value3', 'something_to_append') for item in my_list]\n"], ["def f(x, y):\n    return x[:17] + y + x[17:]\n", ">>> from pprint import pprint\n>>> pprint(mylist)\n['object1 = \"value1\" object2 = \"value2\" object3 = \"value3\"',\n 'object1 = \"value1\" object2 = \"value2\" object3 = \"value3\"',\n 'object1 = \"value1\" object2 = \"value2\" object3 = \"value3\"']\n>>> to_place = 'something_to_append'\n>>> new_list = [f(x, to_place) for x in mylist]\n>>> pprint(new_list)\n['object1 = \"value1something_to_append\" object2 = \"value2\" object3 = \"value3\"',\n 'object1 = \"value1something_to_append\" object2 = \"value2\" object3 = \"value3\"',\n 'object1 = \"value1something_to_append\" object2 = \"value2\" object3 = \"value3\"']\n"], ["import re\n\nwith open(file, 'r') as f:\n    txt = f.read()\n\nlosd = '|'.join(list_of_starting_delimiters)\nenddel = 'attribute_end'\nblock = re.findall('(?:' + losd + r')([\\s\\S]*?)' + enddel, txt)\n"], ["import re\npattern = re.compile(r\"(^tag\\/delimiter) (.{0,3})\\n\\n((^[\\w\\d #\\.]*$\\n)+)^(tag\\/ending_delimiter)\", re.M)\n", " for i in pattern.finditer(<target_text>):\n    #do something with each match\n\n pattern.findAll(<target_text>) - returns a list of strings of all matches\n"], ["block = []\nfound = False\nlist_of_starting_delimiters = ['tag/delimiter']\nattribute_end = 'tag/ending_delimiter'\ncurr = []\n\nfor elem in list_of_starting_delimiters:\n    for line in data_file:\n        if found:\n            curr.append(line)\n            if line.strip().startswith(attribute_end):\n                found = False\n                block.append(\"\\n\".join(curr))            # Add merged list to final list\n                curr = []                                # Zero out current list\n        else: \n            if line.strip().startswith(elem):            # If line starts with start delimiter\n                found = True\n                curr.append(line.strip())                # Append line to current list \n\nif len(curr) > 0:      # If there are still lines in the current list\n    block.append(curr) # Add them to the final list\n"], [], ["mylist = []\ntest = ['path', 'name', 'user1', 'orig']\nfor x in test:\n    if 'user' in x:\n        x = 'user'  \n        mylist.append(x)\n    else:\n        mylist.append(x)\nmylist\n"], ["`mylist = 'user'`\n", "[i if 'user' not in i else 'user' for i in l ]\n['path', 'name', 'user', 'orig']\n"], ["mylist = []\ntest = ['path', 'name', 'user1', 'orig']\nfor i in test:\n     if 'user' in i:\n          mylist.append('user') # or i[:-1]\n     else:\n          mylist.append(i)\n\nprint(mylist)\n"], ["test = ['path', 'name', 'user1', 'orig']\n\nmylist = ['user' if 'user' in x else x for x in test]\n# ['path', 'name', 'user', 'orig']\n"], [">>> mylist = []\n>>> test = ['path', 'name', 'user1', 'orig']\n>>> for i in test:\n...      if 'user' in i:\n...           mylist.append(i[:-1])\n...      else:\n...           mylist.append(i)\n...\n>>> mylist\n['path', 'name', 'user', 'orig']\n"], ["\\[\\s*(?P<key>\\w+)+\\s*]\\s*(?P<value>[^[]*\\s*)\n", "import re\ns = '[aaa   ] some text here [bbbb3 ] some other text here [cc    ] more text'\n\narr = re.findall(r'\\[\\s*(?P<key>\\w+)+\\s*]\\s*(?P<value>[^[]*\\s*)', s)\nprint(arr)\n", "[('aaa', 'some text here '), ('bbbb3', 'some other text here '), ('cc', 'more text')]\n"], ["import re\nmatches = re.findall(r'\\[(.*?)\\](.*?)(?=\\[|$)', text)\n\ndf = (pd.DataFrame(matches, columns=['Key', 'Value'])\n        .apply(lambda x: x.str.strip()))\n", "df\n     Key                 Value\n0    aaa        some text here\n1  bbbb3  some other text here\n2     cc             more text\n", "df = (pd.DataFrame(matches, columns=['Key', 'Value'])\n        .apply(lambda x: x.str.strip())\n        .set_index('Key')\n        .transpose())\n\nKey               aaa                 bbbb3         cc\nValue  some text here  some other text here  more text\n", "\\[      # Opening square brace \n(.*?)   # First capture group\n\\]      # Closing brace\n(.*?)   # Second capture group\n(?=     # Look-ahead \n   \\[   # Next brace,\n   |    # Or,\n   $    # EOL\n)\n"], ["import re\n\nmystr = \"[aaa   ] some text here [bbbb3 ] some other text here [cc    ] more text\"\n\na = dict(re.findall(r\"\\[([A-Za-z0-9_\\s]+)\\]([A-Za-z0-9_\\s]+(?=\\[|$))\", mystr))\n\nfor key, value in a.items():\n    print key, value\n\n# OUTPUT: \n# aaa     some text here \n# cc      more text\n# bbbb3   some other text here \n"], ["s = \"[aaa   ] some text here [bbbb3 ] some other text here [cc    ] more text\"    \n\nparts = s.split(\"[\")  # parts looks like: ['', \n                      #                    'aaa   ] some text here ',\n                      #                    'bbbb3 ] some other text here ', \n                      #                    'cc    ] more text'] \nd = {}\n# split parts further\nfor p in parts:\n    if p.strip():\n        key,value = p.split(\"]\")            # split each part at ] and strip spaces\n        d[key.strip()] = value.strip()      # put into dict\n\n# Output:\nform = \"{:10} {}\"\nprint( form.format(\"Key\",\"Value\"))\n\nfor i in d.items():\n      print(form.format(*i))\n", "Key        Value\ncc         more text\naaa        some text here\nbbbb3      some other text here\n", "d = {hh[0].strip():hh[1].strip() for hh in (k.split(\"]\") for k in s.split(\"[\") if k)}  \n"], ["import re\n\ns = '[aaa   ] some text here [bbbb3 ] some other text here [cc    ] more text'\n\npattern = re.compile('\\[(\\S+?)\\s+\\]([\\s\\w]+)')\nresult = [(match.group(1).strip(), match.group(2).strip()) for match in pattern.finditer(s)]\nprint(result)\n", "[('aaa', 'some text here'), ('bbbb3', 'some other text here'), ('cc', 'more text')]\n"], ["import re\n\ntext = '[aaa   ] some text here [bbbb3 ] some other text here [cc    ] more text'\n\n# split text on \"[\" or \"]\" and slice off the first empty list item\nitems = re.split(r'[\\[\\]]', text)[1:]\n\n# loop over consecutive pairs in the list to create a dict\nd = {items[i].strip(): items[i+1].strip() for i in range(0, len(items) - 1, 2)}\n\nprint(d)\n# {'aaa': 'some text here', 'bbbb3': 'some other text here', 'cc': 'more text'}\n"], ["df['List'] = df['List'].map(pd.Series(df['Name'].values, df['Numb']))\n"], ["import pandas as pd\n\ndf = pd.DataFrame({\n        'List': [1,1,2,4,3],\n        'Numb': [1,2,3,4,5],\n        'Name':['one','two','three','four','five']\n        })\n\ndfnew = pd.merge(df, df, how='inner', left_on=['List'], right_on=['Numb'])\ndfnew = dfnew.rename({'List_x': 'List', 'Numb_x': 'Numb', 'Name_y': 'Name'}, axis='columns')\ndfnew = dfnew[['List','Numb','Name']]\ndfnew['List'] = dfnew['Name']\n\nprint (dfnew)\n#    List  Numb   Name\n#0    one     1    one\n#1    one     2    one\n#2    two     3    two\n#3   four     4   four\n#4  three     5  three\n"], ["new_dict = {person[\"name\"]: {k: v for k, v in person.items() if k != \"name\"} for person in list_of_dicts}\n", "new_dict[\"Robert\"][\"status\"]\n# 1\n", "{person[\"name\"]: person for person in list_of_dicts}\n", "new_dict = {(person[\"name\"], person[\"id\"]): person[\"status\"] for person in list_of_dicts}\n", "new_dict[\"Robert\", 3]\n# 1\n"], ["df['List'] = df.set_index('Numb')['Name'].reindex(df['List']).values\n\nprint(df)\n\n    List  Numb   Name\n0    one     1    one\n1    one     2    two\n2    two     3  three\n3   four     4   four\n4  three     5   five\n"], ["df.rename(columns={\"List\": \"List_numb\"}).join(df.set_index(\"Numb\")[\"Name\"].to_frame(\"List\"), on=\"List_numb\")[[\"List\", \"Numb\", \"Name\"]]\n"], ["df['List'] = df['List'].map(df.set_index('Numb')['Name'])\n\n\n    List    Numb    Name\n0   one     1   one\n1   one     2   two\n2   two     3   three\n3   four    4   four\n4   three   5   five\n"], ["import pandas as pd\n\ndf = pd.DataFrame({'List': [1, 1, 2, 4, 3], 'Numb': [1, 2, 3, 4, 5], 'Name': ['one', 'two', 'three', 'four', 'five']})\n\nd = dict(zip(df['Numb'], df['Name']))\ndf = df.replace({'List': d})\n"], ["import re\n\nvariable = \";CREATEDBY~string~1~~72~0~0~0~~~0;CREATEDBYNAME~string~1~~800~0~0~0~~~1;CREATEDBYYOMINAME~string~1~~800~0~0~0~~~2;CREATEDON~date~1~yyyy-MM-dd HH:mm:ss.SSS~26~0~0~0~~~3;CREATEDONUTC~date~1~yyyy-MM-dd HH:mm:ss.SSS~26~0~0~0~~~4\"\npattern = re.compile (\";(.+?)~\")\nmatches = re.findall ( pattern, variable )\nprint matches\n"], ["list_of_dicts_modified = {'name':['Alice', 'Bob', 'Robert'],'id':[1, 2, 3], 'status': [0, 0, 1]}\nindex = list_of_dicts_modified['name'].index(input().strip())\nprint('Name: {0} ID: {1} Status: {2}'.format(list_of_dicts_modified['name'][index], list_of_dicts_modified['id'][index], list_of_dicts_modified['status'][index]))\n", "C:\\Users\\Documents>py test.py\nAlice\nName: Alice ID: 1 Status: 0\n"], [">>> [d['status'] for d in list_of_dicts if d['name']=='Robert']\n[1]\n"], ["import pandas as pd\nlist_of_dicts = [{'id':1, 'name':'Alice', 'status':0},{'id':2, 'name':'Bob', 'status':0},{'id':3, 'name':'Robert', 'status':1}]\n\na = pd.DataFrame(list_of_dicts)\na.loc[a['name'] == 'Robert']\n"], ["for iteration, elements in enumerate(list_of_dicts):\n    if elements['name'] == \"Robert\":\n        print \"Elements id: \", elements['id']\n        break\nprint \"Iterations: \", iteration\n\n# OUTPUT: Elements id: 3, Iterations: 1\n"], ["variable = \";CREATEDBY~string~1~~72~0~0~0~~~0;CREATEDBYNAME~string~1~~800~0~0~0~~~1;CREATEDBYYOMINAME~string~1~~800~0~0~0~~~2;CREATEDON~date~1~yyyy-MM-dd HH:mm:ss.SSS~26~0~0~0~~~3;CREATEDONUTC~date~1~yyyy-MM-dd HH:mm:ss.SSS~26~0~0~0~~~4\"\nresult = re.findall(r';(\\w+)~', variable)\nprint(result)\n\n['CREATEDBY', 'CREATEDBYNAME', 'CREATEDBYYOMINAME', 'CREATEDON', 'CREATEDONUTC']\n"], [">>> import re\n>>> re.findall(r'(?<=;).*?(?=~)', variable)\n['CREATEDBY', 'CREATEDBYNAME', 'CREATEDBYYOMINAME', 'CREATEDON', 'CREATEDONUTC']\n"], ["variable=\";CREATEDBY~string~1~~72~0~0~0~~~0;CREATEDBYNAME~string~1~~800~0~0~0~~~1;CREATEDBYYOMINAME~string~1~~800~0~0~0~~~2;CREATEDON~date~1~yyyy-MM-dd HH:mm:ss.SSS~26~0~0~0~~~3;CREATEDONUTC~date~1~yyyy-MM-dd HH:mm:ss.SSS~26~0~0~0~~~4\"\nresult = [item[:item.find('~')]  for item in  variable.split(';')]\n\nprint(result)\n"], ["variable=\";CREATEDBY~string~1~~72~0~0~0~~~0;CREATEDBYNAME~string~1~~800~0~0~0~~~1;CREATEDBYYOMINAME~string~1~~800~0~0~0~~~2;CREATEDON~date~1~yyyy-MM-dd HH:mm:ss.SSS~26~0~0~0~~~3;CREATEDONUTC~date~1~yyyy-MM-dd HH:mm:ss.SSS~26~0~0~0~~~4\"\n\nfor i in variable.strip(\";\").split(\";\"):\n    print(i.split(\"~\", 1)[0])\n#or\nprint([i.split(\"~\", 1)[0] for i in variable.strip(\";\").split(\";\")])\n", "CREATEDBY\nCREATEDBYNAME\nCREATEDBYYOMINAME\nCREATEDON\nCREATEDONUTC\n\n['CREATEDBY', 'CREATEDBYNAME', 'CREATEDBYYOMINAME', 'CREATEDON', 'CREATEDONUTC']\n"], ["# python 3.6+\ngrade_table = {\n    96.5: 5.83,\n    ...\n    64.5: 2.5,\n}\n\n# pre-3.6\nfrom collections import OrderedDict\ngrade_table = OrderedDict((  # this is a tuple of tuples\n    (96.5, 5.83),\n    ...\n    (64.5, 2.5),\n))\n\ndef fn(student_grade):\n    for grade, value in grade_table.iteritems():\n        if student_grade >= grade:\n            return value\n\n    return 0  # default\n"], ["df['row3'] = df.row1\ndf.loc[df.row3 == 0, 'row3'] = df.row2\n", "|   | row1 | row2 | row3 |\n|---|------|------|------|\n| 0 | 0    | 500  | 500  |\n| 1 | 1400 | -1   | 1400 |\n| 2 | 1330 | -1   | 1400 |\n| 3 | 0    | 900  | 900  |\n| 4 | 500  | -1   | 500  |\n"], [">>> df['row3'] = np.where(df['row2'] == -1, df['row1'], df['row2'])                                                    \n>>> df                                                                                                                 \n   row1  row2  row3\n0     0   500   500\n1  1400    -1  1400\n2  1330    -1  1330\n3     0   900   900\n4   500    -1   500\n", ">>> df['row3'] = np.where(df['row1'], df['row1'], df['row2'])                                                          \n>>> df                                                                                                                 \n   row1  row2  row3\n0     0   500   500\n1  1400    -1  1400\n2  1330    -1  1330\n3     0   900   900\n4   500    -1   500\n"], ["df.replace(-1,0).sum(1)\nOut[338]: \n0     500\n1    1400\n2    1330\n3     900\n4     500\ndtype: int64\n"], ["df['row3'] = df.clip_lower(0).sum(1)    \ndf\n   row1   row2    row3\n0     0  500.0   500.0\n1  1400    NaN  1400.0\n2  1330    NaN  1330.0\n3     0  900.0   900.0\n4   500    NaN   500.0\n", "df.row2.mask(df.row2.eq(-1)).combine_first(df.row1)\n\n0     500.0\n1    1400.0\n2    1330.0\n3     900.0\n4     500.0\nName: row2, dtype: float64\n", "df.loc[df.row2 == -1, 'row2'] = np.nan\ndf.row2.add(df.row1, fill_value=0)\n# Or,\n# df.row2.mask(df.row2.eq(-1)).add(df.row1, fill_value=0)\n\n0     500.0\n1    1400.0\n2    1330.0\n3     900.0\n4     500.0\ndtype: float64\n"], ["import pandas as pd\n\ndata = [[0, 500],\n        [1400, -1],\n        [1330, -1],\n        [0, 900],\n        [500, -1]]\n\n\ndf = pd.DataFrame(data=data, columns=[\"row1\", \"row2\"])\ndf[\"row3\"] = [r1 if r2 == -1 else r2 for r1, r2 in zip(df.row1, df.row2)]\n\nprint(df)\n", "   row1  row2  row3\n0     0   500   500\n1  1400    -1  1400\n2  1330    -1  1330\n3     0   900   900\n4   500    -1   500\n"], ["import pandas as pd\ndf = pd.DataFrame({\"x\" : x , \"y\" : y})\n"], [">>> xs = np.arange(51)                                                                                                 \n>>> ys = np.exp(xs) \n", ">>> df = pd.DataFrame({'x': xs, 'y': ys})\n>>> df                                                                                                                 \n     x             y\n0    0  1.000000e+00\n1    1  2.718282e+00\n2    2  7.389056e+00\n3    3  2.008554e+01\n...\n", ">>> index = pd.RangeIndex(0, 51, name='x')                                                                             \n>>> exps = pd.Series(data=np.exp(index), index=index, name='y')                                                        \n>>> exps                                                                                                               \nx\n0     1.000000e+00\n1     2.718282e+00\n2     7.389056e+00\n3     2.008554e+01\n...\nName: y, dtype: float64\n", ">>> xs = np.arange(51)                                                                                                 \n>>> ys = np.exp(xs)\n"], ["import numpy as np\nx = np.linspace(0,50)\ny = np.exp(x)\nz = np.concatenate((x.reshape(1,-1),y.reshape(1,-1))).T\nprint(z.shape)\n# (2,50)\n"], ["import pandas as pd\nimport numpy as np\n\nx = np.linspace(0,50)\ny = np.exp(x)\n\ndf = pd.DataFrame({'x': x, 'y': y})\n"], ["df = pd.DataFrame([(i, np.exp(i)) for i in np.linspace(0,50)], columns=['x', 'y'])\n", "x        y\n0  1.000000e+00\n1  2.718282e+00\n2  7.389056e+00\n...\n"], ["import pandas as pd\n\ndf = pd.DataFrame({'x':x, 'y':y})\n"], ["import pandas as pd\nimport numpy as np\n\ndf = pd.DataFrame()\ndf['x'] = np.linspace(0,50)\ndf['y'] = np.exp(df['x'])\n"], ["import timeit\nimport numpy as np\nimport pandas as pd\nimport matplotlib.pyplot as plt\n\nplt.style.use('ggplot')\n\nrep = 5\n\ntimings = dict()\n\nfor n in range(7):\n    print(f'N = 10^{n}')\n\n    N = 10**n\n    setup = f'''import numpy as np\\nthe_list = np.random.random({N})*6+3\\nhi = 9\\nlo = 3\\ndlt = hi - lo\\nmid = (hi + lo) / 2\\ndef return_the_num(l, lst, h):\\n    return [l if abs(l-x) < abs(h-x) else h for x in lst]'''\n\n    fct = 'np.round((the_list - lo)/dlt) * dlt + lo'\n    t = timeit.Timer(fct, setup=setup)\n    timings['SpghttCd_np'] = timings.get('SpghttCd_np', []) + [np.min(t.repeat(repeat=rep, number=1))]\n\n    fct = 'return_the_num(3, the_list, 9)'\n    t = timeit.Timer(fct, setup=setup)\n    timings['Austin'] = timings.get('Austin', []) + [np.min(t.repeat(repeat=rep, number=1))]\n\n    fct = '[(lo, hi)[mid < v] for v in the_list]'\n    t = timeit.Timer(fct, setup=setup)\n    timings['SpghttCd_lc'] = timings.get('SpghttCd_lc', []) + [np.min(t.repeat(repeat=rep, number=1))]\n\n    setup += '\\nround_the_num = lambda list, upper, lower: [upper if x > (upper + lower) / 2 else lower for x in list]'\n    fct = 'round_the_num(the_list, 9, 3)'\n    t = timeit.Timer(fct, setup=setup)\n    timings['Carles Mitjans'] = timings.get('Carles Mitjans', []) + [np.min(t.repeat(repeat=rep, number=1))]\n\n    setup += '\\nupper_lower_bound_list=[3,9]'\n    fct = '[min(upper_lower_bound_list, key=lambda x:abs(x-myNumber)) for myNumber in the_list]'\n    t = timeit.Timer(fct, setup=setup)\n    timings['mad_'] = timings.get('mad_', []) + [np.min(t.repeat(repeat=rep, number=1))]\n\n    setup += '\\ndef return_bound(x, l, h):\\n    low = abs(x - l)\\n    high = abs(x - h)\\n    if low < high:\\n        return l\\n    else:\\n        return h'\n    fct = '[return_bound(x, 3, 9) for x in the_list]'\n    t = timeit.Timer(fct, setup=setup)\n    timings[\"Scratch'N'Purr\"] = timings.get(\"Scratch'N'Purr\", []) + [np.min(t.repeat(repeat=rep, number=1))]\n\n    setup += '\\ndef round_the_list(list, bound_1, bound_2):\\n\\tmid = (bound_1+bound_2)/2\\n\\tfor i in range(len(list)):\\n\\t\\tif list[i] > mid:\\n\\t\\t\\tlist[i] = bound_2\\n\\t\\telse:\\n\\t\\t\\tlist[i] = bound_1'\n    fct = 'round_the_list(the_list, 3, 9)'\n    t = timeit.Timer(fct, setup=setup)\n    timings[\"Abhishek Patel\"] = timings.get(\"Abhishek Patel\", []) + [np.min(t.repeat(repeat=rep, number=1))]\n\n    fct = 'dhi = 9 - the_list\\ndlo = 3 - the_list\\nidx = dhi + dlo < 0\\nthe_list + np.where(idx, dhi, dlo)'\n    t = timeit.Timer(fct, setup=setup)\n    timings[\"SpghttCd_where\"] = timings.get(\"SpghttCd_where\", []) + [np.min(t.repeat(repeat=rep, number=1))]\n\nprint('done')\n\ndf = pd.DataFrame(timings, 10**np.arange(n+1))\nax = df.plot(logx=True, logy=True)\nax.set_xlabel('length of the list')\nax.set_ylabel('seconds to run')\nax.get_lines()[-1].set_c('g')\nplt.legend()\nprint(df)\n"], ["if A and (not C or B):\n    print(A)\n"], ["def __init__(self, **kwargs):\n    self.connection = kwargs.get('connection', SetConnection())\n"], ["import collections\n\ns = \"abbcabb\"\n\ncnt = collections.Counter(s)\n\ns = \"\".join([c for c in s if cnt[c]==1])\n"], ["string = \"abbcabb\"\nresult = []\nfor i in string:\n    if i not in result:\n        result.append(i)\n    else:\n        result.remove(i)\nprint(''.join(result))\n"], [">>>''.join([i for i in s1 if s1.count(i) == 1])\n'bc'\n>>>''.join([i for i in s if s.count(i) == 1])\n'c'\n"], [">>> import re\n>>> pattern = re.compile(r'(.+?)(.+?)\\1')\n>>> pattern.sub('\\g<2>', 'abbcabbabca')\n'bbcbaca'\n", ">>> pattern = re.compile(r'(.+)(.+?)\\1')\n>>> pattern.sub('\\g<2>', 'abbcabbabca')\n'cbc'\n"], ["abbcabb\n", "while True:\n    newS = re.sub(r'(.)(.*?)\\1', r'\\g<2>', s)\n    if newS == s:\n        break\n    s = newS\nprint(newS)\n"], ["    from numpy import interp\n\n    ak = [k for k in gc.keys()]\n    av = [v for v in gc.values()]\n\n    # np.interp needs values from lowest to highest\n    ak.reverse()\n    av.reverse()\n\n    interp(79, ak, av)\n    >>> 4.105\n\n    interp(96, ak, av)\n    >>> 5.78875\n\n    interp(64, ak, av)\n    >>> 2.5\n"], ["condition = (A and B) if C else A\nif condition:\n    print(A)\n"], ["if A and (B if C else True):\n    pass\n"], ["C -> B = not C or B\n", "if A and (not C or B):\n"], ["if A and (not C or B):\n    print(A)\n"], ["def pick(lst, ref, res=None):\n  if res == None: res = []\n  if len(lst) == 0: return res\n  if ref[0] >= lst[0]:\n    res.append(ref[0])\n    lst.pop(0)\n  elif len(ref) == 1 and ref[0] < lst[0]:\n    # res.extend(lst) # if want to append the rest of lst instead of stop the loop\n    # or do whathever is best for you\n    return res\n  else: ref.pop(0)\n  pick(lst, ref, res)\n  return res\n\n\nlist_b = [0.6, 1.7, 3, 3.9]\nlist_bb = [0.5]\nlist_a = [0.6, 0.9, 1.2, 1.5, 2, 2.5, 3, 4, 4.5]\n\nprint(pick(list_a, list_b))\n#=> [0.6, 1.7, 1.7, 1.7, 3, 3, 3]\n\nprint(pick(list_a, list_bb))\n#=> []\n"], [">>> B = [0.6, 1.7, 3, 4.5]\n>>> A = [0.6, 0.9, 1.2, 1.5, 2, 2.5, 3, 4, 4.5]\n>>> import bisect\n>>> [B[bisect.bisect_left(B, a)] for a in A]\n[0.6, 1.7, 1.7, 1.7, 3, 3, 3, 4.5, 4.5]\n", "i, C = 0, []\nfor a in A:\n    while B[i] < a:\n        i += 1\n    C.append(B[i])\n"], ["import numpy as np\n\nB = np.array([0.6, 1.7, 3, 4.5])\nA = [0.6, 0.9, 1.2, 1.5, 2, 2.5, 3, 4, 4.5]\n\nres = B[np.searchsorted(B, A)]\n\narray([ 0.6,  1.7,  1.7,  1.7,  3. ,  3. ,  3. ,  4.5,  4.5])\n"], ["A = [0.6, 0.9, 1.2, 1.5, 2, 2.5, 3, 4, 4.5]\nB = [0.6, 1.7, 3, 4.5]\n\nC = [next(b for b in B if b >= a) for a in A]\n\nprint(C)  # -> [0.6, 1.7, 1.7, 1.7, 3, 3, 3, 4.5, 4.5]\n"], ["B = [0.6, 1.7, 3, 4.5]\nA = [0.6, 0.9, 1.2, 1.5, 2, 2.5, 3, 4, 4.5]\n\ndef first_greater_elem(lst, elem):\n    for item in lst:\n       if item >= elem:\n         return item\n", "C = [first_greater_elem(B,item) for item in A ]\n", "[0.6, 1.7, 1.7, 1.7, 3, 3, 3, 4.5, 4.5]\n", "C = [B[bisect_left(B,item)] for item in A ]\n", "[0.6, 1.7, 1.7, 1.7, 3, 3, 3, 4.5, 4.5]\n"], ["def __init__(self, connection=None, some=None, thing=None, else=None):\n   if isinstance(connection, \"class/type of connection\") :\n       self.connection = connection    \n   else:\n       self.connection = SetConnection()\n", "self.connection = connection if connection else SetConnection()\n"], ["if connection is None: connection = SetConnection()\nself.connection = connection\n"], ["def __init__(self, connection=None, some=None, thing=None, else=None):\n   self.connection = SetConnection() if connection is None else connection\n"], ["def __init__(self, connection=None, some=None, thing=None, else=None):\n    self.connection = connection or SetConnection()\n"], [">>> import bisect\n>>> grade_ranges = [(0, 0), (64.5, 2.5), (68.5, 2.83), (69.5, 3.16), \n...                 (72.5, 3.5), (76.5, 3.83), (79.5, 4.16), (82.5, 4.5), \n...                 (86.5, 4.83), (89.5, 5.16), (92.5, 5.5), (96.5, 5.83)]\n...\n>>> points, grade = zip(*grade_ranges)\n>>> grade[bisect.bisect(points, 96.5)-1]\n5.83\n>>> grade[bisect.bisect(points, 73)-1]\n3.5\n>>> grade[bisect.bisect(points, 30)-1]\n0\n"], ["import numpy as np\nGRADES = np.array(\n    [[96.5 , 92.5 , 89.5 , 86.5 , 82.5 , 79.5 , 76.5 , 72.5 , 69.5 , 68.5 , 64.5 ],\n     [ 5.83,  5.5 ,  5.16,  4.83,  4.5 ,  4.16,  3.83,  3.5 ,  3.16, 2.83,  2.5 ]])\ndef get_grade(grade):\n    try:\n        return GRADES[1][grade > [GRADES[0]][0]\n    except:\n        return 0\n"], ["grade_checker = {\n    96.5: 5.83,\n    92.5: 5.5,\n    89.5: 5.16,\n    86.5: 4.83,\n    82.5: 4.5,\n    79.5: 4.16,\n    76.5: 3.83,\n    72.5: 3.5,\n    69.5: 3.16,\n    68.5: 2.83,\n    64.5: 2.5\n}\n\ndef check_grade(grade):\n    for k in grade_checker:\n        if grade >= k:\n            return grade_checker[k]\n    return 0\n", ">>> check_grade(45.5)\n0\n>>> check_grade(65.5)\n2.5\n>>> check_grade(95)\n5.5\n"], ["import pandas as pd\n\ngrade_checker = {96.5: 5.83,\n                 ...,\n                 64.5: 2.5}\n\nkeys, values = zip(*sorted(grade_checker.items()))\nkeys += (float('inf'),)  # need to add upper boundary for pd.cut input\n\ngrade = 65.5\nres = pd.cut([grade], keys, labels=values).astype(float)[0]  # 2.5\n"], ["from range_key_dict import RangeKeyDict\n\nrange_key_dict = RangeKeyDict({\n    (96.5, 100): 5.83,\n    (92.5, 96.5): 5.5,\n    (89.5, 92.5): 5.16,\n    (86.5, 89.5): 4.83,\n    (82.5, 86.5): 4.5,\n    (79.5, 82.5): 4.16,\n    (76.5, 79.5): 3.83,\n    (72.5, 76.5): 3.5,\n    (69.5, 72.5): 3.16,\n    (68.5, 69.5): 2.83,\n    (64.5, 68.5): 2.5,\n    (0, 64.5): 0\n})\n\nassert range_key_dict[96.5] == 5.83\nassert range_key_dict[96.4] == 5.5\nassert range_key_dict[96.49] == 5.5\n"], ["pairs = (\n    (96.5, 5.83),\n    (92.5, 5.5),\n    (89.5, 5.16),\n    (86.5, 4.83),\n    (82.5, 4.5),\n    (79.5, 4.16),\n    (76.5, 3.83),\n    (72.5, 3.5),\n    (69.5, 3.16),\n    (68.5, 2.83),\n    (64.5, 2.5),\n)\n\ndef get_grade(g):\n    for grade, value in pairs:\n            if g >= grade:\n                return value\n    return 0\n"], ["def grade_checker(grade):\n\n    if grade>=96.5: return 5.83\n    elif grade>=92.5: return 5.5\n    elif grade>=89.5: return 5.16\n    elif grade>=86.5: return 4.83\n    elif grade>=82.5: return 4.5\n    elif grade>=79.5: return 4.16\n    elif grade>=76.5: return 3.83\n    elif grade>=72.5: return 3.5\n    elif grade>=69.5: return 3.16\n    elif grade>=68.5: return 2.83\n    elif grade>=64.5: return 2.5\n    else: return 0\n\ngrade_checker(75)\ngrade_checker(62)\ngrade_checker(94)\n", "3.5\n0\n5.5\n"], [], ["import numpy as np\n\nthe_list = np.array([ 7.453511737983394,\n8.10917072790058, \n6.2377799380575, \n5.225853201122676, \n4.067932296134156 ])\n\ndhi = 9 - the_list\ndlo = 3 - the_list\nidx = dhi + dlo < 0\nthe_rounded = the_list + np.where(idx, dhi, dlo)\n# array([9., 9., 9., 3., 3.])\n", "import numpy as np\n\nthe_list = np.array([ 7.453511737983394,\n8.10917072790058, \n6.2377799380575, \n5.225853201122676, \n4.067932296134156 ])\n\nhi = 9\nlo = 3\ndlt = hi - lo\n\nthe_rounded = np.round((the_list - lo)/dlt) * dlt + lo\n\n# [9. 9. 9. 3. 3.]\n"], ["import math\n\ndef fibonacci_numbers():\n  how_many_numbers = int(input(\"\\nHow many Fibbonacci numbers you want print: \"))\n  i = 0\n  res = [0, 1]\n  for i in range(how_many_numbers):\n      res.append(sum(res[-2:]))\n  digits = int(math.log10(res[i]))+1\n  ind_digits = int(math.log10(how_many_numbers-1))+2\n  for i in range(how_many_numbers):\n      print(\"{:<{ind_digits}} {:>{digits}}\".format(\"{}.\".format(i + 1), res[i], ind_digits=ind_digits, digits=digits))\n\n\nfibonacci_numbers()\n"], ["def fibonacci_numbers(format_width):\n  how_many_numbers = int(input(\"\\nHow many Fibbonacci numbers you want print: \"))\n  i = 0\n  res = [0, 1]\n  while i < how_many_numbers:\n      res.append(sum(res[-2:]))\n      # Here we specify alignment to right with certain width \n      # which is >= number of digits of the largest integer in your sequence.:\n      print(\"{}. {:>{width}}\".format(i + 1, res[i], width=format_width)) \n      i += 1\n\n\nfibonacci_numbers(30)\n"], ["size = len(str(numbers[-1])))\npadding = \"\"\nfor i in range(size):\n    padding += \" \" \n", "for num in numbers:\n    print(padding[len(str(num)):] + str(num))\n"], ["print(\"{}. {:>20}\".format(i + 1, res[i]))\n"], ["print(\"{}. {:10}\".format(i + 1, res[i])) # for left justify\nprint(\"{}. {:>10}\".format(i + 1, res[i])) # for right justify\n"], ["def fibonacci_numbers():\nhow_many_numbers = int(input(\"\\nHow many Fibbonacci numbers you want print: \"))\ni = 0\nres = [0, 1]\nwhile i < how_many_numbers:\n    res.append(sum(res[-2:]))\n    print(\"{}. \\t\\t{}\".format(i + 1, res[i]))\n    i += 1\n\n\nfibonacci_numbers()\n"], ["the_list = [ 7.453511737983394,\n8.10917072790058, \n6.2377799380575, \n5.225853201122676, \n4.067932296134156 ]\n\nhi = 9\nlo = 3\nmid = (hi + lo) / 2\n\n[(lo, hi)[mid < v] for v in the_list]\n# [9, 9, 9, 3, 3]\n"], ["lst = [ 7.453511737983394, \n  8.10917072790058, \n  6.2377799380575, \n  5.225853201122676, \n  4.067932296134156 ]\n\ndef return_the_num(l, lst, h): \n    return [l if abs(l-x) < abs(h-x) else h for x in lst]\n\nprint(return_the_num(3, lst, 9))\n# [9, 9, 9, 3, 3]\n"], ["round_the_num = lambda list, upper, lower: [upper if x > (upper + lower) / 2 else lower for x in list]\n\nround_the_num(l, 9, 3)\n"], ["upper_lower_bound_list=[3,9]\nmyNumberlist=[ 7.453511737983394, \n8.10917072790058, \n6.2377799380575, \n5.225853201122676, \n4.067932296134156 ]\n", "[min(upper_lower_bound_list, key=lambda x:abs(x-myNumber)) for myNumber in myNumberlist]\n", "[9, 9, 9, 3, 3]\n"], ["def return_bound(x, l, h):\n    low = abs(x - l)\n    high = abs(x - h)\n    if low < high:\n        return l\n    else:\n        return h\n", ">>> mylist = [7.453511737983394, 8.10917072790058, 6.2377799380575, 5.225853201122676, 4.067932296134156]\n>>> [return_bound(x, 3, 9) for x in mylist]\n[9, 9, 9, 3, 3]\n"], ["def round_the_list(list, bound_1, bound_2):\n  mid = (bound_1+bound_2)/2\n  for i in range(len(list)):\n        if list[i] > mid:         # or >= depending on your rounding decision\n            list[i] = bound_2\n        else:\n            list[i] = bound_1\n"], ["def flat(lst, res = None):\n  if res == None: res = []\n  for item in lst:\n    if not type(item) == list: res.append(item['name'])\n    else: flat(item, res)\n  return res\n\nprint(flat(list_of_interest))\n#=> ['Viscozyme', 'Davictrel', 'Enbrel Sureclick', 'Tunex', 'Angiox', 'Enantone', 'Leuplin', 'LeuProMaxx', 'Leupromer', 'Lutrate', 'Memryte', 'Prostap 3', 'Prostap SR', 'Viadur', 'Geref']\n"], ["def find(key, value):\n  if isinstance(value, dict):\n    for k, v in value.iteritems():\n      if k == key:\n        yield v\n      else:\n        for result in find(key, v):\n          yield result\n  elif isinstance(value, list):\n    for element in value:\n      for result in find(key, element):\n        yield result\n", "print(list(find('name', list_of_interest)))\n"], ["def flatten(l):\n    for el in l:\n        if isinstance(el, list):\n            yield from flatten(el)\n        else:\n            yield el\n", "print([d[\"name\"] for d in flatten(list_of_interest)])\n# ['Viscozyme', 'Davictrel', 'Enbrel Sureclick', 'Tunex', 'Angiox', 'Enantone', 'Leuplin', 'LeuProMaxx', 'Leupromer', 'Lutrate', 'Memryte', 'Prostap 3', 'Prostap SR', 'Viadur', 'Geref']\n"], ["def get_names(list_of_interest):\n    names = []\n    for d in list_of_interest:\n        if ininstance(d, list):\n            names.extend(get_names(d))\n        else:\n            names.append(d['name'])\n    return names \n"], ["def flat(l):\n    ret = list()\n    for ll in l:\n        if isinstance(ll, (OrderedDict, list)):\n            ret.extend(flat(ll))\n        else:\n            ret.append(ll)\n    return ret\n"], ["from collections import OrderedDict\n\nlist_of_interest =\\\n    [OrderedDict([('name', 'Viscozyme'), ('company', 'Roche (Chile)')]),\n    [OrderedDict([('name', 'Davictrel'), ('company', None)]),\n     OrderedDict([('name', 'Enbrel Sureclick'), ('company', None)]),\n     OrderedDict([('name', 'Tunex'), ('company', None)])],\n     OrderedDict([('name', 'Angiox'), ('company', None)]),\n    [OrderedDict([('name', 'Enantone'), ('company', None)]),\n     OrderedDict([('name', 'Leuplin'), ('company', 'Takeda')]),\n     OrderedDict([('name', 'LeuProMaxx'), ('company', 'Baxter/Teva')]),\n     OrderedDict([('name', 'Leupromer'), ('company', None)]),\n     OrderedDict([('name', 'Lutrate'), ('company', None)]),\n     OrderedDict([('name', 'Memryte'), ('company', 'Curaxis')]),\n     OrderedDict([('name', 'Prostap 3'), ('company', 'Takeda UK')]),\n     OrderedDict([('name', 'Prostap SR'), ('company', 'Takeda UK')]),\n     OrderedDict([('name', 'Viadur'), ('company', 'Bayer AG')])],\n     OrderedDict([('name', 'Geref'), ('company', 'Serono Pharma')])]\n\nnames = []\nfor item in list_of_interest:\n    if isinstance(item, OrderedDict):\n        names.append(item['name'])\n    else:\n        for list_ord_dict in item:\n            names.append(list_ord_dict['name'])\n\nprint(names)\n#['Viscozyme', 'Davictrel', 'Enbrel Sureclick', 'Tunex', 'Angiox', 'Enantone', 'Leuplin', 'LeuProMaxx', 'Leupromer', 'Lutrate', 'Memryte', 'Prostap 3', 'Prostap SR', 'Viadur', 'Geref']\n"], [">>> a = ['abd', ' the dog', '4:45', '1234 total', 'etc...','6:31', '1234']\n>>> [s for s in a if not all(e.isdigit() for e in s.split(':'))]\n['abd', ' the dog', '1234 total', 'etc...']\n", ">>> a = ['abd', ' the dog', '4:45', '1234 total', 'etc...','6:31', '1234', '1:2:3']\n>>> [s for s in a if len(s.split(':'))<=2 and not all(e.isdigit() for e in s.split(':'))]\n['abd', ' the dog', '1234 total', 'etc...']\n"], ["import re\na = ['abd', ' the dog', '4:45', '1234 total', '123', '6:31']\nprint [i for i in a if not re.match(r\"\\d+(?::\\d+)?$\", i)]\n"], [">>> import re\n>>> a = ['abd', ' the dog', '4:45', '1234 total', 'etc...', '6:31']\n>>> regex = re.compile('\\d:\\d\\d$')\n>>> [s for s in a if regex.match(s)]\n['4:45', '6:31']\n>>> [s for s in a if not regex.match(s)]\n['abd', ' the dog', '1234 total', 'etc...']\n"], [], ["res = pd.concat([df.key, pd.DataFrame(df.column.tolist())], axis=1)\nprint(res)\n", "   key  health_1  health_2  health_3  health_4  name\n0    1        45        60        34        60   Tom\n1    2        28        10        42         7  John\n2    3        86        65        14        52  Adam\n"], ["df['column'].apply(pd.Series)\n", "   health_1  health_2  health_3  health_4  name\n0  45        60        34        60        Tom \n1  28        10        42        7         John\n2  86        65        14        52        Adam\n"], ["df_expected = pd.concat([df, df['column'].apply(pd.Series)], axis = 1).drop('column', axis = 1)\n", "import pandas as pd\ndf = pd.DataFrame({\"column\":[\n{'health_1': 45, 'health_2': 60, 'health_3': 34, 'health_4': 60, 'name': 'Tom'}   ,\n{'health_1': 28, 'health_2': 10, 'health_3': 42, 'health_4': 7, 'name': 'John'}  ,\n{'health_1': 86, 'health_2': 65, 'health_3': 14, 'health_4': 52, 'name': 'Adam'}\n]})\n\ndf_expected = pd.concat([df, df['column'].apply(pd.Series)], axis = 1).drop('column', axis = 1)\nprint(df_expected)\n"], ["pd.concat([pd.DataFrame(i, index=[0]) for i in df.column], ignore_index=True)\n", "   health_1  health_2  health_3  health_4  name\n0        45        60        34        60   Tom\n1        28        10        42         7  John\n2        86        65        14        52  Adam\n"], ["def encode(code):\n    cpt=1 \n    n=len(code)\n    res=''\n    for i in range(n):\n        if i == n-1 or code[i] != code[i+1]:\n            res += str(cpt)+code[i]\n            cpt=1\n        else: cpt+=1\n    return res\n", "      Name       Code\n0   Cedric       1A4M\n1      Joe         1A\n2  Mickael   1A2M1C1X\n3   Dupond         7M\n4     Jean 1A3M1C1M1C\n"], ["import pandas as pd\ndf = pd.DataFrame([\n{'health_1': 45, 'health_2': 60, 'health_3': 34, 'health_4': 60, 'name': 'Tom'}   ,\n{'health_1': 28, 'health_2': 10, 'health_3': 42, 'health_4': 7, 'name': 'John'}  ,\n{'health_1': 86, 'health_2': 65, 'health_3': 14, 'health_4': 52, 'name': 'Adam'}\n])\n"], ["words = ['giraffe', 'elephant', 'ant', 'tiger', 'racoon', 'cat', 'hedgehog', 'mouse']\n\ndef chains(words, previous_word=None):\n    # Consider an empty sequence to be valid (as a \"tail\" or on its own):\n    yield []\n    # Remove the previous word, if any, from consideration, both here and in any subcalls:\n    words = [word for word in words if word != previous_word]\n    # Take each remaining word...\n    for each_word in words:\n        # ...provided it obeys the chaining rule\n        if not previous_word or each_word.startswith(previous_word[-1]):\n            # and recurse to consider all possible tail sequences that can follow this particular word:\n            for tail in chains(words, previous_word=each_word):\n                # Concatenate the word we're considering with each possible tail:\n                yield [each_word] + tail  \n\nall_legal_sequences = list(chains(words))  # convert the output (an iterator) to a list\nall_legal_sequences.sort(key=len) # sort the list of chains in increasing order of chain length\nfor seq in all_legal_sequences: print(seq)\n# The last line (and hence longest chain) prints as follows:\n# ['hedgehog', 'giraffe', 'elephant', 'tiger', 'racoon']\n", "print(max(chains(words), key=len)\n", "def chains(words, previous_word_index=None):\n    yield []\n    if previous_word_index is not None:\n        previous_letter = words[previous_word_index][-1]\n        words = words[:previous_word_index] + words[previous_word_index + 1:]\n    for i, each_word in enumerate( words ):\n        if previous_word_index is None or each_word.startswith(previous_letter):\n            for tail in chains(words, previous_word_index=i):\n                yield [each_word] + tail  \n"], ["from collections import Counter as ctr\ndf['Code'] = df['Code'].apply(lambda x: ''.join([''.join(map(str, val[::-1])) for val in ctr(x).items()]))\n", "    Name      Code  \n0   Cedric    1A4M\n1   Joe       1A    \n2   Mickael   1A1X1C2M  \n3   Dupond    7M    \n"], ["df['Code'] = [''.join(f'{x.count(i)}{i}' for i in sorted(set(x),key=x.index)) for x in df['Code']]\n", "from collections import Counter\n\ndf['Code'] = [''.join(f'{j}{i}' for i, j in Counter(x).items()) for x in df['Code']]\n\n\nprint (df)\n      Name      Code\n0   Cedric      1A4M\n1      Joe        1A\n2  Mickael  1A2M1C1X\n3   Dupond        7M\n"], ["from collections import Counter\ndf['Code']=df['Code'].apply(lambda x: ''.join([''.join(map(str,i)) for i in Counter(x).items()]))\n", "print(df)\n", "      Name      Code\n0   Cedric      A1M4\n1      Joe        A1\n2  Mickael  A1M2C1X1\n3   Dupond        M7\n"], [], ["import random\nimport numpy as np\nfive_list = np.asarray([])\nend = False\nnumber = random.randint(0,200)\nfive_list = np.append(five_list,number)\nwhile True:\n    new_number = random.randint(0,200)\n    if all(np.absolute(np.subtract(five_list, new_number)) >= 15):\n        five_list = np.append(five_list,new_number)\n    if np.size(five_list) == 5:\n        break\nprint(np.sort(five_list)) \n"], ["import random\nnumbers = list(range(200))\nrandom.shuffle(numbers)\ndistant_numbers = [numbers[0]]\nfor number in numbers:\n    if any(abs(number - x) < 15 for x in distant_numbers):\n        continue\n    distant_numbers.append(number)\n    if len(distant_numbers) >= 5: break\n", "def spaced_randoms(n, d, R, first=None):\n    solver = z3.SolverFor(\"QF_FD\")\n    numbers = [z3.Int(\"x{}\".format(x)) for x in range(n)]\n    for number in numbers:\n        solver.add(number >= 0)\n        solver.add(number <= R)\n    for ii in range(n):\n        for jj in range(ii+1,n):\n            solver.add(z3.Or(numbers[ii] - numbers[jj] > d, numbers[ii] - numbers[jj] < -d))\n    if first is not None:\n        solver.add(numbers[0] == first)\n    result = solver.check()\n    if str(result) != \"sat\":\n        raise Exception(\"Unsatisfiable\")\n    model = solver.model()\n    return [model.get_interp(number) for number in numbers]\n", "import random\nspaced_randoms(n, d, R, random.randint(0,R))\n"], ["import numpy as np\n\n\ndef random_spaced(low, high, delta, n, size=None):\n    \"\"\"\n    Choose n random values between low and high, with minimum spacing delta.\n\n    If size is None, one sample is returned.\n    Set size=m (an integer) to return m samples.\n\n    The values in each sample returned by random_spaced are in increasing\n    order.\n    \"\"\"\n    empty_space = high - low - (n-1)*delta\n    if empty_space < 0:\n        raise ValueError(\"not possible\")\n\n    if size is None:\n        u = np.random.rand(n)\n    else:\n        u = np.random.rand(size, n)\n    x = empty_space * np.sort(u, axis=-1)\n    return low + x + delta * np.arange(n)\n", "In [27]: random_spaced(0, 200, 15, 5)\nOut[27]: array([ 30.3524969 ,  97.4773284 , 140.38221631, 161.9276264 , 189.3404236 ])\n\nIn [28]: random_spaced(0, 200, 15, 5)\nOut[28]: array([ 81.01616136, 103.11710522, 118.98018499, 141.68196775, 169.02965952])\n", "In [29]: random_spaced(0, 200, 15, 5, size=3)\nOut[29]: \narray([[ 52.62401348,  80.04494534,  96.21983265, 138.68552066, 178.14784825],\n       [  7.57714106,  33.05818556,  62.59831316,  81.86507168, 180.30946733],\n       [ 24.16367913,  40.37480075,  86.71321297, 148.24263974, 195.89405713]])\n", "import matplotlib.pyplot as plt\nfrom scipy.stats import beta\n\nlow = 0\nhigh = 200\ndelta = 15 \nn = 5\ns = random_spaced(low, high, delta, n, size=100000)\n\nfor k in range(s.shape[1]):\n    plt.hist(s[:, k], bins=100, density=True, alpha=0.25)\nplt.title(\"Normalized marginal histograms and marginal PDFs\")\nplt.grid(alpha=0.2)\n\n# Plot the PDFs of the marginal distributions of each component.\n# These are beta distributions.\nfor k in range(n):\n    left = low + k*delta\n    right = high - (n - k - 1)*delta\n    xx = np.linspace(left, right, 400)\n    yy = beta.pdf(xx, k + 1, n - k, loc=left, scale=right - left)\n    plt.plot(xx, yy, 'k--', linewidth=1, alpha=0.25)\n    if n > 1:\n        # Mark the mode with a dot.\n        mode0 = k/(n-1)\n        mode = (right-left)*mode0 + left\n        plt.plot(mode, beta.pdf(mode, k + 1, n - k, loc=left, scale=right - left),\n                 'k.', alpha=0.25)\n\nplt.show()\n"], ["l= [ i for i in range(201) ]\nrslt= []\nfor i in range(5): \n    n=random.choice(l) \n    rslt.append(n) \n    l=[ k for k in l if abs(k-n)>=15 ]\n    #if not l:\n    #   break\n", "sgmnts= [(0,200)]\ndiff= 15\nrslt= []\n\nfor i in range(5):\n\n    start,stop= sgmnts.pop( random.choice(range(len(sgmnts))) )\n    n= random.choice(range(start,stop+1))\n    rslt.append(n)\n    if n-diff > start:\n        sgmnts.append( (start,n-diff) )\n    if n+diff < stop:\n        sgmnts.append( (n+diff,stop) )\n    if not sgmnts:\n        break\n"], ["import random as r\n\ndef spreadRandom(theRange, howMany, minSpacing):\n    while True:\n        candidate = sorted([r.randint(*theRange) for _ in range(howMany)])\n        minDiff = min([ candidate[i+1]-candidate[i] for i, _ in enumerate(candidate[:-1])])\n        if minDiff >= minSpacing:\n            return candidate\n\nspreadRandom([0,200], 5, 15)\n"], ["import random\n\narray = []\n\nrandomRange = 200\narrayRange = 5\nvalueStep = 15\n\nfor loop in range(arrayRange):\n    randomMaxValue = randomRange - valueStep * (arrayRange - loop) # First loop will the first randomMaxValue be 125 next will be 140, 155, 170, 185, 200\n    if not array: # Checks if the array is empty\n        array.append(random.randint(0, randomMaxValue)) # Appends a value between 0 and 125 (First will be 125 because 200 - 15 * 5)\n    else:\n        array.append(random.randint(array[-1] + 15, randomMaxValue)) # Appends the 4 next values\n\nprint(array)\n"], ["def print_pyramid(_count = 1):\n  if _count < 10:\n    print((lambda x:x[::-1] if not _count%2 else x)(''.join(map(str, range(1, _count+1)))))\n    print_pyramid(_count+1)\n\n\nprint_pyramid()\n", "1\n21\n123\n4321\n12345\n654321\n1234567\n87654321\n123456789\n"], ["is_reversed = False\nfor i in range(1, 10):\n    step = -1 if is_reversed else 1\n    print(''.join(map(str, range(1, i + 1)))[::step])\n    is_reversed = not is_reversed\n", "s = ''\nis_reversed = False\nfor i in range(1, 10):\n    s += str(i)\n    step = -1 if is_reversed else 1\n    print(s[::step])\n    is_reversed = not is_reversed\n", "def f(s, i, max_i, is_reversed):\n    if i == max_i:\n        return\n    s += str(i)\n    step = -1 if is_reversed else 1\n    print(s[::step])\n    is_reversed = not is_reversed\n    i += 1\n    f(s, i, max_i, is_reversed)\n\nf('', 1, 10, False)\n", "1\n21\n123\n4321\n12345\n654321\n1234567\n87654321\n123456789\n"], ["def printFigure(rows):\n    if rows > 0:\n        printFigure(rows-1)\n        if rows%2 == 0:\n            while(rows>0):\n                print(str(rows)[::-1], end='')\n                rows -= 1\n            print('')\n        else:\n            i = 1\n            while (i <= rows):\n                print(str(i), end='')\n                i += 1\n            print('')\n\nprintFigure(9)\n\n1\n21\n123\n4321\n12345\n654321\n1234567\n87654321\n123456789\n"], ["def printFigure(rows): \n    for x in range(rows): \n        items = [str(i) for i in range(1, x + 1)] \n        if x % 2 == 0: \n            items = items[::-1] \n        print(''.join(items))\n"], ["def print_rows(n, limit):\n    if n < limit:\n        numbers = range(1, n + 1) if n % 2 == 1 else reversed(range(1, n + 1))\n        print(''.join(map(str, numbers)))\n        print_rows(n + 1, limit)\n\n\ndef print_pyramid_recursive(n):\n    if n > 0:\n        print_rows(1, n)\n\n\nprint_pyramid_recursive(10)\n", "1\n21\n123\n4321\n12345\n654321\n1234567\n87654321\n123456789\n", "def print_pyramid(n):\n    for i in range(1, n + 1):\n        numbers = range(1, i + 1) if i % 2 == 1 else reversed(range(1, i + 1))\n        print(''.join(map(str, numbers)))\n"], ["from pprint import pprint\n\nfin = open('f2.txt', 'r')\n\narray = []\ndict_ = {}\n\nlines = fin.readlines()\n\nfor i, line in enumerate(lines):\n    line = line.rstrip()\n    if i % 5 == 0:\n        key = int(line)\n    elif i % 5 == 1:\n        name = line\n    elif i % 5 == 2:\n        if len(line):\n            rec = [int(j) for j in line.split(', ')]\n        else:\n            rec = []\n        array.append(rec)\n    elif i % 5 == 3:\n        if len(line):\n            rec = [int(j) for j in line.split(', ')]\n        else:\n            rec = []\n        array.append(rec)\n        dict_[key] = (name, *array)\n        array = []\n\npprint(dict_)\n", "{'100': ('Mulan', [300, 500], [200, 400]),\n '200': ('Ariel', [100, 500], [500]),\n '300': ('Jasmine', [500], [500, 100]),\n '400': ('Elsa', [100, 500], []),\n '500': ('Belle', [200, 300], [100, 200, 300, 400])}\n"], ["from pprint import pprint\n\nwith open('data.txt', 'r') as F:\n    lines = [line.replace('\\n','') for line in F.readlines()]\n\n\nn = len(lines)\nd = 5                   # number of lines for one entry in the file\n\nif not n%d==0:\n    for i in range(d-n%d):\n        lines.append('')    \n\nresult = {}\nfor i, line in enumerate(lines):\n    if   i%5==0: key  = int(line)\n    elif i%5==1: name = line.rstrip()\n    elif i%5==2: \n        if line=='': num1 = []\n        else: num1 = [int(x) for x in line.replace(' ','').split(',')]\n    elif i%5==3:\n        if line=='': num2 = []\n        else: num2 = [int(x) for x in line.replace(' ','').split(',')]  \n    elif i%5==4: result[key] = (name, num1, num2)\n\npprint(result)\n", "{100: ('Mulan', [300, 500], [200, 400]),\n 200: ('Ariel', [100, 500], [500]),\n 300: ('Jasmine', [500], [500, 100]),\n 400: ('Elsa', [100, 500], []),\n 500: ('Belle', [200, 300], [100, 200, 300, 400])}\n", "with open('data.txt', 'r') as F:\n    lines = F.readlines()\n\n\nlong_line = ''.join([x.replace(' ','') for x in lines])\nsplit     = [x.lstrip().split('\\n') for x in long_line.split('\\n\\n')]\n\n\nresult    = {}\nfor e in split:\n    result[int(e[0])] = (e[1], e[2:])\n\n\nfor key in sorted(result.keys()):\n    print(key, result[key])\n", "100 ('Mulan', ['300,500', '200,400'])\n200 ('Ariel', ['100,500', '500'])\n300 ('Jasmine', ['500', '500,100'])\n400 ('Elsa', ['100,500'])\n500 ('Belle', ['200,300'])\n"], [], ["import networkx as nx\nimport matplotlib.pyplot as plt\n\nwords = ['giraffe', 'elephant', 'ant', 'tiger', 'racoon', 'cat',\n         'hedgehog', 'mouse']\n\nG = nx.DiGraph()\nG.add_nodes_from(words)\n\nfor word1 in words:\n    for word2 in words:\n        if word1 != word2 and word1[-1] == word2[0]:\n            G.add_edge(word1, word2)\nnx.draw_networkx(G)\nplt.show()\nprint(nx.algorithms.dag.dag_longest_path(G))\n", "['hedgehog', 'giraffe', 'elephant', 'tiger', 'racoon']\n"], ["import itertools\n\nfile_name = 'sample.txt'\nd = {}\nexpected_lines = 4\n\nwith open(file_name, 'r') as f:\n    blocks = list(\"\".join(group) for empty, group in itertools.groupby(f, key=str.isspace) if not empty)\n\nfor block in blocks:\n    lines = [[int(i) for i in i.split(',')] if len(i.split(',')) > 1 \n                                            else i for i in block.split('\\n')][:expected_lines]\n    lines = [[] if i == '' else i for i in lines]\n    d[lines[0]] = tuple(lines[1:])\n\nd\n{'100': ('Mulan', [300, 500], [200, 400]),\n '200': ('Ariel', [100, 500], '500'),\n '300': ('Jasmine', '500', [500, 100]),\n '400': ('Elsa', [100, 500], []),\n '500': ('Belle', [200, 300], [100, 200, 300, 400])}\n", "300\nJasmine\n500\n500, 100\n\n400\n\n100, 500\n", "import itertools\n\nfile_name = 'sample.txt'\nd = {}\nexpected_lines = 5\n\ndef grouper(iterable, n, fillvalue=''):\n    \"Collect data into fixed-length chunks or blocks\"\n    # grouper('ABCDEFG', 3, 'x') --> ABC DEF Gxx\"\n    args = [iter(iterable)] * n\n    return itertools.zip_longest(*args, fillvalue=fillvalue)\n\ndef check_empty(int_pairs):\n    int_pairs = int_pairs.split()\n    if len(int_pairs) > 1:\n        return int_pairs\n    else:\n        return []\n\nwith open(file_name, 'r') as f:\n    blocks = list(grouper(f, expected_lines, fillvalue=''))\n\nfor block in blocks:\n    lines = [i.replace('\\n','') for i in block if i][:expected_lines-1]\n    d[int(lines[0])] = (lines[1],check_empty(lines[2]),check_empty(lines[3]))\n"], ["def normalise(value):\n    if value.isalpha():\n        return value\n    if value.isnumeric():\n        return int(value)\n    return [int(i) for i in value.replace(\",\", \"\").split()]\n\ndef normalise_value(lst):\n    xs = [[i] if isinstance(i, int) else i for i in lst]\n    while len(xs) < 3:\n        xs.append([])  # gets the empty list as needed\n    return tuple(xs)\n\ndef strip_newline(string, newline=\"\\n\"):\n    return string.replace(newline, \"\")\n", "with open(\"filename\") as fh:\n    lines = fh.readlines()\n\nnewline = \"\\n\"  # set as appropriate\ndata = []\ndct = {}        \nfor d in lines:\n    if d is not newline:\n        data.append(normalise(strip_newline(d)))\n    elif data:\n        dct[data[0]] = tuple(normalise_value(data[1:]))\n        data = []\nif data:\n    dct[data[0]] = tuple(normalise_value(data[1:]))\n"], ["words = ['giraffe', 'elephant', 'ant', 'tiger', 'racoon', 'cat', 'hedgehog', 'mouse']\ndef get_results(_start, _current, _seen):\n  if all(c in _seen for c in words if c[0] == _start[-1]):\n    yield _current\n  else:\n      for i in words:\n        if i[0] == _start[-1]:\n          yield from get_results(i, _current+[i], _seen+[i])\n\n\nnew_d = [list(get_results(i, [i], []))[0] for i in words]\nfinal_d = max([i for i in new_d if len(i) == len(set(i))], key=len)\n", "['hedgehog', 'giraffe', 'elephant', 'tiger', 'racoon']\n", "words = ['giraffe', 'elephant', 'ant', 'ning', 'tiger', 'racoon', 'cat', 'hedgehog', 'mouse',]\nnew_d = [list(get_results(i, [i], []))[0] for i in words]\nfinal_d = max([i for i in new_d if len(i) == len(set(i))], key=len)\n", "['ant', 'tiger', 'racoon', 'ning', 'giraffe', 'elephant']\n"], ["    1. Form a tree with the root node as first word. \n    2. Form the branches if there is any word or words that starts \nwith the alphabet with which this current word ends.\n    3. Exhaust the entire given list based on the ending alphabet\n of current word and form the entire tree.\n    4. Now just find the longest path of this tree and store it.\n    5. Repeat steps 1 to 4 for each of the words given in the list\n and print the longest path among the longest paths we got above.\n"], ["from itertools import permutations\n\ndef continuous_starting_sequence(words):\n    chain = [words[0]]\n    for i in range(1, len(words)):\n        if not words[i].startswith(words[i - 1][-1]):\n            break\n        chain.append(words[i])\n    return chain\n\nwords = ['giraffe', 'elephant', 'ant', 'tiger', 'racoon', 'cat', 'hedgehog', 'mouse']\nbest = max((continuous_starting_sequence(seq) for seq in permutations(words)), key=len)\n\nprint(best)\n# ['hedgehog', 'giraffe', 'elephant', 'tiger', 'racoon']\n"], ["words = ['giraffe', 'elephant', 'ant', 'tiger', 'racoon', 'cat', 'hedgehog', 'mouse']\n\ndef chain_longest(pivot, words):\n    new_words = []\n    new_words.append(pivot)\n    for word in words:\n        potential_words = [i for i in words if i.startswith(pivot[-1]) and i not in new_words]\n        if potential_words:\n            next_word = sorted(potential_words, key = lambda x: len)[0]\n            new_words.append(next_word)\n            pivot = next_word\n        else:\n            pass\n    return new_words\n\nmax([chain_longest(i, words) for i in words], key = len)\n>>\n['hedgehog', 'giraffe', 'elephant', 'tiger', 'racoon']\n"], ["def brute_force(pool, last=None, so_far=None):\n    so_far = so_far or []\n    if not pool:\n        return so_far\n    candidates = []\n    for w in pool:\n        if not last or w.startswith(last):\n            c_so_far, c_pool = list(so_far) + [w], set(pool) - set([w])\n            candidates.append(brute_force(c_pool, w[-1], c_so_far))\n    return max(candidates, key=len, default=so_far)\n\n>>> brute_force(words)\n['hedgehog', 'giraffe', 'elephant', 'tiger', 'racoon']\n"], ["def word_list(w_list, remaining_list):\n    max_result_len=0\n    res = w_list\n    for word_index in range(len(remaining_list)):\n        # if the last letter of the word list is equal to the first letter of the word\n        if w_list[-1][-1] == remaining_list[word_index][0]:\n            # make copies of the lists to not alter it in the caller function\n            w_list_copy = w_list.copy()\n            remaining_list_copy = remaining_list.copy()\n            # removes the used word from the remaining list\n            remaining_list_copy.pop(word_index)\n            # append the matching word to the new word list\n            w_list_copy.append(remaining_list[word_index])\n            res_aux = word_list(w_list_copy, remaining_list_copy)\n            # Keep only the longest list\n            res = res_aux if len(res_aux) > max_result_len else res \n    return res\n\nwords = ['giraffe', 'elephant', 'ant', 'tiger', 'racoon', 'cat', 'hedgehog', 'mouse']\nword_list(['dog'], words)\n", "['dog', 'giraffe', 'elephant', 'tiger', 'racoon']\n"], ["x = [-0.2, 0.1, 1.1, 0.75, 0.4, 0.2, 1.5, 0.9]\n\na = 0\nb = 1\n\n[a if i <= (a+b)/2 else b for i in x]\n"], ["[round(i) for i in [0.1,0.2,0.3,0.8,0.9]]\n"], [">>> a = np.arange(-2, 2.1, 0.1)\n>>> (a >= .5).astype(np.float)\narray([ 0.,  0.,  0.,  0.,  0.,  0.,  0.,  0.,  0.,  0.,  0.,  0.,  0.,\n        0.,  0.,  0.,  0.,  0.,  0.,  0.,  0.,  0.,  0.,  0.,  0.,  1.,\n        1.,  1.,  1.,  1.,  1.,  1.,  1.,  1.,  1.,  1.,  1.,  1.,  1.,\n        1.,  1.])\n"], ["def closerab(l, a=0, b=1):\n    l = np.asarray(l)\n    boolarr = (np.abs(l - b) > np.abs(l - a))\n\n    # returns two lists of indices, one for numbers closer to a and one for numbers closer to b\n    return boolarr.nonzero()[0], (boolarr==0).nonzero()[0]\n", "l = [\n-2.10044520e-04, 1.72314372e-04, 1.77235336e-04, 1.06613465e-04,\n6.76617611e-07, 2.71623057e-03, 3.32789944e-05, 1.44899758e-05,\n5.79249863e-05, 4.06502549e-04, 1.35823707e-05, 4.13955189e-04,\n5.29862793e-05, 1.98286005e-04, 2.22829175e-04, 8.88758230e-04,\n5.62228710e-05, 1.36249752e-05, 2.00474996e-05, 2.10090068e-05,\n1.00007518e+00, 1.00007569e+00, 4.44597417e-05, 2.93724453e-04,\n1.00007513e+00, 1.00007496e+00, 1.00007532e+00, 1.22357142e-03,\n3.27903892e-06, 1.00007592e+00, 1.00007468e+00, 1.00007558e+00,\n2.09869172e-05, 1.97610235e-05, 1.00007529e+00, 1.00007530e+00,\n1.00007503e+00, 2.68725642e-05, 3.00372853e-03, 1.00007386e+00,\n1.00007443e+00, 1.00007388e+00, 5.86993822e-05, 8.69989983e-06,\n1.00007590e+00, 1.00007488e+00, 1.00007515e+00, 8.81850779e-04,\n2.03875532e-05, 1.00007480e+00, 1.00007425e+00, 1.00007517e+00,\n-2.44678912e-05, 4.36556267e-08, 1.00007436e+00, 1.00007558e+00,\n1.00007571e+00, 5.42990711e-04, 1.45517859e-04, 1.00007522e+00,\n1.00007469e+00, 1.00007575e+00, 2.52271817e-05, 7.46339417e-05,\n1.00007427e+00\n]\n\nprint(closerab(l, 0, 1))\n", "(array([ 0,  1,  2,  3,  4,  5,  6,  7,  8,  9, 10, 11, 12, 13, 14, 15, 16,\n        17, 18, 19, 22, 23, 27, 28, 32, 33, 37, 38, 42, 43, 47, 48, 52, 53,\n        57, 58, 62, 63]),\n array([20, 21, 24, 25, 26, 29, 30, 31, 34, 35, 36, 39, 40, 41, 44, 45, 46,\n        49, 50, 51, 54, 55, 56, 59, 60, 61, 64]))\n"], ["your_list=[[-2.10044520e-04, 1.72314372e-04, 1.77235336e-04, 1.06613465e-04,\n6.76617611e-07, 2.71623057e-03, 3.32789944e-05, 1.44899758e-05,\n5.79249863e-05, 4.06502549e-04, 1.35823707e-05, 4.13955189e-04,\n5.29862793e-05, 1.98286005e-04, 2.22829175e-04, 8.88758230e-04,\n5.62228710e-05, 1.36249752e-05, 2.00474996e-05, 2.10090068e-05,\n1.00007518e+00, 1.00007569e+00, 4.44597417e-05, 2.93724453e-04,\n1.00007513e+00, 1.00007496e+00, 1.00007532e+00, 1.22357142e-03,\n3.27903892e-06, 1.00007592e+00, 1.00007468e+00, 1.00007558e+00,\n2.09869172e-05, 1.97610235e-05, 1.00007529e+00, 1.00007530e+00,\n1.00007503e+00, 2.68725642e-05, 3.00372853e-03, 1.00007386e+00,\n1.00007443e+00, 1.00007388e+00, 5.86993822e-05, 8.69989983e-06,\n1.00007590e+00, 1.00007488e+00, 1.00007515e+00, 8.81850779e-04,\n2.03875532e-05, 1.00007480e+00, 1.00007425e+00, 1.00007517e+00,\n-2.44678912e-05, 4.36556267e-08, 1.00007436e+00, 1.00007558e+00,\n1.00007571e+00, 5.42990711e-04, 1.45517859e-04, 1.00007522e+00,\n1.00007469e+00, 1.00007575e+00, 2.52271817e-05, 7.46339417e-05,\n1.00007427e+00]]\n\nclose_to_one_or_zero=[1 if x > 0.5 else 0 for x in your_list[0]]\nclose_to_one_or_zero\n    [0, 0, 0, 0, 0,....... 1, 1, 1, 0, 0, 1]\n"], [">>> a = np.arange(0, 1.1, 0.1)\n>>> a\narray([0. , 0.1, 0.2, 0.3, 0.4, 0.5, 0.6, 0.7, 0.8, 0.9, 1. ])\n>>> np.rint(a)\narray([0., 0., 0., 0., 0., 0., 1., 1., 1., 1., 1.])\n", ">>> a = np.arange(-2, 2.1, 0.1)\n>>> a\narray([-2.00000000e+00, -1.90000000e+00, -1.80000000e+00, -1.70000000e+00,\n       -1.60000000e+00, -1.50000000e+00, -1.40000000e+00, -1.30000000e+00,\n       -1.20000000e+00, -1.10000000e+00, -1.00000000e+00, -9.00000000e-01,\n       -8.00000000e-01, -7.00000000e-01, -6.00000000e-01, -5.00000000e-01,\n       -4.00000000e-01, -3.00000000e-01, -2.00000000e-01, -1.00000000e-01,\n        1.77635684e-15,  1.00000000e-01,  2.00000000e-01,  3.00000000e-01,\n        4.00000000e-01,  5.00000000e-01,  6.00000000e-01,  7.00000000e-01,\n        8.00000000e-01,  9.00000000e-01,  1.00000000e+00,  1.10000000e+00,\n        1.20000000e+00,  1.30000000e+00,  1.40000000e+00,  1.50000000e+00,\n        1.60000000e+00,  1.70000000e+00,  1.80000000e+00,  1.90000000e+00,\n        2.00000000e+00])\n>>> np.where(a <= 0.5, 0, 1)\narray([0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,\n   0, 0, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1])\n"], ["x = [[-2.10044520e-04,  1.72314372e-04,  1.77235336e-04, -1.06613465e-04,\n6.76617611e-07,  2.71623057e-03, -3.32789944e-05,  1.44899758e-05,\n5.79249863e-05,  4.06502549e-04, -1.35823707e-05, -4.13955189e-04,\n5.29862793e-05, -1.98286005e-04, -2.22829175e-04, -8.88758230e-04,\n5.62228710e-05,  1.36249752e-05, -2.00474996e-05, -2.10090068e-05,\n1.00007518e+00,  1.00007569e+00, -4.44597417e-05, -2.93724453e-04,\n1.00007513e+00,  1.00007496e+00,  1.00007532e+00, -1.22357142e-03,\n3.27903892e-06,  1.00007592e+00,  1.00007468e+00,  1.00007558e+00,\n2.09869172e-05, -1.97610235e-05,  1.00007529e+00,  1.00007530e+00,\n1.00007503e+00, -2.68725642e-05, -3.00372853e-03,  1.00007386e+00,\n1.00007443e+00,  1.00007388e+00,  5.86993822e-05, -8.69989983e-06,\n1.00007590e+00,  1.00007488e+00,  1.00007515e+00,  8.81850779e-04,\n2.03875532e-05,  1.00007480e+00,  1.00007425e+00,  1.00007517e+00,\n-2.44678912e-05, -4.36556267e-08,  1.00007436e+00,  1.00007558e+00,\n1.00007571e+00, -5.42990711e-04,  1.45517859e-04,  1.00007522e+00,\n1.00007469e+00,  1.00007575e+00, -2.52271817e-05, -7.46339417e-05,\n1.00007427e+00]]\n\nrounded_x = [0 if abs(i) < abs(1-i) else 1 for i in x[0]]\nprint(rounded_x)\n", "[0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 0, 0, 1, 1, 1, 0, 0, 1, 1, 1, 0, 0, 1, 1, 1, 0, 0, 1, 1, 1, 0, 0, 1, 1, 1, 0, 0, 1, 1, 1, 0, 0, 1, 1, 1, 0, 0, 1, 1, 1, 0, 0, 1]\n"], ["a = 3 # This is globally defined\n\ndef foo(a):\n  a = 3 * a\n  return a\n\nprint(foo(a))\n9\n", "print(foo(6)) # Locally defined\n18\n\nprint(a)\n3 # Returns global variable\n"], ["import numpy as np\n\narr = np.array([0.1, 0.2, 0.3, 0.4, 0.5, 0.6, 0.7, 0.8, 0.9, 2.0])\nresult = np.where(arr >= 0.5, 1, 0)\nprint(result)\n", "[0 0 0 0 1 1 1 1 1 1]\n"], ["lst=[0.1,0.2,0.3,0.4,0.5,0.6,0.7,0.8,0.9]\n\ncloserTo1 = [x >= 0.5 for x in lst]\n", "import numpy as np\nlst=[0.1,0.2,0.3,0.4,0.5,0.6,0.7,0.8,0.9]\n\narr = np.array(lst)\ncloserTo1 = arr >= 0.5\n"], [], [], ["class Example:\n\n  def __init__(self, name):\n    self.name = name\n\n  def foo(self):\n    self.name = 'John'\n\nbar = Example('Jake')\n", "bar.name = 'Jake'\n", "bar.foo()\n", "bar.name = 'John'\n", "print(bar.name)  # John\n", "def another_foo(self):\n  self.name = 'Mark'\nbaz = Example('Jake')\nanother_foo(baz)\nprint(baz.name)  # Mark\n", "Example.another_foo = another_foo\nnew_bar = Example('Jake')\nprint(new_bar.name)  # Jake\nnew_bar.another_foo()\nprint(new_bar.name)  # Mark\n"], ["class Example:\n    def print_x(self):\n        print(self.x)\n\nobj = Example()\nobj.x = 5;    # Create a new attribute of the object and assign it a value 5\nprint(obj.x)  # Outputs 5\nobj.print_x() # Outputs 5\n", "    class Example:\n    def __init__(self, name):\n        print(dir(self)) # Printing object contents before initializing name\n        self.name = name # New attribute 'name' created\n        print(dir(self)) # Printing object contents after initializing name\n\n    def foo(self):\n        print(\"Before foo, self.name = \"+ self.name)\n        self.name = 'John'\n        print(\"After foo, self.name = \"+ self.name)\n\n\nbar = Example('Jake')\nbar.foo()\nprint(bar.name)\n", "['__doc__', '__init__', '__module__', 'foo']\n['__doc__', '__init__', '__module__', 'foo', 'name']\nBefore foo, self.name = Jake\nAfter foo, self.name = John\nJohn\n", "Before foo, self.name = Jake\nAfter foo, self.name = John`\n"], ["def append_a(lst):\n    lst.append('a')\n\nbob = []\nappend_a(bob)\nprint(bob)\n['a']\n", "class Example:\n\n    def __init__(self, name):\n        self.name = name\n\n    def foo(self):\n        self.name = 'John'\n\nbar = Example('Jake')\nbob = Example('Bob')\nbar.foo()\nprint(bar.name)\nprint(bob.name)\n\nJohn\nBob\n"], ["#first populate a word:index dictionary\n#ensure duplicates don't overwrite...for this use \"in\" which is fast\nd1 = {}\nix = 0\nfor i in lines:\n    for word in i.split():\n        if word not in d1:\n            #only add word to the dict if it is NOT already in (addressing duplicates)\n            d1[word] = ix\n            ix += 1\n\n#now \"reverse\" the dict\nd = {}  #new dict\nfor word in d1:\n    d[d1[word]] = word\n"], ["fname = 'textfile.txt'\nwith open(fname, 'w') as textfile:\n    textfile.write('zero one two three four five\\n')\n    textfile.write('six seven eight nine ten')\n", "word_positions = {}\nwith open(fname, 'r') as textfile:\n    words = (word for line in textfile.readlines() for word in line.split())\n    word_positions = {i: word for i, word in enumerate(words)}\n", "word_positions\n\n{0: 'zero',\n 1: 'one',\n 2: 'two',\n 3: 'three',\n 4: 'four',\n 5: 'five',\n 6: 'six',\n 7: 'seven',\n 8: 'eight',\n 9: 'nine',\n 10: 'ten'}\n"], ["d = {}\nk = 0\nfor i in lines:\n    for word in i.split():\n        d[str(k)] = word\n        k = k + 1\n"], ["d = {}\nc = 0\n\nfor i in lines:\n    for word in i.split():\n        d[word] = c\n        c += 1\n"], ["d = {}\nfor k, v in enumerate(words):\n    d[k] = v\n"], ["In [920]: from itertools import chain\nIn [923]: arr = list(chain.from_iterable(arr)) ## flatten into 1-D array\nIn [922]: def most_common(lst):\n     ...:     return max(set(lst), key=lst.count)\n\nIn [924]: most_common(arr)\nOut[924]: 'Mohit'\n", "from itertools import chain\nimport time\nstart_time = time.time()\n\narr = [['Mohit', 'shini','Manoj','Mot'],\n      ['Mohit', 'shini','Manoj'],\n      ['Mohit', 'Vis', 'Nusrath']]\n\n\narr = list(chain.from_iterable(arr))\narr = arr*100\n\ndef most_common(lst):\n    return max(set(lst), key=lst.count)\n\nprint(most_common(arr))\nprint(\"--- %s seconds ---\" % (time.time() - start_time))\n\nmayankp@mayank:~$ python t1.py \nMohit\n--- 0.000154972076416 seconds ---\n"], [">>> from itertools import chain\n>>> from collections import Counter\n>>> \n>>> lst = [['Mohit', 'shini','Manoj','Mot'],\n...:      ['Mohit', 'shini','Manoj'],\n...:      ['Mohit', 'Vis', 'Nusrath']]\n...:      \n>>> Counter(chain.from_iterable(lst)).most_common(1)[0][0]\n'Mohit'\n", ">>> list(chain.from_iterable(lst))\n['Mohit',\n 'shini',\n 'Manoj',\n 'Mot',\n 'Mohit',\n 'shini',\n 'Manoj',\n 'Mohit',\n 'Vis',\n 'Nusrath']\n>>> Counter(chain.from_iterable(lst))\nCounter({'Manoj': 2, 'Mohit': 3, 'Mot': 1, 'Nusrath': 1, 'Vis': 1, 'shini': 2})\n>>> Counter(chain.from_iterable(lst)).most_common(1)\n[('Mohit', 3)]\n"], ["import collections\nimport time\nstart_time = time.time()\narr = [['Mohit', 'shini','Manoj','Mot'],\n      ['Mohit', 'shini','Manoj'],\n      ['Mohit', 'Vis', 'Nusrath']]\n\nc = collections.Counter([x for sublist in arr for x in sublist])\nprint(c.most_common(1) )\nprint(\"--- %s seconds ---\" % (time.time() - start_time)) \n"], ["flat_list = [item for sublist in arr for item in sublist]\nfrom collections import Counter\nCounter(flat_list).most_common(1)[0]\n# ('Mohit', 3)\nCounter(flat_list).most_common(1)[0][0]\n# 'Mohit'\n", "from collections import Counter\nc = Counter(item for sublist in arr for item in sublist).most_common(1)\n# [('Mohit', 3)]\nc[0][0]\n# 'Mohit'\n"], ["l=[x for i in arr for x in i]\nmax(l,key=l.count)\n", ">>> arr = [['Mohit', 'shini','Manoj','Mot'],\n      ['Mohit', 'shini','Manoj'],\n      ['Mohit', 'Vis', 'Nusrath']]\n>>> l=[x for i in arr for x in i]\n>>> max(l,key=l.count)\n'Mohit'\n>>> \n"]]