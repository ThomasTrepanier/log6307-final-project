[["plt.scatter(*zip(*a))\n", "import numpy as np\nimport matplotlib.pyplot as plt\n\na=[np.array([2.40460915, 0.85513601]), np.array([1.80998096, 0.97406986]), np.array([2.14505475, 0.96109123]), np.array([2.12467111, 0.93991277])]\nplt.scatter(*zip(*a)) #x,y=zip(*a)\nplt.show()\n"], ["import pandas as pd\ndf=pd.Series([12.19, 13.99, 1.00, None, 9.00])\nprint(df.astype(str, skipna=True).to_list())\npd.isna(df.astype(str, skipna=True))\n", "['12.19', '13.99', '1.0', nan, '9.0']\n0    False\n1    False\n2    False\n3     True\n4    False\ndtype: bool\n", "df=pd.Series([12.19, 13.99, 1.00, None, 9.00])\ndf=df.astype(str, skipna=True)\ndf=df.where(pd.notnull(df), None)\nprint(df.to_list())\n", "['12.19', '13.99', '1.0', None, '9.0']\n"], [], ["output = np.empty((sample.size, 2), dtype=np.uint8)\nnp.bitwise_and(sample >> 1, 1, out=output[:, 0], casting='unsafe')\nnp.bitwise_and(sample, 1, out=output[:, 1], casting='unsafe')\noutput += 48\noutput = output.view(dtype='S2').ravel()\n"], ["def pp():\n    a64 = a.astype(np.int64)\n    return (((a64&1)<<32)+((a64&2)>>1)+ord('0')*0x100000001).view('U2')\n", "bits_map = np.array(['00', '01', '10', '11'])\ndef AMC_pp():\n    return bits_map[a & 3]\n"], [], [], ["result = []\nfor i in range(1, 101):\n  result.append(i)\n  if len(result) % 3 == 0:\n    result.append(\"\\n\")\n", "print(''.join(str(x) for x in result))\n", "123\n456\n789\n...\n"], ["temp = []\nfor i in range(100):\n    temp.append(i)\n    if i % 3 == 0:\n        print(temp)\n        temp = []\n", "[1, 2, 3]\n[4, 5, 6]\n[7, 8, 9]\n...\n[97, 98, 99]\n"], ["list(sum(zip(*[iter(range(1, 101))]*3, ['\\n']*100), tuple()))\n", "[1, 2, 3, '\\n', 4, 5, 6, '\\n', 7, 8, 9, '\\n', 10, 11, 12, '\\n', 13, 14, 15, '\\n',16, 17, 18, '\\n', 19, 20, 21, '\\n', 22, 23, 24, '\\n', 25, 26, 27, '\\n', 28, 29, 30, '\\n', 31, 32, 33, '\\n', 34, 35, 36, '\\n', 37, 38, 39, '\\n', 40, 41, 42, '\\n', 43, 44, 45, '\\n', 46, 47, 48, '\\n', 49, 50, 51, '\\n', 52, 53, 54, '\\n', 55, 56, 57, '\\n', 58, 59, 60, '\\n', 61, 62, 63, '\\n', 64, 65, 66, '\\n', 67, 68, 69, '\\n', 70, 71, 72, '\\n', 73, 74, 75, '\\n', 76, 77, 78, '\\n', 79, 80, 81, '\\n', 82, 83, 84, '\\n', 85, 86, 87, '\\n', 88, 89, 90, '\\n', 91, 92, 93, '\\n', 94, 95, 96, '\\n', 97, 98, 99, '\\n']\n", "print(*map(', '.join, zip(*[iter(map(str, range(1, 101)))]*3)), sep='\\n')\n", "1, 2, 3\n4, 5, 6\n7, 8, 9\n10, 11, 12\n13, 14, 15\n16, 17, 18\n19, 20, 21\n22, 23, 24\n25, 26, 27\n28, 29, 30\n31, 32, 33\n34, 35, 36\n37, 38, 39\n40, 41, 42\n43, 44, 45\n46, 47, 48\n49, 50, 51\n52, 53, 54\n55, 56, 57\n58, 59, 60\n61, 62, 63\n64, 65, 66\n67, 68, 69\n70, 71, 72\n73, 74, 75\n76, 77, 78\n79, 80, 81\n82, 83, 84\n85, 86, 87\n88, 89, 90\n91, 92, 93\n94, 95, 96\n97, 98, 99\n"], [], ["In [1]: a=[(1,2),(3,4),(5,6)]\n\nIn [2]: x,y=zip(*a)\n\nIn [3]: x\nOut[3]: (1, 3, 5)\n\nIn [4]: y\nOut[4]: (2, 4, 6)\n\nIn [5]: min(x),max(x)\nOut[5]: (1, 5)  #1 in min and 5 is max in x\n\nIn [6]: min(y),max(y)\nOut[6]: (2, 6)   #2 is min and 5 is max in y\n", "%timeit minmax(z) #ch3ster's answer\n1 loop, best of 3: 546 ms per loop\n\n%timeit  minmax1(z) #CDJB's answer\n1 loop, best of 3: 1.22 s per loop\n\n%timeit minmax2(z) #Mihai Alexandru-Ionut's answer\n1 loop, best of 3: 749 ms per loop\n\n%timeit minmax3(z) #Yevhen Kuzmovych's answer\n1 loop, best of 3: 1.59 s per loop\n", "In [24]: def minmax(a):\n    ...:     x=set()\n    ...:     y=set()\n    ...:     for i,j in a:\n    ...:         x.add(i)\n    ...:         y.add(j)\n    ...:     return max(x),min(x),max(y),min(y)\n", "z=[(randint(0,10),randint(0,10)) for _ in range(3000000)]\n", "x=[(randint(0,1000000),randint(0,1000000)) for _ in range(3000000)]\n"], ["result = \"\"\nfor i in range(1,101):\n  result += f\"{i}\" + (\", \" if i % 3 else \"\\n\")\n\nprint(result)\n", "result = \"\"\nfor i in range(1,101):\n  result += f\"{i}\" + (\",\\t\" if i % 3 else \"\\n\")\n"], ["for i in range(30):\n\n    print('%3d, ' %i, end='')\n\n    if (i+1) % 3 == 0:\n        print()\n", "  0,   1,   2, \n  3,   4,   5, \n  6,   7,   8, \n  9,  10,  11, \n 12,  13,  14, \n 15,  16,  17, \n 18,  19,  20, \n 21,  22,  23, \n 24,  25,  26, \n 27,  28,  29, \n"], ["import re\n\ntest_list = ['123Abc','234Asx','456Aio']\n\nresult = [' '.join(re.findall(r'[A-Za-z]+|\\d+', x)) for x in test_list]\n\nprint(result)\n", "['123 Abc', '234 Asx', '456 Aio']\n"], ["[e[:3] + ' ' + e[3:] for e in my_list]\n", "['123 Abc', '234 Asx', '456 Aio', '... ']\n"], ["from itertools import groupby\n\nl = ['123Abc','234Asx','456Aio']\nprint ([(i,list(j)) for i,j in groupby (l[0], key=lambda x:x[0].isdigit())])\n", "[(True, ['1', '2', '3']), (False, ['A', 'b', 'c'])]\n", "print ([''.join(j) for i,j in groupby (l[0], key=lambda x:x[0].isdigit())])\n", "['123', 'Abc']\n", "print ([[''.join(j) for i,j in groupby (item, key=lambda x:x[0].isdigit())] for item in l])\n", "[['123', 'Abc'], ['234', 'Asx'], ['456', 'Aio']]\n"], ["text = ['A'+i.split('A')[1] for i in list]\nnumbers = [i.split('A')[0] for i in list]\n", "['Abc', 'Asx', 'Aio']\n['123', '234', '456']\n"], ["numbers = [int(val[:3]) for val in list]\ntext = [val[3:] for val in list]\n"], [], ["from operator import itemgetter\nmax_x = max(mylist,key=itemgetter(0))[0]\n"], ["5 * (int(x/5) + 1 - round(x/5 % 1))\n", "5*(math.ceil(x/5) - round(x/5 % 1))\n", "def my_round(x): return int(x + 1) - round(x % 1)\ndef round5(x): return 5*my_round(x/5)\n"], ["def my_round(x: float, round_to: float = 5, dp: int = 0) -> float: \n    round_to *= 10**dp \n    x *= 10**dp \n    return ((x + round_to / 2) // round_to * round_to) / 10**dp \n", "values = [702.500, 702.222, 707.466, 703.021]\ntargets = [705., 700., 705., 705.]\nassert [my_round(x, 5, 0) for x in values] == targets\nassert my_round(3.25, 0.1, 1) == 36.3\n"], ["max_x, max_y = min_x, min_y = mylist[0]\nfor x, y in mylist:\n    max_x = max(max_x, x)\n    max_y = max(max_y, y)\n    min_x = min(min_x, x)\n    min_y = min(min_y, y)\n"], [], ["# my standard point to which rounding shoulding happen\n>>> standard_nums = [700, 702, 705, 708]\n\n\n# example value I am taking\n>>> my_num = 702.5 \n\n\n# this is how I would round my number\n>>> ret = abs(standard_nums[0] - my_num)\n>>> val = standard_nums[0]\n>>> for each in standard_nums[1:]:\n...     if abs(each - my_num) < ret:\n...             ret = abs(each - my_num)\n...             val = each\n...\n>>> ret # min diff I can find\n0.5\n>>> val # value you are lookin for\n702\n>>>\n\n## this above has a complexity of O(N)\n## where N is the size of your standard number\n"], ["max_y = max(mylist, key=lambda x: x[1])[1]\nmin_y = min(mylist, key=lambda x: x[1])[1]\nmax_x = max(mylist, key=lambda x: x[0])[0]\nmin_x = min(mylist, key=lambda x: x[0])[0]\n"], ["num = 707.466\nint = num / 5 # returns 141.4932\nrounded = round(int) # returns 141\nanswer = rounded * 5 # 705\n", "def round_to_five(num):\n    num = num / 5\n    num = round(num)\n    return num * 5\n"], ["def my_round(n):\n    lower = (n//5)*5;\n    upper = lower+5;\n\n    if (n-lower)<(upper-n):\n        return int(lower)\n    return int(upper)\n\nprint(my_round(703.021))\n"], ["from collections import defaultdict\n\n\nfiles = {\"Input.txt\": \"Randy\", \"Code.py\": \"Stan\", \"Output.txt\": \"Randy\"}    \nexpected = {\"Randy\": [\"Input.txt\", \"Output.txt\"], \"Stan\": [\"Code.py\"]}\n\n\n# 1st method. Using defaultdict\ninverted_dict = defaultdict(list)\n{inverted_dict[v].append(k) for k, v in files.items()}\nassert inverted_dict == expected, \"1st method\"\n\n# 2nd method. Using regular dict\ninverted_dict = dict()\nfor key, value in files.items():\n    inverted_dict.setdefault(value, list()).append(key)\nassert inverted_dict == expected, \"2nd method\"\n\nprint(\"PASSED!!!\")\n"], ["//assuming you have your variables in an array\nlet q = evaluatedQuery = [\"wd:Q82955\", \"wd:Q212238\", \"\", \"wd:Q116\"]\n\n//lenght of the binary string\nlet possibleCases = evaluatedQuery.length\nlet binaryCase = \"\"\n\n\nfor (let i = 0; i < possibleCases; i++) {\n\n    // this \"!!\" makes a value truthy or falsy,\n    // and converts that to an integer \"!!q[i] ^ 0\"\n\n    binaryCase = `${binaryCase}${!!q[i] ^ 0}`\n\n}\n\n//this finds out which of (q*q = 16) cases its gonna be\nlet parsedBinaryCase = parseInt(binaryCase, 2) + 1\n\n//this converts it to an array for easy handling\nlet binaryCaseArr = binaryCase.split(\"\")\n\n//this filers out falsy values by taking falsy values index\nlet boundQueryElements = evaluatedQuery.filter((el, i) => {\n    return !binaryCaseArr[i] != !!el ^ 0 \n})\n\nconsole.log(binaryCase) //output: 1101\nconsole.log(parsedBinaryCase) //output: 14\nconsole.log(boundQueryElements) //output: ['wd:Q82955','wd:Q212238','wd:Q116']\n\n//and this is a clean way to handle those 16 cases\n//in this example it would go to case 14\nswitch (parsedBinaryCase) {\n    case 1:\n        break\n    case 2:\n        break\n    case 3:\n        break\n    case 4:\n        break\n    case 5:\n        break\n    case 6:\n        break\n    case 7:\n        break\n    case 8:\n        break\n    case 9:\n        break\n    case 10:\n        break\n    case 11:\n        break\n    case 12:\n        break\n    case 13:\n        break\n    case 14:\n     // for (let el in boundQueryElements) {\n     // }\n        break\n    case 15:\n        break\n    case 16:\n        break\n    default:\n}\n\n"], [], [">>> from collections import Counter\n>>> l = [\"apples\", \"pears\", \"apples\"]\n>>> Counter(l)\nCounter({'apples': 2, 'pears': 1})\n", "from collections import Counter\n\nlist_ = []\n\nfor item in [\"first\", \"second\", \"third\"]:\n    input_value = input(f\"{item} iteration: \")\n    list_.append(input_value)\ncount = Counter(list_)\nprint(count) # output: Counter({'apples': 2, 'pears': 1})\nprint(count.most_common(1)) # output: [('apples', 2)]\n"], ["sales = [sales[i].strip('$') for i in range(len(sales))]\n", "['1.21', '2.29', '14.52', '6.13', '24.36', '33.85', '1.92']\n"], ["sales = ['$1.21', '$2.29', '$14.52', '$6.13', '$24.36', '$33.85', '$1.92']\n\nprint(s[1:] for s in sales)\n"], [">>> sales = ['$1.21', '$2.29', '$14.52', '$6.13', '$24.36', '$33.85', '$1.92']\n>>> [s.lstrip(\"$\") for s in sales]\n['1.21', '2.29', '14.52', '6.13', '24.36', '33.85', '1.92']\n"], ["sales = ['$1.21', '$2.29', '$14.52', '$6.13', '$24.36', '$33.85', '$1.92']\n[s.split('$')[1] for s in sales]\n['1.21', '2.29', '14.52', '6.13', '24.36', '33.85', '1.92']\n"], ["list(map(lambda x: x.strip('$'), sales))\n"], ["d = {}\nfor iteration in ['first', 'second', 'third']:\n    value = input(f'The {iteration} iteration is:')\n    if value in d:\n        d[value] += 1\n    else:\n        d[value] = 1\n\nprint(d)\n", "The first iteration is:apples\nThe second iteration is:peers\nThe third iteration is:apples\n{'apples': 2, 'peers': 1}\n", "from _collections import defaultdict\nd = defaultdict(lambda: 0)\nfor iteration in ['first', 'second', 'third']:\n    value = input(f'The {iteration} iteration is:')\n    d[value] += 1\n\nprint(dict(d))\n", "The first iteration is:apples\nThe second iteration is:peers\nThe third iteration is:apples\n{'apples': 2, 'peers': 1}\n"], ["from collections import Counter\n\nvalues = ['apples', 'peers', 'apples']\n\nCounter(values).most_common(1)\n\n>>> [('apples', 2)]\n"], ["my_list = ['apples', 'apples', 'peers', 'apples', 'peers']\nnew_dict = {}\n\nfor i in my_list:\n    if i in new_dict:\n        new_dict[i] += 1\n    else:\n        new_dict[i] = 1\n\nprint(new_dict)\n"], ["if 'apples' in dict:\n    dict['apples'] += 1\nelse:\n    dict['apples'] = 1\n", "most_listed = max(dict, key=lambda k: dict[k])\n"], ["import w3lib.html\noutput= w3lib.html.remove_tags(input)\nprint(output)\n"], ["from scrapy.utils.markup import remove_tags\nToRemove = remove_tags(YourOutPut)\nprint(ToRemove)\n"], [], [], ["def word_counter(passlist):\n    do_count = lambda x: len(x.split())\n    result=[]\n\n    for elem in passlist:\n        if isinstance(elem, list):\n            result += [word_counter(elem)]\n        elif isinstance(elem, str):\n            result += [do_count(elem)]\n\n    return result\n\nprint(word_counter([['We test robots'], ['Give us a try'], [' ']]))\n# output: [[3], [4], [0]]\n\nprint(word_counter(['First of all', ['One more test'], [['Trying different list levels'], [' ']], 'Something more here']))\n# output: [3, [3], [[4], [0]], 3]\n"], ["input = [['We test robots'], ['Give us a try'], [' ']]\noutput = []\n\nfor item in input:\n   output.append(len(item[0].split()))\n\nprint(output)  # [3, 4, 0]\n"], ["# using map\nlist(map(lambda x: len(x[0].split()) if len(x[0]) > 1 else 1, l))\n\n[3, 4, 1]\n\n# using list comprehension\n[len(x[0].split()) if len(x[0]) > 1 else 1 for x in l]\n\n[3, 4, 1]\n"], ["import re\nS =\"We test robots.Give us a try? \"\n\nsplitted = [l.split(',') for l in (re.split('\\.|\\!|\\?',S)) if l]\n\nitem =[]\nfor i in splitted:\n    item.append(len(i[0].split()))\n\nprint(item)\n"], ["import re\nS =\"We test robots.Give us a try? \"\n\nsplitted = [l.split(',') for l in (re.split('\\.|\\!|\\?',S)) if l]\n\nprint(splitted)\n\nfor sentence in splitted:\n    count = len(sentence[0].split())\n    if not count and sentence[0]:\n        count += 1\n    print(count)\n", "[['We test robots'], ['Give us a try'], [' ']]\n3\n4\n1\n"], ["In [3]: foo = {'my_key': 'value', 'other_key': 'other_val'}                                  \n\nIn [4]: foo.get('my_key')                                                                    \nOut[4]: 'value'\n\nIn [5]: bar = foo.pop('other_key')                                                           \n\nIn [6]: bar                                                                                  \nOut[6]: 'other_val'\n\nIn [7]: foo                                                                                  \nOut[7]: {'my_key': 'value'}\n\nIn [8]:  \n"], [], ["pd.concat([df1,pd.DataFrame(columns=['qx'+str(i) for i in range(11)], \n                            data=[ser1.T.loc[:,i:i+10].values.flatten().tolist()\n                                  for i in df1['age']])],\n          axis=1)\n\n    prod    age qx0 qx1 qx2 qx3 qx4 qx5 qx6 qx7 qx8 qx9 qx10\n0   Winalto_eu  28  2.9 3.0 3.2 3.4 3.7 4.1 4.6 5.1 5.6 6.1 6.7\n1   Winalto_uc  25  2.7 2.8 2.8 2.9 3.0 3.2 3.4 3.7 4.1 4.6 5.1\n2   CEM_eu  30  3.2 3.4 3.7 4.1 4.6 5.1 5.6 6.1 6.7 7.5 8.2\n"], ["top_n = 10\n\nvalues = [df2.loc[df2['age'].gt(x),'qx'].iloc[:top_n].tolist() for x in df1['age']]\n\ncoln = ['qx'+str(x) for x in range(1,11)]\n\ndf1[coln] = pd.DataFrame(values)\n\n         prod  age  qx1  qx2  qx3  qx4  qx5  qx6  qx7  qx8  qx9  qx10\n0  Winalto_eu   28  3.0  3.2  3.4  3.7  4.1  4.6  5.1  5.6  6.1   6.7\n1  Winalto_uc   25  2.8  2.8  2.9  3.0  3.2  3.4  3.7  4.1  4.6   5.1\n2      CEM_eu   30  3.4  3.7  4.1  4.6  5.1  5.6  6.1  6.7  7.5   8.2\n"], [], ["import pandas as pd\n\ndf1 = pd.DataFrame({'prod': ['Winalto_eu', 'Winalto_uc', 'CEM_eu'], 'age' : [28, 25, 30]})\ndf2 = pd.DataFrame({'age': list(range(25,41)), 'qx': [2.7, 2.8, 2.8, 2.9, 3, 3.2, 3.4, 3.7, 4.1, 4.6, 5.1, 5.6, 6.1, 6.7, 7.5, 8.2]})\n\nfor i in range(1,11):\n    df2['qx'+str(i)] = df2.qx.shift(-i)\n\ndf3 = pd.merge(df1,df2,how = 'left',on = ['age'])\n"], ["with open(\"test.txt\", \"r\") as test_file:\ncontent = test_file.readlines()\n\nprint(content)\nprint(type(content))\n\nfor data in content:\n    print(ast.literal_eval(data)[1])\n\nprint(\"*\" * 30)\nfor i in range(1, len(content)+1):\n    print(i)\n", "index:  0\n\n[[\"arg1\", \"arg2\", \"arg3\"], \"Fail\"]\n\nindex: 1\n\n[[\"arg1\", \"arg2\", \"arg4\"], \"Pass\"]\n", "1\n2\n"], ["{}['my_key']\n", "help(dict.get)\n\nget(...)\n    D.get(k[,d]) -> D[k] if k in D, else d.  d defaults to None.\n"], [], [">>> {}['my_key']\nTraceback (most recent call last):\n  File \"<stdin>\", line 1, in <module>\nKeyError: 'my_key'\n>>> {}.get('my_key')\n>>>\n", ">>> {}.pop('my_key')\nTraceback (most recent call last):\n  File \"<stdin>\", line 1, in <module>\nKeyError: 'my_key'\n>>> {}.pop('my_key', 3)\n3\n"], ["   word  freq\n0   fly     3\n1  Alex     1\n2  name     1\n0  Alex     1\n1   fly     1\n", "df.groupby('word').sum()\n", "       freq\nword      \nAlex     2\nfly      4\nname     1\n", "dic = pd.DataFrame()\nfor chunk in pd.read_csv(fileinput, names=['sentences'], skiprows=skip, chunksize=1):\n    dic_tmp = (chunk['sentences'].str.split(expand=True).stack().value_counts().rename_axis('word').reset_index(name='freq'))\n    dic = dic.append(dic_tmp)\ndic = dic.groupby('word').sum().reset_index().sort_values('freq',ascending=False)\ndic.to_csv('nenene.csv', index=False, header=None)\n"], ["[('fly', 4),\n ('alex', 2),\n ('ibrahim', 2),\n ('hi', 1),\n ('my', 1),\n ('name', 1),\n ('is', 1),\n ('i', 1),\n ('am', 1),\n ('how', 1),\n ('are', 1),\n ('you', 1),\n ('doing', 1)]\n", "fly 4\nalex 2\nibrahim 2\nhi 1\nmy 1\nname 1\nis 1\ni 1\nam 1\nhow 1\nare 1\nyou 1\ndoing 1\n"], ["import collections\n\nfreq = collections.Counter()\nwith open(filename) as f:\n  for line in f:\n    freq.update(line.split())\n"], [], ["chunks = pd.read_csv(fileinput, names=['sentences'], skiprows=skip, chunksize=chunksize)\nd = pd.concat(chunks)\nd2 = d['sentences'].str.split(expand=True).stack().value_counts().rename_axis('word').reset_index(name='freq')\n"], ["# -*- coding: utf-8 -*-\nimport re\nimport sys\nfrom pip._internal import main\n\nif __name__ == '__main__':\n    sys.argv[0] = re.sub(r'(-script\\.pyw?|\\.exe)?$', '', sys.argv[0])\n    sys.exit(main())\n"], ["   id     match\n0   1     hello\n1   2     there\n2   3       put\n3   4     stack\n4   5       new\n5   6  overflow\n6   7      data\n7   8        hi\n8   9       NaN\n"], ["df1.update(df2, join='left')\n"], ["       match\nid          \n1      hello\n2      there\n3        put\n4      stack\n5        new\n6   overflow\n7       data\n8         hi\n9        NaN\n"], ["df1[['id']].merge(df2,on = 'id',how = 'left').fillna({'match':df1['match']})\n\n   id     match\n0   1     hello\n1   2     there\n2   3       put\n3   4     stack\n4   5       new\n5   6  overflow\n6   7      data\n7   8        hi\n8   9       NaN\n"], ["new_df = df1.set_index('id').combine_first(df2.set_index('id'))\n", "print(new_df)\n\n       match\nid          \n1      hello\n2      there\n3        put\n4      stack\n5        new\n6   overflow\n7       data\n8         hi\n9        NaN\n", "df1[\"match\"] = df1[\"match\"].fillna(df1[\"id\"].map(df2.set_index(\"id\")[\"match\"]))\n\nprint(df1)\n\n   id     match\n0   1     hello\n1   2     there\n2   3       put\n3   4     stack\n4   5       new\n5   6  overflow\n6   7      data\n7   8        hi\n8   9       NaN\n"], ["pd.concat((df1,df2)).groupby('id').first().reset_index()\n", "   id     match\n0   1     hello\n1   2     there\n2   3       put\n3   4     stack\n4   5       new\n5   6  overflow\n6   7      data\n7   8        hi\n8   9       NaN\n"], ["df1['match'] = (\n    df1.set_index('id')['match'].fillna(df2.set_index('id')['match']).reset_index(drop=True)\n)\ndf3 = df1.copy()\n", "   id     match\n0   1     hello\n1   2     there\n2   3       put\n3   4     stack\n4   5       new\n5   6  overflow\n6   7      data\n7   8        hi\n8   9       NaN\n"], ["df.iloc[:, 4: ] = df.iloc[:, 4: ].astype(float).astype(\"Int64\")\nprint (df)\n   id  gender region  income   a1   a2   a3   a4   a5   a6   a7   a8   a9  a10\n0   1    male      N     300  NaN  NaN  NaN  NaN  NaN  NaN  NaN  NaN  NaN  NaN\n1   2  female      S     500    7   10   10   10    6    6    6    8    5    9\n2   3    male      E     200    6  NaN    9    6    6  NaN    7    7    7    9\n3   4  female      W     100    9    7    7  NaN    7    8    8    8  NaN    5\n", "df.iloc[:, 4: ] = df.iloc[:, 4: ].fillna(df.iloc[:, 4: ].mode().iloc[0]).astype(int)\n\nprint (df)\n   id  gender region  income  a1  a2  a3  a4  a5  a6  a7  a8  a9  a10\n0   1    male      N     300   6   7   7   6   6   6   6   8   5    9\n1   2  female      S     500   7  10  10  10   6   6   6   8   5    9\n2   3    male      E     200   6   7   9   6   6   6   7   7   7    9\n3   4  female      W     100   9   7   7   6   7   8   8   8   5    5\n"], ["cleanup_nums = {\"A1\":{\"Apple\":1, \"Samsung\":2}}\ndf.replace(cleanup_nums,inplace=True)\n"], ["columns = [\"A1\",\"A2\",\"A3\",\"A4\",\"A5\",\"A6\",\"A7\",\"A8\",\"A9\",\"A10\"]\n\ndf[columns] = df[columns].astype(\"Int8\")\n\nprint(df.dtypes)\n", "for c in columns:\n    x = df[c].mode()\n    x = list(x)[0]\n    df[c] = df[c].fillna(x).astype(\"int\")\n"], ["df.fillna(value=int(), inplace=True)\n", "df.fillna(value=int, inplace=True)\n"], ["#will remove line with Nan inside\ndf.dropna(inplace=True)\n", "#will replace Nan by a value e.g \"- 1\" \ndf.fillna(-1,inplace=True)\n"], ["for i in range(len(data)):\n    point = data[i] #the element ith in data\n    x = point[0] #the first coordenate of the point, x\n    y = point[1] #the second coordenate of the point, y\n    plt.scatter(x,y) #plot the point\nplt.show()\n", "x = []\ny = []\n\nfor i in range(len(data)):\n    point = data[i]\n    x.append(point[0])\n    y.append(point[1])\nplt.scatter(x,y)\nplt.show()\n"], [], ["data=pd.DataFrame(data='''array''')\n"], ["from numpy import array\nimport matplotlib.pyplot as plt\n\na = [array([2.40460915, 0.85513601]), array([1.80998096, 0.97406986]), array([2.14505475, 0.96109123]), \narray([2.12467111, 0.93991277])]\n\n# *i unpacks i into a tuple (i[0], i[1]), which is interpreted as (x,y) by plt.scatter\nfor i in a:\n    plt.scatter(*i)\n\nplt.show()\n"], [">>> import operator\n>>> f = operator.itemgetter(*mylist)\n>>> vals = map(f,d.values())\n>>> sums = map(sum,zip(*vals))\n>>> result = dict(zip(mylist,sums))\n>>> result\n{'age': 71, 'answ1': 11, 'answ2': 8, 'answ3': 12}\n"], [">>> ctr = sum(map(Counter, d.values()), Counter())\n>>> [ctr[x] for x in mylist]\n[71, 11, 8, 12]\n", ">>> [sum(e[k] for e in d.values()) for k in mylist]\n[71, 11, 8, 12]\n", ">>> dict(sum(map(Counter, d.values()), Counter()))\n{'age': 71, 'answ1': 11, 'answ2': 8, 'answ3': 12}\n", ">>> sum(map(Counter, d.values()), Counter())\nCounter({'age': 71, 'answ3': 12, 'answ1': 11, 'answ2': 8})\n"], ["result = {i: 0 for i in mylist}\n\nfor k, v in d.items():\n    result['age'] += v['age']\n    result['answ1'] += v['answ1']\n    result['answ2'] += v['answ2']\n    result['answ3'] += v['answ3']\n\nresult\n{'age': 71, 'answ1': 11, 'answ2': 8, 'answ3': 12}\n", "result = {i: 0 for i in mylist}\nfor k, v in d.items():\n    for ke, va in v.items():\n        result[ke] += v[ke]\n"], [">>> vals = [[v[k] for k in mylist] for v in d.values()]\n>>> vals\n[[19, 3, 7, 2], [52, 8, 1, 10]]\n", ">>> result = map(sum, zip(*vals))\n>>> list(result)\n[71, 11, 8, 12]\n", ">>> result = map(sum, zip(*([v[k] for k in mylist] for v in d.values())))\n>>> list(result)\n[71, 11, 8, 12]\n"], ["for i in mylist:\ncount=0\nfor k,v in d.items():\n    for ke, va in v.items():\n        if ke == i:\n            count+=va\ntot.append(count)\n"], ["mylist = ['age','answ1', 'answ2', 'answ3']\nd = {'01': {'age':19, 'answ1':3, 'answ2':7, 'answ3':2}, '02': {'age':52, 'answ1':8, 'answ2':1, 'answ3':10}}\n\ntot = [0] * len(mylist)\nfor k in d:\n    for idx, i in enumerate(mylist):\n        tot[idx] += d[k].get(i, 0)\n\nprint(tot)\n", "[71, 11, 8, 12]\n"], ["import ast\n\nwith open('list.txt') as f:\n    lines = f.readlines()\n\ndata = [ast.literal_eval(line) for line in lines]\n\nfor item in data:\n    print(item[1])\n"], ["lists = []\nline1 = '[[\"arg1\", \"arg2\", \"arg3\"], \"Fail\"]'\nline2 = '[[\"arg1\", \"arg2\", \"arg4\"], \"Pass\"]'\n# Evaluate Lines\nexLine1 = eval(line1)\nexLine2 = eval(line2)\n# Append Lines to lists\nlists.append(exLine1)\nlists.append(exLine2)\n# Testing Example of your use case\nprint(str(exLine1[1] == \"Fail\"))\n"], ["[[\"arg1\", \"arg2\", \"arg3\"], \"Fail\"]\n[[\"arg1\", \"arg2\", \"arg4\"], \"Pass\"]\n", "file1 = open('myfile.txt', 'r') \ncount = 0\n\nwhile True: \n    count += 1\n\n    # Get next line from file \n    list = file1.readline()\n    if not list: \n        break\n    #convert string to list\n    res = list.strip('][').split(', ') \n    print(res[1])\n"], ["text = \"\"\"\n[[\"arg1\", \"arg2\", \"arg3\"], \"Fail\"]\n[[\"arg1\", \"arg2\", \"arg4\"], \"Pass\"]\n\"\"\"\n\nfor line in text.strip().splitlines():\n    line = line.replace('[', '')\n    line = line.replace(']', '')\n    print line.split(',')[-1].strip()\n"], ["[[\"arg1\", \"arg2\", \"arg3\",\"arg4\"], \"Fail\"]\n[[\"arg1\", \"arg2\", \"arg4\"], \"Pass\"]\n", "[[['arg1', 'arg2', 'arg3', 'arg4'], 'Fail'], [['arg1', 'arg2', 'arg4'], 'Pass']]\n['arg1', 'arg2', 'arg3', 'arg4']\nFail\n"], ["# load additional module\nimport pickle\n\nwith open('listfile.data', 'rb') as filehandle:\n    # read the data as binary data stream\n    placesList = pickle.load(filehandle)\n"], ["def complex_data_calc():\n    return range(42)\n\nclass Foo:\n    bar = compex_data_calc()\n\n    def __init__(self):\n        pass\n", "class Foo:\n    @staticmethod\n    def bar():\n        return range(42)\n\n    def __init__(self):\n        pass\n", "from foopackage import Foo\nFoo.bar    # variant 1\nFoo.bar()  # variant 2\n"], ["class Foo:\n    @classmethod # don't have to be but will likely benefit from being classmethods...\n    def _define_something_really_complicated(cls):\n        ...\n    @classmethod\n    def _define_something_else_really_complicated(cls):\n        ...\n    @classmethod\n    def _build(cls):\n        cls._define_something_really_complicated()\n        cls._define_something_else_really_complicated()\n        ...\n    def __init__(self):\n        ...\n\nFoo._build() # where your module is defined.\n"], ["import numpy as np    \n\nclass Foo:\n    bar = np.range(100)\n    def __init__(self):\n        # etc.\n", "class Foo:\n    @classmethod\n    def initialize_bar(cls):\n        cls.bar = np.range(100)\n", ">>> from foopackage import Foo\n>>> Foo.bar\nTraceback (most recent call last):\n  File \"<stdin>\", line 1, in <module>\nAttributeError: type object 'Foo' has no attribute 'bar'\n>>> Foo.initialize_bar()\n>>> Foo.bar\narray([ 0,  1,  2,  3,  4,  5,  6,  7,  8,  9, 10, 11, 12, 13, 14, 15, 16,\n       17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33,\n       34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50,\n       51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67,\n       68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84,\n       85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99])\n"], ["# module1.py\ndef foo():\n  return bar\n\nA = 100\nprint('You just imported module1')\n"], ["#file Foo.py\n\nimport numpy as np\n\nbar = np.range(100)\n\nclass foo:\n    pass\n", "# file main.py\nimport Foo\n\nb = Foo.bar\nfoo_instance = Foo.foo()\n"], ["s = df.score\nm = ((s - s.mean()) / s.std()).abs() > 1.5\ndf['score'] =  df['score'].mask(m).interpolate()\n\nOut[701]:\n       date      score\n0   2018-07  51.964556\n1   2018-08  63.497871\n2   2018-09  85.304209\n3   2018-10  69.840105\n4   2018-11  54.376001\n5   2018-12  65.844745\n6   2019-01  53.050123\n7   2019-02  39.915868\n8   2019-04  48.701537\n9   2019-05  57.487205\n10  2019-06  68.683273\n11  2019-07  79.879340\n12  2019-08  77.007162\n13  2019-09  54.567136\n14  2019-10  63.899944\n"], ["df.loc[df['score'].lt(10), 'score'] = np.nan\nprint(df.interpolate())\n", "       date      score\n0   2018-07  51.964556\n1   2018-08  63.497871\n2   2018-09  85.304209\n3   2018-10  69.840105\n4   2018-11  54.376001\n5   2018-12  65.844745\n6   2019-01  53.050123\n7   2019-02  39.915868\n8   2019-04  48.701537\n9   2019-05  57.487205\n10  2019-06  95.101470\n11  2019-07  79.879340\n12  2019-08  77.007162\n13  2019-09  54.567136\n14  2019-10  63.899944\n"], ["from scipy import stats\nmask = (np.abs(stats.zscore(df['score'])) > 1.5)\ndf.score = df.score.mask(mask).interpolate()\nprint (df)\n       date      score\n0   2018-07  51.964556\n1   2018-08  63.497871\n2   2018-09  85.304209\n3   2018-10  69.840105\n4   2018-11  54.376001\n5   2018-12  65.844745\n6   2019-01  53.050123\n7   2019-02  39.915868\n8   2019-04  48.701537\n9   2019-05  57.487205\n10  2019-06  68.683273\n11  2019-07  79.879340\n12  2019-08  77.007162\n13  2019-09  54.567136\n14  2019-10  63.899944\n"], ["n = 2\ndf['score'] = (df['score'].mask(df['score'].pct_change()\n                                           .shift(-1)\n                                           .abs()\n                                           .gt(n))\n                           .interpolate() )\nprint(df)\n", "import numpy as np\nscore_mean = df['score'].mean()\nscore_std  = df['score'].std()\nn = np.sqrt(3)\nvalid = df['score'].between(score_mean-n*score_std,score_mean+n*score_std)\ndf['score'] = df['score'].where(valid).interpolate()\n", "       date      score\n0   2018-07  51.964556\n1   2018-08  63.497871\n2   2018-09  85.304209\n3   2018-10  69.840105\n4   2018-11  54.376001\n5   2018-12  65.844745\n6   2019-01  53.050123\n7   2019-02  39.915868\n8   2019-04  48.701537\n9   2019-05  57.487205\n10  2019-06  95.101470\n11  2019-07  79.879340\n12  2019-08  77.007162\n13  2019-09  54.567136\n14  2019-10  63.899944\n"], ["import numpy as np\nfrom scipy.stats import iqr\n\ndef outliers(df, factor=1.5):\n    limit1 = np.quantile(df, 0.25) - factor * iqr(df)\n    limit2 = np.quantile(df, 0.75) + factor * iqr(df)\n    outliers = df[(df < limit1) | (df > limit2)]\n    return outliers\n\noutlier = outliers(df['score'])\n\ndf['score'] = df['score'].replace(outlier, np.nan).interpolate()\n", "       date      score\n0   2018-07  51.964556\n1   2018-08  63.497871\n2   2018-09  85.304209\n3   2018-10  69.840105\n4   2018-11  54.376001\n5   2018-12  65.844745\n6   2019-01  53.050123\n7   2019-02  39.915868\n8   2019-04  48.701537\n9   2019-05  57.487205\n10  2019-06  95.101470\n11  2019-07  79.879340\n12  2019-08  77.007162\n13  2019-09  54.567136\n14  2019-10  63.899944\n"], [], ["def generator(some_list):\n    for i in some_list:\n        raise Exception('exception happened :-)')\n        yield i\n\ndef generate_all():\n    some_list = [1,2,3]\n    return generator(some_list)\n\nfor item in generate_all():\n    ...\n", "def generate_all():\n    some_list = [1,2,3]\n    yield from generator(some_list)\n\nfor item in generate_all():\n    ...\n", "def generator(some_list):\n    for i in some_list:\n        yield i\n\ndef generate_all():\n    some_list = [1,2,3]\n    yield 'start'\n    yield from generator(some_list)\n    yield 'end'\n\nfor item in generate_all():\n    print(item)\n", "map(do_something, get_the_list())          # map\n(do_something(i) for i in get_the_list())  # generator expression\n"], ["import re\nstr = \"Psg January 1, 2020 hsjkfsdlkfhshdfh January 2, 1908 hdhahhajshjdjoi December 31, 2019 fafsfafagherhea\"\nx = re.findall(\"\\w+\\s+\\d{1,2},\\s+\\d{4}\", str)\nprint(x)\n", "Output :\n\n['January 1, 2020', 'January 2, 1908', 'December 31, 2019']\n"], ["import datefinder\ntext = \"Psg January 1, 2020 hsjkfsdlkfhshdfh January 2, 1908 hdhahhajshjdjoi December 31, 2019 fafsfafagherhea\"\nmatches = datefinder.find_dates(text)\n\nfor match in matches:\n    print(match)\n", "2020-01-01 00:00:00\n1908-01-02 00:00:00\n2019-12-31 00:00:00\n"], ["months = ['January', 'February', 'March', 'April', 'May', 'June',\n      'July', 'August', 'September', 'October', 'November', 'December']\n\ndate_info = \"Psg January 1, 2020 hsjkfsdlkfhshdfh January 2, 1908 hdhahhajshjdjoi December 31, 2019 fafsfafagherhea\"\n\nfor month in months:\n    while month in date_info.split():\n        m = month\n        day = date_info.split()[date_info.split().index(month) + 1]\n        year = date_info.split()[date_info.split().index(month) + 2]\n        self_str = month + \" \" + day + \" \" + year\n        rep_str = day.strip(',') + \". \" + month +\"~ \" + year\n        date_info = date_info.replace(self_str, rep_str)\nwhile '~' in date_info:\n    date_info = date_info.replace(\"~\", \"\")\nprint(date_info)\n"], [], ["message = \"Psg January 1, 2020 hsjkfsdlkfhshdfh January 2, 1908 hdhahhajshjdjoi December 31, 2019 fafsfafagherhea\"\nmatches = re.findall(\n    r'((?:January|February|March|April|May|June|July|August|September|October|November|December)\\s+\\d+,\\s+\\d+)',\n    message)\nfor match in matches:\n    print(match)\n", "from datetime import datetime\n\ninput_format = \"%B %d, %Y\" # full month name, day and year\noutput_format = \"%d.%B %Y\"\nfor match in matches:\n    new_date = datetime.strptime(match, input_format).strftime(output_format)\n    print(match, \">>\", new_date)\n"], [], ["txt = '''Psg January 1, 2020 hsjkfsdlkfhshdfh January 2, 1908 hdhahhajshjdjoi December 31, 2019 fafsfafagherhea'''\nimport re\n\nr = re.compile(r'(January|February|March|April|May|June|July|August|September|October|November|December)\\s*(\\d+),\\s*(\\d+)')\n\nnew_txt = r.sub(r'\\2. \\1 \\3', txt)\nprint(new_txt)\n", "Psg 1. January 2020 hsjkfsdlkfhshdfh 2. January 1908 hdhahhajshjdjoi 31. December 2019 fafsfafagherhea\n"], ["temp = {}\nwith open(\"myfile.txt\", 'r') as myfile:\n    search_mode = False\n    for idx, line in enumerate(myfile):       # enumerate() return tuple : index + content  \n        if not search_mode and \"IPT\" in line: # action 1\n            temp[idx] = line.rstrip()\n            search_mode = True\n        elif search_mode and \"TOP\" in line:   # action 2\n            print(line)\n            search_mode = False\n", "print(json.dumps(temp, indent=4))\n# >>>\n...TOP... # I want get this line**\n\n...TOP... # I want get this line.**\n{\n    \"7\": \"**...IPT...\",\n    \"16\": \"**...IPT...\"\n}\n"], ["result = {}\nwith open(\"myfile.txt\", 'r') as f:\n    ipt_found = False\n    for index, line in enumerate(f):\n        # For every line number and line in the file\n        if 'IPT' in line:\n            # If we find IPT in the line then we set ipt_found to True\n            ipt_found = True\n        elif 'TOP' in line and ipt_found:\n            # If we find TOP in the line and ipt_found is True then we add the line\n            result[index] = line\n            # Set ipt_found to False so we don't append anymore lines with TOP in\n            # until we find another line with IPT in\n            ipt_found = False\nprint(result)\n"], ["lines = myfile.readlines()\nfor i, line in enumerate(lines):\n\n...\n\n    if line[12:17] == \"IPT\":\n        temp[fileNum] = line.replace('\\n', '')\n\n        for j, line2 in enumerate(lines[i:]):\n        if line2[12:15] == \"TOP\":\n            print(line2)\n            break\n"], ["temp = { } # Keys will be the line number, and values will be the lines that contains \"IPT\" with newline character removed\nwith open(\"myfile.txt\", 'r') as myfile:\n    fileNum = 0\n    found = False\n    for line in myfile.readlines():\n        fileNum +=1\n        if line[12:17] == \"IPT\":\n            temp[fileNum] = line.replace('\\n', '')\n            found = True\n        if found == True && line[12:15] == \"TOP\":\n            print(line)\n            break\n"], [], ["return generator(list)\n", "yield from generator(list)\n", "for i in generator(list):\n    yield i\n"], [], ["yield from generator(list)\n", "def generator_all_and_then_some():\n    list = get_the_list()\n    yield from generator(list)\n    yield \"one last thing\"\n"], [], [], ["import timeit\n\ndef pattern1():\n  title = ['great', 'expectations','the', 'adventures', 'of', 'sherlock','holmes','the','great','gasby','hamlet','adventures','of','huckleberry','fin']\n  counts = {}\n  for word in title:\n    if word in counts:\n      counts[word] += 1\n    else:\n      counts[word] = 1\n\ndef pattern2():\n  title = ['great', 'expectations','the', 'adventures', 'of', 'sherlock','holmes','the','great','gasby','hamlet','adventures','of','huckleberry','fin']\n  counts = {}\n  for word in title:\n    if word not in counts:\n      counts[word] = 1\n    else:\n      counts[word] += 1\n\nsample1 = [timeit.timeit(pattern1, number=10000) for _ in range(10)]\nsample2 = [timeit.timeit(pattern2, number=10000) for _ in range(10)]\n\nprint(sum(sample1) / len(sample1))\n# 0.01713230140048836\nprint(sum(sample2) / len(sample2))\n# 0.017954919600015273\n"], ["0.021044015884399414\n0.02713179588317871\n"], ["import collections\nbook_title = ['great', 'expectations','the', 'adventures', 'of', 'sherlock','holmes','the','great','gasby','hamlet','adventures','of','huckleberry','fin']\nword_counts = collections.Counter(book_title)\nprint(word_counts)\n# Counter({'great': 2, 'the': 2, 'adventures': 2, 'of': 2, 'expectations': 1, 'sherlock': 1, 'holmes': 1, 'gasby': 1, 'hamlet': 1, 'huckleberry': 1, 'fin': 1})\n"], [], ["from collections import Counter\n\ns = pd.Series(Counter(df.to_numpy().flatten()))\n\nIn [1325]: s\nOut[1325]:\nA    7\nB    4\nC    1\ndtype: int64\n"], ["df['name1'].append(df['name2']).value_counts()\n\nA    7\nB    4\nC    1\ndtype: int64\n", "df['name1'].append(df['name2']).value_counts().rename_axis('name').reset_index(name='new')\n\n  name  new\n0    A    7\n1    B    4\n2    C    1\n"], ["df[['name1','name2']].stack().value_counts()\n#df.stack().value_counts() for all cols\n", "A    7\nB    4\nC    1\n", "(df[['name1','name2']].stack().value_counts().\n      to_frame('new').rename_axis('name').reset_index())\n\n  name  new\n0    A    7\n1    B    4\n2    C    1\n"], ["df.name1.value_counts().add(df.name2.value_counts(), fill_value=0).astype(int)  \n", "A    7\nB    4\nC    1\ndtype: int64\n"], ["df.melt().value.value_counts()\nOut[17]: \nA    7\nB    4\nC    1\nName: value, dtype: int64\n"], ["# Add a comma at the end\nprint symbol,\n", "# Use the \"end\" keyword argument\nprint(symbol, end=\"\")\n", "for RowCounter in range(NumberOfRows):\n    for ColumnCounter  in range(numberOfColumns):\n        print(symbol, end=\"\")\n    print()\n"], ["NumberOfRows = int(input(\"Enter number of columns\"))\nNumberOfColumns = int(input(\"Enter number of columns\"))\nSymbol = input(\"Enter the chosen symbol\")\nRowCounter = 1\nColumnCounter = 1\nfor RowCounter  in range(NumberOfRows):\n   for ColumnCounter  in range(NumberOfColumns):\n       print(Symbol,end=\"\")\n   print()\n"], ["cols = int(input(\"Enter number of columns:\\n > \"))\nrows = int(input(\"Enter number of rows:\\n > \"))\nsymb = input(\"Enter symbol:\\n > \")\n\ntext = '\\n'.join([symb * cols for _ in range(rows)])\n\nprint(text)\n", "Enter number of columns:\n > 5\nEnter number of rows:\n > 3\nEnter symbol:\n > &\n&&&&&\n&&&&&\n&&&&&\n", "NumberOfColumns = int(input(\"Enter number of columns\"))\nSymbol = input(\"Enter the chosen symbol\")\nRowCounter = 1\nColumnCounter = 1\nfor RowCounter  in NumberOfRows:\n    for ColumnCounter  in numberOfColumns:\n        print(symbol)\nprint(symbol)\n"], ["rows = int(input('Enter the number of rows: '))\ncolumns = int(input('Enter the number of columns: '))\nsymbol = input('Enter the symbol: ')\n\n# I use an `_` since the variable isn't being used\nfor _ in range(rows):\n    print(symbol * columns)\n"], ["[[\"&\"] * 7] * 3\n"], ["import pandas as pd \n\ndf = pd.DataFrame({\"time_col\" : pd.date_range(\"2018-01-01\", \"2019-01-01\", freq = \"H\")})\ndf[\"date\"], df[\"time\"] = df[\"time_col\"].dt.date, df[\"time_col\"].dt.hour \ndf[\"value\"] = pd.np.random.randint(100, 150, df.shape[0])\n\nseed = 11 # deterministic behavior, that's what heroes do\nrnd_rows_idx = df.sample(frac = 0.2, random_state=seed).index # grabbing indexes\n\noriginal_rows = df.loc[rnd_rows_idx, \"value\"] # keeping a trace of original values\n\n### Replacing the values selected at random ### \n\ndf.loc[rnd_rows_idx, \"value\"] = pd.np.random.randint(1, 50, rnd_rows_idx.shape[0])\n"], ["outliers = []\ndef get_outlier(x):\n    num = 3\n    mean_ = np.mean(x)\n    std_ = np.std(x)\n    for y in x:\n        z_score = (y - mean_) / std_\n        if np.abs(z_score) > num:\n            outliers.append(y)\n    return get_outlier\n\ndetect_outliers = get_outlier(df['value'])\nsorted(df['value'])\nq1, q3 = np.percentile(df['value'], [25, 75])\niqr = q3 - q1\nlb = q1 - (1.5 * iqr)\nub = q3 - (1.5 * iqr)\n\nfor i in range(len(df)):\n    if ((df['value'][i] < lb) | (df['value'][i] > ub)):\n        df['value'][i] = np.random.randint(1, 50)\n"], ["import numpy as np\nimport pandas as pd\n\nd = {'date':[\"2016-11-10\", \"2016-11-10\", \"2016-11-11\", \"2016-11-11\",\"2016-11-11\",\"2016-11-11\",\"2016-11-11\", \"2016-11-11\" ],\n     'time': [\"22:00:00\", \"23:00:00\", \"00:00:00\", \"01:00:00\", \"02:00:00\", \"03:00:00\", \"04:00:00\", \"04:00:00\"],\n     'value':[90, 91, 80, 87, 84,94, 91, 94]}\n\ndf = pd.DataFrame(d)\n\nrandom_rows = df.sample(frac=.2)    # 20% random rows from `df`\n\n# we are replacing these 20% random rows with values from 1..50 and 200..300 (in ~1:1 ratio)\nrandom_values = np.random.choice( np.concatenate( [np.random.randint(1, 50, size=len(random_rows) // 2 + 1),\n                                                   np.random.randint(200, 300, size=len(random_rows) // 2 + 1)] ),\n                size=len(random_rows) )\ndf.loc[random_rows.index, 'value'] = random_values\nprint(df)\n", "         date      time  value\n0  2016-11-10  22:00:00     31   <-- 31\n1  2016-11-10  23:00:00     91\n2  2016-11-11  00:00:00     80\n3  2016-11-11  01:00:00     87\n4  2016-11-11  02:00:00     84\n5  2016-11-11  03:00:00    236   <-- 236\n6  2016-11-11  04:00:00     91\n7  2016-11-11  04:00:00     94\n"], ["d = {'date':[\"2016-11-10\", \"2016-11-10\", \"2016-11-11\", \"2016-11-11\",\"2016-11-11\",\"2016-11-11\",\"2016-11-11\", \"2016-11-11\" ], \n        'time': [\"22:00:00\", \"23:00:00\", \"00:00:00\", \"01:00:00\", \"02:00:00\", \"03:00:00\", \"04:00:00\", \"04:00:00\"], \n        'value':[90, 91, 80, 87, 84,94, 91, 94]} \n\ndf = pd.DataFrame(d) \n\n# create a function\ndef myFunc(df, replace_pct, start_range, stop_range, replace_col):\n    # create an array of the col you want to replace\n    val = df[replace_col].values \n    # create a boolean mask for the percent you want to replace\n    mask = np.random.choice([0,1], p=[1-replace_pct, replace_pct], size=val.shape).astype(np.bool)\n    # create a random ints between the range\n    rand = np.random.randint(start_range, stop_range, size=len(mask[mask == True]))\n    # replace values in the original array\n    val[mask] = rand\n    # update column\n    df[replace_col] = val\n    return df\n\nmyFunc(df, .2, 1, 50, 'value')\n\n         date      time  value\n0  2016-11-10  22:00:00     90\n1  2016-11-10  23:00:00     91\n2  2016-11-11  00:00:00     80\n3  2016-11-11  01:00:00     87\n4  2016-11-11  02:00:00     46\n5  2016-11-11  03:00:00     94\n6  2016-11-11  04:00:00     91\n7  2016-11-11  04:00:00     94\n", "# create a function\ndef myFunc2(df, replace_pct, start_range_low, stop_range_low,\n            start_range_high, stop_range_high, replace_col):\n    # create array of col you want to replace\n    val = df[replace_col].values \n    # create a boolean mask for the percent you want to replace\n    mask = np.random.choice([0,1], p=[1-replace_pct, replace_pct], size=val.shape).astype(np.bool)\n    # create a random int between ranges\n    rand = np.random.randint(start_range_low, stop_range_low, size=len(mask[mask == True]))\n    # create a mask for the higher range\n    mask_high = np.random.choice([0,1], p=[.5, .5], size=rand.shape).astype(np.bool)\n    # create random ints between high ranges\n    rand_high = np.random.randint(start_range_high, stop_range_high, size=len(mask_high[mask_high == True]))\n    # replace values in the rand array\n    rand[mask_high] = rand_high\n    # replace values in the original array\n    val[mask] = rand\n    # update column\n    df[replace_col] = val\n    return df\n\nmyFunc2(df, .2, 1, 50, 200, 300, 'value')\n\n\n         date      time  value\n0  2016-11-10  22:00:00     90\n1  2016-11-10  23:00:00    216\n2  2016-11-11  00:00:00     80\n3  2016-11-11  01:00:00     49\n4  2016-11-11  02:00:00     84\n5  2016-11-11  03:00:00     94\n6  2016-11-11  04:00:00    270\n7  2016-11-11  04:00:00     94\n"], ["In [49]: # %load 32-36 \n    ...: df=pd.DataFrame(dict) \n    ...: import random \n    ...: replacement_ratio = 0.50 \n    ...: replacement_count = int(replacement_ratio * len(df)) \n    ...: replacement_idx = random.sample(range(len(df)), replacement_count)            \n\nIn [50]: replacement_idx                                                              \nOut[50]: [5, 2, 7, 6]\n\nIn [51]: for idx in replacement_idx: \n    ...:     df.loc[idx, 'value'] = random.randint(0,20) \n    ...:                                                                              \n\nIn [52]: df                                                                           \nOut[52]: \n         date      time  value\n0  2016-11-10  22:00:00     90\n1  2016-11-10  23:00:00     91\n2  2016-11-11  00:00:00      4\n3  2016-11-11  01:00:00     87\n4  2016-11-11  02:00:00     84\n5  2016-11-11  03:00:00      4\n6  2016-11-11  04:00:00     17\n7  2016-11-11  04:00:00      8\n\nIn [53]: \n"], ["values = ['3,25', '3,15', '1,78', '2,10', '1,06', '1,58', '1,88', '1,19', '4,00', '2,45', '2,25', '3,00', '2,95', '2,45', '2,30', '1,52', '1,96', '6,50', '4,20', '1,27']\nfound = [i for i in map(lambda n: float(n.replace(',', '.')), values) if 1.50 < i < 2.50]\n\nfor i in found:\n   print(i)\n", "1.78\n2.1\n1.58\n1.88\n2.45\n2.25\n2.45\n2.3\n1.52\n1.96\n"], [], ["# Bad name, use something else as \"list\" is a built-in type    \nlist = ['3,25', '3,15', '1,78', '2,10', '1,06', '1,58', '1,88', '1,19', '4,00', '2,45', '2,25', '3,00', '2,95', '2,45', '2,30', '1,52', '1,96', '6,50', '4,20', '1,27']\n\n# The numbers to extract from the list of strings\nnumbers = []\n\n# For each number (as string), reformat the string and then cast it to a floating number \nfor number_str in list:\n   number = float(number_str.replace(',', '.'))\n   numbers.append(number)\n", "for n in numbers:\n   if 1.50 <= n <= 2.50:\n      print(\"{} is between 1.50 and 2.50\".format(n))\n      break\n"], ["list_ = ['3,25', '3,15', '1,78', '2,10', '1,06', '1,58', '1,88', '1,19', '4,00', '2,45', '2,25', '3,00', '2,95', '2,45', '2,30', '1,52', '1,96', '6,50', '4,20', '1,27']\n\nlist_number = [float(number.replace(\",\",\".\")) for number in list_]    \nfound = filter(lambda x: 1.50 <= x <= 2.50, list_number)\n\nfor value in found:\n    print(value)\n", "found = filter(lambda x: \"1,50\" <= x <= \"2,50\", list_)\n", "1.78\n2.1\n1.58\n1.88\n2.45\n2.25\n2.45\n2.3\n1.52\n1.96\n"], ["for elem in list:\n  if '1,50' <= elem <= '2,50':\n    print(True)\n    break\n"], ["for var in list1:\n    exec(var + \"={}\")\n"], ["result = {}\nfor idx in list1:\n    result[idx] = {}\n\nprint(result)\n# {'x': {}, 'y': {}, 'z': {}}\n"], ["list1 = [\"x\",\"y\",\"z\"]\nd = {}\n\nfor i in list1:\n    d[i] = {}\n"], ["for i in list1:\n    locals()[i] = dict()\n"], ["list1 = [\"x\",\"y\",\"z\"]\nfor i in list1:\n    globals()[i] = dict()\n", "x = {}\ny = {}\nz = {}\n", "print(x)\nprint(type(x))\nprint(y)\nprint(type(y))\nprint(z)\nprint(type(z))\n"], ["$ pip install -r requirements.txt\n", "requirements = []\nwith open('requirements.txt', 'r') as fh:\n    for line in fh:\n        requirements.append(line.strip())\n", "install_requires = requirements\n", "pip install --index-url https://test.pypi.org/simple/ --upgrade --no-cache-dir --extra-index-url=https://pypi.org/simple/ <<package name>>\n"], ["    message = \"hello\"\n    for index,char in enumerate(message):\n        print(char,index)\n"], ["for i,char in enumerate(message):\n    print(char,i)\n"], ["message = \"hello\"\nfor i, char in enumerate(message):\n    print(char, i)\n"], ["message = \"hello\"\nfor count, char in enumerate(message):\n    print(char, count)\n"], ["for idx, char in enumerate(message):\n    print(char, idx)\n"], [], ["lst = [1,2,3,4,5,6,7,8]\nlst[4:] = map(lambda x:x+2, lst[4:])\n\nprint(lst)\n# [1, 2, 3, 4, 7, 8, 9, 10]\n"], ["lst1 = [1, 2, 3, 4, 5, 6, 7, 8]\nnew_list = [*lst[:4], *[x+2 for x in lst1[4:]]]\n# or even better\nnew_list[4:] = [x+2 for x in lst1[4:]]\n", "import timeit\nimport numpy as np\n\nlst1 = [1, 2, 3, 4, 5, 6, 7, 8]\nnpa = np.array(lst)\n\n\ndef numpy_it():\n    global npa\n    npa[4:] += 2\n\n\ndef python_it():\n    global lst1\n    lst1 = [*lst1[:4], *[x+2 for x in lst1[4:]]]\n\n\nprint(timeit.timeit(numpy_it))\nprint(timeit.timeit(python_it))\n", "1.7008036\n0.6737076000000002\n", "import timeit\nimport numpy as np\n\nlst1 = list(range(0, 10000))\nnpa = np.array(lst1)\nlst2 = list(range(0, 10000))\nlst3 = list(range(0, 10000))\n\n\ndef numpy_it():\n    global npa\n    npa[4:] += 2\n\n\ndef python_it():\n    global lst1\n    lst1 = [*lst1[:4], *[x+2 for x in lst1[4:]]]\n\n\ndef python_it_slice():\n    global lst2\n    lst2[4:] = [x+2 for x in lst2[4:]]\n\n\ndef python_inplace():\n    global lst3\n    for i in range(4, len(lst3)):\n        lst3[i] = lst3[i] + 2\n\n\nn = 10000\nprint(timeit.timeit(numpy_it, number=n))\nprint(timeit.timeit(python_it_slice, number=n))\nprint(timeit.timeit(python_it, number=n))\nprint(timeit.timeit(python_inplace, number=n))\n", "0.057994199999999996\n4.3747423\n4.5193105000000005\n9.949074000000001\n"], ["lst[4:] = [x+2 for x in lst[4:]]\n", "import timeit\nlst = [1, 2, 3, 4, 5, 6, 7, 8]\n\ndef python_it():\n    global lst\n    lst = [*lst[:4], *[x+2 for x in lst[4:]]]\n\ndef python_it2():\n    global lst\n    lst[4:] = [x+2 for x in lst[4:]]\n\n\nprint(timeit.timeit(python_it))\nprint(timeit.timeit(python_it2))\n", "1.2732834180060308\n0.9285018060181756\n"], ["import numpy as np\n\nlst = np.array([1,2,3,4,5,6,7,8])\n\n# add 2 at all indices from 4 till the end of the array\nlst[4:] += 2\n\nprint(lst)\n# array([ 1,  2,  3,  4,  7,  8,  9, 10])\n"], [], ["list_of_links=[]\nfor i in range(1,1417749):\n    list_of_links.append(\"https:/xx.xxx.xxx/{}.json\".format(str(i)))\n\nt_no=2\nfor i in range(0, len(list_of_links), t_no):\n    all_t = []\n    twenty_links = list_of_links[i:i + t_no]\n    for link in twenty_links:\n        obj_new = Demo(link,)\n        t = threading.Thread(target=obj_new.get_json)\n        t.start()\n        all_t.append(t)\n    for t in all_t:\n        t.join()\n\nclass Demo:\n    def __init__(self, url):\n        self.json_url = url\n\ndef get_json(self):\n    try:\n       your logic\n    except Exception as e:\n       print(e)\n"], ["import pymongo\nimport threading\n\nclient = pymongo.MongoClient(\"mongodb://127.0.0.1:27017\")\ndb = client[\"thread1\"]\ncom = db[\"threadcol\"]\nstart_time = time.time()\nlogs=[]\n\nnumber_of_json_objects=1417750\nnumber_of_threads=50\n\nsession=requests.session()\n\ndef scrap_write_log(session,start,end):\n    for n in range(start, end):\n        response = session.get(\"https:/xx.xxx.xxx/{}.json\".format(n))\n        if response.status_code == 200:\n            try:\n                logs.append(str(n) + \"\\t\" + str(com.insert_one(json.loads(response.text))) + \"\\n\")\n                print(str(n) + \"\\t\" + str(inserted) + \"\\n\")\n            except:\n                logs.append(str(n) + \"\\t\" + \"Failed to insert\" + \"\\n\")\n                print(str(n) + \"\\t\" + \"Failed to insert\" + \"\\n\")\n\nthread_ranges=[[x,x+number_of_json_objects//number_of_threads] for x in range(0,number_of_json_objects,number_of_json_objects//number_of_threads)]\n\nthreads=[threading.Thread(target=scrap_write_log, args=(session,start_and_end[0],start_and_end[1])) for start_and_end in thread_ranges]\n\nfor thread in threads:\n    thread.start()\nfor thread in threads:\n    thread.join()\n\nwith open(\"logging.log\", \"a\") as f:\n    for line in logs:\n        f.write(line)\n"], [], [], ["def merge(ranges):\n  \"\"\"Given a sorted list of range tuples `(a, b)` merge overlapping ranges.\"\"\"\n\n  if not(ranges):\n     return [];\n\n  if len(ranges) == 1:\n    return ranges;\n\n  a, b = ranges[0];\n  c, d = ranges[1];\n\n  # eg.: [(1, 10), (20, 30), rest]\n  if b < c:\n    return [(a,b)] + merge(ranges[1:]);\n\n  # examples: [(1, 5), (2, 3), rest],\n  #           [(1, 5), (2, 10), rest]\n  return merge([(a, max(b, d))] + ranges[2:]);\n"], ["import time\nimport pymongo\nimport json\nimport asyncio\nfrom aiohttp import ClientSession\n\n\nasync def get_url(url, session):\n    async with session.get(url) as response:\n        if response.status == 200:\n            return await response.text()\n\n\nasync def create_task(sem, url, session):\n    async with sem:\n        response = await get_url(url, session)\n        if response:\n            parsed = json.loads(response)\n            n = url.rsplit('/', 1)[1]\n            inserted = com.insert_one(parsed)\n            write_log.write(str(n) + \"\\t\" + str(inserted) + \"\\n\")\n            print(str(n) + \"\\t\" + str(inserted) + \"\\n\")\n\n\nasync def run(minimum, maximum):\n    url = 'https:/xx.xxx.xxx/{}.json'\n    tasks = []\n    sem = asyncio.Semaphore(1000)   # Maximize the concurrent sessions to 1000, stay below the max open sockets allowed\n    async with ClientSession() as session:\n        for n in range(minimum, maximum):\n            task = asyncio.ensure_future(create_task(sem, url.format(n), session))\n            tasks.append(task)\n        responses = asyncio.gather(*tasks)\n        await responses\n\n\nclient = pymongo.MongoClient(\"mongodb://127.0.0.1:27017\")\ndb = client[\"thread1\"]\ncom = db[\"threadcol\"]\nstart_time = time.time()\nwrite_log = open(\"logging.log\", \"a\")\nmin_item = 1\nmax_item = 100\n\nloop = asyncio.get_event_loop()\nfuture = asyncio.ensure_future(run(min_item, max_item))\nloop.run_until_complete(future)\nwrite_log.close()\n"], [], [], ["df = (df.set_index(['col1',df.groupby('col1').cumcount()])['col2']\n        .unstack(fill_value='')\n        .reset_index())\ndf.columns = [f'col{x}' for x in range(1, len(df.columns) + 1)]\nprint (df)\n    col1    col2    col3    col4    col5\n0  file1  text_0  text_1  text_2        \n1  file2  text_0  text_1  text_2  text_3\n2  file3  text_0                        \n", "s = df.groupby('col1')['col2'].apply(list)\ndf = pd.DataFrame(s.tolist(), index=s.index).reset_index().fillna('')\ndf.columns = [f'col{x}' for x in range(1, len(df.columns) + 1)]\nprint (df)\n    col1    col2    col3    col4    col5\n0  file1  text_0  text_1  text_2        \n1  file2  text_0  text_1  text_2  text_3\n2  file3  text_0                        \n", "s = df.groupby('col1')['col2'].apply(list)\n\nL = [[k] + v for k, v in s.items()]\ndf = pd.DataFrame(L).fillna('').rename(columns=lambda x: f'col{x+1}')\nprint (df)\n    col1    col2    col3    col4    col5\n0  file1  text_0  text_1  text_2        \n1  file2  text_0  text_1  text_2  text_3\n2  file3  text_0                        \n"], [], ["df = df.groupby('col1')['col2'].agg(list).apply(pd.Series).fillna('')  \ndf.columns = list(range(2,6))\ndf = df.add_prefix('col_')\ndf = df.rename_axis(columns='col1', index=None) \n\n", "col1    col_2   col_3   col_4   col_5\nfile1  text_0  text_1  text_2        \nfile2  text_0  text_1  text_2  text_3\nfile3  text_0                        \n"], ["new_df = df.pivot(columns='col1').droplevel(0,axis=1).rename_axis(columns='col1').apply(lambda x: pd.Series(x.dropna().values)).fillna('')\nnew_df.index = new_df.reset_index(drop=True).index+2\nnew_df = new_df.T.add_prefix('col_')\n\n\n", "        col_2   col_3   col_4   col_5\ncol1                                 \nfile1  text_0  text_1  text_2        \nfile2  text_0  text_1  text_2  text_3\nfile3  text_0 \n", "new_df = df.pivot(columns='col1').droplevel(0,axis=1).apply(lambda x: pd.Series(x.dropna().values)).fillna('')\nnew_df.index = new_df.index+2\nnew_df = new_df.T.add_prefix('col_')\nnew_df = new_df.rename_axis(columns='col1', index=None) \n", "col1    col_2   col_3   col_4   col_5\nfile1  text_0  text_1  text_2        \nfile2  text_0  text_1  text_2  text_3\nfile3  text_0   \n"], [], ["ids = []\nnames = []\nsalarys = []\n\n# Iterate over the rows and extract the names from the lists in person_name column\nfor ix, row in df.iterrows():\n    for name in row['person_name']:\n        ids.append(row['id'])\n        names.append(name)\n        salarys.append(row['salary'])\n\n# Create a new 'unnested' dataframe\ndf_new = pd.DataFrame({'id':ids,\n                       'names':names,\n                       'salary':salarys})\n\n# Groupby on person_name and get the sum\nprint(df_new.groupby('names').salary.sum().reset_index())\n", "       names  salary\n0  alexander  171000\n1        bob   56000\n2      gates  135000\n3     robert  145000\n4      smith  110000\n5    william  125000\n"], ["ranges1 = [(1, 50), (49, 70), (75, 85), (84, 88), (87, 92)]\nranges2 = [(1, 50), (40,45), (49, 70)]\n\n\ndef get_overlapping(ranges):\n    result = []\n    start = 0\n    end = ranges[0][1]\n\n    for i, node in enumerate(ranges[1:], 1):\n        if end > node[0]:\n            if end < node[1]:\n                end = node[1]\n            continue\n\n        result.append((start, i - 1))\n        end = node[1]\n        start = i\n\n    else:\n        result.append((start, i))\n    return result\n", "for _range in [ranges1, ranges2]:\n    result = get_overlapping(_range)\n    for o in result:\n        start, end = _range[o[0]], _range[o[1]]\n        print(start[0], end[1])\n    print()\n", "1 70\n75 92\n\n1 70\n"], [], [], ["import sys\n\nclass FakeSequence(list):\n    def __init__(self, *args, **kwargs):\n        # not really necessary, leave out __init__ method, if\n        # you don't have own attributes in your class.\n        # but if you define an __init__ method, you\n        # MUST call baseclass.__init__ inside, preferably\n        # on top of the __init__ method\n        list.__init__(self, *args, **kwargs)\n\n    def __len__(self, *args, **kwargs):\n        len_of_fakesequence = list.__len__(self, *args, **kwargs)\n        # here you can do anything about len()\n        return len_of_fakesequence\n\nif __name__ == '__main__':\n    fake_sequence = FakeSequence()\n    fake_sequence.append(1)\n    fake_sequence.append(2)\n    fake_sequence.append(3)\n\n    length = len(fake_sequence)\n    sys.stdout.write(\"len(fake_sequence) is %d\\n\" % (length))\n", "class AnyList(object):\n    def __init__(self, *args, **kwargs):\n        self.mylength = 0\n\n    def __len__(self, *args, **kwargs): # len()\n        return self.mylength\n\n    def append(self):\n        self.mylength += 1\n\nif __name__ == '__main__':\n    fake_sequence = AnyList()\n    fake_sequence.append()\n    fake_sequence.append()\n\n    print(\"len(AnyList) is %d\" % len(fake_sequence))\n    # reads out 2\n"], ["def merge_range(rng):\n    starts, ends = [], []   \n    for i, (x, y) in enumerate(rng):\n        if i > 0:\n            if x<= ends[-1]:\n                ends[-1] = y\n                continue\n        starts.append(x)\n        ends.append(y)\n    return list(zip(starts, ends))\n", "merge_range([(1, 50), (49, 70), (75, 85), (84, 88), (87, 92)])\n# [(1, 70), (75, 92)]\n\nmerge_range([(1, 50), (49, 70), (75, 85), (84, 88), (87, 92), (99, 102), (105, 111), (150, 155), (152, 160), (154, 180)])\n# [(1, 70), (75, 92), (99, 102), (105, 111), (150, 180)]\n"], ["import sys\n\nclass FakeSequence:\n    def __init__(self, length_function):\n        self.real_sequence = list()\n        self.append = self.real_sequence.append\n        self.length_function = length_function\n\n    def __len__(self):\n        return self.length_function()\n\nif __name__ == '__main__':\n\n    def mylen():\n        return 5\n\n    fake_sequence = FakeSequence(mylen)\n    fake_sequence.append(1)\n    fake_sequence.append(2)\n    fake_sequence.append(3)\n\n    length = len(fake_sequence)\n    sys.stdout.write(\"len(fake_sequence) is %d\\n\" % (length))\n"], [], ["In [1]: class Foo: pass\n\nIn [2]: len(Foo())\n---------------------------------------------------------------------------\nTypeError                                 Traceback (most recent call last)\n<ipython-input-2-955ff12672b5> in <module>()\n----> 1 len(Foo())\n\nTypeError: object of type 'Foo' has no len()\n\nIn [3]: Foo.__len__ = lambda _: 123\n\nIn [4]: len(Foo())\nOut[4]: 123\n"], [], ["def overlaps(ranges):\n    ranges = sorted(ranges)  # If our inputs are garunteed sorted, we can skip this\n    it = iter(ranges)\n    try:\n        curr_start, curr_stop = next(it)\n        # overlaps = False  # If we want to exclude output ranges not produced by overlapping input ranges\n    except StopIteration:\n        return\n    for start, stop in it:\n        if curr_start <= start <= curr_stop:  # Assumes intervals are closed\n            curr_stop = max(curr_stop, stop)\n            # overlaps = True\n        else:\n            # if overlaps:\n            yield curr_start, curr_stop\n            curr_start, curr_stop = start, stop\n            # overlaps = False\n    # if overlaps:\n    yield curr_start, curr_stop\n\nprint(list(overlaps([(1, 50), (49, 70), (75, 85), (84, 88), (87, 92)])))\n# [(1, 70), (75, 92)]\n\nprint(list(overlaps([(20, 30), (5, 10), (1, 7), (12, 21)])))\n# [(1, 10), (12, 30)]\n"], ["def overlaps(r1, r2):\n    assert r1[0] <= r2[0], \"Assume ranges sorted by first coordinate\"\n    return (r2[0] <= r1[1] <= r2[1]) or (r1[0] <= r2[0] <= r1[1])\n\nranges = [(1, 50), (45, 47), (49, 70), (75, 85), (84, 88), (87, 92)]\n\n\ndef fuse_ranges(ranges):\n    output_ranges = []\n    curr_r = list(ranges[0])\n    curr_overlap = False  # Is the current range already overlapping?\n\n    # Assuming it is sorted by starting coordinate.\n    for r in ranges[1:]:\n        if overlaps(curr_r, r):\n            curr_overlap = True\n            curr_r[1] = max(curr_r[1], r[1])  # Extend the end of the current range.\n        else:\n            if curr_overlap:\n                output_ranges.append(curr_r)\n                curr_overlap = False\n            curr_r = list(r)\n    if curr_overlap:\n        output_ranges.append(curr_r)\n\n    return output_ranges\n\n\nif __name__ == '__main__':\n    print(fuse_ranges(sorted(ranges, key=lambda r: r[0])))\n", "[[1, 70], [75, 92]]\n"], ["ranges = [(1, 50), (49, 70), (75, 85), (84, 88), (87, 92)]\nimport collections, itertools\nimport numpy as np\n\nout = []\nfor range in ranges:\n    data = np.arange(range[0], range[1]+1)\n    out.append(collections.Counter(data))\n\nfor x,y in list(itertools.combinations(out, 2)): # combinations of two\n    if x & y: # if they overlap\n        print(x | y) # get their union\n", "Counter({1: 1, 2: 1, 3: 1, 4: 1, 5: 1, 6: 1, 7: 1, 8: 1, 9: 1, 10: 1, 11: 1, 12: 1, 13: 1, 14: 1, 15: 1, 16: 1, 17: 1, 18: 1, 19: 1, 20: 1, 21: 1, 22: 1, 23: 1, 24: 1, 25: 1, 26: 1, 27: 1, 28: 1, 29: 1, 30: 1, 31: 1, 32: 1, 33: 1, 34: 1, 35: 1, 36: 1, 37: 1, 38: 1, 39: 1, 40: 1, 41: 1, 42: 1, 43: 1, 44: 1, 45: 1, 46: 1, 47: 1, 48: 1, 49: 1, 50: 1, 51: 1, 52: 1, 53: 1, 54: 1, 55: 1, 56: 1, 57: 1, 58: 1, 59: 1, 60: 1, 61: 1, 62: 1, 63: 1, 64: 1, 65: 1, 66: 1, 67: 1, 68: 1, 69: 1, 70: 1})\nCounter({75: 1, 76: 1, 77: 1, 78: 1, 79: 1, 80: 1, 81: 1, 82: 1, 83: 1, 84: 1, 85: 1, 86: 1, 87: 1, 88: 1})\nCounter({84: 1, 85: 1, 86: 1, 87: 1, 88: 1, 89: 1, 90: 1, 91: 1, 92: 1})\n"], ["[(1, 70), (75, 92)]\n"], ["ranges = [(1, 50), (49, 70), (75, 85), (84, 88), (87, 92)]\n\nall_nums = sorted(list(set(x for r in ranges for x in range(r[0], r[1]))))\n\ni = all_nums[0]\nprint(i, end=' ')\nwhile i < all_nums[-1]:\n    if i not in all_nums:\n        print(i)\n        i = all_nums[all_nums.index(i-1) + 1]\n        print(i, end = ' ')\n    i += 1\nprint(i+1)\n", "ranges = [(1, 50), (49, 70), (75, 85), (84, 88), (87, 92)]\n\n1 70\n75 92\n\n\nranges = [(1, 50), (55, 70), (75, 82), (84, 88), (87, 92)]\n\n1 50\n55 70\n75 82\n84 92\n"], ["pip3 install pyarrow --user\n"], ["a = 'code'\nb = list(a)\nb[0], b[-1] = b[-1], b[0]\nprint(''.join(b))\n", "a = 'code'\nif a:\n    b = list(a)\n    b[0], b[-1] = b[-1], b[0]\n    print(''.join(b))\nelse:\n    print(a)\n"], ["def front_back(s):\n     if len(s) < 2:\n         return s\n     return s[-1] + s[1:-1] + s[0]\n", ">>> front_back('a')\n'a'\n>>> front_back('ab')\n'ba'\n>>> front_back('code')\n'eodc'\n"], ["def swapfirstlast(x):\n   if len(x) == 1:\n      return x\n   else:\n     return x[-1:] + x[1:-1] + x[:1]\n\nIn [3532]: swapfirstlast('a')                                                                                                                                                                  \nOut[3532]: 'a'\n\nIn [3533]: swapfirstlast('code')                                                                                                                                                               \nOut[3533]: 'eodc'\n\nIn [3534]: swapfirstlast('ab')                                                                                                                                                                 \nOut[3534]: 'ba'\n\n\n"], [], ["def front_back(val):\n    if len(val) <= 1:\n        return val\n\n    return val[-1] + val[1:-1] + val[0]\n\n\nprint(front_back('code'))\nprint(front_back('a'))\nprint(front_back('ab'))\n", "> python test.py\neodc\na\nba\n"], ["#include    <iostream>\n#include    <vector>\n#include    <algorithm>\n#include    <tuple>\n\nstd::tuple<int, std::vector<int>> partition(std::vector<int> &a) {\n    int n = a.size();\n    std::vector<int> parti (n, -1);     // current partition studies\n    std::vector<int> parti_opt (n, 0);  // optimal partition\n    std::vector<int> sum_back (n, 0);   // sum of remaining elements\n    std::vector<int> n_poss (n, 0);     // number of possibilities already examined at position i\n\n    sum_back[n-1] = a[n-1];\n    for (int i = n-2; i >= 0; --i) {\n        sum_back[i] = sum_back[i+1] + a[i];\n    }\n\n    std::sort(a.begin(), a.end(), std::greater<int>());\n    parti[0] = 0;       // a[0] in A always !\n    int sum = a[0];     // current sum\n\n    int i = 1;          // index of the element being examined (we force a[0] to be in A !)\n    int min_diff = sum_back[0];\n    bool up_down = true;\n\n    while (true) {          // UP\n        if (up_down) {\n            if (std::abs(sum) > sum_back[i] + min_diff) {  //premature abandon\n                i--;\n                up_down = false;\n                continue;\n            }\n            n_poss[i] = 1;\n            if (sum > 0) {\n                sum -= a[i];\n                parti[i] = 1;\n            } else {\n                sum += a[i];\n                parti[i] = 0;\n            }\n\n            if (i == (n-1)) {           // leaf\n                if (std::abs(sum) < min_diff) {\n                    min_diff = std::abs(sum);\n                    parti_opt = parti;\n                    if (min_diff < 2) return std::make_tuple (min_diff, parti_opt);   // EDIT: if (... < 2) instead of (... == 0)\n                }\n                up_down = false;\n                i--;\n            } else {\n                i++;        \n            }\n\n        } else {            // DOWN\n            if (i == 0) break;\n            if (n_poss[i] == 2) {\n                if (parti[i]) sum += a[i];\n                else sum -= a[i];\n                //parti[i] = 0;\n                i--;\n            } else {\n                n_poss[i] = 2;\n                parti[i] = 1 - parti[i];\n                if (parti[i]) sum -= 2*a[i];\n                else sum += 2*a[i];\n                i++;\n                up_down = true;\n            }\n        }\n    }\n    return std::make_tuple (min_diff, parti_opt);\n}\n\nint main () {\n    std::vector<int> a = {5, 6, 2, 10, 2, 3, 4, 13, 17, 38, 42};\n    int diff;\n    std::vector<int> parti;\n    std::tie (diff, parti) = partition (a);\n\n    std::cout << \"Difference = \" << diff << \"\\n\";\n\n    std::cout << \"set A: \";\n    for (int i = 0; i < a.size(); ++i) {\n        if (parti[i] == 0) std::cout << a[i] << \" \";\n    }\n    std::cout << \"\\n\";\n\n    std::cout << \"set B: \";\n    for (int i = 0; i < a.size(); ++i) {\n        if (parti[i] == 1) std::cout << a[i] << \" \";\n    }\n    std::cout << \"\\n\";\n}\n"], ["lis = [5, 6, 2, 10, 2, 3, 4]\nlis.sort()\nlis.reverse()\n\nbucket_1 = []\nbucket_2 = []\n\nfor item in lis:\n    if sum(bucket_1) <= sum(bucket_2):\n        bucket_1.append(item)\n    else:\n        bucket_2.append(item)\n\nprint(\"Bucket 1 : {}\".format(bucket_1))\nprint(\"Bucket 2 : {}\".format(bucket_2))\n\n", "Bucket 1 : [10, 4, 2]\nBucket 2 : [6, 5, 3, 2]\n", "def sum_list(lis, n, X):\n    \"\"\"\n    This function will return sum of all elemenst whose bit is set to 1 in X\n    \"\"\"\n    sum_ = 0\n    # print(X)\n    for i in range(n):\n        if (X & 1<<i ) !=0:\n            # print( lis[i], end=\" \")\n            sum_ += lis[i]\n    # print()\n    return sum_\n\ndef return_list(lis, n, X):\n    \"\"\"\n    This function will return list of all element whose bit is set to 1 in X\n    \"\"\"\n    new_lis = []\n    for i in range(n):\n        if (X & 1<<i) != 0:\n            new_lis.append(lis[i])\n    return new_lis\n\nlis = [5, 6, 2, 10, 2, 3, 4]\nn = len(lis)\ntotal = 2**n -1 \n\nresult_1 = 0\nresult_2 = total\nresult_1_sum = 0\nresult_2_sum = sum_list(lis,n, result_2)\nans = total\nfor i in range(total):\n    x = (total ^ i)\n    sum_x = sum_list(lis, n, x)\n    sum_y = sum_list(lis, n, i)\n\n    if abs(sum_x-sum_y) < ans:\n        result_1 =  x\n        result_2 = i\n        result_1_sum = sum_x\n        result_2_sum = sum_y\n        ans = abs(result_1_sum-result_2_sum)\n\n\"\"\"\nProduce resultant list\n\"\"\"\n\nbucket_1 = return_list(lis,n,result_1)\nbucket_2 = return_list(lis, n, result_2)\n\nprint(\"Bucket 1 : {}\".format(bucket_1))\nprint(\"Bucket 2 : {}\".format(bucket_2))\n\n\n", "Bucket 1 : [5, 2, 2, 3, 4]\nBucket 2 : [6, 10]\n"], [], ["from threading import Thread\nfrom Queue import Queue\nq = Queue(concurrent * 2)\nfor i in range(concurrent):\n    t = Thread(target=doWork)\n    t.daemon = True\n    t.start()\ntry:\n    for url in open('urllist.txt'):\n        q.put(url.strip())\n    q.join()\nexcept KeyboardInterrupt:\n    sys.exit(1)\n", ">>> timeit.timeit('_ = requests.get(\"https://www.wikipedia.org\")', 'import requests', number=100)\nStarting new HTTPS connection (1): www.wikipedia.org\nStarting new HTTPS connection (1): www.wikipedia.org\nStarting new HTTPS connection (1): www.wikipedia.org\n...\nStarting new HTTPS connection (1): www.wikipedia.org\nStarting new HTTPS connection (1): www.wikipedia.org\nStarting new HTTPS connection (1): www.wikipedia.org\n52.74904417991638\n>>> timeit.timeit('_ = session.get(\"https://www.wikipedia.org\")', 'import requests; session = requests.Session()', number=100)\nStarting new HTTPS connection (1): www.wikipedia.org\n15.770191192626953\n"], [], [], [], ["pip3 install pyarrow\n"], [], ["n = 'Nike'\np = 'Puma'\na = 'Adidas'\n\nboot = input('What is your favorite boot?')\n\nif boot == n:\n  print('Nike, great choice')\nelif boot == a:\n  print('Adidas, not my favorite')\nelif boot == p:\n  print('Not sure about Puma')\nelse:\n  print('I am not familiar with that brand')\n"], [], ["if(boot == n){\n   print('Nike, great choice')\n}\n\nif (boot == a){\n   print('Adidas, not my favorite')\n}\n\nif (boot == p){\n  print('Not sure about Puma')\n}\nelse{\n  print('I am not familiar with that brand')\n}\n", "if boot == n:\n    print('Nike, great choice')\nelif boot == a:\n   print('Adidas, not my favorite')\nelse:\n   print('I am not familiar with that brand')\n"], ["n = 'Nike'\np = 'Puma'\na = 'Adidas'\nprint('What is your favorite boot?')\nboot = input()\n", "if boot == n:\n  print('Nike, great choice')\nelif boot == a:\n  print('Adidas, not my favorite')\nelif boot == p:\n  print('Not sure about Puma')\nelse:\n  print('I am not familiar with that brand')\n", "What is your favorite boot?\n\nNike\nNike, great choice\n"], ["if boot == n:\n  print('Nike, great choice')\n", "if boot == a:\n  print('Adidas, not my favorite')\n", "if boot == p:\n  print('Not sure about Puma')\nelse:\n  print('I am not familiar with that brand')\n", "if boot == n:\n  print('Nike, great choice')\nelif boot == a:\n  print('Adidas, not my favorite')\nelif boot == p:\n  print('Not sure about Puma')\nelse:\n  print('I am not familiar with that brand')\n"], ["from collections import Counter\n\nc = Counter('management')\n\nsc = sorted(c.items(),\n            key=lambda x: -1000 * x[1] + ord(x[0]))\n\nfor char, count in sc:\n    print(char, count)\n"], [], [], [" for i in lis:\n  if string.count(i)>maxi:\n   maxi=string.count(i)\n\n for j in lis:\n  if string.count(j)==maxi:\n   print(j,maxi)\n"], ["a 2\ne 2\ng 1\nm 2\nn 2\nt 1\n"], ["from collections import Counter\n\nCounter(\"management\")\n", "Counter({'a': 2, 'e': 2, 'm': 2, 'n': 2, 'g': 1, 't': 1})\n"], ["from itertools import combinations\n\nratings = [5, 6, 2, 10, 2, 3, 4]\n\ntarget = sum(ratings)/2 \n\ndifference_dictionary = {}\nfor i in range(1, len(ratings)): \n    for combination in combinations(ratings, i): \n        diff = sum(combination) - target\n        if diff >= 0: \n            difference_dictionary[diff] = difference_dictionary.get(diff, []) + [combination]\n\n# get min difference to target score \nmin_difference_to_target = min(difference_dictionary.keys())\nstrong_ratings = difference_dictionary[min_difference_to_target]\nfirst_strong_ratings = [x for x in strong_ratings[0]]\n\nweak_ratings = ratings.copy()\nfor strong_rating in first_strong_ratings: \n    weak_ratings.remove(strong_rating)\n", "first_strong_ratings \n[6, 10]\n\nweak_rating \n[5, 2, 2, 3, 4]\n"], ["def listFairestWeakTeams(ratings):\n    current_best_weak_team_rating = -1\n    fairest_weak_teams = []\n    for weak_team in recursiveWeakTeamGenerator(ratings):\n        weak_team_rating = teamRating(weak_team, ratings)\n        if weak_team_rating > current_best_weak_team_rating:\n            fairest_weak_teams = []\n            current_best_weak_team_rating = weak_team_rating\n        if weak_team_rating == current_best_weak_team_rating:\n            fairest_weak_teams.append(weak_team)\n    return fairest_weak_teams\n\n\ndef recursiveWeakTeamGenerator(\n    ratings,\n    weak_team=[],\n    current_applicant_index=0\n):\n    if not isValidWeakTeam(weak_team, ratings):\n        return\n    if current_applicant_index == len(ratings):\n        yield weak_team\n        return\n    for new_team in recursiveWeakTeamGenerator(\n        ratings,\n        weak_team + [current_applicant_index],\n        current_applicant_index + 1\n    ):\n        yield new_team\n    for new_team in recursiveWeakTeamGenerator(\n        ratings,\n        weak_team,\n        current_applicant_index + 1\n    ):\n        yield new_team\n\n\ndef isValidWeakTeam(weak_team, ratings):\n    total_rating = sum(ratings)\n    weak_team_rating = teamRating(weak_team, ratings)\n    optimal_weak_team_rating = total_rating // 2\n    if weak_team_rating > optimal_weak_team_rating:\n        return False\n    elif weak_team_rating * 2 == total_rating:\n        # In case of equal strengths, player 0 is assumed\n        # to be in the \"weak\" team\n        return 0 in weak_team\n    else:\n        return True\n\n\ndef teamRating(team_members, ratings):\n    return sum(memberRatings(team_members, ratings))    \n\n\ndef memberRatings(team_members, ratings):\n    return [ratings[i] for i in team_members]\n\n\ndef getOpposingTeam(team, ratings):\n    return [i for i in range(len(ratings)) if i not in team]\n\n\nratings = [5, 6, 2, 10, 2, 3, 4]\nprint(\"Player ratings:     \", ratings)\nprint(\"*\" * 40)\nfor option, weak_team in enumerate(listFairestWeakTeams(ratings)):\n    strong_team = getOpposingTeam(weak_team, ratings)\n    print(\"Possible partition\", option + 1)\n    print(\"Weak team members:  \", weak_team)\n    print(\"Weak team ratings:  \", memberRatings(weak_team, ratings))\n    print(\"Strong team members:\", strong_team)\n    print(\"Strong team ratings:\", memberRatings(strong_team, ratings))\n    print(\"*\" * 40)\n", "Player ratings:      [5, 6, 2, 10, 2, 3, 4]\n****************************************\nPossible partition 1\nWeak team members:   [0, 1, 2, 5]\nWeak team ratings:   [5, 6, 2, 3]\nStrong team members: [3, 4, 6]\nStrong team ratings: [10, 2, 4]\n****************************************\nPossible partition 2\nWeak team members:   [0, 1, 4, 5]\nWeak team ratings:   [5, 6, 2, 3]\nStrong team members: [2, 3, 6]\nStrong team ratings: [2, 10, 4]\n****************************************\nPossible partition 3\nWeak team members:   [0, 2, 4, 5, 6]\nWeak team ratings:   [5, 2, 2, 3, 4]\nStrong team members: [1, 3]\nStrong team ratings: [6, 10]\n****************************************\n"], ["sale_date = [\n    pd.date_range('2017', freq='W', periods=121).to_series().reset_index(drop=True).rename('Sale Date'),\n    pd.Series(np.random.normal(1000, 100, 121)).rename('Quantity')\n]\nsales = pd.concat(data, axis='columns')\n", "d = sales['Sale Date']\nsales.groupby([d.dt.year.rename('Year'), d.dt.month.rename('Month')]).sum()\n", "ym_id = d.apply(\"{:%Y-%m}\".format).rename('Sale Month')\nsales.groupby(ym_id).sum()\n"], ["string = \"Hello World\"\ns = \"\"\nfor ch in string:\n    s = ch + s\n    print(s)\n", "H\neH\nleH\nlleH\nolleH\n olleH\nW olleH\noW olleH\nroW olleH\nlroW olleH\ndlroW olleH\n"], ["df['ym-date'] = df['date'].dt.strftime('%Y-%m')\n"], [], [], ["date_col = pd.to_datetime(['2011-09-30', '2012-02-28'])\nnew_col = date_col + pd.offsets.MonthBegin(1)\n"], ["print (df)\n   row    A    B\n0    1  abc  abc\n1    2  abc  NaN\n2    3  NaN  abc\n3    4  NaN  NaN\n4    5  abc  abc\n\ndf = df.dropna(how='all', subset=['A','B'])\nprint (df)\n   row    A    B\n0    1  abc  abc\n1    2  abc  NaN\n2    3  NaN  abc\n4    5  abc  abc\n", "print (df)\n   row    A    B\n0    1  abc  abc\n1    2  abc     \n2    3       abc\n3    4          \n4    5  abc  abc\n\n\ndf = df[df[['A','B']].ne('').any(axis=1)]\nprint (df)\n   row    A    B\n0    1  abc  abc\n1    2  abc     \n2    3       abc\n4    5  abc  abc\n"], ["df = df.replace(r'^\\s*$',np.nan,regex=True)\n", "df.dropna(subset=['A','B'],how='all').fillna(' ') # if you want spaces for na\nprint(df)\n    row    A    B\n0    1  abc  abc\n1    2  abc     \n2    3  abc     \n4    5  abc  abc\n"], ["mask = df.isna()\ndf[~((mask.A == True) & (mask.B == True))] \n", "   row    A    B\n0    1  abc  abc\n1    2  abc  NaN\n2    3  NaN  abc\n4    5  abc  abc\n"], ["inds = df[[\"A\", \"B\"]].isnull().all(axis=1) \n", "df = df.loc[~inds, :]\n"], ["df.dropna(how='all')\n"], ["2to3 $tgt -w -f except -f raise -f next -f funcattrs -f print\n", "try:\n    basestring_ = basestring\nexcept (NameError,) as e:\n    basestring_ = str\n\ntry:\n    cmp_ = cmp\nexcept (NameError,) as e:\n    # from http://portingguide.readthedocs.io/en/latest/comparisons.html\n    def cmp_(x, y):\n        \"\"\"\n        Replacement for built-in function cmp that was removed in Python 3\n        \"\"\"\n        return (x > y) - (x < y)\n\n"], [], ["s = ch + s\n", "s = s + ch\n", "string = 'Hello World!'\nprint(string[::-1])\n# !dlroW olleH\n"], ["for ch in string:\n  s = ch + s\n", "ch = \"H\"\ns = \"H\"\n\nch = \"e\"\ns = \"eH\"\n\n\nch = \"l\"\ns = \"leH\"\n\n.\n.\n.\n"], ["s = ''\nfor i in range(len(string) - 1, -1, -1):\n    s = string[i] + s\n", "s = ''\nfor character in string:\n    s = character + s\n"], [], ["def countdown():\n  global countDown\n  countDown = int(time.time() - start_time) % 30\n  return countDown\n"], ["import time\n\nclass countdown():\n    def start(self):\n        self.t = time.time()\n    def remaining(self):\n        return 30 - int(time.time()-self.t)\n\n\ntimer = countdown()\ntimer.start()\nwhile True:\n    print(30 - countdown(), \"seconds remaining\") #Still time left code\n    if timer.remaining() <= 0:\n        pass #30 seconds over code\n        timer.reset() #Starts timer again\n"], ["from time import time\n\ndef do_something():\n    pass\n\ndef get_time(start_time):\n    # returns how much time did it pass from event that started at start_time\n    return time() - start_time\n\ndef countdown(countDown):\n    start_time = time()\n    # this is counter that attains consecutive values [0, 1, ..., countDown]\n    current_count = 0\n    while current_count < countDown:\n        print(countDown - current_count, end=' ')\n        while get_time(start_time) - current_count < 1:\n            do_something()\n            #warning: if do_something takes significant anount of\n            #time forthcoming print won't be correct\n        current_count += 1\n    print(countDown - current_count, end=' ')\n    return current_count\n\ncountdown(7)\ncountdown(5)\n", "print(\"You have \" + str(30 - countdown()) + \" time\") \n"], ["import time\nstart_time = time.time()\ndef countdown():\n  global countDown\n  countDown = int(time.time() - start_time)\n  return countDown % 30\n\nprint(\"You have \" + str(30 - countdown()) + \" time\")\n"], ["import time\ndef countdown(i):\n  counter = i\n  while True:\n    if (counter == i):\n      counter = 0\n    print(counter)\n    counter = counter + 1\n    time.sleep(1)\n\ncountdown(30)\n"], ["def partition(ratings):\n\n    def helper(ratings, left, right, aux_list, current_index):\n        if current_index >= len(ratings):\n            aux_list.append((left, right))\n            return\n\n        first = ratings[current_index]\n        helper(ratings, left + [first], right, aux_list, current_index + 1)\n        helper(ratings, left, right + [first], aux_list, current_index + 1)\n\n    #l contains all possible sublists\n    l = []\n    helper(ratings, [], [], l, 0)\n    set1 = []\n    set2 = []\n    #set mindiff to a large number\n    mindiff = 1000\n    for sets in l:\n        diff = abs(sum(sets[0]) - sum(sets[1]))\n        if diff < mindiff:\n            mindiff = diff\n            set1 = sets[0]\n            set2 = sets[1]\n    return (set1, set2)\n"], [], ["# -*- coding: utf-8 -*-\n\"\"\"\nCreated on Fri Dec  6 18:10:07 2019\n\n@author: Paddy3118\n\"\"\"\n\nfrom random import shuffle, random, randint\n\n#%%\nitems = [5, 6, 2, 10, 2, 3, 4]\n\ndef eq(a, b):\n    \"Equal enough\"\n    return int(abs(a - b)) == 0\n\ndef fair_partition(items, jiggles=100):\n    target = sum(items) / 2\n    print(f\"  Target sum: {target}\")\n    srt = sorted(items)\n    a = srt[::2]    # every even\n    b = srt[1::2]   # every odd\n    asum = sum(a)\n    bsum = sum(b)\n    n = 0\n    while n < jiggles and not eq(asum, target):\n        n += 1\n        if random() <0.5:\n            # move from a to b?\n            if random() <0.5:\n                a, b, asum, bsum = b, a, bsum, asum     # Switch\n            shuffle(a)\n            trial = a[0]\n            if abs(target - (bsum + trial)) < abs(target - bsum):  # closer\n                b.append(a.pop(0))\n                asum -= trial\n                bsum += trial\n                print(f\"  Jiggle {n:2}: Delta after Move: {abs(target - asum)}\")\n        else:\n            # swap between a and b?\n            apos = randint(0, len(a) - 1)\n            bpos = randint(0, len(b) - 1)\n            trya, tryb = a[apos], b[bpos]\n            if abs(target - (bsum + trya - tryb)) < abs(target - bsum):  # closer\n                b.append(trya)  # adds to end\n                b.pop(bpos)     # remove what is swapped\n                a.append(tryb)\n                a.pop(apos)\n                asum += tryb - trya\n                bsum += trya - tryb\n                print(f\"  Jiggle {n:2}: Delta after Swap: {abs(target - asum)}\")\n    return sorted(a), sorted(b)\n\nif __name__ == '__main__':\n    for _ in range(5):           \n        print('\\nFinal:', fair_partition(items), '\\n')  \n", "  Target sum: 16.0\n  Jiggle  1: Delta after Swap: 2.0\n  Jiggle  7: Delta after Swap: 0.0\n\nFinal: ([2, 3, 5, 6], [2, 4, 10]) \n\n  Target sum: 16.0\n  Jiggle  4: Delta after Swap: 0.0\n\nFinal: ([2, 4, 10], [2, 3, 5, 6]) \n\n  Target sum: 16.0\n  Jiggle  9: Delta after Swap: 3.0\n  Jiggle 13: Delta after Move: 2.0\n  Jiggle 14: Delta after Swap: 1.0\n  Jiggle 21: Delta after Swap: 0.0\n\nFinal: ([2, 3, 5, 6], [2, 4, 10]) \n\n  Target sum: 16.0\n  Jiggle  7: Delta after Swap: 3.0\n  Jiggle  8: Delta after Move: 1.0\n  Jiggle 13: Delta after Swap: 0.0\n\nFinal: ([2, 3, 5, 6], [2, 4, 10]) \n\n  Target sum: 16.0\n  Jiggle  5: Delta after Swap: 0.0\n\nFinal: ([2, 4, 10], [2, 3, 5, 6]) \n"], ["lst = [[1], [], [2], [], [3]]\n\ndef func(x):\n    try:\n        return x[0]\n    except IndexError:\n        return None\n\n[func(i) for i in lst]\n# [1, None, 2, None, 3]\n"], ["L = [\n    ['24'],\n    ['17'],\n    [],\n    ['17'],\n    [],\n    ['17']\n]\nL = np.array([l[0] if l else np.nan for l in L])\n", "L >> ['24' '17' 'nan' '17' 'nan' '17']\n"], ["pd.DataFrame(l).fillna(np.nan).squeeze().tolist()\n", "['24', '17', nan, '17', nan, '17']\n"], [" flat_list = [item for sublist in l for item in sublist]\n", "flat_list = []\nfor sublist in l:\n    if len(sublist) == 0:\n        flat_list.append(np.nan)\n    else:\n        for item in sublist:\n            flat_list.append(item)\n"], [">>> [name for sublist in _remain for name in (sublist or [np.nan])]\n['24', '17', nan, '17', nan, '17']\n"], ["#!/path/to/.venv/bin/python3\n# -*- coding: utf-8 -*-\nimport re\nimport sys\n\nfrom pip._internal.main import main  # <--- look at this import statement! \n\nif __name__ == '__main__':\n     sys.argv[0] = re.sub(r'(-script\\.pyw?|\\.exe)?$', '', sys.argv[0])\n     sys.exit(main())\n", "sys.exit(main())\n", "sys.exit(main.main())\n"], [], ["py27/dj19 -> py35/dj19 -> py35/dj1.11 -> py37/dj1.11 ... -> py37/dj2.2\n"], [], ["import numpy as np\n\na = np.array([8, 18, 5, 15, 12])\nb = a[:, None] - a\n# Fill lower triangle with largest negative\nb[np.tril_indices(len(a))] = np.iinfo(b.dtype).min  # np.finfo for float\n# Put diagonals as rows\ns = b.strides[1]\ndiags = np.ndarray((len(a) - 1, len(a) - 1), b.dtype, b, offset=s, strides=(s, (len(a) + 1) * s))\n# Get maximum from each row and add initial zero\nc = np.r_[0, diags.max(1)]\nprint(c)\n# [ 0 13  3  6 -4]\n"], ["from scipy.linalg import toeplitz\na = toeplitz([1,2,3,4], [1,4,3])\n# array([[1, 4, 3],\n#        [2, 1, 4],\n#        [3, 2, 1],\n#        [4, 3, 2]])\na.reshape(3, 4)\n# array([[1, 4, 3, 2],\n#        [1, 4, 3, 2],\n#        [1, 4, 3, 2]])\n", "smallv = -10000  # replace this with np.nan if you have floats\n\na = np.array([8, 18, 5,15,12])\nb = a[:, None] - a\n\nb[np.tril_indices(len(b), -1)] = smallv\nd = np.vstack((b, np.full(len(b), smallv)))\n\nd.reshape(len(d) - 1, -1).max(0)[:-1]\n# array([ 0, 13,  3,  6, -4])\n"], ["from skimage.util import view_as_windows\n\nn = len(a)\nz = np.zeros(n-1,dtype=a.dtype)\np = np.concatenate((a,z))\n\ns = view_as_windows(p,n)\nmask = np.tri(n,k=-1,dtype=bool)[:,::-1]\nv = s[0]-s\nout = np.where(mask,v.min()-1,v).max(1)\n", "n = len(a)\nout = [max(a[:-i+n]-a[i:]) for i in range(n)]\n"], ["v = [max(c.diagonal(-i)) for i in range(b.shape[0])]\nprint(v) # [0, 13, 3, 6, -4]\n"], ["a = np.array([8, 18, 5,15,12])\nb = a - a[:, None]\nc = np.tril(b)\nfor i in range(b.shape[0]):\n    print(max(c.diagonal(-i)))\n", "0\n13\n3\n6\n-4\n"], ["doc = etree.parse('file.xml')\nmemoryElem = doc.find(\"*/BodyNum\") #BodyNum is one level down\nprint(memoryElem.text)  #Specify you want to extract the name of the element\n"], [], ["from lxml import etree\n\ndoc = etree.parse('file.xml')\nmemoryElem = doc.xpath('(//BodyNum)[1]/text()')\nprint(memoryElem)   # ['6168']\n"], ["from lxml import etree\n\ndoc = etree.parse('file.xml')\nfor elem in doc.findall('TExportCarcass'):\n    print(elem.find(\"BodyNum\").text) \n", "6168\n6169\n", "print([i.text for i in doc.findall('TExportCarcass/BodyNum')]) #-->['6168', '6169']\n"], [], ["from operator import itemgetter\n\ndct = {\"a\": 1, \"b\": 2, \"c\": 3}\nlst = [2, 3, 1]\n\ndct = {v: k for k, v in dct.items()}\n# {1: 'a', 2: 'b', 3: 'c'}\n\nprint(list(itemgetter(*lst)(dct)))\n# ['b', 'c', 'a']\n"], [">>> my_dict = {\"a\":1, \"b\":2, \"c\":3}\n>>> my_list = [2,3,1]\n>>> [key for key, value in sorted(my_dict.items(), key = lambda x:my_list.index(x[1]))]\n['b', 'c', 'a']\n"], ["for key, val in my_dict.items():\n    for i, v in enumerate(my_list):\n        if v == val:\n            my_list[i] = key\n\n"], ["rev = { v:k for k,v in my_dict.items()}\nnew_list = [rev[item] for item in my_list]\n", "['b', 'c', 'a']\n"], ["my_dict = {\"a\":1, \"b\":2, \"c\":3}\nreversed_dict = {my_dict[k]:k for k in my_dict}\n", "my_list = [2,3,1]\nresult = [reversed_dict[elem] for elem in my_list]\n"], [], [], ["import networkx as nx\n\nlst = [2, 0, 1, 4, 3, 5]\n\nG = nx.Graph()\nG.add_edges_from(enumerate(lst))\nprint(list(nx.connected_components(G)))\n# [{0, 1, 2}, {3, 4}, {5}]\n"], ["from collections import Counter\n\nnumbers = [7, 1, 7, 9, 2, 9, 7, 3, 0, 9]\ncounts = Counter(numbers)\nmax_count = counts.most_common(1)[0][1]\nout = [value for value, count in counts.most_common() if count == max_count]\nprint(out)\n# [7, 9]\n"], ["numbers = [7, 1, 7, 9, 2, 9, 7, 3, 0, 9]\ncounter = set([x for x in numbers if numbers.count(x) > 1])\nprint(max(counter))\n# 9\n"], ["def cycles(indices):\n\n    sub =[]\n    i=0\n    result = []\n    remaining = indices[:]\n\n    while remaining:\n        i = indices[i]\n        if(i in sub):\n            remaining = [ a for a in remaining if a not in sub]\n            result.append(sub)\n            sub = []\n            if remaining:\n                i=remaining[0]\n\n        sub.append(i)\n    return result\n\nr = cycles([2, 0, 1, 4, 3, 5])\nprint(r)\n#[[2, 1, 0], [4, 3], [5]]\n\nr = cycles([0,1,2,3,4,5])\nprint(r)\n#[[0], [1], [2], [3], [4], [5]]\n"], ["def cycles(indices):\n\n    def get_loop(indices, idx):             # this funtion returns a loop, starting from index `idx`\n        seen, loop = set(), []\n        while True:\n            v = indices[idx]                # get index on position `idx`\n            if v not in seen:               # have we seen index `v` already?\n                loop.append(idx)            # no, add it as part of the loop\n                seen.add(v)                 #   update set `seen` with index `v`\n                idx = v                     #   set current index `idx` with index `v`\n            else:\n                break                       # yes, that means we closed the loop\n        return loop                         # return this loop\n\n    rv, seen = [], set()\n    for i in indices:                       # iterate over all indices\n        if i not in seen:                   # is index `i` part of any loop we already have?\n            loop = get_loop(indices, i)     # no, so call get_loop() with starting index `i`\n            rv.append(loop)                 # we add this loop to the result list\n            seen.update(loop)               # update set `seen` with all indices inside this loop\n\n    return rv\n\nprint(cycles([2, 0, 1, 4, 3, 5]))\nprint(cycles([0, 1, 2, 3, 4, 5]))\nprint(cycles([12, 0, 8, 10, 9, 6, 5, 4, 13, 7, 17,14, 2,18, 16, 1, 11, 19, 3, 15]))\n", "[[2, 1, 0], [4, 3], [5]]\n[[0], [1], [2], [3], [4], [5]]\n[[12, 2, 8, 13, 18, 3, 10, 17, 19, 15, 1, 0], [9, 7, 4], [6, 5], [14, 16, 11]]\n"], [], [], ["def find_cycles(indices):\n    \"\"\"Given a list of indices return a list of cycles.\"\"\"\n\n    visited = set()\n    cycles = []\n\n    for start_ind in indices:\n\n        if start_ind in visited:\n            continue\n\n        path = [start_ind]\n        next_ind = indices[start_ind]\n\n        while start_ind != next_ind:\n            path.append(next_ind)\n            next_ind = indices[next_ind]\n        else:\n            cycles.append(path)\n            visited |= set(path)\n    return cycles\n\nfind_cycles([12, 0, 8, 10, 9, 6, 5, 4, 13, 7, 17,14, 2,18, 16, 1, 11, 19, 3, 15])\n# [[12, 2, 8, 13, 18, 3, 10, 17, 19, 15, 1, 0], [9, 7, 4], [6, 5], [14, 16, 11]]\n"], ["for num in range(10):\n    if counter[num] == largest:\n        print(num)\n"], [], ["from itertools import groupby\n\nnumbers = [7, 1, 7, 9, 2, 9, 7, 3, 0, 9]\n\ncounts = [(i, len(list(c))) for i,c in groupby(numbers)]    \nprint(counts)\n"], ["import re\nre.sub(pattern,replacement,data,flags=re.DOTALL|re.MULTILINE)\n"], ["xs = [1, 2, 3, 4, 5, 6, 7, 8, 9]\n\nprint(xs)\n\nfor idx in range(2, len(xs), 3):\n    if xs[idx] % 2 == 1:\n        xs[idx] -= 1\n\nprint(xs)\n", "For loop: 0.608657514\nList comprehension:  0.7510721879999999\nList comprehension 2:  0.641639047\n"], ["L = [1,2,3,4,5,6,7,8,9]\nL[2::3] = [i-1 if (i%3==0 and i%2!= 0) else i for i in L[2::3]\nprint(L)\n", "[1, 2, 2, 4, 5, 6, 7, 8, 8]\n"], [">>>from string import Template\n>>>name = 'Joe'\n>>>age=42\n>>>t = Template('$name is $age years old')\n>>>t.substitute(name = name, age=age+10)\n"], ["def do(number):\n    if number%2 == 1:\n        return number -1\n    else:\n        return number\n\n[do(y) if i%3 == 0 else y for i,y in enumerate(L)]\n", "for i in range(len(L)):\n    if i%3 == 0:\n        L[i] = do(L[i])\n"], [], ["L[2::3] = [x - 1 if x % 2 else x for x in L[2::3]]\n", "L = [1,2,3,4,5,6,7,8,9]\n\nL[2::3] = [x - 1 if x % 2 else x for x in L[2::3]]\n# [1, 2, 2, 4, 5, 6, 7, 8, 8]\n"], ["BINARY = \"Binary\"\nDECIMAL = \"Decimal\"\nHEXADECIMAL = \"Hexadecimal\"\n\nBASES = {\n    BINARY: 2,\n    DECIMAL: 10,\n    HEXADECIMAL: 16,\n}\n", "FORMATTERS = {\n    BINARY: \"b\",\n    DECIMAL: \"d\",\n    HEXADECIMAL: \"x\",\n}\n", "def convert(text, numeral_sys_1, numeral_sys_2):\n    n = int(text, BASES[numeral_sys_1])\n    return format(n, FORMATTERS[numeral_sys_2])\n"], ["> convert_what(\"Hexadecimal\", \"Decimal\")\n> 1\n> convert_what(\"Binary\", \"Binary\")\n> 0\n> convert_what(\"Invalid\", \"Hexadecimal\")\n> 0\n"], ["def convert_what(numeral_sys_1, numeral_sys_2):\n    numeral_dict = {\n        (\"Hexadecimal\", \"Decimal\"    ) : 1,\n        (\"Hexadecimal\", \"Binary\"     ) : 2,\n        (\"Decimal\",     \"Hexadecimal\") : 4, \n        (\"Decimal\",     \"Binary\"     ) : 6,\n        (\"Binary\",      \"Hexadecimal\") : 5,\n        (\"Binary\",      \"Decimal\"    ) : 3\n    }\n    return numeral_dict.get((numeral_sys_1, numeral_sys_2), 0)\n"], ["conditions = [\n    (\"Hexadecimal\", \"Decimal\"), (\"Hexadecimal\", \"Binary\"),\n    (\"Binary\", \"Decimal\"), (\"Decimal\", \"Hexadecimal\"), (\"Binary\", \"Hexadecimal\"), (\"Decimal\", \"Binary\")]\nchoices = [1,2,3,4,5,6]\n", " np.select(conditions, choices, default=0)\n"], ["def convert_what(numeral_sys_1, numeral_sys_2):\n    if numeral_sys_1 == numeral_sys_2:      \n        return 0\n    return [\"HexadecimalDecimal\", \"HexadecimalBinary\", \"BinaryDecimal\", \"DecimalHexadecimal\", \"BinaryHexadecimal\", \"DecimalBinary\" ].index(numeral_sys_1 + numeral_sys_2) + 1\n"], ["from random import randint\n\n\ndef roll_dice(n):\n    return [randint(1, 6) for _ in range(n)]\n\n\nprint('You re-rolled some dice and the new values are:',\n    ', '.join(map(str, roll_dice(5)))\n)\n", "print('You re-rolled some dice and the new values are: ', end='')\nprint(*roll_dice(5), sep=', ')\n", "print('You re-rolled some dice and the new values are:', *roll_dice(5))\n", "Python 3.7.5 (default, Oct 17 2019, 12:16:48) \n[GCC 9.2.1 20190827 (Red Hat 9.2.1-1)] on linux\nType \"help\", \"copyright\", \"credits\" or \"license\" for more information.\n>>> from random import randint\n>>> \n>>> \n>>> def roll_dice(n):\n...     return [randint(1, 6) for _ in range(n)]\n... \n>>> \n>>> print('You re-rolled some dice and the new values are:',\n...     ', '.join(map(str, roll_dice(5)))\n... )\nYou re-rolled some dice and the new values are: 4, 3, 5, 5, 4\n>>> \n"], ["def convert_what(numeral_sys_1, numeral_sys_2):\n\n    l1 = [[\"Hexadecimal\",\"Decimal\"],[\"Hexadecimal\",\"Binary\"],\n            [\"Decimal\",\"Hexadecimal\"],[\"Decimal\",\"Binary\"],\n            [\"Binary\",\"Hexadecimal\"],[\"Binary\",\"Decimal\"]]\n\n    return l1.index([numeral_sys_1, numeral_sys_2]) + 1 if [numeral_sys_1,numeral_sys_2] in l1 else 0\n"], ["print(values[0],values[1],values[2],values[3],values[4],sep=',')\n\n"], ["import random \n\nN = 5 # number of dice throws\nvalues = [0] * N\nfor i in range(N):\n    values[i] = random.randint(1,6)\n\n# Remove brackets\nstr_values = [str(i) for i in values] # convert to strings\nnew_values = \", \".join(str_values)\nprint(\"\\nYou rerolled some dice and the new values are: {}\".format(new_values))\n", "You rerolled some dice and the new values are: 1, 1, 6, 1, 5\n", "import random \n\ndef calcVals(values, N):\n    for i in range(N):\n        values[i] = random.randint(1,6)\n\n    # Remove brackets\n    str_values = [str(i) for i in values] # convert to strings\n    new_values = \", \".join(str_values)\n\n    return values, str_values, new_values\n\nN = 5 # number of dice throws\nvalues = [0] * N\n\nvalues, str_values, new_values = calcVals(values, N)\nprint(\"\\nYou rerolled some dice and the new values are: {}\".format(new_values))\n"], [], ["print(\"\\nYou rerolled some dice and the new values are: \" + \", \".join(map(str, values)))\n"], ["print(\"\\nYou rerolled some dice and the new values are: {} {} {} {} {}\".format(*values))\n\n# You rerolled some dice and the new values are: 6 6 5 5 4\n\n\n"], [], ["def convert(key1, key2):\n    keys = [\"Hexadecimal\", \"Decimal\", \"Binary\"]\n    combinations = {(0, 1): 1, (0, 2): 2, (1, 0): 4, (1, 2): 6, (2, 0): 5, (2, 1): 3} # use keys indexes to map to combinations\n    try:\n        return combinations[(keys.index(key1), keys.index(key2))]\n    except (KeyError, ValueError): # if value is not in list, return as 0\n        return 0\n"], ["def convert_what_2(numeral_sys_1, numeral_sys_2):\n    num_sys = [\"Hexadecimal\", \"Decimal\", \"Binary\"]\n    r_value = {0: {1: 1, 2: 2},\n               1: {0: 4, 2: 6},\n               2: {0: 5, 1: 3} }\n    try:\n        value = r_value[num_sys.index(numeral_sys_1)][num_sys.index(numeral_sys_2)]\n    except KeyError: # Catches when they are equal or undefined\n        value = 0\n    return value\n"], ["def convert_what(numeral_sys_1, numeral_sys_2):\n    return {\n        (\"Hexadecimal\", \"Decimal\") : 1, \n        (\"Hexadecimal\", \"Binary\") : 2, \n        (\"Binary\", \"Decimal\") : 3,\n        (\"Decimal\", \"Hexadecimal\") : 4,\n        (\"Binary\", \"Hexadecimal\") : 5, \n        (\"Decimal\", \"Binary\") : 6, \n     }.get((numeral_sys_1, numeral_sys_2), 0)\n"], ["def hex_dec(inp):\n    return 1234  # todo implement\n# do the same for hex_bin, bin_dec, dec_hex, bin_hex, dec_bin\n", "converter_funcs = {\n    (\"Hexadecimal\", \"Decimal\"): hex_dec,\n    (\"Hexadecimal\", \"Binary\"): hex_bin,\n    (\"Binary\", \"Decimal\"): bin_dec,\n    (\"Decimal\", \"Hexadecimal\"): dec_hex,\n    (\"Binary\", \"Hexadecimal\"): bin_hex,\n    (\"Decimal\", \"Binary\"): dec_bin,\n}\n", "def convert(input_number, from_sys, to_sys):\n    if from_sys == to_sys:\n        return input_number\n    func = converter_funcs[(from_sys, to_sys)]\n    return func(input_number)\n"], ["a = 1\nb = 2\nif b > a:\n  print(b + \" is greater than \" + a)\nelif a == b:\nprint(\"a and b are equal\")\nelse:\nprint(\"a is greater than b\")\n"], ["print 1, 2 == 1, 2\n", "print 1, False, 2 //since 1 not equal to 2\n"], ["1\nthe result of the Boolean test to see whether 2 equals 1\n2\n", ">>> (1,2) == (1,2)\nTrue\n"], [], [">>> (1, 2) == (1, 2)\nTrue\n>>> (1, 3) == (1, 2)\nFalse\n>>> (3, 1) == (2, 1)\nFalse\n"], [], ["the quick brown fox jumped over the lazy dog\nthe quick\nbrown fox\njumped over\nthe lazy dog\n", "import re\n\nwith open('sample.txt') as f:\n    data = f.read()\n\ndef replace(m):\n    return ''.join([c if c.isspace() else '*'\n                    for c in m.group(0)])\n\ndata = re.sub(r'quick\\s+brown|over\\s+the',replace,data)\nprint(data)\n", "the ***** ***** fox jumped **** *** lazy dog\nthe *****\n***** fox\njumped ****\n*** lazy dog\n"], ["phonenumber = input(\"Enter phone number: \")\nwith open('myfile.txt') as searchfile:\n    for line in searchfile:\n        if phonenumber in line:\n           print(line)\n           quit()\n", "import re\n\nphonenumber = input(\"Enter phone number: \")\n\npattern = re.compile(\".*\\|(?P<phone_number>[0-9]*)\")\n\n\nwith open('myfile.txt') as searchfile:\n    for line in searchfile:\n        phone_number = re.search(pattern, line)\n        if phone_number:\n            if phone_number['phone_number'] == phonenumber:\n                print(line)\n                quit()\n"], ["[x for x in my_list if x != 0]\n", "list(filter(lambda x: x, my_list))  # or lambda x: x != 0 depending on intent.\n", "idx = [n for n, x in enumerate(my_list) if x == 0]\nfor i in reversed(idx):\n    my_list.pop(i)\n", "my_list[:] = [x for x in my_list if x != 0]\n"], ["def convert_what(numeral_sys_1, numeral_sys_2):\n    src = numeral_sys_1, numeral_sys_2\n    if src == \"Hexadecimal\", \"Decimal\":\n        return 1\n    if src == \"Hexadecimal\", \"Binary\"\n        return 2\n    # You get the gist.... \n    if src == \"Decimal\", \"Binary\":\n        return 6\n    return 0 \n"], [], ["total = 0 \nprint ('The total sales for the week are: $',\"{0:.2f}\".format(total))\n"], [], ["def main():\n    M = float(input('Please enter sales for Monday: '))\n    T = float(input('Please enter sales for Tuesday: '))\n    W = float(input('Please enter sales for Wednesday: '))\n    R = float(input('Please enter sales for Thursday: '))\n    F = float(input('Please enter sales for Friday: '))\n    sales = [M, T, W, R, F]\n\n    total = 0 \n\n    for value in sales:\n        total += value\n    total = \"{0:.2f}\".format(total)\n    print ('The total sales for the week are: $' + str(total))\n\nmain()\n"], ["print ('The total sales for the week are: $',total('.2f'))\n", "print ('The total sales for the week are: $',\"{0:.2f}\".format(total))\n"], ["print (f'The total sales for the week are: {total:.2f}')\n"], [], ["import os as _os\n\n_path = _os.path.dirname(__file__) + '\\\\Qt\\\\bin;' + _os.environ['PATH']\n_os.environ['PATH'] = _path\n"], [], [], [], ["import dask.dataframe\ndata = dask.dataframe.read_csv(\"your.csv\")\n"], [], ["list = { 'Name', 'Year', 'City_id', 'Region_Id' , 'Location', 'Source', 'Time'}\n\nreqVal = { 'Name', 'Year', 'City_id' } # items in List - if present or not\n\ndef isValInList():\n    assert True, reqVal.issubset(list)\n\nisValInList()\n"], ["import os\nfile = open('file_path', \"r\")\ndata = file.read()\nfile.close()\n\ndata = data.replace('the pattern you are looking for', 'the pattern you want instead')\n\nfile = open('file_path',\"w\")\nfile.write(data)\nfile.close()\n", "data = f.readlines()\ndata = data.replace('...','...')\nf.write(data)\n", "data.replace('\\n','')#<------\ndata.replace('the pattern you are looking for', 'the pattern you want instead')\n"], [], [">>> n = 4\n>>> arr = map(int, \"1 3 4 2\".split())\n>>> ar = list(arr)\n>>> ar.reverse()\n>>> string = ' '\n>>> string.join(ar)\nTraceback (most recent call last):\n  File \"<stdin>\", line 1, in <module>\nTypeError: sequence item 0: expected string, int found\n>>> ar\n[2, 4, 3, 1]\n>>> map(str,ar)\n['2', '4', '3', '1']\n", ">>> string.join(map(str,ar))\n'2 4 3 1'\n>>> print(string)\n"], ["2 4 3 1\n"], [">>> ''.join(reversed('1 2 3 4'))\n'4 3 2 1'\n"], [], ["n = 4\narr = map(int, \"1 3 4 2\".split())\nar = list(arr)\nb=ar.reverse()\nstring =' '\nstring=string.join(str(ar))\nprint(string)\n"], [], ["a = np.flipud(np.array(x))\nlargest_change = (a - np.minimum.accumulate(a)).max()\n"], ["def convert_what(numeral_sys_1, numeral_sys_2):\n\n    num = ['Hexadecimal','Decimal','Binary']\n    tbl = [[0,1,2],\n           [4,0,6],\n           [5,3,0]]\n    try:\n        return tbl[num.index(numeral_sys_1)][num.index(numeral_sys_2)]\n    except ValueError:\n        return 0\n"], ["x = [1, 2, 5, 4, 2, 4, 2, 1, 7]\ns = pd.Series(x)\n\nz = abs(s.diff())\nidx_max_val = z[z==z.max()].index[0]\n\nprint(f'Max difference in value ({z.max()}) occurs at the indices of {idx_max_val-1}:{idx_max_val}')\n"], ["x = [1, 2, 5, 4, 2, 4, 2, 1, 7]\nlargest_change = 0\nposition = 0\n\nfor i in range(len(x)-1):\n    change = x[i] - min(x[i+1:])\n    if change > largest_change:\n        largest_change = change\n        position = i\n\nprint(x[position], min(x[position+1:]), largest_change)\n"], ["arr = np.array(x)\nnp.triu(arr[:,None] - arr)\n\narray([[ 0, -1, -4, -3, -1, -3, -1,  0, -6],\n       [ 0,  0, -3, -2,  0, -2,  0,  1, -5],\n       [ 0,  0,  0,  1,  3,  1,  3,  4, -2],\n       [ 0,  0,  0,  0,  2,  0,  2,  3, -3],\n       [ 0,  0,  0,  0,  0, -2,  0,  1, -5],\n       [ 0,  0,  0,  0,  0,  0,  2,  3, -3],\n       [ 0,  0,  0,  0,  0,  0,  0,  1, -5],\n       [ 0,  0,  0,  0,  0,  0,  0,  0, -6],\n       [ 0,  0,  0,  0,  0,  0,  0,  0,  0]])\n\nnp.triu(arr[:,None] - arr).max()\n\nOut[758]: 4\n"], ["import pandas\ndf = pandas.DataFrame({'col1': [1, 2, 5, 4, 2, 4, 2, 1, 7]})\ndf[\"diff\"] = df['col1'].rolling(window=2).apply(lambda x: x[1] - x[0])\nprint(df[\"diff\"].max())\n", "import pandas\ndf = pandas.DataFrame({'col1': [1, 2, 5, 4, 2, 4, 2, 1, 7]})\nmax_diff = df[\"col1\"].max() - df[\"col1\"].min()\nprint(\"Min:\", df[\"col1\"].min(), \"Max:\", df[\"col1\"].max(), \"Diff:\", max_diff)\n", "Min: 1 Max: 7 Diff: 6\n"], ["mapping = {\n    'Hexadecimal': {'Decimal': 1, 'Binary': 2},\n    'Binary': {'Decimal': 3, 'Hexadecimal': 5},\n    'Decimal': {'Hexadecimal': 4, 'Binary': 6}\n}\ndef convert_what(numeral_sys_1, numeral_sys_2):\n    return mapping.get(numeral_sys_1, {}).get(numeral_sys_2, 0)\n", "mapping = dict(zip(permutations(('Hexadecimal', 'Decimal', 'Binary'), r=2), (1, 2, 4, 6, 3, 5)))\ndef convert_what(numeral_sys_1, numeral_sys_2):\n    return mapping.get((numeral_sys_1, numeral_sys_2), 0)\n"], ["@kwargs_decorator(a='a', b='b')\ndef f(x, a, b):\n    print(f'x = {x}')\n    print(f'a = {a}')\n    print(f'b = {b}')\n\nf(1, 2)\n", "TypeError: f() got multiple values for argument 'a'\n", "def default_kwargs(**default):\n    from functools import wraps\n    def decorator(f):\n        @wraps(f)\n        def wrapper(*args, **kwargs):\n            from inspect import getfullargspec\n            f_args = getfullargspec(f)[0]\n            used_args = f_args[:len(args)]\n\n            final_kwargs = {\n                key: value \n                for key, value in {**default, **kwargs}.items() \n                if key not in used_args\n            }\n\n            return f(*args, **final_kwargs)\n        return wrapper\n    return decorator\n", "@default_kwargs(a='a', b='b', d='d')\ndef f(x, a, b, *args, c='c', d='not d', **kwargs):\n    print(f'x = {x}')\n    print(f'a = {a}')\n    print(f'b = {b}')\n    for idx, arg in enumerate(args):\n        print(f'arg{idx} = {arg}')\n    print(f'c = {c}')\n    for key, value in kwargs.items():\n        print(f'{key} = {value}')\n\nf(1)\nf(1, 2)\nf(1, b=3)\nf(1, 2, 3, 4)\nf(1, 2, 3, 4, 5, c=6, g=7)\n"], ["lst = [0, 0, 0, 1, 1, 0 ,0, 1, 0]\n\nlst = list(filter(lambda elem: elem != 0, lst))\n\nprint(lst)\n", "lst = [0, 0, 0, 1, 1, 0 ,0, 1, 0]\n\nlst = [elem for elem in lst if elem != 0]\n\nprint(lst)\n"], ["import re\n\ntest = '''custom_log(\"some text\")\ncustom_log(\"lorem ipsum can be anything\")\nsome more text\ncustom_log(some text)\ncustom_log(\"lorem ipsum\"\n           \"can be anything\") \nsome more text\ncustom_log(some text)\ncustom_log(\"\"\"lorem ipsum\n           can be anything\"\"\")\nsome more text'''\n\nsearch = 'lorem ipsum can be anything'\n\n# we look for 'custom_log('' followed by our search text followed by ')'\nwords = search.split()\nsearch_re = r'custom_log(\\(\"+'  + r'''[\\n \"]+'''.join(words) + r'\"+\\))'\n# Our regex will be: \n# custom_log(\\(\"+lorem[\\n \"]+ipsum[\\n \"]+can[\\n \"]+be[\\n \"]+anything\"+\\))\n\nprint(re.sub(search_re, r'log.info\\1.base', test) + \"\\n\")\n", "custom_log(\"some text\")\nlog.info(\"lorem ipsum can be anything\").base\nsome more text\ncustom_log(some text)\nlog.info(\"lorem ipsum\"\n           \"can be anything\").base \nsome more text\ncustom_log(some text)\nlog.info(\"\"\"lorem ipsum\n           can be anything\"\"\").base\nsome more text\n"], ["    def myfunction(bstr):\n        #str = ' '.join(bstr)\n        #my_string = str\n        str1 = re.findall(r'[\\w\\.-]+@[\\w\\.-]+', bstr)\n        return str1\n    import re\n    output=[]\n    emails = ['John Kennedy <jk123@gmail.com> or <johnk123@hotmail.com>','Adam \n              Hartley <ah123@yahoo.com>','Ben Saunders <benji@live.co.uk>']\n     for item in emails:\n        output.append(myfunction(item))\n"], [], [], [], ["class IntegerStack:\n    def __init__(self):\n        self._stack = []\n        self._head = -1\n\n    def emptyStack(self):\n        return self._head < 0\n\n    def head(self):\n        if self._head < 0:\n            raise Exception(\"The stack is empty.\")\n        return self._stack[self._head]\n"], ["from collections import deque\n\nstack = deque()\nstack.append(1) # push\nstack.append(2) # push\nstack.append(3) # push\nstack.append(4) # push\nt = stack[-1] # your 'head()'\ntt = stack.pop() # pop\nif not len(stack):  # empty()\n    print(\"It's empty\")\n"], ["myarray = []\n"], ["df = pd.pivot_table(df, index=['Col1', 'Col2', 'Col3'], values='Col4', aggfunc=['count', 'sum']).reset_index()\ndf.columns = ['Col1', 'Col2', 'Col3', 'Count', 'Col4_sum']\n", "  Col1  Col2 Col3  Count  Col4_sum\n0    A     1   AA      2        15\n1    A     2   AB      1        30\n2    B     4   FF      1        10\n3    C     1   HH      1         4\n4    C     3   GG      2        13\n5    D     1   AA      1         4\n6    D     3   FF      1         6\n"], ["df = df1.assign(Count=df1.groupby(['Col1','Col2','Col3']).Col4.transform('size'))\n        .assign(Col4_sum=df1.groupby(['Col1','Col2','Col3']).Col4.transform('sum'))\n        .reset_index()\n"], ["df.groupby(['Col1','Col2','Col3']).agg({'Col3': ['count'], 'Col4': ['count','sum']})\n"], ["df = (df1.groupby(['Col1','Col2','Col3'])['Col4']\n         .agg([('Count','size'), ('Col4_sum','sum')])\n         .reset_index())\nprint (df)\n  Col1  Col2 Col3  Count  Col4_sum\n0    A     1   AA      2        15\n1    A     2   AB      1        30\n2    B     4   FF      1        10\n3    C     1   HH      1         4\n4    C     3   GG      2        13\n5    D     1   AA      1         4\n6    D     3   FF      1         6\n", "df = (df1.groupby(['Col1','Col2','Col3'])\n         .agg(Count=('Col5', 'size'), Col4_sum=('Col4', 'sum'))\n         .reset_index())\nprint (df)\n  Col1  Col2 Col3  Count  Col4_sum\n0    A     1   AA      2        15\n1    A     2   AB      1        30\n2    B     4   FF      1        10\n3    C     1   HH      1         4\n4    C     3   GG      2        13\n5    D     1   AA      1         4\n6    D     3   FF      1         6\n"], ["df2 = df.groupby(['Col1','Col2','Col3'])['Col4'].agg('sum')\n"], [">>> df = pd.DataFrame([[1, 2, 3],\n...                    [4, 5, 6],\n...                    [7, 8, 9],\n...                    [np.nan, np.nan, np.nan]],\n...                   columns=['A', 'B', 'C'])\n>>> df.agg({'A' : ['sum', 'min'], 'B' : ['min', 'max']})\n#         A    B\n# max   NaN  8.0\n# min   1.0  2.0\n# sum  12.0  NaN\n"], ["for position in reversed(range(len(mylist))):\n    if mylist[position] == 0:\n        del mylist[position]\n"], ["[elem for elem in list if elem]\n"], ["list = [0, 0, 0, 1, 1, 0 ,0, 1, 0]\n\nfor elem in reversed(list):\n    if elem == 0:\n        list.remove(elem)\n\nprint(list)\n"], ["list = [0, 0, 0, 1, 1, 0 ,0, 1, 0]\n\ni = 0\nlength = len(list)\nwhile (i < len(list)):\n    if list[i] == 0:\n        list.remove(list[i])\n        i -= 1\n        length -= 1\n    else:\n        i += 1\nprint(list)\n\n"], ["    def foo(self, pic_path, key_path, enc_path=None):\n        return pic_path, enc_path, key_path\n"], ["(1 * 10 ** -err)\n", "def fx(x):\n    v = float(x*x*x - 5*x - 7)\n    return v\n\n\nerr = int(input(\"Enter zeroes in approximation in solution: \"))\nb = float(input(\"Enter upper limit for root: \"))\na = float(input(\"Enter lower limit for root: \"))\nc = 0.0\nctr = 0 #                           ^^^^^^^^^^^^^^^^^^\nwhile abs(fx(c)) > (1 * 10 ** -err) and fx(b) != fx(a): # ^ is binary xor!\n    ctr += 1\n    c = b - ((b - a)/(fx(b) - fx(a))) * fx(b)\n    print(ctr, a, b, c, sep=', ')\n    a = b\n    b = c\n    c = 0\n    print()\nprint(\"The root is approximately = \", b, ' after ', ctr, ' iterations')\ninput()\n"], ["def fx(x):\n    v = float(x*x*x - 5*x - 7)\n    return v\n\n\nerr = int(input(\"Enter zeroes in approxiamtion in solution: \"))\nb = float(input(\"Enter upper limit for root: \"))\na = float(input(\"Enter lower limit for root: \"))\nc = 0.0\n\nwhile abs(fx(c)) > ( 10 ** -err):\n    try:\n        c = b - ((b - a)/(fx(b) - fx(a))) * fx(b)\n    except ZeroDivisionError:\n        break\n    print(a, b, c, sep=', ')\n    a = b\n    b = c\n    c = 0\n    print()\nprint(\"The root is approximately = \", b)\n", "Enter zeroes in approxiamtion in solution: 3\nEnter upper limit for root: 2\nEnter lower limit for root: 1\n1.0, 2.0, 6.5\n\n2.0, 6.5, 2.1658986175115205\n\n6.5, 2.1658986175115205, 2.302797651275858\n\n( steps omitted )\n\n2.7473464241055843, 2.7473465403033757, 2.747346540307211\n\n2.7473465403033757, 2.747346540307211, 2.747346540307211\n\nThe root is approximately =  2.747346540307211\n"], [], [], ["Terminal -----------------------------------\nEnter zeroes in approxiamtion in solution: 5\nEnter upper limit for root: 5\nEnter lower limit for root: 5\n93.0\n93.0\nTraceback (most recent call last):\n  File \"d:/PythonScripts/first_python_project/curso_python.py\", line 13, in <module>\n    c = b - ((b - a)/(fx(b) - fx(a))) * fx(b)\nZeroDivisionError: float division by zero\n", "Enter zeroes in approxiamtion in solution: 3\nEnter upper limit for root: 5\nEnter lower limit for root: 3\n93.0\n5.0\n3.0, 5.0, 2.8863636363636362\n\n2.614751596543952\n93.0\n5.0, 2.8863636363636362, 2.825218326106125\n\n1.424401534793665\n2.614751596543952\n2.8863636363636362, 2.825218326106125, 2.7520503761266304\n\n0.08317571970829363\n1.424401534793665\n2.825218326106125, 2.7520503761266304, 2.747512887487003\n\n0.002935214303143141\n0.08317571970829363\n2.7520503761266304, 2.747512887487003, 2.747346905212986\n\n6.43830337132556e-06\n0.002935214303143141\n2.747512887487003, 2.747346905212986, 2.747346540335565\n\n5.002736003234531e-10\n6.43830337132556e-06\n2.747346905212986, 2.747346540335565, 2.747346540307211\n\n1.7763568394002505e-15\n5.002736003234531e-10\n2.747346540335565, 2.747346540307211, 2.747346540307211\n\n1.7763568394002505e-15\n1.7763568394002505e-15\nTraceback (most recent call last):\n  File \"d:/PythonScripts/first_python_project/curso_python.py\", line 13, in <module>\n    c = b - ((b - a)/(fx(b) - fx(a))) * fx(b)\nZeroDivisionError: float division by zero\n"], [], [], [], ["class test:\n    def foo(self, pic_path, enc_path, key_path):\n        return pic_path, enc_path, key_path\n\n\nif __name__ == \"__main__\":\n    s = test()\n    pic_path = \"pic.png\"\n    key_path = \"keys.txt\"\n    enc_path = \"asd.sc\"\n    s.foo(pic_path,enc_path, key_path)\n    print(\"done\")\n"], ["fileinput = \"\"\"\n Company         Adress      Employees   Phone Nr.\nVenganese| Big street, Egypt|   52     |2214124112\nMonyess  | One street, Malta|   89     |2215521575\n\n\"\"\"\n\ndef findbynumber(data, number):\n    lines = [line\n             for line in data.split(\"\\n\") if line\n             for parts in [line.split(\"|\")] if len(parts) == 4 and parts[3] == number]\n    return lines\n\nprint(findbynumber(fileinput, \"2215521575\"))\n", "['Monyess  | One street, Malta|   89     |2215521575']\n"], [], ["with open( F+'.txt', 'r') as searchfile:\n     line = searchfile.readline()\n     while line:\n         line = searchfile.readline()\n         phone = line.split(\"|\")[-1]\n         wanted_number = input()\n         if phone == wanted_number:\n             print(line)\n"], ["import pandas as pd\n\ndata = pd.read_csv('companies.txt', sep=\"|\", names=[\"Company\", \"Adress\", \"Employees\", \"Phone Nr.\"], skiprows=1)\n\nprint(data.loc[data[\"Phone Nr.\"] == 2215521575])\n", "     Company              Adress  Employees   Phone Nr.\n1  Monyess     One street, Malta         89  2215521575\n"], [], ["Program#1\n\na=1\n\nif2<3\n print a\n\nthis prints a declared outside.\n\n\nhowever, in the below example a is defined globally as 5, but it's defined again as 3, within a function. If you print the value of a from within the function, the value that was defined locally will be printed. If you print a outside of the function, its globally defined value will be printed. The a defined in function() is literally sealed off from the outside world. It can only be accessed locally, from within the same function. So the two a's are different, depending on where you access them from.\n\nProgram#2\n\na = 1\n\ndef random1():\n    a = 3\n    print(a)\n\nfunction()\nprint(a)\n\nHere, you see 3 and 5 as output.\n"], ["print('%s is (%d+10) years old' % ('Joe', 42)\nname='joe'\nage=42+10\nprint(f'{name} is {age} years old')\n"], ["def max_unique_substrings(s, seen=()):\n    maximum = 0\n    for i in range(1, len(s) + 1):\n        candidate = s[:i]\n        if candidate not in seen:\n            maximum = max(maximum, 1 + max_unique_substrings(s[i:], {candidate, *seen}))\n    return maximum\n", "def max_unique_substrings(s, seen=()):\n    return max((1 + max_unique_substrings(s[i:], {candidate, *seen}) for i in range(1, len(s) + 1) if (candidate := s[:i]) not in seen), default=0)\n"], ["While i < 10 :\n    if i == 4 or i == 3 :\n        continue\n"], ["links = My_table.findAll('a')\n", "v = []\n for tr in values:\n   td = tr.find_all('td')\n   row = [i.text for i in td]\n   v.append(row)\n df = pd.DataFrame.from_records(v)\n"], [], ["from sklearn.impute import SimpleImputer\n\nimputer = SimpleImputer(missing_values = np.nan, strategy = 'mean', verbose = 0)\n\nimputer = imputer.fit(X[:, 1:3])\nX[:, 1:3] = imputer.transform(X[:, 1:3])\n"], ["Objective function \nmaximize sum(X[i], i in 1..n)\nConstraints:\nfor all i in 1..n, X[i] in {0, 1}\nfor all edge (i, j), X[i] + X[j] <= 1\n"], [], ["for line in lineList:\n    if len(line)>0 and line[0].isdigit():\n        newFile.append(line)\n"], ["lst = ['test', '212122', '', '123_test']\nnew_lst = [item for item in lst if item and item[0].isdigit()]\nprint(new_lst)\n", "['212122', '123_test']\n", "with open(\"p.txt\") as f:\n    lineList = f.read().splitlines()\n    new_lst = [item for item in lineList if item and item[0].isdigit()]\n"], ["    if lineList[i] and lineList[i][0].isnumeric():\n", "for line in lineList:\n    if line and line[0].isnumeric():\n        newFile.append(line)\n", "newFile = [line for line in lineList if line and line[0].isnumeric()]\n"], ["import re\n\nL = ['10_help', 'help', '1_ec']\n[rec for rec in L if re.search('^\\s*[0-9]',rec)]\n"], ["with open(\"p.txt\") as f:\n  lineList = f.read().splitlines()\n\n  numLines = len(lineList)\n\nnewFile = []\n\nfor i in range(numLines):\n    if len(lineList[i])>0:             #This is the changed line.\n        if lineList[i][0].isnumeric():\n            newFile.append(lineList[i])\nprint(newFile)\n"], ["b = [[1],[1]] \n\ndf['a'] = df.apply(lambda row: list(set(row['a']).difference(set(row['b']))), axis=1)\n", "import pandas as pd\na = [[1,2,3,4,5,6],[23,23,212,223,1,12]]\nb = [[1,5],[1,23]]\n\n\ndf = pd.DataFrame(zip(a,b), columns = ['a', 'b'])\n\n\n\ndf['a'] = df.apply(lambda row: list(set(row['a']).difference(set(row['b']))), axis=1)\n"], ["In []:\ndf2 = df.explode('a')\ndf['a'] = df2.a[df2.a != df2.b].groupby(level=0).apply(list)\ndf\n\nOut[]:\n                        a  b\n0         [2, 3, 4, 5, 6]  1\n1  [23, 23, 212, 223, 12]  1\n"], ["s=pd.DataFrame(df.a.tolist(),index=df.index)\ndf['a']=s.mask(s.eq(df.b,0)).stack().astype(int).groupby(level=0).apply(list)\nOut[264]: \n0           [2, 3, 4, 5, 6]\n1    [23, 23, 212, 223, 12]\ndtype: object\n"], ["a = [[1,2,3,4,5,6],[23,23,212,223,1,12]]\nb = [1,1]\ndf = pd.DataFrame(zip(a,b), columns = ['a', 'b'])\nfor i, j in zip(df.a, df.b):\n    i.remove(j)\n\nprint df\n\n                        a  b\n0         [2, 3, 4, 5, 6]  1\n1  [23, 23, 212, 223, 12]  1\n"], ["import pandas as pd\na = [[1,2,3,4,5,6],[23,23,212,223,1,12]]\nb = [1,1]\n\n\ndf = pd.DataFrame(zip(a,b), columns = ['a', 'b'])\ndef removing(row):\n    val = [x for x in row['a'] if x != row['b']]\n    return val\ndf['c'] = df.apply(removing,axis=1)\nprint(df)\n", "                           a  b                       c\n0         [1, 2, 3, 4, 5, 6]  1         [2, 3, 4, 5, 6]\n1  [23, 23, 212, 223, 1, 12]  1  [23, 23, 212, 223, 12]\n"], [], ["print('%s is %d years old' % ('Joe', 42 + 10)\n# or  if you really want to something like that (python 3.6+)\nname = 'joe' \nage = 42\nf'{name} is {age +10} years old'\n"], ["def transpose(input_dict):\n\noutput_dict = {\n    f\"row{j+1}\": {\n        f\"column{i+1}\": values[1][j] for i, values in enumerate(input_dict.items())\n    }\n    for j in range(len(next(iter(input_dict.values()))))\n}\n\nreturn output_dict\n"], ["data = {\n    \"column1\": [\"Row1Col1Data\", \"Row2Col1Data\"],\n    \"column2\": [\"Row1Col2Data\", \"Row2Col2Data\"],\n    \"column3\": [\"Row1Col3Data\", \"Row2Col3Data\"],\n}\n\nnumber_rows = len(data[\"column1\"]) \nnumber_columns = len(data.keys())\nnew_data = {\"row\" + str(i + 1): {\"column\" + str(j + 1) : list(data.values())[j][i] for j in range(number_columns)} for i in range(number_rows)}} \n", ">>> new_data\n{\n'row1': {'column1': 'Row1Col1Data',\n          'column2': 'Row1Col2Data',\n          'column3': 'Row1Col3Data'},\n 'row2': {'column1': 'Row2Col1Data',\n          'column2': 'Row2Col2Data',\n          'column3': 'Row2Col3Data'}\n}\n"], ["import pandas as pd\n\nyour_dict = {\n    \"column1\": [\"Row1Col1Data\", \"Row2Col1Data\"],\n    \"column2\": [\"Row1Col2Data\", \"Row2Col2Data\"],\n    \"column3\": [\"Row1Col3Data\", \"Row2Col3Data\"],\n}\n\noutput_dict = pd.DataFrame(your_dict).transpose().to_dict()\n", "{\n    0: {\n        \"column1\": \"Row1Col1Data\",\n        \"column2\": \"Row1Col2Data\",\n        \"column3\": \"Row1Col3Data\",\n    },\n    1: {\n        \"column1\": \"Row2Col1Data\",\n        \"column2\": \"Row2Col2Data\",\n        \"column3\": \"Row2Col3Data\",\n    },\n}\n"], ["col_data = {\n    'col1': ['r1c1', 'r2c1'],\n    'col2': ['r1c2', 'r2c2'],\n    'col3': ['r1c3', 'r2c3'],\n}\n\n# Safety check in case columns don't have the same length\ncol_len = min(len(col) for col in col_data.values())\n\nrow_data = {f'row{i+1}': [val[i] for val in col_data.values()]\n             for i in range(col_len)}\n", "{\n    'row1': ['r1c1', 'r1c2', 'r1c3'],\n    'row2': ['r2c1', 'r2c2', 'r2c3']\n}\n"], ["{ ('row%d' % (1+i)) : {j : coldata[j][i] for j in coldata.keys()} for i in range(len(coldata['column1'])) }\n"], ["print('%s is %d years old' % ('Joe', 42+10))\nprint('{0} is {1} years old'.format('Joe', 42+10))\nname='Joe'\nprint(f'{name} is {42+10} years old')\n", "print(name,'is',(42+10),'years old')\nprint(eval(\"name + ' is ' + str(42+10) + ' years old'\"))\n"], ["name = 'Joe'\na, b = 42, 10\nprint(f'{name} is {a + b} years old')\n"], [">>> global_var = 3\n\n>>> def my_first_func():\n...     # my_func can 'see' the global variable\n...     print('I see \"global_var\" = ', global_var, ' from \"my_first_func\"')\n", " >>> def my_second_func():\n    ...     local_var = 10\n    ...     print('I see \"local_var\" = ', local_var, 'from \"my_second_func\"')\n", ">>> local_var\nTraceback (most recent call last):\n  ...\nNameError: name 'local_var' is not defined\n"], ["name = \"Joe\"\nage = 42\nprint(f'{name} is {age + 10} years old')\n"], ["print('%s is %d years old' % ('Joe', 42+10))\n"], ["print('%s is (%d) years old' % ('Joe', 42+10))\n"], ["mylist = [zed for zed in range(10)]\n"], [], ["if 2 < 3:\n   a = 3\nelse:\n   b = 1\nprint(a)\n"], [], ["for i in (*range(3), *range(6, 10)): # imagine the case of (*range(3), *range(996, 1000))\n    print(i)\n", "from itertools import chain\nfor i in chain(range(3), range(6, 10)):\n    print(i)\n"], ["if i >= 3 and i <= 5:\n    continue\n"], ["for i in range(10):\n    if 3 <= i <= 5:\n        continue\n    else:\n        print(i)\n"], [], ["import pandas as pd\n\ndf = pd.read_csv('myfile', sep='=', header=None)\n#        0  1\n# 0   name  1\n# 1  grade  A\n# 2  class  B\n# 3   name  2\n# 4  grade  D\n# 5  class  A\n\ndf = df.pivot(index=df.index // len(df[0].unique()), columns=0)\n#       1           \n# 0 class grade name\n# 0     B     A    1\n# 1     A     D    2\n", "df.columns = df.columns.get_level_values(1)\n# 0 class grade name\n# 0     B     A    1\n# 1     A     D    2\n"], ["import pandas as pd\nfrom collections import defaultdict\n\ntext = '''name=1\n          grade=A\n          class=B\n          name=2\n          grade=D\n          class=A'''\ntext = text.split()\n\nnew_dict = defaultdict(list) \nfor i in text:\n    temp = i.split('=')\n    new_dict[temp[0]].append(temp[1])\n\ndf = pd.DataFrame(new_dict)\n", "    name    grade   class\n0      1        A       B\n1      2        D       A\n"], ["import pandas as pd\nfrom collections import defaultdict\nd = defaultdict(list)\n\nwith open(\"text_file.txt\") as f:\n    for line in f:\n        (key, val) = line.split('=')\n        d[key].append(val.replace('\\n', ''))\n\ndf = pd.DataFrame(d)\nprint(df)\n", "name grade class\n0    1     A     B\n1    2     D     A\n"], ["import pandas as pd\ndf = pd.read_table(r'file.txt', header=None)\nnew = df[0].str.split(\"=\", n=1, expand=True)\nnew['index'] = new.groupby(new[0])[0].cumcount()\nnew = new.pivot(index='index', columns=0, values=1)\n", "0     class grade name\nindex                 \n0         B     A    1\n1         A     D    2\n"], ["  name grade class\n0    1     A     B\n1    2     D     A\n"], ["df['idx'] = df.groupby(df['0'])['0'].cumcount() + 1\nprint(df)\n        0  1  idx\n0   name  1      1\n1  grade  A      1\n2  class  B      1\n3   name  2      2\n4  grade  D      2\n5  class  A      2\n", "df1 = pd.crosstab(df['idx'],df['0'],values=df['1'],aggfunc='first').reset_index(drop=True)\nprint(df1[['name','grade','class']])\n0 name grade class\n0    1     A     B\n1    2     D     A\n"], ["def myfile(filename):\n    d_list = []\n    with open(filename) as f:\n        d_line = {}\n        for line in f:\n            split_line = line.rstrip(\"\\n\").split('=')  # Strip \\n characters and split field and value.\n            if (split_line[0] == 'name'):\n                if d_line:\n                    d_list.append(d_line)  # Append if there is previous line in d_line.\n                d_line = {split_line[0]: split_line[1]}  # Start a new dictionary to collect the next lines.\n            else:\n                d_line[split_line[0]] = split_line[1]  # Add the other 2 fields to the dictionary.\n        d_list.append(d_line) # Append the last line.\n    return pd.DataFrame(d_list)  # Turn the list of dictionaries into a DataFrame.\n"], [], [" def f(x0,...xn):\n      return('hello or some complicated operation')\n df['newColumn']=[f(r[0],r[1],...,r[n]) for r in df.values]\n"], [], [], [], ["string = \"Here is the content and I want to get middle words\"\n_string = string.split()\nprint(_string)\n\noutput = ['Here', 'is', 'the', 'content', 'and', 'I', 'want', 'to', 'get', 'middle', 'words']\n", "_string = \"Here is the content and I want to get middle words\"\nword_find = \"content\"\n\ndef get_word_indicies(input_string, word_find):\n    start_index = None\n    end_index = None\n\n    for i, x in enumerate(input_string):\n        if x in word_find:\n            if start_index is None:\n                start_index = I\n            else:\n                end_index = i + 1\n                if (end_index - start_index) == len(word_find):\n                    return [start_index, end_index]\n        else:\n            start_index = None\n            end_index = None\n    start_index = None\n    end_index = None\n    return [start_index,end_index]\n\nx, y = get_word_indicies(_string, word_find)\nprint(_string[x:y])\n"], ["string = \"Here is the content and I want to get middle words\"\nword = \"content\"\nstart = string.index(word)\nend = start + len(word)\nprint(string[start:end])\n"], ["string = \"Here is the content and I want to get middle words\"\nword = \"content\"\nstart = string.index(word)\n\nprint(string[start:start+len(word)])\n"], ["start = string.search(\"content\") + len(\"content\") //len to add the search term as well\n\n//and to get substring:\n\nstring = string.substr(0,start);\n"], ["string = \"Here is the content and I want to get middle words\"\nstart = string.index(\"content\") + len(\"content\")\nstring = string [:start]\nprint(string)\n"], [], ["/Library/Developer/CommandLineTools/usr/include/c++/v1/stdio.h\n/Library/Developer/CommandLineTools/SDKs/MacOSX10.14.sdk/usr/include/sys/stdio.h\n/Library/Developer/CommandLineTools/SDKs/MacOSX10.14.sdk/usr/include/stdio.h\n/Library/Developer/CommandLineTools/SDKs/MacOSX10.14.sdk/System/Library/Frameworks/Kernel.framework/Versions/A/Headers/sys/stdio.h\n/Library/Developer/CommandLineTools/SDKs/MacOSX10.15.sdk/usr/include/sys/stdio.h\n/Library/Developer/CommandLineTools/SDKs/MacOSX10.15.sdk/usr/include/stdio.h\n/Library/Developer/CommandLineTools/SDKs/MacOSX10.15.sdk/System/Library/Frameworks/Kernel.framework/Versions/A/Headers/sys/stdio.h\n", "$ sudo find /Library -name stdio.h \n/Library/Developer/CommandLineTools/usr/include/c++/v1/stdio.h\n/Library/Developer/CommandLineTools/SDKs/MacOSX.sdk/usr/include/sys/stdio.h\n/Library/Developer/CommandLineTools/SDKs/MacOSX.sdk/usr/include/stdio.h\n/Library/Developer/CommandLineTools/SDKs/MacOSX.sdk/System/Library/Frameworks/Kernel.framework/Versions/A/Headers/sys/stdio.h\n"], ["from enum import IntEnum\n\nclass RPS(IntEnum):\n    Rock = 1\n    Paper = 2\n    Scissor = 3\n\n    def __lt__(self, other):\n        if self == RPS.Scissor and other == RPS.Rock:\n            return True\n        if self == RPS.Rock and other == RPS.Scissor:\n            return False\n        return self.value < other.value\n\n    def __gt__(self, other):\n        if self == RPS.Rock and other == RPS.Scissor:\n            return True\n        if self == RPS.Scissor and other == RPS.Rock:\n            return False\n        return self.value > other.value\n", "from itertools import combinations\nmembers = list(RPS)\nfor pair in combinations(members, 2):\n    print(f'{pair[1].name} < {pair[0].name} ? {pair[1] < pair[0]}')\n    print(f'{pair[0].name} < {pair[1].name} ? {pair[0] < pair[1]}')\n\n    print(f'{pair[1].name} > {pair[0].name} ? {pair[1] > pair[0]}')\n    print(f'{pair[0].name} > {pair[1].name} ? {pair[0] > pair[1]}')\n", "Paper < Rock ? False\nRock < Paper ? True\nPaper > Rock ? True\nRock > Paper ? False\nScissor < Rock ? True\nRock < Scissor ? False\nScissor > Rock ? False\nRock > Scissor ? True\nScissor < Paper ? False\nPaper < Scissor ? True\nScissor > Paper ? True\nPaper > Scissor ? False\n"], ["def myfunction(bigstring):\n    #str = ' '.join(bigstring)\n    #my_string = str\n    str1 = re.findall(r'[\\w\\.-]+@[\\w\\.-]+', bigstring)\n    return str1\n\nimport re\noutput=[]\nemails = ['John Kennedy <jk123@gmail.com> or <johnk123@hotmail.com>','Adam Hartley <ah123@yahoo.com>','Ben Saunders <benji@live.co.uk>']\nfor item in emails:\n    output.append(myfunction(item))\n\nprint(output)\n"], ["import re\ndef myfunction(bigstring):\n    return  re.findall(r'[\\w\\.-]+@[\\w\\.-]+', bigstring)\n\nemails = ['John Kennedy <jk123@gmail.com> or <johnk123@hotmail.com>','Adam Hartley <ah123@yahoo.com>','Ben Saunders <benji@live.co.uk>']\n\n\noutput = []\nfor emailstring in emails:\n    output.append((myfunction(emailstring)))\nprint(output)\n", "output = [ myfunction(email) for email in emails ]\nprint(output)\n", "print(map(myfunction,emails))\n", "[['jk123@gmail.com', 'johnk123@hotmail.com'], ['ah123@yahoo.com'], ['benji@live.co.uk']]\n"], ["def my_function(str_array):\n    return [re.findall(r'[\\w\\.-]+@[\\w\\.-]+', s) for s in str_array]\n\nemails = ['John Kennedy <jk123@gmail.com> or <johnk123@hotmail.com>','Adam Hartley <ah123@yahoo.com>','Ben Saunders <benji@live.co.uk>']\n\nmy_function(emails)\n"], ["import re\n\nemails = ['John Kennedy <jk123@gmail.com> or <johnk123@hotmail.com>','Adam Hartley <ah123@yahoo.com>','Ben Saunders <benji@live.co.uk>']\ndef myfunction(bigstring):\n    result = []\n    for s in bigstring:\n        result.append(re.findall(r'[\\w.-]+@[\\w.-]+', s))\n    return result\n\nprint(myfunction(emails))\n# => [['jk123@gmail.com', 'johnk123@hotmail.com'], ['ah123@yahoo.com'], ['benji@live.co.uk']]\n"], ["def max(a,b):\n    if a>b: return a\n    return b\n\n\n\ndef keep(last, current, inp, map):\n    # print last\n    # print current\n    # print map\n\n    if len(inp) == 2 :\n        if inp[0]==inp[1]: return 1\n        return 2\n\n    if current >= len(inp):\n        return len(map)\n    // This is when we are at the start of the string. \n    // In this case we can only do one thing not partition and thus take the entire string as a possible string.\n\n    if current == last :\n        map11 = map.copy()\n        map11.add(inp[current:])\n        return keep(last, current + 1, inp, map11)\n\n    map1 = map.copy();\n    if current != (len(inp)-1):\n        map1.add(inp[last:current])\n\n    map2 = map.copy()\n\n    return max(keep(last,current+1,inp, map2), keep(current, current+1, inp, map1))\n\nprint keep(0,0,\"121\", set([]))\nprint keep(0,0,\"aaaaaaa\", set([]))\nprint keep(0,0,\"aba\", set([]))\nprint keep(0,0,\"aababaa\", set([]))\nprint keep(0,0,\"21\", set([]))\nprint keep(0,0,\"22\", set([]))\n"], ["import itertools as it\n\ndef splitter(seq):                                                             \n    temp = [seq]\n    for x in range(1, len(seq)):\n        print(seq[:x], seq[x:])\n        temp.append(seq[:x])\n        temp.append(seq[x:])\n    return temp\n\nif __name__ == \"__main__\":\n    test = input(\"Enter a string: \")\n    temp = splitter(test)\n    copy = temp[::]\n    condition = True\n    for x in temp:\n        if len(x) > 1:\n            copy.extend(splitter(x))\n    copy = sorted(list(set(copy)))\n    print(copy)\n    count = []\n    for x in range(len(test)):\n        item = it.permutations(copy, x)\n        try:\n            while True:\n                temp = next(item)\n                if \"\".join(list(temp)) == test:\n                    if len(temp) == len(set(temp)):\n                        count.append((len(temp), temp))\n        except StopIteration:\n            print('next permutation begin iteration')\n            continue\n    print(f\"All unique splits: {count}\")\n    print(f\"Longest unique split : {max(count)[0]}\")\n", "All unique splits: [(1, ('aababaa',)), (2, ('a', 'ababaa')), (2, ('aa', 'babaa')), (2, \n('aab', 'abaa')), (2, ('aaba', 'baa')), (2, ('aabab', 'aa')), (2, ('aababa', 'a')), (3, \n('a', 'ab', 'abaa')), (3, ('a', 'aba', 'baa')), (3, ('a', 'abab', 'aa')), (3, ('aa', 'b',\n 'abaa')), (3, ('aa', 'ba', 'baa')), (3, ('aa', 'baba', 'a')), (3, ('aab', 'a', 'baa')),\n (3, ('aab', 'ab', 'aa')), (3, ('aab', 'aba', 'a')), (3, ('aaba', 'b', 'aa')), (3,\n ('aaba', 'ba', 'a')), (4, ('a', 'aba', 'b', 'aa')), (4, ('aa', 'b', 'a', 'baa')), (4,\n ('aa', 'b', 'aba', 'a')), (4, ('aab', 'a', 'b', 'aa'))]\nLongest unique split : 4\n"], [], ["import re\n\nch = ['eretail', 'retail', 'fax', 'xerox']\n\ninput = ['e', 'x', 'o', 'retail']\n\nfor each in input:\n    search = each + '+'\n    output = []\n    for i in ch:\n        if(re.findall(each, i)):\n            output.append(i)\n    print('Input', each, '\\n', 'output', output)\n", "Input e \n output ['eretail', 'retail', 'xerox']\nInput x \n output ['fax', 'xerox']\nInput o \n output ['xerox']\nInput retail \n output ['eretail', 'retail']\n", "import re\n\nch = ['eretail', 'retail', 'fax', 'xerox']\n\ninput = 'e'\nsearch = input + '+'\noutput = []\n\nfor i in ch:\n    if(re.findall(search, i)):\n        output.append(i)\n\nprint('Input', input, '\\n', 'output', output)\n", "Input e \n output ['eretail', 'retail', 'xerox']\n"], [], ["list1 = [\"a\", \"b\", \"c\"]\nlist2 = [\"a\", \"f\", \"g\", \"b\"]\nval = 0\nfor idx in list1:\n    for idx2 in list2:\n        if idx == idx2:\n            val += 1\nif val == 2:\n    print(\"yes, list 2 contains 2 elements of list 1\")\nelse:\n    print(\"no, list 2 does not contain 2 elements of list 1\")\n"], ["list1 = [\"a\", \"b\", \"c\"]\nlist2 = [\"a\", \"f\", \"g\", \"b\"]\n\nif len(set(list1).intersection(set(list2))) == 2:\n    print(\"yes, list 2 contains 2 elements of list 1\")\nelse:\n    print(\"no, list 2 does not contain 2 elements of list 1\")\n"], ["count = 0\nfor ele in list2:\n    if ele in list1:\n        count += 1\nif count == 2:\n    print (\"yes, list 2 contains 2 elements of list 1\")\nelse:\n    print (\"no, list 2 does not contain 2 elements of list 1\")\n"], ["import itertools\n\nif any(set(comb).issubset(set(list1)) for comb in itertools.combinations(list2, 2)):\n    print(\"yes, ...\")\n...\n"], ["list1 = [\"a\", \"b\", \"c\"]\nlist2 = [\"a\", \"f\", \"g\", \"b\"]\n\nif len(list(set(a) & set(b))) == 2:\n    print(\"yes, list 2 contains 2 elements of list 1\")\nelse:\n    print(\"no, list 2 does not contain 2 elements of list 1\")\n"], ["\ndef my_func(list1, list2):\n    count = 0\n    for i in list1:\n        for j in list2:\n            if(i == j) : count += 1\n    print(count)\n    if(count >= 2) : return True\n    else: return False\n\n\nlist1 = [\"a\", \"b\", \"c\"]\nlist2 = [\"a\", \"f\", \"g\", \"b\"]\n\nif my_func(list1, list2):#list2 contains any 2 elements of list1:\n    print(\"yes, list 2 contains 2 elements of list 1\")\nelse:\n    print(\"no, list 2 does not contain 2 elements of list 1\")\n"], ["def intersection(list1, list2): \n     lst3 = [value for value in list1 if value in list2] \n     return lst3 \n\n\nlist1 = [\"a\", \"b\", \"c\"]\nlist2 = [\"a\", \"f\", \"g\", \"b\"]\n\nif len(intersection(list1, list2) == 2):\n    print(\"yes, list 2 contains 2 elements of list 1\")\nelse:\n    print(\"no, list 2 does not contain 2 elements of list 1\")\n"], ["def remove_symm_pairs(df):\n    a = df.to_numpy(copy=False)\n    b = np.sort(a,axis=1)\n    idx = np.ravel_multi_index(b.T,(b.max(0)+1))\n    sidx = idx.argsort(kind='mergesort')\n    p = idx[sidx]\n    m = np.r_[True,p[:-1]!=p[1:]]\n    a_out = a[np.sort(sidx[m])]\n    df_out = pd.DataFrame(a_out)\n    return df_out\n", "# https://stackoverflow.com/a/44999009/ @Divakar\ndef view1D(a): # a is array\n    a = np.ascontiguousarray(a)\n    void_dt = np.dtype((np.void, a.dtype.itemsize * a.shape[1]))\n    return a.view(void_dt).ravel()\n"], ["a= np.sort(df.to_numpy(), axis=1)\ndf.groupby([a[:,0], a[:,1]], as_index=False, sort=False).first()\n", "a= np.sort(df.to_numpy(), axis=1) \n\n(df.assign(one=a[:,0], two=a[:,1])   # one and two can be changed\n   .drop_duplicates(['one','two'])   # taken from above\n   .reindex(df.columns, axis=1)\n)\n"], ["a = np.sort(df.values)\n_, ix = np.unique(a, return_index=True, axis=0)\n\nprint(df.iloc[ix, :])\n\n    c1  c2\n0    0   0\n1    0   1\n20   2   0\n3    0   3\n40   4   0\n50   5   0\n6    0   6\n70   7   0\n8    0   8\n9    0   9\n11   1   1\n21   2   1\n13   1   3\n41   4   1\n51   5   1\n16   1   6\n71   7   1\n...\n"], ["df[~pd.DataFrame(np.sort(df.values,1)).duplicated().values]\n", "s=pd.crosstab(df.c1,df.c2)\ns=s.mask(np.triu(np.ones(s.shape)).astype(np.bool) & s==0).stack().reset_index()\n"], ["mask = pd.Series(map(frozenset, zip(df.c1, df.c2))).duplicated()\n\ndf[~mask]\n"], ["def myfunc(string):\n    # Un-hash print statements to watch python build out the string.\n    # Script is an elementary example of using an enumerate function.\n    # An enumerate function tracks an index integer and its associated value as it moves along the string.\n    # In this example we use arithmetic to determine odd and even index counts, then modify the associated variable.\n    # After modifying the upper/lower case of the character, it starts adding the string back together.\n    # The end of the function then returns back with the new modified string.\n    #print(string)\n    retval = ''\n    for space, letter in enumerate(string):\n        if space %2==0:\n            retval = retval + letter.upper()\n            #print(retval)\n        else:\n            retval = retval + letter.lower()\n            #print(retval)\n    print(retval)\n    return retval\nmyfunc('Thisisanamazingscript')\n"], ["def find(needle, haystack):\n    \"\"\"\n    Descr:\n    Checks for the presence of a string/character(needle) in the \n    items of an iterable object\n    \"\"\"\n    if isinstance(haystack, list):\n        for h in haystack:\n            find(needle=needle, haystack=h)\n    elif isinstance(haystack, dict):\n        for k, v in haystack.items():\n            find(needle=needle, haystack=v)\n    else:\n        if str(needle) in haystack:\n            print(haystack)\n\n# We can then call the function above as follows:\nprint(\"1. Search Results for e in '[eretail, retail, fax xerox]\")\nfind(needle=\"e\", haystack=[ \"eretail\", \"retail\", \"fax\" \"xerox\" ])\n\nprint(\"\\n2. Search Results for x in '[eretail, retail, fax xerox]'\")\nfind(needle=\"x\", haystack=[ \"eretail\", \"retail\", \"fax\" \"xerox\" ])\n\nprint(\"\\n3. Search Results for o in '[eretail, retail, fax xerox]'\")\nfind(needle=\"o\", haystack=[ \"eretail\", \"retail\", \"fax\" \"xerox\" ])\n\n# Mixed Haystack illustration...\nprint(\"\\n4. Search Results for cat in '[bobcat, [concatenate,boy, girl], dict(a=vacate, b=boy)]'\")\nfind(needle=\"cat\", haystack=[\"bobcat\", [\"concatenate\", \"boy\", \"girl\"], dict(a=\"vacate\", b=\"boy\")])\n\n# output:\n\n1. Search Results for e in '[eretail, retail, fax xerox]\neretail\nretail\nfaxxerox\n\n2. Search Results for x in '[eretail, retail, fax xerox]'\nfaxxerox\n\n3. Search Results for o in '[eretail, retail, fax xerox]'\nfaxxerox\n\n4. Search Results for cat in '[bobcat, [concatenate,boy, girl], dict(a=vacate, b=boy)]'\nbobcat\nconcatenate\nvacate\n\n"], ["ch = ['eretail', 'retail', 'fax', 'xerox' ]\ninput_letter = \"x\"\n\nnew_list = []\nfor item in ch:\n    if input_letter in item:\n        new_list.append(item)\nprint(new_list)\n"], ["ch = [\"eretail\", \"retail\", \"fax\", \"xerox\"]\n\nmyLetter = str(input(\"Enter your letter: \"))\n\nfor word in ch:\n    if myLetter in word:\n        print(word)\n"], ["target = input()\nfor word in ch:\n    if target in word:\n        print(word)\n"], ["Dict2 = {}\nfor key in Dict:\n   Dict2[key.strip()] = Dict[key]\nDict = Dict2\n", "Dict = {key.strip():value for (key,value) in Dict}\n"], [], ["dct = {k.strip(): v for k, v in dct.items()}\n", "dct = {k.strip(): dct[k] for k in dct}\n", "for k in list(dct):\n    v = dct.pop(k)\n    dct[k.strip()] = v\n"], ["#Your dictionary\ndict = {' Chicago ': 4, ' Washington ': 9, ' LA ': 26, ' Boston ': 12, ' Seattle ': 2}\n\n#Puts all keys of the dictionary into a list\nkeys = list(dict)\n\n#iterates over dictionary keys\nfor key in keys:\n\n    #for every key, we make a new dictionary item with the 'stripped' key and remove the old one\n    dict[key.strip()] = dict[key]\n    del dict[key]\n\nprint(dict)\n", "{'Chicago': 4, 'Washington': 9, 'LA': 26, 'Boston': 12, 'Seattle': 2}\n"], ["new_dict = {key.strip(): value for key, value in old_dict.items()}\n"], ["import numpy as np\nimport pandas as pd\n\na = np.array(['A0','A1','A2','A3','A4','B0','B1','C0'])\npd.Series(a).str.match(r'A[0-2]')\n# 0     True\n# 1     True\n# 2     True\n# 3    False\n# 4    False\n# 5    False\n# 6    False\n# 7    False\n# dtype: bool\n"], ["r = re.compile('A[0-2]')\nselection = np.array([1 if re.match(r, i) else 0 for i in array])\n"], ["import re\narray = ['A0','A1','A2','A3','A4','B0','B1','C0']\n\ny = np.vectorize(lambda y, x: bool(re.compile(x).match(y)))\nselection = np.where(y(array, 'A[0-2]'), 1, 0)\nprint(selection)\n\n#output:\n[1 1 1 0 0 0 0 0]\n"], [], ["a = np.array(['A0','A1','A2','A3','A4','B0','B1','C0'])\nnp.in1d(a, ['A0', 'A1', 'A2'])\n# array([ True,  True,  True, False, False, False, False, False])\n"], [], [], [], [], [], [], [], [], [], ["vv = df.iloc[:, 1::2].values\niRow, iCol = np.unravel_index(vv.argmax(), vv.shape)\niCol = iCol * 2 + 1\nresult = df.iloc[iRow, [0, iCol, iCol + 1]]\n", "Sequence     1008\nDuration3     981\nValue3         82\nName: 7, dtype: int64\n", "pd.DataFrame([result.values], columns=result.index)\n"], ["import pandas as pd\n\ndf = pd.wide_to_long(df, i='Sequence', j='num', stubnames=['Duration', 'Value'])\ndf.loc[[df.Duration.idxmax()]]\n\n              Duration  Value\nSequence num                 \n1008     3         981     82\n"], ["mvc = df[[name for name in df.columns if 'Duration' in name]].max().idxmax()\nmvidx = df[mvc].idxmax()\nvaluecol = 'Value' + mvc[-1]\ndf.loc[mvidx, ['Sequence', mvc, valuecol]]\n", "Sequence     1008\nDuration3     981\nValue3         82\nName: 7, dtype: int64\n"], ["df = pd.DataFrame(data={'Seq': [1, 2, 3], 'Dur1': [2, 7, 3],'Val1': ['x', 'y', 'z'],'Dur2': [3, 5, 1], 'Val2': ['a', 'b', 'c']})\n    Seq  Dur1 Val1  Dur2 Val2\n0    1     2    x     3    a\n1    2     7    y     5    b\n2    3     3    z     1    c\n", "dur_col = [col_name for col_name in df.columns if col_name.startswith('Dur')] # ['Dur1', 'Dur2'] \nmax_dur_name = df.loc[:, dur_col].max().idxmax()\nval_name = \"Val\" + str([int(s) for s in max_dur_name if s.isdigit()][0])\n\nfilter_col = ['Seq', max_dur_name, val_name]\n\ndf_res = df[filter_col].sort_values(max_dur_name, ascending=False).head(1)\n", "   Seq  Dur1 Val1 \n1    2     7    y  \n", "dur_col = [col_name for col_name in df.columns if col_name.startswith('Dur')] # ['Dur1', 'Dur2'] \nmax_dur_name = df.loc[:, dur_col].max().idxmax()\nval_name = \"Val\" + str([int(s) for s in max_dur_name if s.isdigit()][0])\n", "filter_col = ['Seq', max_dur_name, val_name]\n", "df_res = df[filter_col].sort_values(max_dur_name, ascending=False).head(1)\n\n# output:\n   Seq  Dur1 Val1 \n1    2     7    y   \n"], ["m=df.set_index('Sequence') #set Sequence as index\nn=m.filter(like='Duration') #gets all columns with the name Duration\ns=n.idxmax()[n.eq(n.values.max()).any()]\n#output Duration3    1008\nd = dict(zip(m.columns[::2],m.columns[1::2])) #create a mapper dict\n#{'Duration1': 'Value1', 'Duration2': 'Value2', 'Duration3': 'Value3'}\nfinal=m.loc[s.values,s.index.union(s.index.map(d))].reset_index()\n", "   Sequence  Duration3  Value3\n0      1008        981      82\n"], ["if len(df[df[dur1]>=df[dur2].max()])==0:\n    if len(df[df[dur2]>=df[dur3].max()])==0:\n        print(df[df[dur3].idmax()][[seq,dur3,val3]])\n    else:\n        print(df[df[dur2].idmax()][[seq,dur2,val2]])\nelse:\n   if len(df[df[dur1]>=df[dur3].max()])==0:\n       print(df[df[dur3].idmax()][[seq,dur3,val3]])\n   else:\n       print(df[df[dur1].idmax()][[seq,dur1,val1]])\n"], [">>> idx = df['Duration3'].idxmax()\n>>> idx\n7\n", ">>> df_cols = df[['Sequence', 'Duration3', 'Value3']]\n>>> df_cols.loc[idx]\nSequence     1008\nDuration3     981\nValue3         82\nName: 7, dtype: int64\n", "def get_max(df, i):\n    idx = df[f'Duration{i}'].idxmax()\n    df_cols = df[['Sequence', f'Duration{i}', f'Value{i}']]\n    return df_cols.loc[idx]\n", ">>> max_rows = [get_max(i) for i in range(1, 4)]\n>>> print('\\n\\n'.join(map(str, max_rows)))\nSequence     1003\nDuration1     685\nValue1         57\nName: 2, dtype: int64\n\nSequence     1010\nDuration2     722\nValue2         63\nName: 9, dtype: int64\n\nSequence     1008\nDuration3     981\nValue3         82\nName: 7, dtype: int64\n", ">>> pairs = enumerate(max_rows, 1)\n>>> by_duration = lambda x: x[1][f'Duration{x[0]}']\n>>> i, max_row = max(pairs, key=by_duration)\n>>> max_row\nSequence     1008\nDuration3     981\nValue3         82\nName: 7, dtype: int64\n"], ["filter(None, [3, 4, None, 2, 7, None, 1])\n[3, 4, 2, 7, 1]\n", "{ k: filter(None, v) for k, v in d.items() }\n", "r = {}\nfor d in data:\n  for k, v in d.items():\n    r.setdefault(k, []).append(v)\nprint(r)\n"], [">>> {k: [d[k] for d in data if k in d]\n...  for k in set(k for d in data for k in d)}\n...\n{'a': [2, 2], 'b': [4, 2, 2],\n 'c': [3, 2, 5], 'd': [2, 5, 2, 2],\n 'e': [4, 6, 6, 33], 'f': [1, 5, 6],\n 'g': [12, 21], 'h': [56], 'i': [21]}\n"], ["bar = {k: [d[k] for d in data if d.get(k) is not None] for k in chain.from_iterable(data)}\n", "bar = {k: list(filter(None, [d.get(k) for d in data])) for k in chain.from_iterable(data)}\n"], ["data = [...]\n\nbar = {}\nfor my_dict in data:\n   for key, value in my_dict.items():\n      bar.setdefault(key, []).append(value)\n\nprint(bar)\n"], ["bar ={\n    k: [d.get(k) for d in data if d.get(k) != None]\n    for k in chain.from_iterable(data)\n}\n\nprint(bar)\n", "{'a': [2, 2], 'b': [4, 2, 2], 'c': [3, 2, 5], 'd': [2, 5, 2, 2], 'e': [4, 6, 6, 33], 'f': [1, 5, 6], 'g': [12, 21], 'h': [56], 'i': [21]}\n"], [], ["1 a default_value\n1 m default_value\n1 100 100\n1 100 100\n"], ["datas=[(HOMEPATH + '\\\\PyQt5\\\\Qt\\\\bin\\*', 'PyQt5\\\\Qt\\\\bin')],\n"], ["from functools import wraps\n\ndef kwargs_decorator(dict_kwargs):\n    def wrapper(f):\n        @wraps(f)\n        def inner_wrapper(*args, **kwargs):\n            new_kwargs = {**dict_kwargs, **kwargs}\n            return f(*args, **new_kwargs)\n        return inner_wrapper\n    return wrapper\n", "@kwargs_decorator({'bar': 1})\ndef foo(**kwargs):\n    print(kwargs['bar'])\n\nfoo() # prints 1\n", "@kwargs_decorator({'bar': 1})\ndef foo(bar):\n    print(bar)\n\nfoo() # prints 1\n"], ["In [1]: 1, 1\nOut[1]: (1, 1)\n\nIn [2]: type(_)\nOut[2]: tuple\n\nIn [3]: a = {(1, 1): 3}\n\nIn [4]: a[1, 1]\nOut[4]: 3\n\nIn [5]: a[(1, 1)]\nOut[5]: 3\n\nIn [6]: class NumpyArray(list):\n   ...:     def __getitem__(self, index):\n   ...:         if isinstance(index, tuple) and len(index) == 2:\n   ...:             return self[index[0]][index[1]]\n   ...:         return super().__getitem__(index)\n   ...:\n\nIn [7]: b = NumpyArray([[0, 1], [2, 3]])\n\nIn [8]: b[1, 1]\nOut[8]: 3\n", "class NumpyArray(list):\n    def __getitem__(self, index):\n        if isinstance(index, tuple) and len(index) == 2:\n            return self[index[0]][index[1]]\n        return super().__getitem__(index)\n\nb = NumpyArray([[0, 1], [2, 3]])\nb[1, 1]\n"], ["def funcc(x, **kwargs):\n    locals().update(kwargs)\n    print(x, a, b, c, d)\n\nkwargs = {'a' : 1, 'b' : 2, 'c':1, 'd': 1}\nx = 1\n\nfuncc(x, **kwargs)\n"], ["def f(x, **d=d):\n  print(x, a, b)\n", "def f(x, **kwargs):\n    class C:\n        vars().update(kwargs)  # don't do this, please\n        print(x, a, b)\n"], ["from collections import OrderedDict\n\ndef f(x, a, b):\n    print(x, a, b)\n\nd = OrderedDict({'a': 3, 'b':4})\nf(10, *d.values())\n"], ["# Store the default values in a dictionary\n>>> defaults = {\n...     'a': 1,\n...     'b': 2,\n... }\n>>> def f(x, **kwa):\n        # Each time the function is called, merge the default values and the provided arguments\n        # For python >= 3.5:\n        args = {**defaults, **kwa}\n        # For python < 3.5:\n        # Each time the function is called, copy the default values\n        args = defaults.copy()\n        # Merge the provided arguments into the copied default values\n        args.update(kwa)\n...     print(args)\n... \n>>> f(1, f=2)\n{'a': 1, 'b': 2, 'f': 2}\n>>> f(1, f=2, b=8)\n{'a': 1, 'b': 8, 'f': 2}\n>>> f(5, a=3)\n{'a': 3, 'b': 2}\n"], ["def function(arg0, **kwargs):\n    print(\"arg is\", arg0, \"a is\", kwargs[\"a\"], \"b is\", kwargs[\"b\"])\n\nd = {\"a\":1, \"b\":2}\nfunction(0., **d)\n", "arg is 0.0 a is 1 b is 2\n"], ["from sklearn.impute import SimpleImputer\n\nimputer = SimpleImputer(missing_values= np.nan, strategy='mean')\n\nimputer = imputer.fit(X.iloc[:, 1:3])\nX = imputer.transform(X.iloc[:, 1:3])\n"], ["class MyArray:\n  def __init__(self, arr):\n    self.arr = arr\n  def __getitem__(self, t):\n    return self.arr[t[0]][t[1]]\n\nmyarr = MyArray([[1,1,1], [1,2,2], [1,2,2]])\nprint(myarr[0,1])\n"], [], [">>> x = np.array([[1, 2, 3], [4, 5, 6], [7, 8, 9]])  # creates 2D array\n>>> x\narray([[1, 2, 3],\n       [4, 5, 6],\n       [7, 8, 9]])\n\n>>> x[1]  # get second row (remember, index starts at 0)\narray([4, 5, 6])\n\n>>> x[:, 2]  # get third column\narray([3, 6, 9])\n\n>>> x[1, 2]  # get element on second row, third column\n6\n\n>>> x[1][2]  # same as before but with non-broadcasting syntax (i.e. works for lists as you are used to)\n6\n\n>>> x[1, 0:2]  # get first two elements of second row  \narray([4, 5])\n\n>>> x[0:2, 0:2]  # subsets the original array, \"extracting\" values from the first two columns/rows only\narray([[1, 2],\n       [4, 5]])\n"], [">>> a = np.array([[1,1,1], [1,2,2], [1,2,2]])\n>>> a[1,1]\n2\n>>> # equivalent to\n>>> a = [[1,1,1], [1,2,2], [1,2,2]]\n>>> a[1][1]\n2\n>>> \n"], ["for reqVal in enumerate(list):\n    if reqVal in list :\n", "for item in reqVal:\n    if item in list:\n        print(\"Yes, %s required item is found in List : \", element)\n        foundCount += 1\n\n    else:\n        print('No required items are found in list')\n"], ["my_list = ['Name', 'Year', 'City_id', 'Region_Id' , 'Location', 'Source', 'Time']\nreqVal = ['Name', 'Year', 'City_id']\n\ncount_for_reqVal = {req_val : my_list.count(req_val) for req_val in reqVal}\n\nprint(count_for_reqVal)\n\n#output : {'Name': 1, 'Year': 1, 'City_id': 1}\n", "list = [ 'Name', 'Year', 'City_id', 'Region_Id' , 'Location', 'Source', 'Time']\n\nreqVal = [ 'Name', 'Year', 'City_id', 'Test' ] # items in List - if present or not\n\n\ndef isValInList():\n    foundCount = 0\n\n    for val in reqVal:\n        if val in list :\n            print(\"Yes, '%s' required item is found in list\" %  val)\n            foundCount += 1\n\n        else:\n            print(\"No, '%s' required item is not in list\" %  val)\n\n    if foundCount == 0:\n            print('No required items are found in list')\n\n\n\nisValInList()\n\n# output:\n# Yes, 'Name' required item is found in list\n# Yes, 'Year' required item is found in list\n# Yes, 'City_id' required item is found in list\n# No, 'Test' required item is not in list\n"], ["# Python3 code to iterate over a list \nlist = [1, 3, 5, 7, 9] \n\n# Using enumerate() \nfor i, val in enumerate(list): \n    print (i, \",\",val) \n"], ["alist = ['Name', 'Year', 'City_id', 'Region_Id' , 'Location', 'Source', 'Time']\n\nreqVal = ['Name', 'Year', 'City_id' ] # items in List - if present or not\n\ndef isValInList(alist, blist):\n    global foundCount\n    for num, entry_a in enumerate(alist):\n        if entry_a in blist :\n            print(\"Yes, %s required item is found in List : \", entry_a)\n            foundCount += 1\n        else:\n            print('No required items are found in list')\n\nisValInList(alist, reqVal)\n"], ["reqVal = [ 'Name', 'Year', 'City_id' ] # items in List - if present or not\nfoundCount = 0\n\nif 'Name' in list and 'Year' in list 'City_id' in list:\n    print('All are present')\n"], [], ["$ pip install myPackage --extra-index-url=https://test.pypi.org/simple/\n", "setup(\n    ...,\n    install_requires=['numpy', 'pandas', 'scikit-learn'],\n)\n"], [], ["...\ninstall_requires=[\"numpy==1.15.4\",\n                  \"sklearn==0.20.1\",\n                  \"pandas==0.23.4\"]\n...\n"], ["class RPS(Enum):\n\n    Rock = \"rock\"\n    Paper = \"paper\"\n    Scissors = \"scissors\"\n\n    def __init__(self, value):\n        if len(self.__class__):\n            # make links\n            all = list(self.__class__)\n            first, previous = all[0], all[-1]\n            first.beats = self\n            self.beats = previous\n", ">>> print(RPS.Rock.beats)\nRPS.Scissors\n\n>>> print(RPS.Paper.beats)\nRPS.Rock\n\n>>> print(RPS.Scissors.beats)\nRPS.Paper\n"], [" File \"anaconda3\\lib\\site-packages\\PyInstaller\\loader\\pyimod03_importers.py\", line 627, in exec_module\n  File \"site-packages\\PyQt5\\__init__.py\", line 41, in <module>\n  File \"site-packages\\PyQt5\\__init__.py\", line 33, in find_qt\nImportError: unable to find Qt5Core.dll on PATH\n", "def find_qt():\n    import os\n\n    path = os.environ['PATH']\n\n    dll_dir = os.path.dirname(__file__) + '\\\\Qt\\\\bin'\n    if os.path.isfile(dll_dir + '\\\\Qt5Core.dll'):\n        path = dll_dir + ';' + path\n        os.environ['PATH'] = path\n    else:\n        for dll_dir in path.split(';'):\n            if os.path.isfile(dll_dir + '\\\\Qt5Core.dll'):\n                break\n        else:\n            raise ImportError(\"unable to find Qt5Core.dll on PATH\")\n\n    try:\n        os.add_dll_directory(dll_dir)\n    except AttributeError:\n        pass\n\n\nfind_qt()\ndel find_qt\n"], ["# Fix qt import error\n# Include this file before import PyQt5 \n\nimport os\nimport sys\nimport logging\n\n\ndef _append_run_path():\n    if getattr(sys, 'frozen', False):\n        pathlist = []\n\n        # If the application is run as a bundle, the pyInstaller bootloader\n        # extends the sys module by a flag frozen=True and sets the app\n        # path into variable _MEIPASS'.\n        pathlist.append(sys._MEIPASS)\n\n        # the application exe path\n        _main_app_path = os.path.dirname(sys.executable)\n        pathlist.append(_main_app_path)\n\n        # append to system path enviroment\n        os.environ[\"PATH\"] += os.pathsep + os.pathsep.join(pathlist)\n\n    logging.error(\"current PATH: %s\", os.environ['PATH'])\n\n\n_append_run_path()\n\n"], ["lst = [[1, 2, 3],\n        [4, 5, 6],\n        [7, 8, 9]]\n\n#Get the index no. 5 from 2d list\nsum(lst, [])[5]\n", "6\n"], ["matrix = [[1, 2, 3,],\n          [10,11,12],\n          [21,22,23]]\n\nr,c = divmod(6,len(matrix[0]))\nvalue = matrix[r][c]\nprint(value) # 21\n", "matrix = [[1, 2, 3, 4 ,5],\n          [10,11,12],\n          [21,22,23,24]]\n\nindx = [ (r,c) for r,row in enumerate(matrix) for c in range(len(row)) ]\npos   = 8\nr,c   = indx[pos]\nvalue = matrix[r][c]\n\nprint(value) # 21\n", "def rowCol(m,p):\n    for r,row in enumerate(m):\n        if p<len(row): return r,p\n        p-=len(row)\n\nr,c = rowCol(matrix,8)\nvalue = matrix[r][c]\nprint(value) \n", "matrix = [[1, 2, 3,],\n          [10,11,12,13,14],\n          [21,22,23,24]]\n\nfrom itertools import accumulate\nfrom bisect import bisect_left\nindx = [0]+list(accumulate(map(len,matrix)))\n\npos   = 8\nr     = bisect_left(indx,pos+1)-1\nc     = pos - indx[r]\nvalue = matrix[r][c]\nprint(pos,r,c,value) # 21\n"], ["def get_item(lst,i):    \n    return(lst[i//len(lst[0])][i%len(lst[0])])\n", "lst = [[1, 2, 3, 4],\n        [5, 6],\n        [7,8,9,10]]\n\ndef get_item(lst,i):\n    current = 0\n    for sublist in lst:\n        index = i - current\n        if 0 <= index < len(sublist):\n            return sublist[index]\n        current += len(sublist)\n    raise Exception(\"index out of range {}\".format(i))\n\nprint(get_item(lst,0),get_item(lst,6),get_item(lst,9))\n"], ["import numpy\n\nin_list = [[1,2,3],[4,5,6],[7,8,9]]\nout_list = numpy.reshape(in_list, 9).tolist()\n\nprint(in_list)\n#[[1,2,3],[4,5,6],[7,8,9]]\n\nprint(out_list)\n#[1,2,3,4,5,6,7,8,9]\n", "print(out_list[2])\n#2\n"], [], ["from enum import IntEnum\n\nclass RPS(IntEnum):\n    Rock = 1 \n    Paper = 2 \n    Scissor = 3\n\nRPS.Rock.beats = RPS.Scissor\nRPS.Paper.beats = RPS.Rock\nRPS.Scissor.beats = RPS.Paper\n\nfor i in [RPS.Rock,RPS.Paper,RPS.Scissor]:\n    print(i, \"beats\", i.beats)\n", "RPS.Rock beats RPS.Scissor\nRPS.Paper beats RPS.Rock\nRPS.Scissor beats RPS.Paper\n", "def func():\n    pass\n\nfunc.result = 42\n\nprint(func.result)  # 42\n"], ["from enum import Enum\n\nclass RockPaperScissors(Enum):\n    Rock = \"rock\"\n    Paper = \"paper\"\n    Scissors = \"scissors\"\n\n    @property\n    def beats(self):\n        lookup = {\n            RockPaperScissors.Rock: RockPaperScissors.Scissors,\n            RockPaperScissors.Scissors: RockPaperScissors.Paper,\n            RockPaperScissors.Paper: RockPaperScissors.Rock,\n        }\n        return lookup[self]\n"], ["from enum import Enum\n\nclass RockPaperScissors(Enum):\n\n    ROCK = (\"rock\", \"scissors\")\n    PAPER = (\"paper\", \"rock\")\n    SCISSORS = (\"scissors\", \"paper\")\n\n    def __init__(self, value, beats):\n        self._value_ = value\n        self._beats = beats\n\n    @property\n    def beats(self):\n        return getattr(RockPaperScissors, self._beats.upper())\n"], ["from enum import Enum\n\nclass RPS(Enum):\n    Rock = 0\n    Paper = 1\n    Scissor = 2\n\n    @property\n    def beats(self):\n        return list(RPS)[self.value - 1]\n\nfor v in RPS:\n    print(v.name, 'beats', v.beats.name)\n", "Rock beats Scissor\nPaper beats Rock\nScissor beats Paper\n"], ["from sklearn.impute import SimpleImputer\n\nimputer = SimpleImputer(missing_values = np.nan, strategy = 'mean',verbose=0)\n\nimputer = imputer.fit(X[:, 1:3])\n\nX[:, 1:3] = imputer.transform(X[:, 1:3])\n"], ["cases = { (True,  True,  True,  True):  \"Case 1\",\n      (True,  True,  True,  False): \"Case 2\",\n      (True,  True,  False, True): \"Case 3\",\n      (True,  True,  False, False):\"Case 4\",\n      (True,  False, True,  True): \"Case 5\",\n      (True,  False, True,  False):\"Case 6\",\n      (True,  False, False, True): \"Case 7\",\n      (True,  False, False, False):\"Case 8\",\n      (False, True,  True,  True): \"Case 9\",\n      (False, True,  True,  False):\"Case 10\",\n      (False, True,  False, True): \"Case 11\",\n      (False, True,  False, False):\"Case 12\",\n      (False, False, True,  True): \"Case 13\",\n      (False, False, True,  False):\"Case 14\",\n      (False, False, False, True): \"Case 15\",\n      (False, False, False, False):\"Case 16\"}\n\nprint(cases[(x,y,z,t])\n", "cases = { (True,  True,  True,  True):  foo_func,\n      (True,  True,  True,  False): bar_func,\n         ...}\n\nresult = cases[(x,y,x,t)](*args)\n"], ["from sklearn.impute import SimpleImputer\n"], ["dictresult[key]=value\n", "dictresult[value].append(key)\n", "d = {}\nfor key,value in files.items():\nif value in d:\n    d[value].append(key)\nelse:\n    d[value] = [key]\nprint(d)\n", "{'Randy': ['Input.txt', 'Output.txt'], 'Stan': ['Code.py']}\n"], ["files = {\n    'Input.txt': 'Randy',\n    'Code.py': 'Stan',\n    'Output.txt': 'Randy'\n}\n\ndictresult= {}\n\nfor k, v in files.items():\n    if v not in dictresult:\n        dictresult[v] = [k]\n    else:\n        dictresult[v].append(k)\n\nprint(dictresult) # -> {'Randy': ['Output.txt', 'Input.txt'], 'Stan': ['Code.py']}\n"], ["output = {}\nfor key, value in files.items():\n    output[value] = output.get(value, []) + [key]\n\nprint(output)\n# {'Randy':['Input.txt','Output.txt'], 'Stan':['Code.py']}\n"], ["dictresult= {}\nfor key,value in files.items():\n     if not value in dictresult: dictresult [value]=[]\n     dictresult[value].append(key)\n"], ["from collections import defaultdict\ndictresult= defaultdict(list)\nfor key,value in files.items():\n     dictresult[value].append(key)\n"], ["# your functions\ndef f0(): print('case 1')\ndef f1(): print('case 2')\ndef f2(): print('case 3')\n#.\n#.\ndef f15(): print('case 16')\n\nlist_of_functions = [f0, f1, f2] # assuming there are 16 functions in total\n\nx = False\ny = False\nz = False\nt = False\ntotal = bin(x + 2 * y + 4 * z + 8 * t)\nindex = int(total, 2)\n\nlist_of_functions[index]() # will print('case 1')\n\n"], ["#Define your method outcomes here...\n#Note that this follows a binary layout starting with \n# a + b + c + d = false\ndef action1():      #binary 0 (a'b'c'd')\n    print(\"case 1\")\ndef action2():      #binary 1 (a'b'c'd)\n    print(\"case 2\")\ndef action3():      #binary 2 (a'b'cd')\n   print(\"case 3\")\ndef action4():      #binary 3 (a'b'cd)\n    print(\"case 4\")\ndef action5():      #binary 4 (a'bc'd')\n    print(\"case 5\") #etc...\ndef action6():\n    print(\"case 6\")\ndef action7():\n    print(\"case 7\")\ndef action8():\n    print(\"case 8\")\ndef action9():\n    print(\"case 9\")\ndef action10():\n    print(\"case 10\")\ndef action11():\n    print(\"case 11\")\ndef action12():\n    print(\"case 12\")\ndef action13():\n    print(\"case 13\")\ndef action14():\n    print(\"case 14\")\ndef action15():\n    print(\"case 15\")\ndef action16():\n    print(\"case 16\")\ndef actionDefault():\n    print(\"Error!\")\n", "import itertools #Generates all permutations\nimport sys       #Allows us to get the current module\n\n#Returns the index of the actionList we should execute\ndef evaluateActionIndex(varList): \n    allcombinations = itertools.product([False, True], repeat=len(varList))\n    i = 0\n    for subset in allcombinations: #for each of the possible combinations...\n        if list(subset) == varList: #Check to see if we want to execute this index.\n            return i\n        i = i + 1                  #Increment the target index\n    return -1                      #Execute default method (-1 index)\n\ndef performAction(index):\n    actionList = [action1.__name__, action2.__name__, action3.__name__, action4.__name__, \n                  action5.__name__, action6.__name__, action7.__name__, action8.__name__,\n                  action9.__name__, action10.__name__, action11.__name__, action12.__name__,\n                  action13.__name__, action14.__name__, action15.__name__, action16.__name__,\n                  actionDefault.__name__]\n    method = getattr(sys.modules[__name__], actionList[index])  #Get method by name\n    method()                                                    #Execute Method\n", "#Mock up some control inputs\na = False\nb = True\nc = False\nd = False\ncontrolVariables = [a, b, c, d] #All Your Control Variables\n\n#Execute control sequence\nperformAction(evaluateActionIndex(controlVariables))\n"], [], ["case = (x^1) << 3 | (y^1) << 2 | (z^1) << 1 | (t^1) + 1\nprint(f'Case {case}')\n", "case_functions = {1: func_1, 2: func_2, ...}\nres = case_functions(case)(some argument)\n"], ["def compare(xyzt, binaryval):\n    boolval = tuple(digit == '1' for digit in binaryval)\n    return all(a == b for a, b in zip(xyzt, boolval))\n", "xyzt = (x, y, z, t)\nif   compare(xyzt, '1111'): ...\nelif compare(xyzt, '1110'): ...\nelif compare(xyzt, '1100'): ...\netc.\n"], ["if   (x, y, z, t) == (True,  True,  True,  True):  print(\"Case 1\")\nelif (x, y, z, t) == (True,  True,  True,  False): print(\"Case 2\")\nelif (x, y, z, t) == (True,  True,  False, True):  print(\"Case 3\")\nelif (x, y, z, t) == (True,  True,  False, False): print(\"Case 4\")\nelif (x, y, z, t) == (True,  False, True,  True):  print(\"Case 5\")\nelif (x, y, z, t) == (True,  False, True,  False): print(\"Case 6\")\nelif (x, y, z, t) == (True,  False, False, True):  print(\"Case 7\")\nelif (x, y, z, t) == (True,  False, False, False): print(\"Case 8\")\nelif (x, y, z, t) == (False, True,  True,  True):  print(\"Case 9\")\nelif (x, y, z, t) == (False, True,  True,  False): print(\"Case 10\")\nelif (x, y, z, t) == (False, True,  False, True):  print(\"Case 11\")\nelif (x, y, z, t) == (False, True,  False, False): print(\"Case 12\")\nelif (x, y, z, t) == (False, False, True,  True):  print(\"Case 13\")\nelif (x, y, z, t) == (False, False, True,  False): print(\"Case 14\")\nelif (x, y, z, t) == (False, False, False, True):  print(\"Case 15\")\nelif (x, y, z, t) == (False, False, False, False): print(\"Case 16\")\n"], ["x = True\ny = True\nz = True\nt = True\ntotal = bin(x + 2 * y + 4 * z + 8 * t)\nprint(total)\nprint(int(total, 2))\n", "x = False\ny = True\nz = False\nt = True\ntotal = bin(x + 2 * y + 4 * z + 8 * t)\nprint(total)\nprint(int(total, 2))\n", "case = int(total, 2)\nif case == 0:\n    print('case 0')\nelif case == 1:\n    print('case 1')\nelif case == 2:\n    print('case 2')\n...\n"], ["df = df.merge(df.person_name.str.split(',', expand=True), left_index=True, right_index=True)\ndf = df[[0, 1, 2, 'salary']].melt(id_vars = 'salary').drop(columns='variable')\n\n# Some cleaning up, then a simple groupby\ndf.value = df.value.str.replace('[', '')\ndf.value = df.value.str.replace(']', '')\ndf.value = df.value.str.replace(' ', '')\ndf.groupby('value')['salary'].sum()\n", "value\nalexander    171000\nbob           56000\ngates        135000\nrobert       145000\nsmith        110000\nwilliam      125000\n"], ["df.person_name.str.join('*').str.get_dummies('*').multiply(df.salary, 0).sum()\n\n#alexander    171000\n#bob           56000\n#gates        135000\n#robert       145000\n#smith        110000\n#william      125000\n#dtype: int64\n"], ["df_new=(pd.DataFrame({'person_name':np.concatenate(df.person_name.values),\n                  'salary':df.salary.repeat(df.person_name.str.len())}))\nprint(df_new.groupby('person_name')['salary'].sum().reset_index())\n\n\n  person_name  salary\n0   alexander  171000\n1         bob   56000\n2       gates  135000\n3      robert  145000\n4       smith  110000\n5     william  125000\n"], ["#if necessary\n#df['person_name'] = df['person_name'].str.strip('[]').str.split(', ')\n\nprint (type(df.loc[0, 'person_name']))\n<class 'list'>\n", "from collections import defaultdict\n\nd = defaultdict(int)\nfor p, s in zip(df['person_name'], df['salary']):\n    for x in p:\n        d[x] += int(s)\n\nprint (d)\ndefaultdict(<class 'int'>, {'alexander': 171000, \n                            'william': 125000, \n                            'smith': 110000, \n                            'robert': 145000, \n                            'gates': 135000, \n                            'bob': 56000})\n", "df1 = pd.DataFrame({'group':list(d.keys()),\n                    'sum_salary':list(d.values())})\nprint (df1)\n       group  sum_salary\n0  alexander      171000\n1    william      125000\n2      smith      110000\n3     robert      145000\n4      gates      135000\n5        bob       56000\n", "from itertools import chain\n\ndf1 = pd.DataFrame({\n    'group' : list(chain.from_iterable(df['person_name'].tolist())), \n    'sum_salary' : df['salary'].values.repeat(df['person_name'].str.len())\n})\n\ndf2 = df1.groupby('group', as_index=False, sort=False)['sum_salary'].sum()\nprint (df2)\n       group  sum_salary\n0  alexander      171000\n1    william      125000\n2      smith      110000\n3     robert      145000\n4      gates      135000\n5        bob       56000\n"], ["df = pd.dataframe()\ndf['Neighbourhoods'] = Neighbourhoods\n", "df['Neighbourhoods'] = pd.Series(Neighbourhoods)\n", "df = pd.Dataframe(list_of_lists)\n"], [], [], ["from sklearn.preprocessing import Imputer\n\nimputer = Imputer(missing_values=\"NaN\", strategy=\"mean\", axis=0, verbose=0, copy=\"True\")\n\nimputer = imputer.fit(X[:, 1:3])\n\nX[:, 1:3] = imputer.transform(X[:, 1:3]))\n"], ["from itertools import zip_longest\n\ns = 'example'\n\nnew_s = ''.join(x.upper() + y.lower()\n                for x, y in zip_longest(s[::2], s[1::2], fillvalue=''))\n# ExAmPlE\n", "s_iter = iter(s)\n\nnew_s = ''.join(x.upper() + y.lower()\n                for x, y in zip_longest(s_iter, s_iter, fillvalue=''))\n# ExAmPlE\n", "def func(x, y):\n    if x[-1].islower():\n        return x + y.upper()\n    else:\n        return x + y.lower()\n\nnew_s = reduce(func, s) # eXaMpLe\n"], ["def alternative_strings(strings):\n        for i,x in enumerate(strings):\n            if i % 2 == 0:\n                print(x.upper(), end=\"\")\n            else:\n                print(x.lower(), end= \"\")\n        return ''\n\n\nprint(alternative_strings(\"Testing String\"))\n"], ["from itertools import chain, zip_longest\n\nx = 'inputstring'\n\nzipper = zip_longest(x[::2].lower(), x[1::2].upper(), fillvalue='')\nres = ''.join(chain.from_iterable(zipper))\n\n# 'iNpUtStRiNg'\n"], ["def foo(input_message):\n\n    c = 0 \n    output_message = \"\"\n\n    for m in input_message:\n        if (c%2==0):\n            output_message = output_message + m.lower() \n        else: \n            output_message = output_message + m.upper()\n        c = c + 1 \n\n    return output_message\n"], ["\"\".join([x.upper() if i%2 else x.lower() for i,x in enumerate(mystring)])\n"], ["def myfunc(x):\n   seq = []\n   for i, v in enumerate(x):\n      seq.append(v.upper() if i % 2 == 0 else v.lower())\n   return ''.join(seq)\n"], ["import random\n\ndef myfunc2(old):\n  new = ''\n  for c in old:\n    lower = random.randint(0, 1)\n    if lower:\n      new += c.lower()\n    else:\n      new += c.upper()\n  return new\n"], ["item['gametags'] = [a.xpath('normalize-space(.)').extract_first() for a in sel.xpath('.//a')]\nitem['gametitle'] = sel.xpath('normalize-space(//html/body/div[1]/div[7]/div[3]/div[1]/div[2]/div[2]/div[2]/div/div[3])').extract_first()\n"], ["item['gametags'] = list(map(str.strip, sel.xpath('.//a/text()').extract())\nitem['gametitle'] = list(map(str.strip, sel.xpath('//html/body/div[1]/div[7]/div[3]/div[1]/div[2]/div[2]/div[2]/div/div[3]/text()').extract())\n"], ["item['gametags'] = sel.xpath('.//a/text()').extract()\nitem['gametitle'] = .xpath('//html/body/div[1]/div[7]/div[3]/div[1]/div[2]/div[2]/div[2]/div/div[3]/text()').extract()\n", "item['gametags'] = [val.strip() for val in sel.xpath('.//a/text()').extract()]\n"], ["import scrapy\n\nclass SteamSpider(scrapy.Spider):\n    name = 'steamspider'\n    start_urls = [\"https://store.steampowered.com/app/578080/PLAYERUNKNOWNS_BATTLEGROUNDS/\",]\n\n    def parse(self, response):\n        title = response.xpath(\"//*[@class='apphub_AppName']/text()\").extract_first().strip()\n        tag_name = [item.strip() for item in response.xpath('//*[contains(@class,\"popular_tags\")]/*[@class=\"app_tag\"]/text()').extract()]\n        yield {\"title\":title,\"tagname\":tag_name}\n"], [], [">>> df[col_name].apply(lambda v: str(v) if str(v) != 'nan' else None).tolist()\n['12.19', '13.99', '1.00', None, '9.00']\n>>>\n>>> df[col_name].apply(lambda v: str(v) if str(v) != 'nan' else '').tolist()\n['12.19', '13.99', '1.00', '', '9.00']\n>>>\n", ">>> df[col_name].apply(lambda v: str(v) if not pd.isnull(v) else None).tolist()\n['12.19', '13.99', '1.00', None, '9.00']\n>>>\n>>> df[col_name].apply(lambda v: str(v) if not pd.isnull(v) else '').tolist()\n['12.19', '13.99', '1.00', '', '9.00']\n>>>\n", ">>> import pandas as pd\n>>> import numpy as np\n>>>\n>>> df = pd.DataFrame({\n... \"fullname\": ['P Y', 'P T', 'T Y', 'N A', 'P Z'],\n... \"age\": [36, 80, 25, 8, 34],\n... \"salary\": ['12.19', '13.99', '1.00', np.nan, '9.00']\n... })\n>>>\n>>> df\n  fullname  age salary\n0      P Y   36  12.19\n1      P T   80  13.99\n2      T Y   25   1.00\n3      N A    8    NaN\n4      P Z   34   9.00\n>>>\n>>> # PROBLEM\n...\n>>> col_name = \"salary\"\n>>> df[col_name].astype(\"str\").tolist()\n['12.19', '13.99', '1.00', 'nan', '9.00']\n>>>\n>>> # SOLUTION\n...\n>>> df[col_name].apply(lambda v: str(v) if str(v) != 'nan' else None)\n0    12.19\n1    13.99\n2     1.00\n3     None\n4     9.00\nName: salary, dtype: object\n>>>\n>>> df[col_name].apply(lambda v: str(v) if str(v) != 'nan' else '')\n0    12.19\n1    13.99\n2     1.00\n3\n4     9.00\nName: salary, dtype: object\n>>>\n>>> df[col_name].apply(lambda v: str(v) if str(v) != 'nan' else None).tolist()\n['12.19', '13.99', '1.00', None, '9.00']\n>>>\n>>> df[col_name].apply(lambda v: str(v) if str(v) != 'nan' else '').tolist()\n['12.19', '13.99', '1.00', '', '9.00']\n>>>\n>>> df[col_name].apply(lambda v: str(v) if not pd.isnull(v) else None).tolist()\n['12.19', '13.99', '1.00', None, '9.00']\n>>>\n>>> df[col_name].apply(lambda v: str(v) if not pd.isnull(v) else '').tolist()\n['12.19', '13.99', '1.00', '', '9.00']\n>>>\n"], ["df[col_name].fillna('').astype('str').tolist()\n", "l = df[col_name].astype('str').tolist()\n", "list(map(lambda x: float(x) if x else None, l))\n"], ["df[col_name]\n0    12.19\n1    13.99\n2     1.00\n3      NaN\n4     9.00\ndtype: float64\n", "[str(v_) if pd.notna(v_) else None for v_ in df[col_name]]\n# ['12.19', '13.99', '1.0', None, '9.0'] \n", "[str(v_) if pd.notna(v_) else '' for v_ in df[col_name]]\n# ['12.19', '13.99', '1.0', '', '9.0'] \n"], ["l = ['12.19', '13.99', '1.00', 'nan', '9.00']\nprint([None if i.isalpha() else i for i in l])\n"], ["list = [\"nan\",\"1.27\"]\nfor x in range(len(list)):\n    if list[x] == \"nan\":\n        list[x] = None # Or list[x] = \"\"\n"], ["df[col_name].fillna('').astype('str').tolist()\n"], [], ["from math import cos\nimport time\nimport numpy as np\nfrom numba import jit\n\n\n\ndef calc(n):\n    x = 1\n    y = 1\n    z = 1\n    total = cos(x) + cos(y) + cos(z)\n    for x in range(n, int((n/3 - 1)),-1): #I only want to pick X from n-2 to  n/3 -1 , after that we will repeat.\n        cosx = cos(x)\n        for y in range(max(int(((n-x)/2))-1,1),min(int(n-x),int(n/3))): #I would only pick number that will not be choosen for the z\n                z = n-x-y #Infer the z, taking the rest in account\n                temp = cosx + cos(y) + cos(z)\n                if temp > total: total = temp\n    return total\n\ntic = time.clock()\ntotal = calc(10000)\nprint(time.clock()-tic)\n\nprint (total)\n", "import numpy as np\n\nfrom math import cos\nimport time\nimport timeit\n\ncos_arr = np.cos(np.arange(10000000))\ntic = time.time()\n\ndef calc1():\n    total = 0\n    for j in range(100):\n        for i in range(10000000):\n            total += cos_arr[i]\n\ndef calc2():\n    total = 0\n    for j in range(100):\n        for i in range(10000000):\n            total += cos(i)\n\ntime1 = timeit.Timer(calc1).timeit(number=1)\n\ntime2 = timeit.Timer(calc2).timeit(number=1)\nprint(time1)\nprint(time2)\n", "127.9849290860002\n108.21062094399986\n"], [], []]