[["#                          regex expression  \n#                          split on comma\n#                          followed by zero\n#                          or more spaces\n#                               /--\\\ndf['col1'] = df.col1.str.split(',\\s*').str[::-1].str.join(' ')\n\ndf\n\n   ID           col1\n0   1   Michael Owen\n1   2  Stephen Curry\n2   3   Lionel Messi\n3   4   LeBron James\n", "df['col1'] = [' '.join([*map(str.strip, x.split(','))][::-1]) for x in df.col1]\n\ndf\n\n   ID           col1\n0   1   Michael Owen\n1   2  Stephen Curry\n2   3   Lionel Messi\n3   4   LeBron James\n"], ["df['col1'] = df.col1.str.split(',').apply(lambda x: ', '.join(x[::-1]))\n", "df['col1'] = df.col1.str.split(',').apply(lambda x: ' '.join(x[::-1]))\n"], ["df['col1']=( df.col1.str.split()\n              .apply(lambda x: ', '.join(x[::-1]).rstrip(','))\n              .where(df['col1'].str.contains(','),df['col1']) )\n", "   ID           col1\n0   1   Michael Owen\n1   2  Stephen Curry\n2   3  Lionel, Messi\n3   4  LeBron, James\n", "df['col1']=( df.col1.str.split()\n              .apply(lambda x: ', '.join(x[::-1]).rstrip(','))\n              .where(df['col1'].str.contains(','),df['col1']) \n              .str.replace(',','') )\n", "   ID           col1\n0   1   Michael Owen\n1   2  Stephen Curry\n2   3  Lionel  Messi\n3   4  LeBron  James\n"], ["df['col1']=np.where(df.col1.str.contains(','),df.col1.str.split(', ').apply(lambda x: ', '.join(x[::-1])),df.col1)\n"], ["df.col1.str.split(',').str[1] + ',' + df.col1.str.split(',').str[0]\n"], ["from openpyxl import load_workbook\nHISNonLive3 = \"C:\\\\folder\\\\input.xlsx\"\nwb3=load_workbook(HISNonLive3)\nws3 = wb3['Non Live Integ Support Stage']\n\nfrom openpyxl.styles import NamedStyle\ndate_style = NamedStyle(name='datetime', number_format='MM/DD/YYYY')\nfor rows in ws3.iter_rows(min_row=7, max_row=None, min_col=1, max_col=1):\n    for cell in rows:\n        cell.style = date_style\nwb3.save('C:\\\\folder\\\\output.xlsx')\n", "number_format = 'General'\n"], [], ["#Change date format in column A\nimport datetime as dt\ndateCol = []\n\nfor row in ws3.iter_rows(min_col=1, max_col=1, min_row=7, max_row = None):\n    for cell in row:\n        dateCol.append((ws3.cell(row=cell.row, column=1).value))\n\ndateCol = [dt.strftime('%m/%d/%Y') for dt in dateCol]\ndateCol\n"], ["import datetime\ndateCol = [datetime.datetime(2019, 10, 7, 0, 0),\n     datetime.datetime(2019, 10, 3, 0, 0),\n     datetime.datetime(2019, 10, 3, 0, 0),\n     datetime.datetime(2019, 10, 14, 0, 0),\n     datetime.datetime(2019, 10, 15, 0, 0)]\n\n\ndateCol = [dt.strftime('%m/%d/%Y') for dt in dateCol]\nprint(dateCol)\n"], ["cell.number_format = 'MM/DD/YYYY'\n"], ["for i in [2558, 2, 1224456, 25]:\n    print('\"{:<11}\"'.format(f'{i}.'))\n", "\"2558.      \"\n\"2.         \"\n\"1224456.   \"\n\"25.        \"\n"], ["for i in [2558, 2, 1224456]:\n    print(f\" {i}{'.'.ljust(10-len(str(i)))}\")\n\n' 2558.     '\n' 2.        '\n' 1224456.  '\n"], [">>> ' {}.'.format(1224456).ljust(11)\n' 1224456.  '\n>>> ' {}.'.format(2558).ljust(11)\n' 2558.     '\n>>> ' {}.'.format(2).ljust(11)\n' 2.        '\n>>> ' {}.'.format(1224456).ljust(11)\n' 1224456.  '\n"], ["for x in [2558, 2, 1224456, 25]:\n    s = f\" {x}.\".ljust(11)\n    print(\"\\ninput:\", x)\n    print(\"output (no pipe):\", s)\n    print(\"output (with pipe):\", \"|\" + s + \"|\")\n", "input: 2558\noutput (no pipe):  2558.\noutput (with pipe): | 2558.     |\n\ninput: 2\noutput (no pipe):  2.\noutput (with pipe): | 2.        |\n\ninput: 1224456\noutput (no pipe):  1224456.\noutput (with pipe): | 1224456.  |\n\ninput: 25\noutput (no pipe):  25.\noutput (with pipe): | 25.       |\n"], ["x = 2545\nx = str(x)+'.'\nx = ' '+x.ljust(11-len(x))\nprint x\n"], ["integer = 25\n\nx = f\"| {integer}.\" + \" \"*11 + \"|\"\n\nprint(x)\n", "| 25.           |\n", "integer = 25\nx = f\"| {integer}.\"+\" \"*(11-(len(str(integer))+2))+\"|\"\n\nprint(x)\n", "| 25.       |\n"], [">>> x = 25\n>>> x = ' '+str(x)+'.'.ljust(11-(len(str(x)+'.')))\n>>> x\n' 25.       '\n"], [], ["numbers = [np.random.randint(50, 100) for x in range(100)]\n", "numbers = np.random.randint(50, 100, 100)\n", "numbers = [np.random.randint(1, 100) for x in range(100) if ...]\n", "import numpy as np\n\n\ndef my_brand_new_generator(n, a=1, b=100):\n    i = 0\n    while i < n:\n        x = np.random.randint(a, b)\n        if x > 50:\n            yield x\n            i += 1\n\n\nnumbers = list(my_brand_new_generator(100))\nprint(numbers[10])\n# [94 97 50 53 53 89 59 69 71 86]\n\nprint(len(numbers))\n# 100\n", "numbers = [x for x in (np.random.randint(1,100) for iter in range(100)) if x > 50]\nprint(len(numbers))\n# 54\n\nx = np.random.randint(1, 100, 100)\nnumbers = x[x > 50]\nprint(len(numbers))\n# 43\n"], ["arr = [val for val in (random.randint(0, 99) for _ in range(10)) if val > 50]\n"], ["import numpy as np\nq = np.random.randint(1, 100, 1000)\nm = np.where(q > 50)\nprint(q[m])\n"], ["import random\nml=random.sample(range(100),100)\n\n\n# Get list of items larger than 50 using list comprehension approach\nfiltered = [x for x in ml if x > 50]\nprint(filtered)\n\n\n# Get list of items larger than 50 using filter approach\nfiltered = list(filter(lambda x: x > 50, ml))\nprint(filtered)\n"], ["numbers = [x for x in (np.random.randint(1,100) for iter in range(100)) if x > 50]\n"], ["import numpy as np\n\ndef genrandx():\n    # Using a function allows you do to all sorts of crazy stuff and checks.\n    x = np.random.randint(1,100)\n    x = int((x*.5)**2)\n    if (\n        (x > 50) and\n        (x < 1000) and \n        ( (x%3 == 0) or (x%3 == 0) )\n       ): \n        return x \n    else: \n        return genrandx() \n\nnumbers = [ genrandx() for x in range(100)]\nprint(\"({}){}\".format(len(numbers), numbers))\n", "(100)[930, 729, 306, 576, 600, 225, 324, 324, 462, 324, 462, 756, 324, 225, 702, 552, 576, 72, 81, 900, 600, 225, 930, 900, 576, 240, 552, 702, 441, 72, 462, 132, 144, 324, 72, 702, 462, 930, 72, 306, 240, 225, 870, 210, 729, 600, 420, 132, 240, 420, 441, 420, 72, 756, 225, 900, 72, 90, 72, 600, 72, 420, 210, 702, 240, 462, 600, 156, 81, 900, 144, 72, 225, 324, 144, 420, 600, 576, 729, 156, 900, 81, 756, 729, 702, 90, 462, 306, 600, 930, 729, 240, 552, 144, 90, 900, 420, 225, 600, 156]\n"], ["y = np.random.randint(1, high=100, size=100)\nnumber = [x for x in y if x > 50]\n", "number = [x for x in np.random.randint(1, high=100, size=100) if x > 50]\n"], [], ["from random import shuffle\nfrom itertools import groupby\nfrom operator import itemgetter\n\nbig_list = [[0,5,70],[0,3,50],[0,4,60],[0,6,30],    \n            [1,6,50],[1,4,30],[1,3,70],        \n            [2,4,20],[2,5,40],\n            [69,420,20]]\n\nshuffle(big_list)\n\n[*map(list,map(itemgetter(1),groupby(sorted(big_list),itemgetter(0))))]\n\n# [[[0, 3, 50], [0, 4, 60], [0, 5, 70], [0, 6, 30]], [[1, 3, 70], [1, 4, 30], [1, 6, 50]], [[2, 4, 20], [2, 5, 40]], [[69, 420, 20]]]\n"], [">>> import itertools\n>>>\n>>> big_list\n[[0, 5, 70], [0, 3, 50], [0, 4, 60], [0, 6, 30], [1, 6, 50], [1, 4, 30], [1, 3, 70], [2, 4, 20], [2, 5, 40], [69, 420, 20]]\n>>>\n>>> [list(item[1]) for item in itertools.groupby(sorted(big_list), key=lambda x: x[0])]\n[[[0, 3, 50], [0, 4, 60], [0, 5, 70], [0, 6, 30]], [[1, 3, 70], [1, 4, 30], [1, 6, 50]], [[2, 4, 20], [2, 5, 40]], [[69, 420, 20]]]\n"], ["groups = {}\nfor l in big_list:\n    groups.setdefault(l[0], []).append(l)\n\nbig_list_sorted = list(groups.values())\nprint(big_list_sorted)\n# [[[0, 5, 70], [0, 3, 50], [0, 4, 60], [0, 6, 30]], [[1, 6, 50], [1, 4, 30], [1, 3, 70]], [[2, 4, 20], [2, 5, 40]], [[69, 420, 20]]]\n"], ["big_list = sorted(big_list)\n", "itertools.groupby(big_list, key=lambda x:x[0])\n", "[(0, <itertools._grouper object at 0x107bcf390>), (1, <itertools._grouper object at 0x107bcf310>), (2, <itertools._grouper object at 0x107bcf250>), (69, <itertools._grouper object at 0x107bcf2d0>)]\n", "[list(g) for i, g in itertools.groupby(big_list, lambda x: x[0])]\n"], ["big_list.sort(key=lambda x: x[0])\n"], [], ["def required_steps(n):\n    if n == 1: # changed because we need one less going down\n        return 1\n    return 1 + 2 * required_steps(n-1)\n", "def required_steps(n):\n    if n < 0:\n        raise ValueError(\"n must be non-negative\")\n    if n == 0:\n        return 0\n    return 1 + 2 * required_steps(n-1)\n"], ["def required_steps(n):\n    return n and 2 * required_steps(n - 1) + 1\n", "for i in range(5):\n    print(required_steps(i))\n", "0\n1\n3\n7\n15\n"], [], [], ["def required_steps(n, offset = -1):\n    if n == 0:\n        return 1\n    return offset + 2 * required_steps(n-1,0)\n"], [">>> nums = ['10:30', '9:30', '11:0']\n>>> ['{:0>2}:{:0>2}'.format(*n.split(':')) for n in nums]\n['10:30', '09:30', '11:00']\n", ">>> ['{:02d}:{:02d}'.format(*map(int, n.split(':'))) for n in nums]\n['10:30', '09:30', '11:00']\n"], ["class OrderedEnum(Enum):\n\n    def __init__(self, value, *args, **kwds):\n        super().__init__(*args, **kwds)\n        self.__order = len(self.__class__)\n\n    def __ge__(self, other):\n        if self.__class__ is other.__class__:\n            return self.__order >= other.__order\n        return NotImplemented\n\n    def __gt__(self, other):\n        if self.__class__ is other.__class__:\n            return self.__order > other.__order\n        return NotImplemented\n\n    def __le__(self, other):\n        if self.__class__ is other.__class__:\n            return self.__order <= other.__order\n        return NotImplemented\n\n    def __lt__(self, other):\n        if self.__class__ is other.__class__:\n            return self.__order < other.__order\n        return NotImplemented\n", "class MyEnum(OrderedEnum):\n    A = \"apple\"\n    C = \"cherry\"\n    B = \"banana\"\n"], ["import numpy as np\n\na = np.array([1,2,4,4,6,8,10,10,21])\nb = np.array([3,3,4,6,10,18,22])\n\n# join and sort (with Tim sort this should be O(n))\nab = np.concatenate([a,b])\ni = ab.argsort(kind=\"stable\")\nabo = ab[i]\n\n# mark 1st of each group of equal values\nd = np.flatnonzero(np.diff(abo,prepend=abo[0]-1,append=abo[-1]+1))\n# mark sorted total by origin (a -> False, b -> True)\nig = i>=len(a)\n# compare origins of first and last of each group of equal values\n# if they are different mark for deletion\ndupl = ig[d[:-1]] ^ ig[d[1:]-1]\n\n# finally, delete\nar = np.delete(a,i[d[:-1][dupl]])\nbr = np.delete(b,i[d[1:][dupl]-1]-len(a))\n\n# inspect\nar\narray([ 1,  2,  4,  8, 10, 21])\nbr\narray([ 3,  3, 18, 22])\n"], ["import numpy as np\n\na = np.array([1,2,4,4,6,8,10,10,21])\nb = np.array([3,3,4,6,10,18,22])\n\nfor i, val in enumerate(a):\n    if val in b:\n        a = np.delete(a, np.where(a == val)[0][0])\n        b = np.delete(b, np.where(b == val)[0][0])\n\nfor i, val in enumerate(b):\n    if val in a:\n        a = np.delete(a, np.where(a == val)[0][0])\n        b = np.delete(b, np.where(b == val)[0][0])\n\nprint(a)\nprint(b)\n", "[1,2,4,8,10,21]\n[3,3,18,22]\n"], ["import numpy as np\n\n# List of b that are not in a\na = np.array([1,2,4,4,6,8,10,10,21])\nb = np.array([3,3,4,6,10,18,22])\nnewb = [x for x in b if x not in a]\nprint(newb)\n\n# REMOVE ONE DUPLICATED ELEMENT FROM LIST\nimport collections\ncounter=collections.Counter(a)\nprint(counter)\nnewa = list(a)\nfor k,v in counter.items():\n    if v > 1:\n        newa.remove(k)\nprint(newa)\n"], ["In [58]: intersect = a[np.in1d(a, b)]\nIn [59]: mask1 = np.searchsorted(a, intersect)\n\nIn [60]: mask2 = np.searchsorted(b, intersect)\n\nIn [61]: np.delete(a, mask1)\nOut[61]: array([ 1,  2,  4,  8, 10, 21])\n\nIn [62]: np.delete(b, mask2)\nOut[62]: array([ 3,  3, 18, 22])\n"], ["from collections import Counter\n\nimport numpy as np\n\na = np.array([1, 2, 4, 4, 6, 8, 10, 10, 21])\nb = np.array([3, 3, 4, 6, 10, 18, 22])\n\nca = Counter(a)\ncb = Counter(b)\n\nresult_a = sorted((ca - cb).elements())\nresult_b = sorted((cb - ca).elements())\n\nprint(result_a)\nprint(result_b)\n", "[1, 2, 4, 8, 10, 21]\n[3, 3, 18, 22]\n", "a = np.array([1, 2, 4, 4, 6, 8, 10, 10, 10, 21])\nb = np.array([3, 3, 4, 6, 10, 10, 18, 22])\n"], ["import numpy as np\n\na = np.array([1,2,4,4,6,8,10,10,21])\nb = np.array([3,3,4,6,10,18,22])\n\ncommon_values = set(a) & set(b)\n\na = a.tolist()\nb = b.tolist()\n\nfor value in common_values:\n    a.remove(value)\n    b.remove(value)\n\na = np.array(a)\nb = np.array(b)\n"], ["import enum\n\nclass Fruits(enum.IntEnum):\n    Apple = 0\n    Cherry = 1\n    Banana = 2\n\nprint(Fruits.Apple < Fruits.Banana) \nprint(Fruits.Banana >= Fruits.Cherry) \nprint(Fruits.Cherry < Fruits.Apple)\n", "True\nTrue\nFalse\n", ">>> print(Fruits.Apple.name)\nApple\n\n>>> print(Fruits.Apple.value)\n0\n"], ["nums = [\"10:30\", \"9:30\", \"11:0\"]\n", "for item in nums:\n    print(str(datetime.strptime(item, '%H:%M').time())[:-3])\n", "10:30\n09:30\n11:00\n"], ["nums = [\"10:30\", \"9:30\", \"11:0\"]\n\nnums_added = [ i + \"0\" if len(i.split(\":\")[1]) == 1 else i for i in nums]\n\nprint(nums_added)\n", "['10:30', '9:30', '11:00']\n"], ["from datetime import datetime\nnums = [\"10:30\", \"9:30\", \"11:3\"]\nx = [datetime.strptime(x, '%H:%M').strftime('%H:%M') for x in nums]\n\n>>> x\n['10:30', '09:30', '11:03']\n"], ["nums = [\"10:30\", \"9:30\", \"11:0\"]\n\nfixed = []\nfor t in nums:\n    x, y = t.split(':')\n    fixed.append(x.zfill(2) + ':' + y.ljust(2, '0'))\n\nprint(fixed)\n"], ["def add_zeros(item: str) -> str:\n    nums = item.split(\":\")\n    formatted_item = \":\".join(f\"{int(num):02d}\" for num in nums)\n    return formatted_item\n", "nums = [\"10:30\", \"9:30\", \"11:0\"]\n[add_zeros(num) for num in nums]\n"], ["def required_steps (n = 0, r = 1):\n  if n == 0:\n    return r - 1\n  else:\n    return required_steps(n - 1, r * 2)\n\nfor x in range(6):\n  print(f\"f({x}) = {required_steps(x)}\")\n\n# f(0) = 0\n# f(1) = 1\n# f(2) = 3\n# f(3) = 7\n# f(4) = 15\n# f(5) = 31\n", "def required_steps (n = 0, r = 1):\n  if n == 0:\n    return r - 1\n  else:\n    return required_steps(n - 1, r << 1)\n"], ["def f(n):\n    return required_steps(n) - 1\n", "def required_steps(n, sub=True):\n    if n == 0: return 1\n    return 2 * required_steps(n-1, False) - sub\n", ">>> print(required_steps(10))\n1023\n"], ["np.where(df == 1, df.columns, np.nan)\n\narray([[nan, nan, 'C', nan],\n       ['A', nan, nan, nan],\n       [nan, 'B', 'C', 'D'],\n       ['A', nan, nan, 'D']], dtype=object)\n", "df = pd.DataFrame(np.where(df == 1, df.columns, np.nan), columns=df.columns)\nprint (df)\n     A    B    C    D\n0  NaN  NaN    C  NaN\n1    A  NaN  NaN  NaN\n2  NaN    B    C    D\n3    A  NaN  NaN    D\n"], ["df = pd.DataFrame(np.where(df == 1, df.columns, np.nan))\nprint (df)\n     0    1    2    3\n0  NaN  NaN    C  NaN\n1    A  NaN  NaN  NaN\n2  NaN    B    C    D\n3    A  NaN  NaN    D\n", "df.to_csv('file.csv', index=False, header=None)\n"], ["import pandas as pd\nimport numpy as np\n\n\ndf = pd.DataFrame({'A': [0,1,0,1],\n                   'B': [0,0,1,0],\n                   'C': [1,0,1,0],\n                   'D': [0,0,1,1]\n                   })\n\n\ndf = df.T.where(df.T != 1, df.columns).T.where(df != 0, np.nan)\n", "     A    B    C    D\n0  NaN  NaN    C  NaN\n1    A  NaN  NaN  NaN\n2  NaN    B    C    D\n3    A  NaN  NaN    D\n"], [], ["for i in df.columns:\n    df[i] = df[i].apply(lambda x: i if x==1 else np.nan)\ndf.columns = [''] * len(df.columns)\n"], [], ["from enum import Enum\nimport functools\n\n\n@functools.total_ordering\nclass MyEnum(Enum):\n    A = \"apple\"\n    C = \"cherry\"\n    B = \"banana\"\n\n    def __eq__(self, other):\n        if isinstance(other, MyEnum):\n            return (\n                self._member_names_.index(self.name) ==\n                self._member_names_.index(other.name)\n            )\n        return NotImplemented\n\n    def __gt__(self, other):\n        if isinstance(other, MyEnum):\n            return (\n                self._member_names_.index(self.name) >\n                self._member_names_.index(other.name)\n            )\n        return NotImplemented\n\n\nprint(MyEnum.A < MyEnum.B)  # True\nprint(MyEnum.B >= MyEnum.C)  # True\nprint(MyEnum.C < MyEnum.A)  # False\n"], [">>> class E(enum.Enum):\n...    A = 'apple'\n...    C = 'cherry'\n...    B = 'banana'\n... \n>>> \n>>> members = [v for v in E.__dict__.values() if isinstance(v, E)]\n>>> members\n[<E.A: 'apple'>, <E.C: 'cherry'>, <E.B: 'banana'>]\n"], [], ["import re\nfrom itertools import chain, repeat\nstring = 'SELECT sdfdsf SELECT sdrrr SELECT 5445ff'\nstring = ''.join(x + s for x, s in zip(chain(['', 'S'], repeat('@@@S')), re.split(r'\\bS(?=ELECT\\b)', string)))\nprint(string)\n", "SELECT sdfdsf @@@SELECT sdrrr @@@SELECT 5445ff\n"], ["with open ('States.txt') as file:\n    states = list(file.read().split('\\n')[:13])\n    states.sort()\n\nfor state in states:\n    print (state)\n", "Connecticut\nDelaware\nGeorgia\nMaryland\nMassachusetts\nNew Hampshire\nNew Jersey\nNew York\nNorth Carolina\nPennsylvania\nRhode Island\nSouth Carolina\nVirginia\n"], ["filename=\"States.txt\"\nstates= list()\n\nwith open (filename) as file:\n    # convert to list of names \n    items = list(file.read().split())\n", "two_word_state_names=['New','North','South','West', 'Rhode']\nskip=False\n\nfor idx,item in enumerate(items):\n    if skip:\n        skip=False\n        continue\n    elif item in two_word_state_names:\n        states.append(str(items[idx] + \" \" + items[idx+1]))\n        skip=True # skip the next loop because next item is the second word of the state\n    else:\n        states.append(item)\n", "thirteen_states=states[:13]\nthirteen_states.sort()\n\n# Print result\nfor state in thirteen_states:\n    print (state)\n"], ["from itertools import islice\nwith open('States.txt') as infile:\n    print(*sorted(islice(infile, 13)), sep='')\n"], ["infile = open(\"States.txt\", 'r')\nstates = [line.rstrip() for line in infile]\noriginal_states = states[:13]\noriginal_states.sort()\nfor state in original_states:\n    print(state)\ninfile.close()\n"], [], ["import re, itertools\nc = itertools.count()\nstring = \"SELECT sdfdsf SELECT sdrrr SELECT 5445ff\"\nr = re.sub(r\"\\bSELECT\\b\", lambda x:x.group() if not next(c) else f'@@@{x.group()}', string)\n", "'SELECT sdfdsf @@@SELECT sdrrr @@@SELECT 5445ff'\n", "r = re.sub('(?<!^)SELECT', lambda x:f'@@@{x.group()}', string)\n", "'SELECT sdfdsf @@@SELECT sdrrr @@@SELECT 5445ff'\n"], ["s = \"SELECT sdfdsf SELECT sdrrr SELECT 5445ff\"\nres = s.replace(\"SELECT\", \"@@@SELECT\").replace(\"@@@SELECT\", \"SELECT\", 1)\nprint(res)\n", "SELECT sdfdsf @@@SELECT sdrrr @@@SELECT 5445ff\n", "import re\n\ndef make_replacer():\n    rpl = ''\n    def inner(m):\n        nonlocal rpl\n        res = rpl + m.group()\n        rpl = '@@@'\n        return res\n    return inner\n\ns = \"SELECT sdfdsf SELECT sdrrr SELECT 5445ff\"\nres = re.sub(r'\\bSELECT\\b', make_replacer(), s)\nprint(res)   # SELECT sdfdsf @@@SELECT sdrrr @@@SELECT 5445ff\n"], ["string = string.replace(\"SELECT\", \"@@@SELECT)[3:]\n"], ["string = \"SELECT sdfdsf SELECT sdrrr SELECT 5445ff\"\nstring = \"SELECT \" + string.split('SELECT', 1)[1].strip().replace('SELECT', '@@@SELECT').strip()\n", "string = \"SELECT sdfdsf SELECT sdrrr SELECT 5445ff\"\nstring = string.split('SELECT', 1)[0].strip() + \" SELECT \" + string.split('SELECT', 1)[1].strip().replace('SELECT', '@@@SELECT').strip()\n"], ["string = \"SELECT sdfdsf SELECT sdrrr SELECT 5445ff\"\nparts = string.partition(\"SELECT\")  # returns a tuple\nresults = parts[0] + parts[1] + parts[2].replace(\"SELECT\", \"@@@SELECT\")\n\nprint(results)\n"], ["import string\n\ndef removeExceptFirst(s, old, new):\n    i = s.find(old) + len(old)\n    newStr = s[0:i]\n    newStr += s[i:].replace(old, new)\n    return newStr\n\nprint(removeExceptFirst(\"SELECT sdfdsf SELECT sdrrr SELECT 5445ff\", \"SELECT\", \"@@@SELECT\"))\n"], ["x = 3\n", ">>> a = [1,2]\n>>> b = a\n>>> print(id(a)) # id(object) will return the address of object in memory\n2426261961288\n>>> print(id(b))\n2426261961288\n>>> a is b # operator \"is\" evaluate whether a and b refer to the same object.  \nTrue\n>>> b.append(3)\n>>> print(id(b)) # b's address didn't change\n2426261961288\n>>> print(a)\n[1, 2, 3]\n>>> print(b)\n[1, 2, 3]\n", ">>> b = [4, 5, 6]\n>>> a is b\nFalse\n>>> id(a)\n2426261961288\n>>> id(b)\n2426262048840\n>>> print(a)\n[1, 2, 3]\n", "class A:\n    arr = []\n>>> a1, a2 = A(), A()\n>>> a1.arr.append(0)\n", ">>> A.arr\n[0]\n", ">>> a1.arr = [1,2,3]\n", ">>> a1.arr\n[1, 2, 3]\n", ">>> a2.arr\n[0]\n>>> A.arr\n[0]\n"], ["def LCM(minN,maxN):\n    count = 1\n    for i in range(count,(maxN*count)+1):\n        print(minN*count)\n        count = count + 1\n", "def LCM(minN,maxN):\n    for i in range(1, maxN+1):\n        print(minN*i)\n", "def LCM(minN,maxN):\n    for i in range(1, maxN+1):\n        pass\n    print(minN * maxN)\n", "def LCM(minN,maxN):\n    print(minN * maxN)\n"], ["def LCM(minN, maxN):\n    print(minN * maxN)\n\nLCM(5,7)\n", "35\n"], ["def LCM(minN,maxN):\n    count = 1\n    for i in range(count,(maxN*count)+1):\n        count = count + 1\n    else:\n      print(minN*(count-1))\n"], ["def LCM(minN,maxN):\n\n    count = 1\n    results = []\n    for i in range(count,(maxN*count)+1):\n        results.append(minN*count)\n        count = count + 1\n    print(results[-1]) # print the last elements of the list.\n"], ["def LCM(minN,maxN):\n    count = 1\n    for i in range(count,(maxN*count)):\n        count = count + 1\n    print(minN*count)\n", "LCM(5,7)\n# 35\n"], ["L = [1,2,3,4,5,6,7,8,9]\n\ndef takeuntil(lst, max_value = 0):\n    \"\"\"Yields elements as long as the cummulative sum is smaller than max_value.\"\"\"\n    total = 0\n    for item in lst:\n        total += item\n        if total <= max_value:\n            yield item\n        else:\n            raise StopIteration\n\n    raise StopIteration\n\nnew_lst = [item for item in takeuntil(L, 20)]\nprint(new_lst)\n", "[1, 2, 3, 4, 5]\n"], ["s = 0\nfor element in L:\n   if s + element < 20:\n         s += element\n    else:\n         break\n"], ["import numpy as np\n\narr = np.array(L)\narr[arr.cumsum() <= 20].tolist()\n#[1, 2, 3, 4, 5]\n"], ["pd.Series(L, index=np.cumsum(L)).loc[:20].values\n", "array([1, 2, 3, 4, 5], dtype=int64)\n"], ["L = [1,2,3,4,5,6,7,8,9]\ni = 0\ns = 0\nnew_list = []\nwhile i < len(L) and s + L[i] < 20:\n    new_list.append(L[i])\n    s += L[i]\n    i += 1\nprint(new_list)\n", "[1, 2, 3, 4, 5]\n"], ["class A:\n    def __init__(self):\n        self.ls = []\na,b = A(), A()\na.ls.append(0)\n", "class B:\nls = []\ndef __init__(self):\n    pass\n\n\nc,d = B(),B()\nc.ls == d.ls\nOut[21]: True\n"], ["class A:\n    arr = []\n", "class B:\n    value = ''\n"], ["class B:\n    value = ''\n# You have a single attribute, `B.value`\n\nb1, b2 = B(), B()\nb1.value = 'hello'\n# This shadows b1's reference to B.value,\n# inserting a local reference to its own attribute of the same name.\n# You can check this with the id() function\n\nb2.value   # this still refers to the class attribute.\n"], ["class C:\n    class_attribute=2\n\n    def __init__(self):\n        self.instance_attribute='boo'\n"], [], ["class Char:\n    def __init__(self, x, y):\n        self.str = x\n        self.con = y\n        self.setHP()\n\n    def __str__(self):\n        text = \"strength:     \" + str(self.str) + \"\\n\" +\\\n               \"constitution: \" + str(self.con) + \"\\n\" +\\\n               \"hp:           \" + str(self.hp)\n        return text\n\n    def setHP(self):\n        self.hp = (self.con + self.str) / 2\n\n    def adjustStr(self, amount):\n        self.str += amount\n        self.setHP()\n\n    def adjustCon(self, amount):\n        self.con += amount\n        self.setHP()\n\n\ndef main(dude):\n    print(str(dude))\n    print(\"------\")\n    action = input(\"press 1 to change str, 2 to change con\")\n    if action == \"1\":\n        dude.adjustStr(10)\n        main(dude)\n    elif action == \"2\":\n        dude.adjustCon(10)\n        main(dude)\n    else:\n        main(dude)\n\n\nplayer = Char(20, 20)\n\nmain(player)\n"], ["def tranversal(fruit):\n\n    index = 0\n\n    while index < len(fruit):\n\n        letter = fruit[index]\n\n        print(letter)\n\n        index += 1\n\ntranversal(\"apple\")\n"], [], ["print(*'banana', sep='\\n')\n", "b\na\nn\na\nn\na\n"], ["def `tranversal`(fruit):\n\n   result = \"\"\n\n   length = int(len(fruit))\n\n   index = 0\n\n   while index < length:\n\n        result += fruit[index]\n\n        index += 1\n\n        if index == length:\n\n            return \"\\n\".join(result)\n\nprint(tranversal(\"string\"))\n"], ["import datetime\n\nnow = datetime.datetime.now()\nnoon = datetime.datetime(now.year, now.month, now.day, hour=12)\n\nnoon_today = round(noon.timestamp())  # Convert to integer.\nnow_as_int = round(now.timestamp())\n\nif now_as_int < noon_today:\n     print(\"before noon\")\nelse:\n     print(\"noon or later\")\n"], ["import datetime\na = datetime.datetime.now().time()\nb = datetime.time(12, 00, 00, 000000)\nif a < b:\n     print(\"Do x here\")\nelse:\n      print(\"Do y here\")\n"], ["def printAllChar(s):\n    for i in s:\n        print(i,end='\\n')\n\n\n//calling here...\nprintAllChar(\"ProgRank\")\n\n//output here...\n\nP\nr\no\ng\nR\na\nn\nk\n"], ["def transversal(fruit):\n    for letter in fruit:\n        print(letter)\n", "foo = transversal(\"banana\")\n"], ["import time\nd = time.localtime()\nif d.tm_hour > 12 && d.tm_sec>0:\n   ...\n"], ["import datetime\n\nnow = datetime.datetime.now() \nprint(now) # 2019-10-04 22:11:46.655252\nprint(now.strftime(\"%p\")) # PM\nprint(now.time().strftime(\"%p\")) # PM\n"], ["import datetime\n\ndatetime_object = datetime.datetime.now().time()\n\nif datetime_object.hour >= 12:\n    print(\"Wow it's after 12 pm\")\nelse:\n    print(\"Wow it's before 12 pm\")\n"], ["d = datetime.datetime.now().time()\nif d.hour > 12:\n...\n"], ["print(any(fruit in frozenset(test_string.replace('.',' ').lower().split()) for fruit in fruits))\n"], ["import re\n\nfruits = ['apples', 'oranges', 'bananas']\ntest_string = \"Hello! This is a test. I love to eat apples.\"\n\nbasket = set(fruits)\nwords = re.compile('\\w+')\n\nfor match in words.finditer(test_string):\n    fruit = match.group()\n    if fruit in basket:\n        print(fruit + \" contains in the string\")\n", "apples contains in the string\n"], ["from nltk.tokenize import RegexpTokenizer\ntest_string = \"Hello! This is a test. I love to eat apples.\"\n\ntokenizer = RegexpTokenizer(r'\\w+')\ntest_set = set(tokenizer.tokenize(test_string))\n# {'Hello', 'I', 'This', 'a', 'apples', 'eat', 'is', 'love', 'test', 'to'}\n"], [">>> words = set(test_string.replace('.',' ').lower().split())\n>>> any(fruit in words for fruit in fruits)\nTrue\n"], ["import string\n\ntest_string = \"Hello! This is a test. I love to eat apples.\"\ntest_string_no_punctuation = test_string.translate(str.maketrans('', '', string.punctuation))\nword_set = set(test_string_no_punctuation.split())\n\nfruits = ['apples', 'oranges', 'bananas'] \n\nfor fruit in fruits:\n    if fruit in word_set:\n        print(fruit+\" contains in the string\")\n", "def word_set(input_string):\n    return set(input_string.translate(str.maketrans('', '', string.punctuation)).split())\n"], [], ["df_red = df[df.values==outliers]\n\nplt.scatter(df.index,df.values)\nplt.scatter(df_red.index,df_red.values,c='red')\nplt.show()\n"], ["df = pd.DataFrame({'CO2': {0: 549.5,\n  1: 663.54166699999996,\n  2: 830.41666699999996,\n  3: 799.695652,\n  4: 813.85000000000002,\n  5: 769.58333300000004,\n  6: 681.94117599999993,\n  7: 653.33333300000004,\n  8: 845.66666699999996,\n  9: 436.08695700000004},\n 'day': {0: 1, 1: 2, 2: 3, 3: 4, 4: 5, 5: 6, 6: 7, 7: 8, 8: 9, 9: 10}})\n\nIn [11]: colors = ['r' if n<750 else 'b' for n in df['CO2']]\n\nIn [12]: colors\nOut[12]: ['r', 'r', 'b', 'b', 'b', 'b', 'r', 'r', 'b', 'r']\n\nIn [13]: plt.scatter(df['day'],df['CO2'],c=colors)\n", "In [14]: colors = np.where(df['CO2'] < 750, 'r', 'b')\n"], ["col = ['red' if yy in list(outliers) else 'blue' for yy in y] \n"], ["mu, sigma, min_threshold, max_threshold = estimate_gaussian(df['CO2'].values)\n\nxs = df['day']\nys = df['CO2']\n\nfor x, y in zip(xs, ys):\n    color = 'blue'  # non-outlier color\n    if not min_threshold <= y <= max_threshold:  # condition for being an outlier\n        color = 'red'  # outlier color\n    plt.scatter(x, y, color=color)\nplt.show()\n"], ["df[\"outlier\"] = # your boolean np array goes in here\nplt.scatter[df.loc[df[\"outlier\"], \"day\"], df.loc[df[\"outlier\"], \"CO2\"], color=\"k\"]\nplt.scatter[df.loc[~df[\"outlier\"], \"day\"], df.loc[~df[\"outlier\"], \"CO2\"], color=\"r\"]\n"], ["f = 3,2,5,9,13,1,...\nfor loop in (f):\n    listy= f[0:f.index(loop)] # subset list up to current element\n                              # loop is not a reserved word, but \n                              # I still wouldn't use it in this sense\n    for y in listy:           # iterate through subset\n        if loop < y:          # check conditional\n            loop = f[f.index(loop)+1] # move up one element in the list\n"], ["def get_max(int_list):\n    best_max = False\n    for value in int_list:\n        if best_max == False or best_max < value:\n            best_max = value\n    return best_max\n\n\nint_list = [-1, 0, 1, 2, 3, 4, 5, 6, 7, 8, 9]\nprint ( get_max(int_list) )\n"], ["largest = f[0]\nfor loop in f:\n    if loop > largest:\n        largest = loop\n"], ["f.sort()\nprint(\"Largest number is:\", f[-1])\n"], [], ["student_num1 student_name1 student_grade1\nstudent_num2 student_name2 student_grade2\nstudent_num3 student_name3 student_grade3\n", "def main():\n    file = open('file.txt', 'r')\n    students = {}\n    for line in file:\n        fields = line.split(\" \")\n        fields[2] = fields[2].replace(\"\\n\", \"\")\n        students[fields[1]] = [fields[0], fields[2]]\n\n    print(students)\nmain()\n", "{'student_name1': ['student_num1', 'student_grade1'], 'student_name2': ['student_num2', 'student_grade2'], 'student_name3': ['student_num3', 'student_grade3']}\n"], ["with open(\"data.txt\", \"r\") as f:\n    students = {k:v for k, *v in map(str.split, f)}\n", ">>> a, *b = [1,2,3]\n>>> a\n1\n>>> b\n[2, 3]\n", ">>> {x:x+1 for x in range(5)}\n{0: 1, 1: 2, 2: 3, 3: 4, 4: 5}\n", "student_num1 student_name1 student_grade1 \nstudent_num2  student_name2 student_grade2 \nstudent_num3 student_name3 student_grade3\n", ">>> with open(\"data.txt\", \"r\") as f:\n...     students = {k:v for k, *v in map(str.split, f)}\n... \n>>> students\n{'student_num1': ['student_name1', 'student_grade1'], 'student_num2': ['student_name2', 'student_grade2'], 'student_num3': ['student_name3', 'student_grade3']}\n"], [], [], ["student_num1 student_name1 student_grade1\nstudent_num2 student_name2 student_grade2\nstudent_num3 student_name3 student_grade3\n", "d = dict()\nwith open(\"temp.txt\", \"r\") as f:\n  for line in f.readlines():\n    key, *values = line.strip().split(\" \")\n    d[key] = values\n  print(d)\n", "{'student_num1': ['student_name1', 'student_grade1'], 'student_num2': ['student_name2', 'student_grade2'], 'student_num3': ['student_name3', 'student_grade3']}\n"], ["d = {}\nwith open('students.txt') as f:\n    for line in f:\n        key, *rest = line.split()\n        d[key] = rest\n\nprint(d)\n# {'student_num1': ['student_name1', 'student_grade1'], 'student_num2': ['student_name2', 'student_grade2'], 'student_num3': ['student_name3', 'student_grade3']}\n"], ["animals = {'ralph': ('dog', 160101),\n            'marley': ('dog', 160102),\n            'sam': ('cat', 160103),\n            'bones': ('dog', 160104),\n            'bella': ('cat', 160105),\n            'max': ('dog', 160106),\n            'daisy': ('cat', 160107),\n            'angel': ('cat', 160108),\n            'luna': ('cat', 160109),\n            'buddy': ('dog', 160110),\n            'coco': ('dog', 160111),\n           }\n\nfor KeyAndValue in animals.items():\n    print(KeyAndValue[0])\n", "ralph\nmarley\nsam\nbones\nbella\nmax\ndaisy\nangel\nluna\nbuddy\ncoco\n", "for name in animals.keys():\n    print(name)\n", "ralph\nmarley\nsam\nbones\nbella\nmax\ndaisy\nangel\nluna\nbuddy\ncoco\n"], ["print(animals.keys())\n", "print(\"n\".join(animals)\n", "for key in animals: \n    print(key)\n"], [], ["for animal in animals.keys():\n    print(animal)\n"], ["for animal in animals.items():\n    print(animal[0])\n", "ralph\nmarley\nsam\nbones\nbella\nmax\ndaisy\nangel\nluna\nbuddy\ncoco\n"], ["for key, value in animals.items():\n    print(key)\n"], ["def rec_func(n=1, H=[]):\n    if not H:\n        H = [None] * (n+1)\n\n    if n == 1:\n        H[n] = 1\n    else:\n        H =  rec_func(n-1, H)\n        H[n] = 2 * H[n-1] + 1\n\n    return H \n\nH = rec_func(3)\n\nprint(H) // prints -> [None, 1, 3, 7]\n"], ["from collections import Counter\n\ns1 = set([1, 2, 3])\ns2 = set([2, 3, 4])\ns3 = set([2, 3, 7])\ns4 = set([2, 5, 9])\nprint([k for k,v in Counter((*s1,*s2,*s3,*s4)).items() if v == 1])\n", "from functools import reduce                                                                                                                                                          \ns1 = set([1, 2, 3]) \ns2 = set([2, 3, 4]) \ns3 = set([2, 3, 7]) \ns4 = set([2, 5, 9])                                                                                                                                                                   \nsets = [s1,s2,s3,s4]                                                                                                                                                                  \nreduce(set.symmetric_difference, sets)      \n"], ["idx_filter = np.asarray([i for i, col in enumerate(df.columns) if SOME_STRING_CONDITION in col])\ndf.rename(columns={col: '' for col in df.columns[idx_filter]}, inplace=True)\n", "idx_filter = np.asarray([i for i, col in enumerate(df.columns) if 'C' in col])\ndf.rename(columns={col: col.replace('C', 'col_') for col in df.columns[idx_filter]}, inplace=True)\n"], ["assert len(l) == l.count('a') + l.count('b') and len(L) % 2 == 0\n", "j = ''.join(l)\nassert 'aa' not in j and 'bb' not in j\n", "assert 'a' is L[0]\n"], ["CPU times: user 95.2 ms, sys: 3.95 ms, total: 99.1 ms\nWall time: 98 ms\n", "CPU times: user 39.9 ms, sys: 0 ns, total: 39.9 ms\nWall time: 38.6 ms\n", "CPU times: user 32.4 ms, sys: 3.35 ms, total: 35.8 ms\nWall time: 34.7 ms\n", "CPU times: user 11.7 ms, sys: 0 ns, total: 11.7 ms\nWall time: 12.1 ms\n"], ["def is_correct_entry(idx, v):\n    if idx % 2 == 0:\n        return v == 'a'\n    else:\n        return v == 'b'\n\ndef my_fancy_test(l):\n    return l and l[-1] == 'b' and all(is_correct_entry(idx, v) for idx, v in enumerate(l))\n"], ["pattern = ['a', 'b']\n\np_len = len(pattern)\nassert all(pattern == L[i: i + p_len] for i in range(0, len(L), p_len))\n", "pattern = ['a', 'b']\n\np_len = len(pattern)\nl_broken = ['a','b','b','a','a','b','a','b','a','a','a','b','a','b','b','a']\nall(pattern == l_broken[i: i+p_len] for i in range(0, len(l_broken), p_len))\n", "---------------------------------------------------------------------------\nAssertionError                            Traceback (most recent call last)\n<ipython-input-160-edf435d855b9> in <module>\n      1 p_len = len(pattern)\n      2 l_broken = ['a','b','b','a','a','b','a','b','a','a','a','b','a','b','b','a']\n----> 3 assert all(pattern == l_broken[i: i+p_len] for i in range(0, len(l_broken), p_len))\n\nAssertionError: \n"], ["import re\n\ndef is_broken(input_list, pattern = re.compile(\"(?:ab)*\")):\n    return pattern.fullmatch(''.join(input_list)) is None\n\nprint(is_broken(['a','b','a','b','a','b','a','b','a','b','a','b','a','b','a','b']))\nprint(is_broken(['a','b','b','a','a','b','a','b','a','a','a','b','a','b','b','a']))\n", "False\nTrue\n"], [">>> l = ['a','b','a','b','a','b','a','b','a','b','a','b','a','b','a','b']\n>>> pairs = [[l[i], l[i + 1]] for i in range(0, len(l) - 1, 2)]\n>>> pairs\n[['a', 'b'], ['a', 'b'], ['a', 'b'], ['a', 'b'], ['a', 'b'], ['a', 'b'], ['a', 'b'], ['a', 'b']]\n", ">>> pairs.count(['a', 'b']) == len(l) / 2\nTrue\n", "def my_fancy_test(l):\n    pairs = [[l[i], l[i + 1]] for i in range(0, len(l) - 1, 2)]\n    return pairs.count(['a', 'b']) == len(l) / 2\n"], ["def my_fancy_test(my_list):\n    pattern = ['a', 'b']\n    if not len(my_list) % len(pattern) == 0:\n        return False\n    for i in range(0, len(my_list)):\n        if not my_list[i] == pattern[i % len(pattern)]:\n            return False\n    return True\n", "L = ['a','b','a','b','a','b','a','b','a','b','a','b','a','b','a','b']\nassert my_fancy_test(L) #passes\nL2 = ['a','b','a','b','a','b','a','b','a','b','a','b','a','b','a','c']\nassert my_fancy_test(L2) #fails\n"], ["def test_repeating_pattern(lst, pat):\n    pat_len = len(pat)\n    assert len(lst) % pat_len == 0, 'mismatched length of list'\n    assert list(pat) * (len(lst) // pat_len) == lst, 'the list does not follow the correct pattern'\n    print(lst, 'is valid')\n\n\nL = ['a','b','a','b','a','b','a','b','a','b','a','b','a','b','a','b']\nL_broken = ['a','b','b','a','a','b','a','b','a','a','a','b','a','b','b','a']\n", "test_repeating_pattern(L, ('a', 'b'))\n['a', 'b', 'a', 'b', 'a', 'b', 'a', 'b', 'a', 'b', 'a', 'b', 'a', 'b', 'a', 'b'] is valid\n", "test_repeating_pattern(L_broken, ('a', 'b'))\nAssertionError: the list does not follow the correct pattern\n"], ["def myfunc_improved(sets: List[set]) -> set:\n    sd = set()\n    goners = set()\n    for s in sets:\n        sd ^= s - goners\n        goners |= s - sd\n    return sd\n"], ["import itertools as it\n\ndef only_exists_in_one_set(target):\n    remover = []\n    case = it.combinations(target, 2) #generate all combinations ignores order\n    while True:\n        try:\n            temp = next(case)\n            # AND all combos to find duplicates\n            remover.append(temp[0] & temp[1])\n        except StopIteration:\n            break\n    #flatten the nested list of sets passed to the function:\n    target = [x for each_set in target for x in each_set]\n    #flatten remover, eliminate duplicates with set\n    for val in set([x for each_set in remover for x in each_set]):\n        target = [a for a in target if a != val]    #remove all duplicate values\n    return sorted(target)\n\n>>> only_exists_in_one_set([{1,2,3},{2,3,4},{2,3,7},{2,5,9}])\n\n>>> [1, 4, 5, 7, 9]\n"], [], ["from functools import reduce\nA = [set([1, 2, 3]), set([2, 3, 4]), set([2, 3, 7]), set([2, 5, 9])]\nB = set()\nfor i in range(len(A)):\n    U = reduce(set.union, A[:i]+A[(i+1):])\n    B = B.union(set.difference(A[i], U))\n\nprint(B)\n"], ["def s_diff(li):\n    res=set()\n    for s in li:\n        res =res.symmetric_difference(s)\n    return res\n\n\noutput:\ns_diff([s1,s2,s3,s4])\n{1, 3, 4, 5, 7, 9}\n"], ["def find_two_sum(numbers, target_sum):\n    for n in numbers:\n        for i in numbers[numbers.index(n)+1:]:\n            if n+i==target_sum:\n                return(numbers.index(n),numbers.index(i))\n                break\n    return None\n\nprint(find_two_sum([3, 1, 5, 7, 5, 9], 10))\n"], ["import numpy as np\n\ndef f_pp(a,bs):\n    i,j = a.shape\n    k,l = bs\n    esh = i//k,k,j//l,l\n    bc = esh[::2]\n    sh1,sh2 = np.unravel_index(np.random.permutation(bc[0]*bc[1]),bc)\n    ns1,ns2 = np.unravel_index(np.arange(bc[0]*bc[1]),bc)\n    out = np.empty_like(a)\n    out.reshape(esh)[ns1,:,ns2] = a.reshape(esh)[sh1,:,sh2]\n    return out\n", "pp 0.41529153706505895\ndv 1.3133141631260514\nbr 1.6034217830747366\n", "# Divakar\ndef f_dv(a,bs):\n    M,N = bs\n    m,n = a.shape\n    b = a.reshape(m//M,M,n//N,N).swapaxes(1,2).reshape(-1,M*N)\n    np.random.shuffle(b)\n    return b.reshape(m//M,n//N,M,N).swapaxes(1,2).reshape(a.shape)\n\nfrom skimage.util import view_as_blocks\n\n# Brenlla shape fixed by pp\ndef f_br(arr,bs):\n    m,n = bs\n    a_= view_as_blocks(arr,(m,n))\n    sh = a_.shape\n    a_ = a_.reshape(-1,m,n)\n    # shuffle works along 1st dimension and in-place\n    np.random.shuffle(a_)\n    return a_.reshape(sh).swapaxes(1,2).reshape(arr.shape)\n\nex = np.arange(100000).reshape(1000,100)\nbs = 10,10\ntst = np.tile(np.arange(np.prod(bs)).reshape(bs),np.floor_divide(ex.shape,bs))\n\nfrom timeit import timeit\nfor n,f in list(globals().items()):\n    if n.startswith('f_'):\n        assert (tst==f(tst,bs)).all()\n        print(n[2:],timeit(lambda:f(ex,bs),number=1000))\n"], ["def randomize_tiles_shuffle_within(a, M, N):\n    # M,N are the height and width of the blocks\n    m,n = a.shape\n    b = a.reshape(m//M,M,n//N,N).swapaxes(1,2).reshape(-1,M*N)\n    np.random.shuffle(b.T)\n    return b.reshape(m//M,n//N,M,N).swapaxes(1,2).reshape(a.shape)\n", "def randomize_tiles_shuffle_blocks(a, M, N):    \n    m,n = a.shape\n    b = a.reshape(m//M,M,n//N,N).swapaxes(1,2).reshape(-1,M*N)\n    np.random.shuffle(b)\n    return b.reshape(m//M,n//N,M,N).swapaxes(1,2).reshape(a.shape)\n", "In [47]: a\nOut[47]: \narray([[ 0,  1,  2,  3,  4,  5],\n       [ 6,  7,  8,  9, 10, 11],\n       [12, 13, 14, 15, 16, 17],\n       [18, 19, 20, 21, 22, 23],\n       [24, 25, 26, 27, 28, 29],\n       [30, 31, 32, 33, 34, 35]])\n\nIn [48]: randomize_tiles_shuffle_within(a, 3, 3)\nOut[48]: \narray([[ 1,  7, 13,  4, 10, 16],\n       [14,  8, 12, 17, 11, 15],\n       [ 0,  6,  2,  3,  9,  5],\n       [19, 25, 31, 22, 28, 34],\n       [32, 26, 30, 35, 29, 33],\n       [18, 24, 20, 21, 27, 23]])\n\nIn [49]: randomize_tiles_shuffle_blocks(a, 3, 3)\nOut[49]: \narray([[ 3,  4,  5, 18, 19, 20],\n       [ 9, 10, 11, 24, 25, 26],\n       [15, 16, 17, 30, 31, 32],\n       [ 0,  1,  2, 21, 22, 23],\n       [ 6,  7,  8, 27, 28, 29],\n       [12, 13, 14, 33, 34, 35]])\n"], ["import numpy as np \nnp.random.seed(0)\n\n#creates a 6x6 array\na = np.random.randint(0,100,(6,6))\na\narray([[44, 47, 64, 67, 67,  9],\n       [83, 21, 36, 87, 70, 88],\n       [88, 12, 58, 65, 39, 87],\n       [46, 88, 81, 37, 25, 77],\n       [72,  9, 20, 80, 69, 79],\n       [47, 64, 82, 99, 88, 49]])\n\n#creates a number for each row index, 0,1,2,3,4,5\norder = np.arange(6)\n\n#shuffle index array\nnp.random.shuffle(order)\n\n#make new array in shuffled order\nshuffled = np.array([a[y] for y in order])\nshuffled\narray([[46, 88, 81, 37, 25, 77],\n       [88, 12, 58, 65, 39, 87],\n       [83, 21, 36, 87, 70, 88],\n       [47, 64, 82, 99, 88, 49],\n       [44, 47, 64, 67, 67,  9],\n       [72,  9, 20, 80, 69, 79]])\n"], ["from skimage.util import view_as_blocks\n\ndef shuffle_tiles(arr, m, n):\n    a_= view_as_blocks(arr,(m,n)).reshape(-1,m,n)\n    # shuffle works along 1st dimension and in-place\n    np.random.shuffle(a_)\n    return a_\n"], ["import itertools\n\n(df.groupby('ID').Product.agg(lambda x: list(itertools.combinations(x,2)))\n                 .explode().str.join('-').value_counts())\n\nOut[611]:\nA-B    2\nC-D    1\nA-D    1\nA-C    1\nName: Product, dtype: int64\n", "import itertools\n\n(df.groupby('ID').Product.agg(lambda x: list(map('-'.join, itertools.combinations(x,2))))\n                 .explode().value_counts())\n\nOut[597]:\nA-B    2\nC-D    1\nA-D    1\nA-C    1\nName: Product, dtype: int64\n"], ["import itertools\nfrom collections import Counter\n\nagg_ = lambda x: tuple(itertools.combinations(x, 2))\nproduct = list(itertools.chain(*df.groupby('ID').agg({'Product': lambda x: agg_(sorted(x))}).Product))\n# You actually do not need to wrap product with list. The generator is ok\ncounts = Counter(product)\n", "Counter({('A', 'B'): 2, ('A', 'C'): 1, ('A', 'D'): 1, ('C', 'D'): 1})\n", "pd.DataFrame(list(counts.items()), columns=['combination', 'count'])\n\n  combination  count\n0      (A, B)      2\n1      (A, C)      1\n2      (A, D)      1\n3      (C, D)      1\n"], ["from itertools import combinations\nimport pandas as pd\n\ntest_df = ... # your df\ncounts_df = test_df.groupby('ID')['Product'].agg(lambda x: list(combinations(x, 2)))\\\n    .apply(pd.Series).stack().value_counts().to_frame()\\\n    .reset_index().rename(columns={'index': 'Combination', 0:'Count'})\nprint(counts_df)\n", "  Combination  Count\n0      (A, B)      2\n1      (A, C)      1\n2      (A, D)      1\n3      (C, D)      1\n"], ["from itertools import combinations\n\ndef get_combs(x):\n    return pd.DataFrame({'Combination': list(combinations(x.Product.values, 2))})\n", "(df.groupby('ID').apply(get_combs)\n .reset_index(level=0)\n .groupby('Combination')\n .count()\n)\n", "             ID\nCombination    \n(A, B)        2\n(A, C)        1\n(A, D)        1\n(C, D)        1\n"], ["import pandas as pd\nimport numpy as np\n\ndf1 = df.reset_index()\ndf1 = df1.merge(df1, on='ID').query('index_x > index_y')\n\ndf1 = pd.DataFrame(np.sort(df1[['Product_x', 'Product_y']].to_numpy(), axis=1))\ndf1.groupby([*df1]).size()\n", "0  1\nA  B    2\n   C    1\n   D    1\nC  D    1\ndtype: int64\n"], ["lst = [1, 2, 3]\nlst2 = lst\nlst2.remove(2)\nprint(lst2)\n# [1, 3]\nprint(lst)\n# [1, 3]\n# They're the same object!\n", "lst = [1, 2, 3]\nlst2 = lst.copy()  # or lst2 = lst[:]\nlst2.remove(2)\nprint(lst2)\n# [1, 3]\nprint(lst)\n# [1, 2, 3]\n# Different objects!\n"], [], [], ["from collections import Counter\n\nc = Counter(ranks)\nmodelRanks = list(item for item, count in c.items() if count == 1)\n"], [], ["my_list = [83, 36, 44, 66, 78, 34, 78, 55, 89, 100, 97]\nn = 2\nprint (sorted(my_list)[:len(my_list)-n])\n", "[34, 36, 44, 55, 66, 78, 78, 83, 89]\n", "a[start:stop]  # items start through stop-1\na[start:]      # items start through the rest of the array\na[:stop]       # items from the beginning through stop-1\na[:]           # a copy of the whole array\n", "my_list = [83, 36, 44, 66, 78, 34, 78, 55, 89, 100, 97]\nnew_list = sorted(my_list)\nn = 2\nnew_list = new_list[:len(new_list)-n]\nprint(\"Original list:\")\nprint(my_list)\nprint(\"New list:\")\nprint (new_list)\n", "Original list:\n[83, 36, 44, 66, 78, 34, 78, 55, 89, 100, 97]\nNew list:\n[34, 36, 44, 55, 66, 78, 78, 83, 89]\n", "my_list = [83, 36, 44, 66, 78, 34, 78, 55, 89, 100, 97]\nn = 2\nfor times in range(n):\n    my_list.remove(max(my_list))\nprint(my_list)\n\n\n# Another way of writing the same thing in a more cryptic / minimalistic oneliner\nl = [83, 36, 44, 66, 78, 34, 78, 55, 89, 100, 97]\n[l.remove(max(l)) for _ in range(2)]\n", "[83, 36, 44, 66, 78, 34, 78, 55, 89]\n"], ["df.groupby(['group', 'group_color']).mean().reset_index(level=1)\n\n      group_color      val1      val2\ngroup                                \nA           green  3.333333  4.666667\nB            blue  4.500000  6.000000\n"], ["List = [83, 36, 44, 66, 78, 34, 78, 55, 89, 100, 97]\nnp.array(List)[np.argsort(List)[:-2]]\n", "array([34, 36, 44, 55, 66, 78, 78, 83, 89])\n"], ["df.set_index('a').isna().groupby(level=0).sum()*1\n", "df.set_index('a').isna().groupby(level=0).sum().astype(int)\n", "df.set_index('a').isna().sum(level=0).astype(int)\n", "   b  c\na      \n1  1  1\n2  1  0\n"], ["df.groupby('a')[['b', 'c']].apply(lambda x: x.isna().sum())\n", "   b  c\na      \n1  1  1\n2  1  0\n"], ["df.set_index('a').isna().astype(int).groupby(level=0).sum()\n", "    b   c\na       \n1   1   1\n2   1   0\n"], ["df[df.columns.difference(['a'])].isnull().groupby(df.a).sum().astype(int)\n#   b  c\n#a      \n#1  1  1\n#2  1  0\n"], ["result = df.groupby('a')['b', 'c'].apply(lambda _df: _df.isna().sum())\nresult\n   b  c\na      \n1  1  1\n2  1  0\n"], ["import heapq\n\nlst = [83, 36, 44, 66, 78, 34, 78, 55, 89, 100, 97]\nheapq._heapify_max(lst)  # convert to a heap O(n)\n[heapq._heappop_max(lst) for _ in range(2)]  # pop the k max items O(k*log(n))\n\nprint(lst)\n", "[89, 83, 78, 66, 78, 34, 44, 55, 36]\n"], ["l = [83, 36, 44, 66, 78, 34, 78, 55, 89, 100, 97]\ns = pd.Series(l)\n\ns[s.rank().le(len(l)-2)].values.tolist()\n# [83, 36, 44, 66, 78, 34, 78, 55, 89]\n", "s.drop(s.nlargest(2).index).values.tolist()\n"], ["df.groupby('a').agg(lambda x: x.isna().sum())\n", "     b    c\na          \n1  1.0  1.0\n2  1.0  0.0\n"], ["df.groupby('a').apply(lambda x: x.isna().sum()).drop('a',1)\n", "    b   c\na       \n1   1   1\n2   1   0\n"], ["my_list = [83, 36, 44, 66, 78, 34, 78, 55, 89, 100, 97]\nn = 2\n\nmy_list_sorted = sorted(my_list)\nnth_highest = my_list_sorted[-n]  # Requires n <= len(my_list)\n\nmy_list_filtered = [x for x in my_list if x < nth_highest]\n"], ["df.groupby('a')[['b','c']].count().rsub(df.a.value_counts(dropna=False),axis=0)\nOut[78]: \n   b  c\n1  1  1\n2  1  0\n", "df.isna().drop('a',1).astype(int).groupby(df['a']).sum()\nOut[83]: \n   b  c\na      \n1  1  1\n2  1  0\n"], ["df.groupby('group').agg({**{'group_color': 'first'}, **{c: 'mean' for c in df.columns if c.startswith('val')}})\n"], ["(df.filter(regex=r'^val').groupby(df.group).mean()\n   .assign(color = df.group_color.groupby(df.group).first()))\n\n         val1      val2    color\ngroup                           \nA      3.333333  4.666667  green\nB      4.500000  6.000000   blue\n"], ["df.groupby('group').agg(lambda x : x.head(1) if x.dtype=='object' else x.mean())\nOut[63]: \n      group_color      val1      val2\ngroup                                \nA           green  3.333333  4.666667\nB            blue  4.500000  6.000000\n"], ["df.pivot_table(index=['group','group_color'],aggfunc='mean')\n", "                       val1      val2\ngroup group_color                    \nA     green        3.333333  4.666667\nB     blue         4.500000  6.000000\n", "agg_dict = {f: 'first' if f=='group_color' else 'mean' for f in df.columns[1:]}\ndf.groupby('group').agg(agg_dict)\n", "      group_color      val1      val2\ngroup                                \nA           green  3.333333  4.666667\nB            blue  4.500000  6.000000\n"], [], ["today = date.today()\ndateStr = today.strftime(\"%d%m%Y\")\nfile = open(\"config_\" + today + \"_\" + choosen_asn + \".txt\",\"w+\", encoding='utf-8')\n"], ["from datetime import datetime\ntoday = datetime.today().strftime('%d%m%Y')\nprint(today)\n", "18092019\n"], ["from datetime import date\n\nchoosen_asn='123456'\n\ntoday = date.today()\nfile = open(\"config_\" + str(today) + \"_\" + choosen_asn + \".txt\",\"w+\", encoding='utf-8')\n"], ["today_as_string = str(date.today())\n", "type(today)\ntype(today_as_string)\n"], ["from datetime import datetime\ntoday = str(datetime.today().date())\n"], ["mixed_list = [a, *it, b]\n", "mixed_list = [a]\nmixed_list.extend(it)\nmixed_list.append(b)\n", "mixed_list = [*it1, *it2, a, b, ... ]\n", "first, *rest = it\n", "_, *mid, last = it\n", "it = (0, range(5), 3)\na1, (*a2,), a3 = it          # Unpack the second element of it into a list a2\ne1, (first, *rest), e3 = it  # Separate the first element from the rest while unpacking it[1]\n", "from itertools import groupby\n\ns = \"Axyz123Bcba345D\"\nfor k, (first, *rest) in groupby(s, key=str.isalpha):\n    ...\n"], ["def tuple_pop(t: tuple, idx: int) -> tuple:\n    return (*t[:idx], *t[idx+1:])\n\nprint(tuple_pop((0,1, 2), 0))  # outputs (1, 2)\nprint(tuple_pop((0,1, 2), 1))  # outputs (0, 2)\nprint(tuple_pop((0,1, 2), 2))  # outputs (0, 1)\n"], ["*my_list, = my_iterator\n", "[*my_list] = my_iterator\n"], [], ["import os\ndirectory = 'C:\\\\my_path\\\\'\n\nsecondLines = []\n\nfor filename in os.listdir(directory):\n    try:\n        #Use open() because it is optimized and does not read the whole file into RAM\n        with open(directory + \"\\\\\" + filename) as infile:\n            for lineIndex, line in enumerate(infile):\n                if lineIndex == 1:\n                    secondLines.append(line)\n    except:\n        print(filename + ' is throwing an error')\n\nprint(secondLines) \n", "import os\ndirectory = 'C:\\\\my_path\\\\'\ni=0\nlist2 = []\nfor filename in os.listdir(directory):\n    #add \"\\\\\" to read the correct file\n    with open(directory + \"\\\\\" + filename) as infile:\n        try:\n            print(filename)\n            i=i+1\n            print(i)\n            data = infile.readlines()  \n            #To get the second line, you have to use indexes\n            for line in range(len(data)):\n                #if line (index) equals 1, it is the second line (0th element is first)\n                if (line == 1):\n                    #If the index of the line is 1, append it to the list\n                    #data[line] = take the element on index 1 from list data. Indexing starts at 0\n                    list2.append(data[line])\n                    infile.close()\n        except:\n            print(filename + ' is throwing an error')\nprint('DONE!!')\nprint(list2)\n"], [], ["import os\n\ndirectory = 'C:\\\\my_path\\\\'\nlist2 = []\nfor filename in os.listdir(directory):\n    with open(directory + filename) as infile:\n        try:\n            print(filename)\n            next(infile)\n            list2.append(next(infile))\n        except:\n            print(filename + ' is throwing an error')\nprint('DONE!!!')\nprint(list2)\n"], [], ["def main(n, a=1):\n  if n<=1:\n    return [a]\n  else:\n    return [a, *main(n-1, 2*a+1)]\n\nprint(main(10))\n# [ 1, 3, 7, 15, 31, 63, 127, 511, 1023 ]\n\nprint(main(1))\n# [1]\n"], ["def list_h_results(n):\n    h_results = []\n    for i in range(1, n+1):\n        h_results.append(2 * h_results[-1] + 1)\n    return h_results\n"], ["def H(n):\n    if n == 1:\n        return 1\n    else:\n        return 2*H(n-1)+1\n", "def H_with_list(n, list_final):\n    if n == 1:\n        list_final.append(1)\n        return list_final\n    else:\n        list_temp = H_with_list(n-1, list_final)\n        list_final.append(2*list_temp[-1]+1)\n        return list_final\n"], ["# h(n) = 2 * h(n - 1) + 1\n# h(1) = 1\n\ndef get_h_series(n):\n    if n == 1:\n        # h(1) = 1\n        return [1]\n    else:\n        # ans = [h(0), h(1), ..., h(n - 1)]\n        ans = get_h_series(n-1)\n        # Append h(n) which is 2 * h(n - 1) + 1.\n        ans.append(2 * ans[-1] + 1)\n        # [h(0), h(1), ..., h(n - 1), h(n)]\n        return ans\n\nprint(get_h_series(5))\n", "[1, 3, 7, 15, 31]\n"], ["df.loc[df.WT.isin([0,99,999,9999]), 'Comment'] = 'Fail'\ndf.Comment.fillna(' ', inplace=True)\n\n\n  Tel          MC    WT Comment\n0  AAA      Rubber  9999    Fail\n1  BBB        Tree     0    Fail\n2  CCC         Rub    12        \n3  AAA       Other    20        \n4  BBB        Same   999    Fail\n5  DDD  Other-Same    70        \n", "import numpy as np\n\ndf['comment'] = np.where(np.in1d(df.WT.values, [0,99,999,9999]), 'Fail', '')\n"], ["df['Comment'] = ['Fail' if x in [0, 999, 9999, 99999] else '' for x in df['WT']]\n\n   Tel          MC    WT Comment\n0  AAA      Rubber  9999    Fail\n1  BBB        Tree     0    Fail\n2  CCC         Rub    12        \n3  AAA       Other    20        \n4  BBB        Same   999    Fail\n5  DDD  Other-Same    70        \n", "dfbig = pd.concat([df]*1000000, ignore_index=True)\n\nprint(dfbig.shape)\n(6000000, 3)\n"], ["df[\"Comment\"] = np.where((df[\"WT\"] == 0) | (df[\"WT\"] == 999) | (df[\"WT\"] == 9999) | (df[\"WT\"] == 99999), \"Fail\", \"\")\n"], ["df['Comment'] = df['WT'].apply(lambda x: 'Fail' if x in [0, 999, 9999, 99999] else ' ')\n", "  Tel          MC    WT Comment\n0  AAA      Rubber  9999    Fail\n1  BBB        Tree     0    Fail\n2  CCC         Rub    12        \n3  AAA       Other    20        \n4  BBB        Same   999    Fail\n5  DDD  Other-Same    70        \n"], ["df.loc[df['WT'].isin([0, 999,9999,99999]),'Comment'] = 'Fail'\nprint (df)\n   Tel          MC    WT Comment\n0  AAA      Rubber  9999    Fail\n1  BBB        Tree     0    Fail\n2  CCC         Rub    12     NaN\n3  AAA       Other    20     NaN\n4  BBB        Same   999    Fail\n5  DDD  Other-Same    70     NaN\n", "df['Comment'] = np.where(df['WT'].isin([0, 999,9999,99999]), 'Fail', '')\nprint (df)\n   Tel          MC    WT Comment\n0  AAA      Rubber  9999    Fail\n1  BBB        Tree     0    Fail\n2  CCC         Rub    12        \n3  AAA       Other    20        \n4  BBB        Same   999    Fail\n5  DDD  Other-Same    70        \n"], [], ["DAYS = 7\nbugs = [int(input('enter the amount of bugs collected today:')) \n        for _ in range(DAYS)]\naverage = sum(bugs) / DAYS\nprint('average amount of bugs collected in a week is:', average)\n"], [], ["weekly_bugs = [12, 42, 52, 52, 23, 75, 34]\n", "avg_bug = sum(weekly_bugs)/7\n", "sum_bugs = 0\nwhile(weekly_bugs):\n    sum_bugs += weekly_bugs.pop()\n\nsum_bugs/len(weekly_bugs)\n"], ["bugs = int(input('enter the amount of bugs collected today:')) + bugs\n", "i = 1\nbugs = 0\n\nwhile i < 8:\n\n    bugs = int(input('enter the amount of bugs collected today:')) + bugs\n\n    average = bugs / 7\n\n    i+=1\n\nprint('average amount of bugs collected in a week is:', average)\n"], [], ["f = open(text_database, \"r\")\n\nlist = []\n\nfor i in f:\n    list.append(i)\n\nelif command == '/random':\n\n    random.shuffle(list)\n\n    for i in list:\n\n        print(i)\n"], ["from random import sample\n\nfile_name = \"text_database.txt\"\nlines = open(file_name, \"r\").read().splitlines()\n\nfor line in sample(lines, k=len(lines)):\n    print(line)\n", "lines = [line.rstrip(\"\\n\") for line in open(file_name, \"r\")]\n", "def main():\n\n    from random import shuffle\n\n    file_name = \"text_database.txt\"\n    lines = open(file_name, \"r\").read().splitlines()\n    shuffle(lines)\n\n    sentinel = object()\n\n    def command_random():\n        try:\n            line = lines.pop()\n        except IndexError:\n            print(\"There are no more lines in the file!\")\n        else:\n            print(line)\n\n    def command_quit():\n        nonlocal sentinel\n        sentinel = None\n\n    commands = {\n        \"random\": command_random,\n        \"quit\": command_quit\n    }\n\n    while sentinel is not None:\n        user_input = input(\"Please enter a command: \")\n        command = commands.get(user_input)\n        if command is None:\n            continue\n        command()\n\n    return 0\n\n\nif __name__ == \"__main__\":\n    import sys\n    sys.exit(main())\n"], [], ["\nf = open(text_database, \"r\")\n\nlist = []\nlist_of_nums = []\n\nfor i in f:\n    list.append(i)\n\nelif command == '/random':\n\n    randomNum = random.randint(0, len(list) - 1)\n\n    def reRun():\n        global randomNum\n        for i in list_of_nums:\n\n            if randomNum == i:\n                randomNum = random.randint(0, len(list) - 1)\n                reRun()\n\n\n    reRun()\n    list_of_nums.append(randomNum)\n\n    print(list[randomNum])\n\n"], ["import random\ntext_database = './text_database.txt'\nlines_list = []\nwith open (text_database) as f:\n    lines = f.readlines()\n    lines_list.append(lines)\nfor item in lines_list:\n    rand_item = item[random.randrange(len(item))]\nprint(rand_item)\n"], ["elif command == '/random':\n    with open (text_database) as f:\n        lines = f.readlines()\n\n    while len(lines)>0:\n        max_int = len(lines)-1 #update the len each loop as we remove one each time\n        print(lines.pop(random.randint(0, max_int))) #pop a random value from the list\n"], [], ["from operator import itemgetter\nfrom itertools import chain \n\nwinning_cases = {'diags' : [[0, 4, 8], [2, 4, 6]],\n                 'rows': [[0, 1, 2], [3, 4, 5], [6, 7, 8]],\n                 'cols': [[0, 3, 6], [1, 4, 7], [2, 5, 8]]}\n\n\ndef check_winner(board=board):\n    for case in chain(*winning_cases.values()):\n        candidates = set(itemgetter(*case)(board))\n        if len(candidates) == 1 and '' not in candidates: # check if a diag, row or col has only one charcter\n            winner, = candidates\n            return winner\n\n\n    return None \n", "board = ['X', 'X', 'O', 'X', 'O','O', 'X', 'O', 'X']\ncheck_winner(board)\n", " X\n"], ["board = [' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ']\n\n\ndef show_board():# for showing the tic-tac-toe board\n    print(' | ' + str(board[0]) + ' | ' +\n          str(board[1]) + ' | ' + str(board[2]) + ' | ')\n    print(' | ' + str(board[3]) + ' | ' +\n          str(board[4]) + ' | ' + str(board[5]) + ' | ')\n    print(' | ' + str(board[6]) + ' | ' +\n          str(board[7]) + ' | ' + str(board[8]) + ' | ')\n\n\ndef main():\n    one = 1\n    flag = 1\n\n    show_board()\n    while one == 1:\n        if flag == 1:\n            x_o = 'X'\n        if flag == 2:\n            x_o = 'O'\n        pos = int(input('Player \"' + x_o + '\" Turn: '))\n\n        if x_o == 'o':\n            x_o = 'O'\n        if x_o == 'x':\n            x_o = 'X'\n        if board[pos - 1] == 'O' or board[pos - 1] == 'O':\n            print('That Place Is Already Filled By Player \"0\"')\n\n        if board[pos - 1] == 'X' or board[pos - 1] == 'X':\n            print('That Place Is Already Filled By Player \"X\"')\n\n        else:\n            try:\n                board[pos - 1] = x_o\n            except IndexError:\n                print('Type Numbers Between Only 1 And 9')\n\n            if flag == 1:\n                flag = 2\n            elif flag == 2:\n                flag = 1\n\n            show_board()\n\n            # Checking The Winner Of The Game\n            won = False\n            for turn in ('X', 'O'):\n                # horizontal\n                if not won:\n                    for i in (0, 3, 6):\n                        if all(board[i + k] == turn for k in range(3)):\n                            won = True\n                            break\n                # vertical\n                if not won:       \n                    for i in range(3):\n                        if all(board[i + k] == turn for k in (0, 3, 6)):\n                            won = True\n                            break\n                # diagonal\n                if not won:\n                    if all(board[k] == turn for k in (0, 4, 8)) or \\\n                            all(board[k] == turn for k in (2, 4, 6)):\n                        won = True\n                # handle winning\n                if won:\n                    one = 2\n                    print(f'The Winner Is Player \"{turn}\"!')\n                    break\n            # handle a tie\n            if not won and all(square != ' ' for square in board):\n                one = 2\n                print('The Match Is A Tie!')\n\n\nmain()\n", "NUM_ROWS = 3\nNUM_COLS = 3\nNUM_WIN = 3\nBOARD_SIZE = NUM_ROWS * NUM_COLS\n\nEMPTY = ' '\nBOARD = [EMPTY] * BOARD_SIZE\nTURNS = 'X', 'O'\n\n\ndef show_board(board):\n    \"\"\"Show the tic-tac-toe board.\"\"\"\n    for i in range(0, BOARD_SIZE, NUM_COLS):\n        print(' | ' + ' | '.join(board[i:i + NUM_COLS]) + ' | ')\n\n\ndef ij(i, j):\n    \"\"\"Convert (row, col) to board index.\"\"\"\n    return i + NUM_COLS * j\n\n\ndef check_winner(board, turn):\n    \"\"\"Check if there is a winner.\"\"\"\n    # horizontal\n    for i in range(NUM_ROWS):\n        for j in range(NUM_COLS - NUM_WIN + 1):\n            if all(board[ij(i, j + k)] == turn for k in range(NUM_WIN)):\n                return True\n    # vertical\n    for i in range(NUM_ROWS - NUM_WIN + 1):\n        for j in range(NUM_COLS):\n            if all(board[ij(i + k, j)] == turn for k in range(NUM_WIN)):\n                return True\n    # diagonal\n    for i in range(NUM_ROWS - NUM_WIN + 1):\n        for j in range(NUM_COLS - NUM_WIN + 1):\n            K = NUM_WIN\n            if all(board[ij(i + k, j + k)] == turn for k in range(NUM_WIN)):\n                return True\n            if all(board[ij(i + NUM_WIN - k - 1, j + k)] == turn\n                   for k in range(NUM_WIN)):\n                return True\n\n\ndef check_tie(board):\n    \"\"\"Check if tie.\"\"\"\n    return all(square != EMPTY for square in board)\n\n\ndef next_turn(turn):\n    \"\"\"Advance to next turn.\"\"\"\n    return TURNS[(TURNS.index(turn) + 1) % 2]\n\n\ndef main():\n    \"\"\"Tic-tac-toe game.\"\"\"\n    turn = TURNS[0]\n    show_board(BOARD)\n    while True:\n        valid_input = False\n        while not valid_input:\n            try:\n                choice = int(input(f'Player `{turn}` turn: '))\n                valid_input = (1 <= choice <= BOARD_SIZE)\n                if not valid_input:\n                    raise ValueError\n            except ValueError:\n                print(f'Type numbers between 1 and {BOARD_SIZE} only.')\n            else:\n                idx = choice - 1\n                if BOARD[idx] != EMPTY:\n                    print(f'Position `{idx}` already taken by `{BOARD[idx]}`')\n                else:\n                    BOARD[idx] = turn\n\n        show_board(BOARD)\n        won = check_winner(BOARD, turn)\n        if won:\n            print(f'The winner is player `{turn}`!')\n            break\n        # handle a tie\n        if not won and check_tie(BOARD):\n            print('The match is a tie!')\n            break\n        turn = next_turn(turn)\n\n\nif __name__ == '__main__':\n    main()\n", "WIN_CASES = [\n    [0, 1, 2], [3, 4, 5], [6, 7, 8],  # horizontal\n    [0, 3, 6], [1, 4, 7], [2, 5, 8],  # vertical\n    [0, 4, 8], [2, 4, 6],  # diagonal\n]\n\n\ndef check_winner(board, turn, win_cases=WIN_CASES):\n    \"\"\"Check if there is a winner.\"\"\"\n    for win_case in win_cases:\n        if all(board[i] == turn for i in win_case):\n            return True\n"], ["def isWinner(board, letter):\n    return (\n        (board[1] == board[2] ==  board[3] == letter) or\n        (board[4] == board[5] ==  board[6] == letter) or\n        (board[7] == board[8] ==  board[9] == letter) or\n        (board[7] == board[4] ==  board[1] == letter) or\n        (board[8] == board[5] ==  board[2] == letter) or\n        (board[9] == board[6] ==  board[3] == letter) or\n        (board[7] == board[5] ==  board[3] == letter) or\n        (board[9] == board[5] ==  board[1] == letter))\n"], ["#l = board\nif(l[0:3] == o_list or l[3:6] == o_list or l[6:9] == o_list or l[0:9:3] == o_list or l[1:9:3] == o_list or l[8:0:-3] == o_list):\n   print('The Winner Is Player \"O\"!')\n", "o_list =['o', 'o', 'o']\nx_list =['x', 'x', 'x']\n\nboard = [' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ']\n\n\ndef show_board():# for showing the tic-tac-toe board\n    print(' | ' + str(board[0]) + ' | ' +\n          str(board[1]) + ' | ' + str(board[2]) + ' | ')\n    print(' | ' + str(board[3]) + ' | ' +\n          str(board[4]) + ' | ' + str(board[5]) + ' | ')\n    print(' | ' + str(board[6]) + ' | ' +\n          str(board[7]) + ' | ' + str(board[8]) + ' | ')\n\n\ndef main():\n    one = 1\n    flag = 1\n    o_list =['o', 'o', 'o']\n    x_list =['x', 'x', 'x']\n    show_board()\n    while one == 1:\n        if flag == 1:\n            x_o = 'X'\n        if flag == 2:\n            x_o = 'O'\n        pos = int(input('Player \"' + x_o + '\" Turn: '))\n\n        if x_o == 'o':\n            x_o = 'O'\n        if x_o == 'x':\n            x_o = 'X'\n        if board[pos - 1] == 'O' or board[pos - 1] == 'O':\n            print('That Place Is Already Filled By Player \"0\"')\n\n        if board[pos - 1] == 'X' or board[pos - 1] == 'X':\n            print('That Place Is Already Filled By Player \"X\"')\n\n        else:\n            try:\n                board[pos - 1] = x_o\n            except IndexError:\n                print('Type Numbers Between Only 1 And 9')\n\n            if flag == 1:\n                flag = 2\n            elif flag == 2:\n                flag = 1\n\n            show_board()\n\n            # Checking The Winner Of The Game\n\n            # for horizontal X\n            if(board[0:3] == x_list or board[3:6] == x_list or board[6:9] == x_list or board[0:9:3] == x_list or board[1:9:3] == x_list or board[8:0:-3] == x_list):\n                one = 2\n                print('The Winner Is Player \"X\"!')\n\n            if(board[0:3] == o_list or board[3:6] == o_list or board[6:9] == o_list or board[0:9:3] == o_list or board[1:9:3] == o_list or board[8:0:-3] == o_list):\n                one = 2\n                print('The Winner Is Player \"O\"!')\n\n            elif board[0] != ' ' and board[1] != ' ' and board[2] != ' ' and board[3] != ' ' and board[4] != ' ' and board[5] != ' ' and board[6] != ' ' and board[7] != ' ' and board[8] != ' ':\n                print('The Match Is A Tie!')\n                one = 2\n\n\nmain()\n"], [], ["while True:\n    for k, v in vavs.items():\n        print(\"{} {} {}\".format(k, v['network'], v['obj']))\n"], ["In [155]: import pandas as pd\n\nIn [156]: vavs = {'vav_1': {'network': '10:44', 'obj': '91044'},^M\n     ...:         'vav_2': {'network': '10:45', 'obj': '91045'},^M\n     ...:         'vav_3': {'network': '10:46', 'obj': '91046'},^M\n     ...:         'vav_4': {'network': '10:47', 'obj': '91047'},^M\n     ...:         'vav_5': {'network': '10:48', 'obj': '91048'},^M\n     ...:         'vav_6': {'network': '10:49', 'obj': '91049'},^M\n     ...:         'vav_7': {'network': '10:50', 'obj': '91050'}}\n\nIn [157]: vdf = pd.DataFrame(vavs)\n\nIn [158]: vdf\nOut[158]:\n         vav_1  vav_2  vav_3  vav_4  vav_5  vav_6  vav_7\nnetwork  10:44  10:45  10:46  10:47  10:48  10:49  10:50\nobj      91044  91045  91046  91047  91048  91049  91050\n\nIn [168]: x=0\n\nIn [169]: while x<1:\n     ...:     for c in vdf.columns:\n     ...:         print c, vdf.loc['network'][c], vdf.loc['obj'][c]\n     ...:     x +=1\n     ...:\nvav_1 10:44 91044\nvav_2 10:45 91045\nvav_3 10:46 91046\nvav_4 10:47 91047\nvav_5 10:48 91048\nvav_6 10:49 91049\nvav_7 10:50 91050\n"], ["for k, v in vavs.items():\n    print(v['network'], v['obj'])\n"], ["for key, vav in vavs.items():\n    network = vav['network']\n    # do a thing with network, I guess?\n    obj = vav['obj']\n    # do a thing with obj, I guess?\n"], ["for k, v in vavs.items():\n    print(k, v['network'], v['obj'])\n", "values = [x.values() for x in vavs.values()]\n"], ["def str_replace(df, s, short, col, term): \n    df.loc[s.str.contains('|'.join([short])), col] = term\n    return df \n", "df = [str_replace( df, s, sh, col, t) for sh,t in zip(shrt,trm)]\n", "import pandas as pd\ndf = pd.DataFrame({'naics':['311', '311919', '3159', '331', '332', '332913']})\n\ndef str_replace2(df, s, col, term): \n    df.loc[s.astype(str).str[:2] == term, col] = term\n    return df\n\ndf = str_replace2(df, df.naics, 'naics', '31')\n"], [], ["pops = input(\"Enter your favorite pop: \")\ncost = input(\"Enter how much they cost: \")\nhow_many = input(\"Enter how many pops you have: \")\n\nprint('My favorite pop is ' + pops + '!')\nprint('They cost about ' + cost + ' dollars.')\nprint('I have about ' + how_many + ' pops!')\n\nresult = float(cost) * int(how_many)\n\nprint(\"You have spent over \" + str(result) + \" dollars on pops!\")\n"], ["result = float(cost) * int(how_many)\n", "print(\"You have spent over \" + str(result) + \" dollars on pops!\")\n", "print(\"You have spent over\", result, \"dollars on pops!\")\n", "print(\"You have spent over {} dollars on pops!\".format(result))\n"], ["pops = input(\"Enter your favorite pop: \")\ncost = input(\"Enter how much they cost: \")\nhow_many = input(\"Enter how many pops you have: \")\n\nprint('My favorite pop is ' + pops + '!')\nprint('They cost about ' + cost + ' dollars.')\nprint('I have about ' + how_many + ' pops!')\n\nresult = cost * how_many \n\nprint(\"You have spent over \" + result + \" dollars on pops!\"\n"], [], [], ["result = float(cost) * int(how_many)\n", "a = \"b\"\nfloat(a)\n", "ValueError: could not convert string to float: 'b'\n"], ["from itertools import product, permutations\n\nfirst_tuple, second_tuple = (1, 2), (4, 5)\n\nresult = ()\n\nfor tup in product(first_tuple, second_tuple):\n    result += (*permutations(tup),)\n\nprint(result)\n", "((1, 4), (4, 1), (1, 5), (5, 1), (2, 4), (4, 2), (2, 5), (5, 2))\n"], ["inp_str = u'\\xd7\\nRecord has been added successfully, record id: 92'\nprint inp_str.encode('ascii',errors='ignore').strip('\\n')\n\nResults :  'Record has been added successfully, record id: 92'\n"], [], ["import re\ntext = u'\\xd7\\nRecord has been added successfully, record id: 92'\nresult = re.sub('[^A-Za-z0-9]+', ' ', text)\n\nprint(result)\n"], ["string = '\\xd7\\nRecord has been added successfully, record id: 92'\ntext = string[2:]\n"], ["import re\ntext = u'\\xd7\\nRecord has been added successfully, record id: 92'\nres = re.sub('[^A-Za-z0-9]+', ' ', text).strip()\n", "'Record has been added successfully record id 92'\n"], ["text=u'\\xd7\\nRecord has been added successfully, record id: 92'\nbad_chars = ['\\xd7', '\\n', '\\x99m', \"\\xf0\"] \nfor i in bad_chars : \n    text = text.replace(i, '') \ntext\n"], ["def loopy(series):\n    return pd.Series(\n        (\n            el.zfill(9) if len(el) < 9 else el.zfill(20)\n            for el in series\n        ),\n        name=series.name,\n    )\n\n# to compare more fairly with the apply version\ndef cache_loopy(series, _len=len, _zfill=str.zfill):\n    return pd.Series(\n      (_zfill(el, 9 if _len(el) < 9 else 20) for el in series), name=series.name)\n", "def loopy(series):\n    series.copy()    # not necessary but just to make timings fair\n    return pd.Series(\n        (\n            el.zfill(9) if len(el) < 9 else el.zfill(20)\n            for el in series\n        ),\n        name=series.name,\n    )\n\ndef str_accessor(series):\n    target = series.copy()\n    mask = series.str.len() < 9\n    unmask = ~mask\n    target[mask] = target[mask].str.zfill(9)\n    target[unmask] = target[unmask].str.zfill(20)\n    return target\n\ndef np_where_str_accessor(series):\n    target = series.copy()\n    return np.where(target.str.len()<9,target.str.zfill(9),target.str.zfill(20))\n\ndef fill_zeros(x, _len=len, _zfill=str.zfill):\n    # len() and str.zfill() are cached as parameters for performance\n    return _zfill(x, 9 if _len(x) < 9 else 20)\n\ndef apply_fill(series):\n    series = series.copy()\n    return series.apply(fill_zeros)\n\ndef cache_loopy(series, _len=len, _zfill=str.zfill):\n    series.copy()\n    return pd.Series(\n      (_zfill(el, 9 if _len(el) < 9 else 20) for el in series), name=series.name)\n", "import pandas as pd\nimport numpy as np\nfrom random import choices, randrange\nfrom simple_benchmark import benchmark\n\ndef randvalue(chars=\"0123456789\", _c=choices, _r=randrange):\n    return \"\".join(_c(chars, k=randrange(5, 30))).lstrip(\"0\")\n\nfns = [loopy, str_accessor, np_where_str_accessor, apply_fill, cache_loopy]\nargs = { 2**i: pd.Series([randvalue() for _ in range(2**i)]) for i in range(14, 21)}\n\nb = benchmark(fns, args, 'Series Length')\n\nb.plot()\n"], ["# select the right rows to avoid wasting time operating on longer strings\nshorter = df.Random.str.len() < 9\nlonger = ~shorter\ndf.Random[shorter] = df.Random[shorter].str.zfill(9)\ndf.Random[longer] = df.Random[longer].str.zfill(20)\n"], ["df.Random.str.zfill(9).where(df.Random.str.len() < 9, df.Random.str.zfill(20))\n"], [], ["df.Random=np.where(df.Random.str.len()<9,df.Random.str.zfill(9),df.Random.str.zfill(20))\ndf\nOut[9]: \n                 Random\n0             000000086\n1  00000000007639103627\n2             000000096\n3             000000032\n4  00000000001469476501\n"], ["import re\n\nlist1 = ['bj-100-cy', 'bj-101-hd', 'sh-200-pd', 'sh-201-hp']\nlist2 = [100, 200]\n\npattern = re.compile('|'.join(map(str, list2)))\nlist(filter(pattern.search, list1))\n# ['bj-100-cy', 'sh-200-pd']\n"], [], ["if Checkdiv(n,d):\n", "boolean, r = Checkdiv(n,d)\n# now you can test and use the return value,\n"], [], [], [], ["#!/usr/bin/env python3\ndef Checkdiv(n, d):\n    r =int(n % d)\n    if r==0:\n        return (True,r)\n    else:\n        return (False,r)\nn= int(input('Please enter the number to evaluate:'))\nd= int(input('Please enter the divisor: '))\n\nbool, num = Checkdiv(n,d)\n\nif bool is True :\n    print(f'{n} can be divided by {d} since the end remainder is {num}')\nelse: \n    print (f'{n} cannot be divided by {d} since remainder is {num}')\n"], ["print(f'{n} can be divided by {d} since the end remainder is {r}')\n"], ["[item for sublist in [[(i,j),(j,i)] for i in first_tuple for j in second_tuple] for item in sublist]\n\n[(1, 4), (4, 1), (1, 5), (5, 1), (2, 4), (4, 2), (2, 5), (5, 2)]\n"], ["def binary_repr_ar(A, W):\n    p = (((A[:,None] & (1 << np.arange(W-1,-1,-1)))!=0)).view('u1')\n    return p.astype('S1').view('S'+str(W)).ravel()\n", "In [67]: A\nOut[67]: array([1, 2, 3, 4, 5, 6, 7, 8, 9])\n\nIn [68]: binary_repr_ar(A,32)\nOut[68]: \narray(['00000000000000000000000000000001',\n       '00000000000000000000000000000010',\n       '00000000000000000000000000000011',\n       '00000000000000000000000000000100',\n       '00000000000000000000000000000101',\n       '00000000000000000000000000000110',\n       '00000000000000000000000000000111',\n       '00000000000000000000000000001000',\n       '00000000000000000000000000001001'], dtype='|S32')\n", "def binary_repr_ar_v2(A, W):\n    mask = (((A[:,None] & (1 << np.arange(W-1,-1,-1)))!=0))\n    out = np.full((len(A),W),48, dtype=np.uint8)\n    out[mask] = 49\n    return out.view('S'+str(W)).ravel()\n", "def binary_repr_ar_v3(A, W):\n    mask = (((A[:,None] & (1 << np.arange(W-1,-1,-1)))!=0))\n    return (mask+np.array([48],dtype=np.uint8)).view('S'+str(W)).ravel()\n", "In [49]: np.random.seed(0)\n    ...: A = np.random.randint(1,1000,(100000))\n    ...: W = 32\n\nIn [50]: %timeit binary_repr_ar(A, W)\n    ...: %timeit binary_repr_ar_v2(A, W)\n    ...: %timeit binary_repr_ar_v3(A, W)\n1 loop, best of 3: 854 ms per loop\n100 loops, best of 3: 14.5 ms per loop\n100 loops, best of 3: 7.33 ms per loop\n", "In [22]: %timeit [np.binary_repr(i, width=32) for i in A]\n10 loops, best of 3: 97.2 ms per loop\n\nIn [23]: %timeit np.frompyfunc(np.binary_repr,2,1)(A,32).astype('U32')\n10 loops, best of 3: 80 ms per loop\n\nIn [24]: %timeit np.vectorize(np.binary_repr)(A, 32)\n10 loops, best of 3: 69.8 ms per loop\n"], ["(np.unpackbits(lis.astype('>u4').view(np.uint8))+ord('0')).view('S32')\n# array([b'00000000000000000000000000000001',\n#        b'00000000000000000000000000000010',\n#        b'00000000000000000000000000000011',\n#        b'00000000000000000000000000000100',\n#        b'00000000000000000000000000000101',\n#        b'00000000000000000000000000000110',\n#        b'00000000000000000000000000000111',\n#        b'00000000000000000000000000001000',\n#        b'00000000000000000000000000001001'], dtype='|S32')\n", "def bin_rep(A,n):\n    if n in (8,16,32,64):\n        return (np.unpackbits(A.astype(f'>u{n>>3}').view(np.uint8))+ord('0')).view(f'S{n}')\n    nb = max((n-1).bit_length()-3,0)\n    return (np.unpackbits(A.astype(f'>u{1<<nb}')[...,None].view(np.uint8),axis=1)[...,-n:]+ord('0')).ravel().view(f'S{n}')\n"], ["def replace_nth(list_of_lists, n, value):\n    for sublist in list_of_lists:\n        for i, v in enumerate(sublist):\n            if not i % n:\n                sublist[i] = value\n\na = [[1,2,3,4,5,6],\n     [7,8,9,10,11,12],\n     [13,14,15,16,17,18]]\n\nreplace_nth(a, 3, 0)\nprint(a)  # -> [[0, 2, 3, 0, 5, 6], [0, 8, 9, 0, 11, 12], [0, 14, 15, 0, 17, 18]]\n"], ["a = [[0 if index==0 else j for index, j in enumerate(i)] for i in a]\n\n>>> a = [[1,2,3,4,5,6], [7,8,9,10,11,12], [13,14,15,16,17,18]]\n>>> a = [[0 if index==0 else j for index, j in enumerate(i)] for i in a]\n>>> a\n[[0, 2, 3, 4, 5, 6], [0, 8, 9, 10, 11, 12], [0, 14, 15, 16, 17, 18]]\n"], ["[item for item in l]\n\n[[1, 2, 3, 4, 5, 6], [7, 8, 9, 10, 11, 12], [13, 14, 15, 16, 17, 18]]\n", "[[(i,n) for i,n in enumerate(item)] for item in l]\n\n[[(0, 1), (1, 2), (2, 3), (3, 4), (4, 5), (5, 6)],\n [(0, 7), (1, 8), (2, 9), (3, 10), (4, 11), (5, 12)],\n [(0, 13), (1, 14), (2, 15), (3, 16), (4, 17), (5, 18)]]\n", "[[n if i%3 else 0 for i,n in enumerate(item)] for item in l]\n\n[[0, 2, 3, 0, 5, 6], [0, 8, 9, 0, 11, 12], [0, 14, 15, 0, 17, 18]]\n"], [], ["n = 3\nresult = [[x if i % n else 0 for i, x in enumerate(y)] for y in a]\n", ">>> a = [[1,2,3,4,5,6],[7,8,9,10,11,12],[13,14,15,16,17,18]]\n>>> n = 3\n>>> [[x if i % n else 0 for i, x in enumerate(y)] for y in a]\n[[0, 2, 3, 0, 5, 6], [0, 8, 9, 0, 11, 12], [0, 14, 15, 0, 17, 18]]\n"], ["a = [[1,2,3,4,5,6],\n [7,8,9,10,11,12],\n [13,14,15,16,17,18]]\n\nn=3\nfor out in range(0,len(a)):\n    for i in range(0,len(a[out])):\n        if i == n:\n            a[out][i] = 0\n\nprint(a)\n"], ["In [193]: alist = [1,2,3,4,5,6,7,8,9]                                                                        \n"], ["np.vectorize(np.binary_repr)(lis, 32)\n", ">>> np.vectorize(np.binary_repr)(lis, 32)\narray(['00000000000000000000000000000001',\n       '00000000000000000000000000000010',\n       '00000000000000000000000000000011',\n       '00000000000000000000000000000100',\n       '00000000000000000000000000000101',\n       '00000000000000000000000000000110',\n       '00000000000000000000000000000111',\n       '00000000000000000000000000001000',\n       '00000000000000000000000000001001'], dtype='<U32')\n", "binary_repr_vector = np.vectorize(np.binary_repr)\nbinary_repr_vector(lis, 32)\n", ">>> binary_repr_vector = np.vectorize(np.binary_repr)\n>>> binary_repr_vector(lis, 32)\narray(['00000000000000000000000000000001',\n       '00000000000000000000000000000010',\n       '00000000000000000000000000000011',\n       '00000000000000000000000000000100',\n       '00000000000000000000000000000101',\n       '00000000000000000000000000000110',\n       '00000000000000000000000000000111',\n       '00000000000000000000000000001000',\n       '00000000000000000000000000001001'], dtype='<U32')\n"], [">>> lis=np.array([1,2,3,4,5,6,7,8,9])\n>>> a=np.binary_repr(lis,width=32)\n>>> binary_repr_vec = np.vectorize(np.binary_repr)\n>>> binary_repr_vec(lis, width=32)\narray(['00000000000000000000000000000001',\n       '00000000000000000000000000000010',\n       '00000000000000000000000000000011',\n       '00000000000000000000000000000100',\n       '00000000000000000000000000000101',\n       '00000000000000000000000000000110',\n       '00000000000000000000000000000111',\n       '00000000000000000000000000001000',\n       '00000000000000000000000000001001'], dtype='<U32')\n"], ["l=[df1['Column_C'].unique()[0],df2['Column_C'].unique()[0]]\n", "df3 = df[~df.Column_C.isin(l)]\n"], ["def mul_tup(tup1, tup2):\n        l=[]\n\n        for x in tup1:\n            for y in tup2:\n                a=(x,y)\n                b=(y,x)\n                l.append(a)\n                l.append(b)\n\n        return tuple(l)\n\nfirst_tup= tuple([eval(x) for x in input(\"enter the values: \").split(',')])\nsecond_tup= tuple([eval(x) for x in input(\"enter the values: \").split(',')])\nq = mult_tup(first_tup, second_tup)\nprint(q)\n"], ["df3 = df.loc[~(df['Column C'] == \"Value_4\") & ~(df['Column C'] == \"Value_3\")]\n"], ["df3 = df.loc[df.index.difference(df1.index.union(df2.index))]\nprint (df3)\n   Column A  Column B Column C\n0       300         1  Value_1\n1       300         1  Value_2\n4       500         3  Value_1\n5       750         3  Value_2\n8       800         3  Value_5\n", "df3 = df[~df['Column C'].isin(['Value_4','Value_3'])]\n", "s = df.merge(pd.concat([df1, df2]).drop_duplicates(), how='left', indicator=True)['_merge']\n\ndf3 = df[s == 'left_only']\nprint (df3)\n   Column A  Column B Column C\n0       300         1  Value_1\n1       300         1  Value_2\n4       500         3  Value_1\n5       750         3  Value_2\n8       800         3  Value_5\n"], ["df3 = df.loc[~(df['Column C'].isin(df1['Column C'])) & ~(df['Column C'].isin(df2['Column C']))]\n", "   Column A  Column B Column C\n0       300         1  Value_1\n1       300         1  Value_2\n4       500         3  Value_1\n5       750         3  Value_2\n8       800         3  Value_5\n"], ["df.reindex(df.index.difference(df1.index.union(df2.index)))\n\n    Column A    Column B    Column C\n0   300         1           Value_1\n1   300         1           Value_2\n4   500         3           Value_1\n5   750         3           Value_2\n8   800         3           Value_5\n"], ["import test1,test2\nfrom threading import Thread\n\nThread(target=test2.main).start()\nThread(target=test1.main).start()\n"], ["import pandas as pd\nimport numpy as np\n\ndf = pd.DataFrame(data ={'data':[19218.965703 ,19247.621650 ,19232.651322 ,19279.216956 ,19330.087371 ,19304.316973]}, index = [0,1,2,9,10,11] )\n", "df['Group'] = (df.index.to_series()-np.arange(df.shape[0])).rank(method='dense')\ndf.reset_index(inplace=True)\ndf['Observations'] = df.groupby(['Group'])['index'].rank()\ndf.pivot(index='Observations',columns='Group', values='data')\n", "Group                  1.0           2.0\nObservations                            \n1.0           19218.965703  19279.216956\n2.0           19247.621650  19330.087371\n3.0           19232.651322  19304.316973\n"], ["df['groups']=list(df.reset_index()['index']-range(0,len(df)))\npd.concat([df[df['groups']==i][['0']].reset_index(drop=True) for i in df['groups'].unique()],axis=1)\n\n              0             0\n0  19218.965703  19279.216956\n1  19247.621650  19330.087371\n2  19232.651322  19304.316973\n"], ["d[i] = 1 if i not in d else d[i] + 1\n", "d[i] = d.get(i, 0) + 1\n", "from collections import defaultdict\nd = defaultdict(int)\nfor i in 'jkasb':\n    d[i] += 1\n", "from collections import Counter\nd = Counter('jkasb')\n"], ["thread1 = threading.Thread(target=fun1())\nthread2 = threading.Thread(target=fun2())\n", "<_MainThread(MainThread, started 4339086784)>\nz\ny\nx\nw\nv\nu\nt\n<_MainThread(MainThread, started 4339086784)>\na\nb\nc\nd\ne\nf\ng\n", "thread1 = threading.Thread(target=fun1)\nthread2 = threading.Thread(target=fun2)\n", "z\na\ny\nb\nx\nc\nw\nd\nv\ne\nu\nf\nt\ng\n"], ["thread1 = threading.Thread(target=fun1)\nthread2 = threading.Thread(target=fun2)\n"], ["for a, b in zip(list1, list2):\n    print(a)\n    print(b)\n"], ["thread1 = threading.Thread(target=fun1)\nthread2 = threading.Thread(target=fun2)\n"], [">>> import threading\n>>> import time\n>>> \n>>> def fun1():\n...     testz=['z','y','x','w','v','u','t']\n...     for j in testz:\n...         print (j)\n...         time.sleep(1)\n... \n>>> def fun2():\n...     test=['a','b','c','d','e','f','g']\n...     for i in test:\n...         print (i)\n...         time.sleep(1)\n... \n>>> \n>>> thread1 = threading.Thread(target=fun1())\nz\ny\nx\nw\nv\nu\nt\n>>> thread2 = threading.Thread(target=fun2())\na\nb\nc\nd\ne\nf\ng\n>>> \n>>> thread1.start()\n>>> time.sleep(0.5)\n>>> thread2.start()\n>>> \n>>> thread1.join()\n>>> thread2.join()\n"], ["from itertools import chain\n\nfor i in chain(*zip(list1, list2)):\n    print(i)\n"], ["from collections import defaultdict\npatt='jkasb'\n\nmy_default_dict=defaultdict(int)\nfor i in patt:\n    my_default_dict[i]+=1\n\nmy_dict = dict(my_default_dict) # converting the defaultdict to a regular dictionary\n", "patt='jkasb'\n\nmy_dict={}\nfor i in patt:\n    my_dict[i]= 1 if i not in my_dict else my_dict[i]+1 # checking if i exists in dict\n", "patt='jkasb'\n\nmy_dict={}\nfor i in patt:\n    my_dict[i]= 1 if my_dict.get(i) is None else my_dict[i]+1 # using dict.get\nprint(my_dict)\n", "patt='jkasb'\n\nmy_dict={}\nfor i in patt:\n    my_dict[i]= my_dict.get(i, 0)+1 # using dict.get with default return value 0\n", "from collections import Counter\npatt='jkasb'\n\ncharacter_counter = Counter(patt)\n\nmy_dict = dict(character_counter)\n"], ["from collections import defaultdict\n\npatt=list('jkasb')\n\nmy_dict = defaultdict(int) \nfor i in patt:\n   my_dict[i] += 1 \n"], ["for i in patt:\n    dict[i] = 1 if dict.get(i) is None else dict[i] + 1\n", "for i in patt:\n    dict[i] = 1 if i not in dict else dict[i] + 1\n"], [], ["(\nIn [65]: tmp1 = d1.reset_index().set_index([\"a\", \"b\"])\n\nIn [66]: idx = tmp1.index.difference(d2.set_index([\"a\",\"b\"]).index)\n\nIn [67]: res = d1.loc[tmp1.loc[idx, \"index\"]]\n\n)\n"], ["a = pd.factorize(df.index - np.arange(len(df)))[0]\nb = df.groupby(a).cumcount()\n\npd.Series(df['0'].to_numpy(), [b, a]).unstack()\n\n              0             1\n0  19218.965703  19279.216956\n1  19247.621650  19330.087371\n2  19232.651322  19304.316973\n", "a = pd.factorize(df.index - np.arange(len(df)))[0]\nb = df.groupby(a).cumcount()\n\nc = np.empty((b.max() + 1, a.max() + 1), float)\nc.fill(np.nan)\nc[b, a] = np.ravel(df)\npd.DataFrame(c)\n\n              0             1\n0  19218.965703  19279.216956\n1  19247.621650  19330.087371\n2  19232.651322  19304.316973\n"], ["m = df.index.to_series().diff().ne(1).cumsum()\n\n(df.assign(key=df.groupby(m).cumcount())\n    .pivot_table(index='key', columns=m, values=0))\n", "                1             2\nkey\n0    19218.965703  19279.216956\n1    19247.621650  19330.087371\n2    19232.651322  19304.316973\n"], ["s=df.index.to_series().diff().ne(1).cumsum()\npd.concat({x: y.reset_index(drop=True) for x, y in df['0'].groupby(s)}, axis=1)\n\nOut[786]: \n              1             2\n0  19218.965703  19279.216956\n1  19247.621650  19330.087371\n2  19232.651322  19304.316973\n"], ["from more_itertools import consecutive_groups\nfinal=pd.concat([df.loc[i].reset_index(drop=True) \n                    for i in consecutive_groups(df.index)],axis=1)\nfinal.columns=range(len(final.columns))\nprint(final)\n", "              0             1\n0  19218.965703  19279.216956\n1  19247.621650  19330.087371\n2  19232.651322  19304.316973\n"], ["from collections import Counter\n\nc = Counter()\ns = 'AAABBBCAB'\n\npsum = []\nfor char in s:\n    c.update(char)\n    psum.append(dict(c))\n\n# [{'A': 1}, {'A': 2}, {'A': 3}, {'A': 3, 'B': 1}, {'A': 3, 'B': 2}, \n#  {'A': 3, 'B': 3}, {'A': 3, 'B': 3, 'C': 1}, {'A': 4, 'B': 3, 'C': 1},\n#  {'A': 4, 'B': 4, 'C': 1}]\n", "psum.append(c.copy())\n", "[Counter({'A': 1}), Counter({'A': 2}), ...\n Counter({'A': 4, 'B': 4, 'C': 1})]\n", "from itertools import accumulate\nfrom collections import Counter\n\ns = \"AAABBBCAB\"\npsum = list(accumulate(Counter(char) for char in s))\n", "c = {}\ns = 'AAABBBCAB'\n\npsum = []\nfor char in s:\n    c[char] = c.get(char, 0) + 1\n    psum.append(c.copy())\n"], ["t1 = (1, 2)\nt2 = (4, 5)\n\n>>> sorted([t for i in t1 for j in t2 for t in ((i, j), (j, i))])\n# [(1, 4), (1, 5), (2, 4), (2, 5), (4, 1), (4, 2), (5, 1), (5, 2)]\n", ">>> sorted(((t1[0], t2[0]), (t1[0], t2[1]), (t1[1], t2[0]), (t1[1], t2[1]), \n            (t2[0], t1[0]), (t2[0], t1[1]), (t2[1], t1[0]), (t2[1], t1[1])))\n# [(1, 4), (1, 5), (2, 4), (2, 5), (4, 1), (4, 2), (5, 1), (5, 2)]\n", "t1 = (1, 2)\nt2 = (1, 2)\n\n>>> sorted([t for i in t1 for j in t2 for t in ((i, j), (j, i))])\n# [(1, 1), (1, 1), (1, 2), (1, 2), (2, 1), (2, 1), (2, 2), (2, 2)]\n\n>>> sorted(set([t for i in t1 for j in t2 for t in ((i, j), (j, i))]))\n# [(1, 1), (1, 2), (2, 1), (2, 2)]\n"], ["import pandas as pd\nimport numpy as np\n\n# Example dataframe full of strings\ndf = pd.DataFrame.from_dict({'name':['Lebron James','Kevin Durant'],'points':['38','   '],'steals':['2.5',''],'position':['Every Position','SG'],'turnovers':['0','7']})   \n\ndef convertTypes(df):\n    for col in df: \n        is_an_int = True\n        is_a_float = True\n        if(df[col].dtype == np.float64 or df[col].dtype == np.int64):\n            # If the column's type is already a float or int, skip it\n            pass\n        else:\n            # Iterate through each value in the column\n            for value in df[col].iteritems():\n                if value[1].isspace() == True or value[1] == '':\n                    continue\n                # If the string's isnumeric method returns false, it's not an int\n                if value[1].isnumeric() == False: \n                    is_an_int = False\n                # if the string is made up of two numerics split by a '.', it's a float\n                if isinstance(value[1],str): \n                    if len(value[1].split('.')) == 2: \n                        if value[1].split('.')[0].isnumeric() and value[1].split('.')[1].isnumeric(): \n                            is_a_float = True \n                        else: \n                            is_a_float = False \n                    else: \n                        is_a_float = False \n                else: \n                    is_a_float = False \n            if is_a_float == True:\n                # If every value's a float, convert the whole column\n                # Replace blanks and whitespaces with np.nan\n                df[col] = df[col].replace(r'^\\s*$', np.nan, regex=True).astype(float)\n            elif is_an_int == True:\n                # If every value's an int, convert the whole column\n                # Replace blanks and whitespaces with 0\n                df[col] = df[col].replace(r'^\\s*$', 0, regex=True).astype(int)\n\nconvertTypes(df)\n"], ["data = [1,2,3,4,5,6]\nfor i in data[::2]:\n...     print(I)\n\n"], ["for item in items[::2]:\n   print(item)\n", "for item1, item2 in zip(items[::2], items[1::2]):\n   print(item1, item2)\n"], ["for item in items[::2]:\n   <your_code>\n"], ["for i in range(0,20,2):\n    print(i)\n"], ["for idx, item in enumerate(items):\n    if idx % 2 == 1:\n        // do something\n"], ["from itertools import  groupby\nfrom operator import itemgetter\n\n[gr for gr in (tuple(e for e, _ in v) for _, v in groupby(sorted(enumerate(l),key=itemgetter(1)), key=itemgetter(1))) if len(gr) > 1]\n", "[(0, 1), (2, 4, 7)]\n"], ["for col in df.columns: \n    df[col] = df[col].astype('float', errors='ignore')\n"], ["u_val, dupcount = np.unique(l, return_counts=True)\ndups = u_val[dupcount > 1]\nout = [tuple(np.flatnonzero(l==item)) for item in dups]\n\nIn [98]: out\nOut[98]: [(0, 1), (2, 4, 7)]\n"], ["    cols = ['points','salary','wins']\n    for i in cols:\n         df[i] = df[i].astype(float)\n"], ["In [29]: l = [1, 1, 2, 5, 2, 3, 4, 2]                                           \n\nIn [30]: u, inv, counts = np.unique(l, return_inverse=True, return_counts=True)                  \n\nIn [31]: [np.nonzero(inv == k)[0] for k in np.where(counts > 1)[0]]                              \nOut[31]: [array([0, 1]), array([2, 4, 7])]\n", "In [40]: l = [1, 1, 2, 5, 2, 3, 4, 2]                                                            \n\nIn [41]: al = np.array(l)                                                                        \n\nIn [42]: [np.nonzero(al == k)[0] for k in np.where(np.bincount(l) > 1)[0]]                       \nOut[42]: [array([0, 1]), array([2, 4, 7])]\n"], ["list =[1,1,1,3,4,5,5,6,7]\n\ndef Duplicate(func,data):\n    start = -1\n    y = []\n    while True:\n        try:\n            x = func.index(data,start+1)\n        except ValueError:\n            break\n        else:\n            y.append(x)\n            start = x\n    return y\n\nfrom functools import partial\nNew= partial(Duplicate, list)\n\nfor a in list:\n    print(a, New(a))\n", "1 [0, 1, 2]\n1 [0, 1, 2]\n1 [0, 1, 2]\n3 [3]\n4 [4]\n5 [5, 6]\n5 [5, 6]\n6 [7]\n7 [8]\n"], ["df.select_dtypes(include = ['object']).astype(float)\n", "str_cols = df.select_dtypes(include = ['object'].columns\n\nmapping = {col_name:col_type for col_name, col_type in zip(str_cols, [float]*len(str_cols))}\n\ndf[str_cols] = df[str_cols].astype(mapping)\n"], ["df = pd.read_csv(\"file.tsv\", sep='\\t', dtype={'a': np.float. 'b': str, 'c': np.float}\n", "conversion_dict = {'a': np.float, 'c': np.float}\ndf = df.astype(conversion_dict)\n", "df =  df.infer_objects()\n"], ["s=pd.DataFrame(enumerate(l))\ns[s[1].duplicated(keep=False)].groupby(1)[0].apply(list)\n1\n1       [0, 1]\n2    [2, 4, 7]\nName: 0, dtype: object\n"], ["from collections import defaultdict\n\nl = [1, 1, 2, 5, 2, 3, 4]\nd = defaultdict(list)  # key - number, value - list of indexes\n\nfor i, n in enumerate(l):\n    d[n].append(i)  # add index to list for this number n\n\nprint(d)\n", "[v for v in d.values() if len(v) > 1]\n"], ["data[(data[0] == True) & (data[1] == True) & (data[2] == True)].index.values\n", "list(data[(data[0] == True) & (data[1] == True) & (data[2] == True)].index.values)\n"], ["#!/bin/bash\n\n/data/Python-3.6.9/bin/python3 neural_network_trainer.py [args]\n\n# Repeated with varied args\n"], ["mapfile < <(declare -p | grep -m 1 BASH_ALIASES) && bash script.sh \"${MAPFILE[@]}\"\n", "shopt -s expand_aliases\neval $1\necho ${BASH_ALIASES[python]}\npython --version\n"], [], ["#!/usr/bin/env bash\nexport PATH=/data/Python-3.6.9/bin:$PATH\nexec python neural_network_trainer.py \"$@\"\n"], ["python=/data/Python-3.6.9/bin/python3 ./[your_bash].sh\n"], ["lst = [[\"A\"], [\"B\"], [\"A\",\"B\"], [\"B\",\"A\"], [\"A\",\"B\",\"C\"], [\"B\", \"A\", \"C\"]]    \n\ndata = {frozenset(el) for el in lst}\n\nprint(data)\n", "{frozenset({'B'}), frozenset({'A', 'B'}), frozenset({'A', 'C', 'B'}), frozenset({'A'})}\n"], ["list_ = [[\"A\"], [\"B\"], [\"A\",\"B\"], [\"B\",\"A\"], [\"A\",\"B\",\"C\"], [\"B\", \"A\", \"C\"]]\nl = list(map(list, set(map(tuple, map(set, list_)))))\n", "[['A', 'B'], ['B'], ['A', 'B', 'C'], ['A']]\n", "list_ = [['A'], ['B'], ['A', 'B'], ['B', 'A'], ['A', 'B', 'C'], ['B', 'A', 'C']]\nl0 = [set(i) for i in list_]\n# l0 = [{'A'}, {'B'}, {'A', 'B'}, {'A', 'B'}, {'A', 'B', 'C'}, {'A', 'B', 'C'}]\nl1 = [tuple(i) for i in l0]\n# l1 = [('A',), ('B',), ('A', 'B'), ('A', 'B'), ('A', 'B', 'C'), ('A', 'B', 'C')]\nl2 = set(l1)\n# l2 = {('A', 'B'), ('A',), ('B',), ('A', 'B', 'C')}\nl = [list(i) for i in l2]\n# l = [['A', 'B'], ['A'], ['B'], ['A', 'B', 'C']]\n"], ["lst = [[\"A\"], [\"B\"], [\"A\",\"B\"], [\"B\",\"A\"], [\"A\",\"B\",\"C\"], [\"B\", \"A\", \"C\"]]\n\nprint([\n    list(i) \n    for i in sorted(\n        set(\n            tuple(sorted(i)) \n            for i in lst\n        ), \n        key=lambda k: (len(k), k)\n    )\n])\n", "[['A'], ['B'], ['A', 'B'], ['A', 'B', 'C']]\n"], ["l = [[\"A\"], [\"B\"], [\"A\",\"B\"], [\"B\",\"A\"], [\"A\",\"B\",\"C\"], [\"B\", \"A\", \"C\"]]\n[list(i) for i in {tuple(sorted(i)) for i in l}]\n"], ["def partition(L, key=None):\n\n    if key is None:\n        key = lambda x: x\n\n    parts = []\n    for item in L:\n        for part in parts:\n            if key(item) == key(part[0]):\n               part.append(item)\n               break\n        else:\n            parts.append([item])\n    return parts\n\ndef unique(L, key=None):\n    return [p[0] for p in partition(L, key=key)]\n\nalist = [[\"A\"], [\"B\"], [\"A\",\"B\"], [\"B\",\"A\"], [\"A\",\"B\",\"C\"], [\"B\", \"A\", \"C\"]]\n\nunique(alist)\n# results in [['A'], ['B'], ['A', 'B'], ['B', 'A'], ['A', 'B', 'C'], ['B', 'A', 'C']]\n\nunique(alist, key=lambda v: tuple(sorted(v)))\n# results in [['A'], ['B'], ['A', 'B'], ['A', 'B', 'C']]\n"], ["#df.iloc[:,:3] = df.iloc[:,:3].apply(lambda x: str(x) == \"TRUE\")    # If necessary\ns = (df == True).apply(sum, axis=1) == 3\ns = s[s.shift() != s]\ns.index[s].tolist()\n"], ["def rot13_encrypt(text):\n    return ''.join(chr((ord(letter) - ord('a') + 13) % 26 + ord('a')) for letter in text)\ndef rot13_decrypt(text):\n    return ''.join(chr((ord(letter) - ord('a') - 13 + 26) % 26 + ord('a')) for letter in text)\nrot13_encrypt('helloworld')\nOut[22]: 'uryybjbeyq'\nrot13_decrypt(rot13_encrypt('helloworld'))\nOut[23]: 'helloworld'\n"], ["import codecs\ncodecs.encode('Canonical Answer', 'rot_13')\n'Pnabavpny Nafjre'\n"], ["from string import ascii_lowercase\ns = ascii_lowercase\n\nrot13 = dict(zip(s, s[13:]+s[:13]))\n\n>>> rot13\n{'a': 'n', 'b': 'o', 'c': 'p', 'd': 'q', 'e': 'r', 'f': 's', 'g': 't', 'h': 'u', 'i': 'v', 'j': 'w', 'k': 'x', 'l': 'y', 'm': 'z', 'n': 'a', 'o': 'b', 'p': 'c', 'q': 'd', 'r': 'e', 's': 'f', 't': 'g', 'u': 'h', 'v': 'i', 'w': 'j', 'x': 'k', 'y': 'l', 'z': 'm'}\n>>> \n"], ["pos = string.find('u')\n", "pos += 13\n", "pos %= len(string)\n", "print(string[pos])\n", "print(string[(string.find('u')+13)%len(string)])\n"], ["alphabet =  'abcdefghijklmnopqrstuvwxyz'  \nindex_of_u = alphabet.index('u')\n", "offset_index = (index_of_u + 13) % 27\n", "target_char = alphabet[offset_index]\n"], ["#This will look at the first 3 columns and return True if \"all\" are True else it will return False:\n\nstep1 = [all(q) for q in df[[0,1,2]].values]\n\nid = []\ncnt = 0\ntemp_cnt = 0\n\n#this loop finds where the value is true and checks if the next 2 are also true \n#it then appends the count-2 to a list named id, the -2 compensates for the index.\nfor q in step1:\n    if q:\n        cnt += 1\n        if cnt == 3:\n            id.append(temp_cnt - 2)\n    else:\n        cnt = 0\n\n    temp_cnt += 1\n\n\n#Then when printing \"id\" it will return the first index where AT LEAST 3 True values occur in sequence.\nid\nOut[108]: [0, 14, 24]\n"], ["condition = df[[0, 1, 2]].all(axis='columns')\n", "idx = df[condition].index\nignore = idx.isin(idx + 1)\nresult = idx[~ignore]\n", "condition = df[[0, 1, 2]].all(axis='columns')\n", "condition = (df[[0, 1, 2]] == 'TRUE').all(axis='columns')\n"], ["\n\ndf = pd.DataFrame(data={'A':[True,True,True,True,True,False,True,True],'B':[True,True,False,True,True,False,True,True],'C':[True,False,True,True,True,False,True,True]})\ni =df[(df['A']==True) & (df['B']==True) & (df['C']==True)].index.to_list()\n\ni = [x for x in i if x-1 not in i]\n\n"], ["df=df[['0', '1', '2']]\ndf=df[df.shift()!=df].dropna().all(axis=1)\nprint(df[df].index.tolist())\n", "[0, 14, 24]\n"], [], [], [], ["import pandas as pd\n\ndf = pd.read_csv(\"data.csv\", sep=\",\")\ns = df.set_index('Category').T.to_dict('series')\n\nprint(s)\n", "Category,US,UK,CA\nA,1,1,1\nB,2,2,2\nC,3,3,3\n"], ["f = open(\"sapehi.txt\", \"r\")\nfirst = f.readline()\ntable = first.split(\"=\")[1] # Throw away the \"Header =\" part\ncolumns = [x.strip() for x in table.split(\"|\")][1:] # Create a list of the column headings\n\noutput = {} # Create the output dictionary\n\nwhile True:\n    line = f.readline()\n    if (line == \"\"): # If there's no more data in the file, exit the loop\n        break\n    row = line.split(\"=\")[1] # Throw away the \"Row x\" part\n    values = [x.strip() for x in row.split(\"|\")] # Create a row elements\n    category = values[0] # Category is the first row element\n    values = values[1:] # The values are all the rest\n    output[category] = {} # Create a dict for this category\n    for index, value in enumerate(values):\n        output[category][columns[index]] = value # Populate it with the values\n\nprint(output)\n"], ["import pprint\n\n\ndef main():\n    pp = pprint.PrettyPrinter(indent=2)\n    path = \"table.txt\"\n    res = {}\n    with open(path, \"r\") as f:\n        catagories = f.readline().strip().split(\" | \")[-3:]\n        for line in f:\n            key_part, *values = line.strip().split(\" | \")\n            key = key_part.split()[-1]\n            res[key] = {\n                catagories[i]: values[i]\n                for i in range(len(catagories))\n            }\n    pp.pprint(res)\n\n\nif __name__ == \"__main__\":\n    main()\n", "Header = Category | US | UK | CA\nRow 1 = A | value1 | value1 | value2\nRow 2 = B | value2 | value1 | value3\nRow 3 = C | value1 | value3 | value1\n", "{ \n  'A': {'CA': 'value2', 'UK': 'value1', 'US': 'value1'},\n  'B': {'CA': 'value3', 'UK': 'value1', 'US': 'value2'},\n  'C': {'CA': 'value1', 'UK': 'value3', 'US': 'value1'}\n}\n"], ["table = [[ 'Category', 'US', 'UK', 'CA' ], [ 'A', 'value1', 'value1',  'value2'], [ 'B', 'value2', 'value1',  'value2']]\n\ndict =  {table[i][0] :  {table[0][j]: table[i][j] for j in range(1,len(table[i]))} for i in range(1,len(table))}\nprint(dict)\n"], ["dictionary[key] = v\n"], ["import numpy as np\nimport sys\n\ndef sample(nof_samples, min, max, sum):\n    p = np.full(nof_samples, 1.0/np.float64(nof_samples)) # probabilities\n    sum -= nof_samples * min\n    max -= min\n    if sum < 0 or sum > nof_samples * max:  # check that args have a feasible solutioon\n        print('Inconceivable!')\n        sys.exit()\n\n    while True:\n        q = np.random.multinomial(sum, p)\n        if not np.any(q > max):\n            return q + min\n\nfor _ in range(3):\n    t = sample(15, 5, 20, 227)\n    print(t)\n    print(min(t), max(t), sum(t))  # confirm that all constraints have been met\n", "print(sample(5, -10, 20, -1))\n", "[ 0  1 -1  4 -5]\n"], ["q = np.random.multinomial(227, [1/15.]*15)                                                                          \nnp.sum(q)  \n", "227\n", "if np.any(q < 5):\n    # reject and start again\n\nif np.any(q > 20):\n    # reject and start again\n\n# accept, do something with the sampled array\n", "import numpy as np\n\ndef sample(nof_samples, min, max, sum):\n    p = np.full(nof_samples, 1.0/np.float64(nof_samples)) # probabilities\n\n    while True:\n        q = np.random.multinomial(sum, p)\n        if not np.any(q > max):\n            if not np.any(q < min):\n                return q\n\nt = sample(15, 5, 20, 227)\nprint(t)\n\nt = sample(15, 5, 20, 227)\nprint(t)\n\nt = sample(15, 5, 20, 227)\nprint(t)\n"], ["def rng_list(): \n    while True: \n        rng_list = [random.randint(5, 20) for _ in range(14)] \n        if 207 <= sum(rng_list) <= 222: \n            break \n    rng_list.append(227 - sum(rng_list))\n    return rng_list\n"], ["def rng_list():\n    while True:\n        rng_list = []\n        current_sum = 0\n        for i in range(14):\n            r = random.randint(5, 20)\n            rng_list.append(r)\n            current_sum+= r\n            if not 5*(14-i) <= 227-current_sum <= 20*(14-i): #`i` goes from 0 to 14, so 14-i is how many (from 15) numbers are still not calculated\n                break\n        if len(rng_list) == 14:\n            rng_list.append(227-current_sum)\n            return rng_list\n        print(\"Pass failed with list {}, sum {} - trying again.\".format(rng_list, current_sum)) #added to debug/show how it works\n", ">>> rng_list()\nPass failed with list [12, 7, 18, 20, 12, 12, 15, 7, 15, 16, 7], sum 141 - trying again.\nPass failed with list [17, 6, 20, 5, 16, 18, 5, 19, 19, 7, 8], sum 140 - trying again.\nPass failed with list [10, 15, 18, 10, 8, 8, 12, 12, 13], sum 106 - trying again.\nPass failed with list [9, 12, 8, 5, 17, 20, 20, 6, 8], sum 105 - trying again.\nPass failed with list [9, 16, 9, 16, 6, 17, 20, 15, 9, 11, 15], sum 143 - trying again.\nPass failed with list [5, 14, 13, 12, 12, 13, 13, 9, 8], sum 99 - trying again.\nPass failed with list [11, 9, 5, 11, 11, 13, 18, 7], sum 85 - trying again.\nPass failed with list [10, 12, 19, 9, 14, 16, 11, 19, 5, 5], sum 120 - trying again.\nPass failed with list [11, 10, 8, 10, 10, 17, 17, 9, 19, 14], sum 125 - trying again.\nPass failed with list [13, 11, 7, 15, 14, 7, 5, 10], sum 82 - trying again.\nPass failed with list [11, 6, 7, 20, 6, 17, 18, 12, 8], sum 105 - trying again.\nPass failed with list [16, 17, 9, 18, 7, 8, 17, 14, 13, 13, 14], sum 146 - trying again.\n\n[19, 6, 18, 9, 19, 20, 15, 14, 16, 15, 11, 18, 11, 20, 16]\n\n>>> rng_list()\nPass failed with list [17, 6, 8, 9, 14, 17, 13, 8, 10], sum 102 - trying again.\nPass failed with list [7, 16, 12, 8, 20, 19, 18, 15, 5, 5], sum 125 - trying again.\nPass failed with list [5, 7, 6, 15, 12, 17, 6, 10], sum 78 - trying again.\nPass failed with list [17, 18, 8, 17, 18, 6, 10, 16, 18, 18, 6, 5], sum 157 - trying again.\nPass failed with list [10, 13, 9, 11, 11, 5, 18, 17, 13, 12], sum 119 - trying again.\nPass failed with list [20, 8, 8, 7, 14, 16, 17, 15, 15, 19, 13, 15, 17], sum 184 - trying again.\nPass failed with list [19, 12, 10, 15, 12, 13, 20, 14, 12, 6, 9], sum 142 - trying again.\nPass failed with list [9, 5, 13, 10, 15, 10, 13, 14, 7], sum 96 - trying again.\nPass failed with list [15, 12, 5, 19, 6, 5, 5, 17], sum 84 - trying again.\nPass failed with list [8, 5, 7, 11, 15, 16, 12, 18, 13], sum 105 - trying again.\nPass failed with list [15, 14, 10, 9, 8, 6, 10, 15, 18], sum 105 - trying again.\nPass failed with list [14, 17, 10, 13, 16, 8, 5, 6, 14], sum 103 - trying again.\nPass failed with list [10, 12, 19, 9, 5, 18, 12, 8, 9], sum 102 - trying again.\nPass failed with list [15, 10, 11, 19, 12, 12, 18, 15, 13, 8, 19, 11], sum 163 - trying again.\nPass failed with list [10, 20, 17, 11, 20, 11, 14, 13, 18, 5, 5], sum 144 - trying again.\nPass failed with list [20, 8, 11, 16, 18, 16, 15, 12, 9, 14, 15, 18, 13], sum 185 - trying again.\nPass failed with list [16, 7, 20, 11, 12, 16, 11, 9, 5, 13], sum 120 - trying again.\nPass failed with list [10, 12, 19, 9, 14, 15, 17, 19, 7, 11, 17, 17, 7], sum 174 - trying again.\nPass failed with list [5, 5, 6, 12, 10, 16, 10], sum 64 - trying again.\nPass failed with list [16, 18, 20, 14, 20, 19, 16, 7, 5, 12, 9, 11, 15], sum 182 - trying again.\nPass failed with list [14, 7, 13, 15, 16, 12, 20, 5, 5, 13], sum 120 - trying again.\nPass failed with list [17, 16, 9, 20, 13, 9, 9, 17, 19, 19, 7, 13, 18], sum 186 - trying again.\nPass failed with list [16, 11, 18, 17, 14, 16, 9, 10, 14, 19, 17, 6, 17], sum 184 - trying again.\nPass failed with list [12, 9, 9, 16, 10, 12, 18, 17, 16, 12, 18, 15], sum 164 - trying again.\n\n[15, 14, 11, 14, 13, 13, 18, 19, 19, 13, 14, 6, 19, 16, 23]\n\n>>> rng_list()\n\n[13, 8, 15, 5, 17, 19, 14, 15, 17, 19, 20, 14, 17, 15, 19]\n\n"], ["text = \"\"\"line with every word a vowel\nsntshk xx yy.\nOkay zz fine.\"\"\"\nq = ''\ns = text.split()\nfor i in range(len(s)):\n    c = 0\n    s[i] = s[i].strip('.')\n    for c in range(len(s[i])):\n        if (s[i])[c].lower() in 'aeiou':\n            q += s[i]+' '\n            break\nprint(q)\n"], ["[x.strip('.') for x in text.split() if all(y.lower() not in 'aeiou' for y in x)]\n", "text = \"\"\"line with every word a vowel \nsntshk xx yy.\nOkay zz fine.\"\"\"\n\nprint([x.strip('.') for x in text.split() if all(y.lower() not in 'aeiou' for y in x)])\n# ['sntshk', 'xx', 'yy', 'zz']\n"], ["text = \"\"\"line with every word a vowel\nsntshk xx yy.\nOkay zz fine.\"\"\"\n\nre.findall(r'\\b[^AEIOU_0-9\\W]+\\b', text, flags=re.I)\nprint(s)\n\n['sntshk', 'xx', 'yy', 'zz']\n"], ["(?i)\\b[b-df-hj-np-tv-z]+\\b\n", "(?i)\\b(?:(?![eiou])[b-z])+\\b\n"], ["[^aeiouAEIOU]\n", "\\b[bcdfghjklmnpqrstvwxyz]+\\b\n"], [">>> from collections import Counter\n>>> s = 'AAABBBCAB'\n>>> c = Counter()\n>>> [c := c + Counter(x) for x in s]\n[Counter({'A': 1}), Counter({'A': 2}), Counter({'A': 3}), Counter({'A': 3, 'B': 1}), Counter({'A': 3, 'B': 2}), Counter({'A': 3, 'B': 3}), Counter({'A': 3, 'B': 3, 'C': 1}), Counter({'A': 4, 'B': 3, 'C': 1}), Counter({'A': 4, 'B': 4, 'C': 1})]\n"], ["for d in list1:\n    for i in d:\n        print(d.get(i))\n"], [], ["for key, val in list1[0].items():\n    print('key: {}, value {}'.format(key, val))\n"], ["a = {1: \"hello\", 2: \"goodbye\"}\nb = {1: \"Hi\", 2: \"Farewell\"}\nlist1 = [a, b]\n\nfor index, dict_data in enumerate(list1):\n    print(index)\n    print(dict_data)\n"], ["for e in list1[0]:\n    print(e)\n    print(list1[0][e])\n"], [], ["def merge_list(list1, list2):\n    resultant_data = []\n    list2.reverse()\n\n    for i,j in zip(range(0, len(list1)), range(0, len(list2))):\n        if list2[j] is not None:\n            s = list1[i]+list2[j]\n        else:\n            s = list1[i]\n        resultant_data.append(str(s))\n\n    return ' '.join(resultant_data)\n\n#Provide different values for the variables and test your program\nlist1=['A', 'app','a', 'd', 'ke', 'th', 'doc', 'awa']\nlist2=['y','tor','e','eps','ay',None,'le','n']\nmerged_data=merge_list(list1,list2)\nprint(merged_data)\n", "    Python 3.6.4 (v3.6.4:d48ecebad5, Dec 18 2017, 21:07:28)\n    >>> list1=['a','b']\n    >>> range(0, len(list1))\n    range(0, 2)\n    >>> for i in range(0, len(list1)):\n    ...     print(list1[i])\n    ...\n    a\n    b\n", ">>> for i,j in [0,1]:\n...     print i\n...\nTraceback (most recent call last):\n  File \"<stdin>\", line 1, in <module>\nTypeError: 'int' object is not iterable\n>>> for i,j in [0,1],:\n...     print i\n...\n0\n"], ["first_tuple = (1, 2)\nsecond_tuple = (4, 5)\ntups = [first_tuple, second_tuple]\nres = [(i, j) for x in tups for y in tups for i in x for j in y if x is not y]\n# [(1, 4), (1, 5), (2, 4), (2, 5), (4, 1), (4, 2), (5, 1), (5, 2)]\n"], ["first_tuple = (1, 2)\nsecond_tuple = (4, 5)\n\nout = []\nfor val in first_tuple:\n    for val2 in second_tuple:\n        out.append((val, val2))\n        out.append((val2, val))\n\nprint(tuple(out))\n", "((1, 4), (4, 1), (1, 5), (5, 1), (2, 4), (4, 2), (2, 5), (5, 2))\n"], ["from itertools import permutations \nt1=(1,2)\nt2=(3,4)\nmy_tuple=tuple([key for key in filter(lambda x: x!=t1 and (x!=t2),list(permutations(t1+t2,2)))])\n"], [">>> from itertools import chain, product\n>>> x = (1,4)\n>>> y = (2, 5)\n>>> list(chain(product(x,y), product(y,x)))\n[(1, 2), (1, 5), (4, 2), (4, 5), (2, 1), (2, 4), (5, 1), (5, 4)]\n"], ["result = [(x, y) for x in first_tuple for y in second_tuple]\nresult.extend( (x, y) for x in second_tuple for y in first_tuple )\n"], ["from itertools import chain, combinations, product\n\nblubb = [(1, 2, 3), (4, 5, 6), (7, 8, 9)]\n\nset_combos = chain.from_iterable(combinations(blubb, i) for i in range(len(blubb) + 1))\nresult_func = list(chain.from_iterable(map(lambda x: product(*x), set_combos)))\n", "def pure_python(list_of_tuples):\n    res = [tuple()]\n    for lst in list_of_tuples:\n        res += [(*r, x) for r in res for x in lst]\n    return res\n\n\ndef with_itertools(list_of_tuples):\n    set_combos = chain.from_iterable(combinations(list_of_tuples, i) for i in range(len(list_of_tuples) + 1))\n    return list(chain.from_iterable(map(lambda x: product(*x), set_combos)))\n\n\nassert sorted(with_itertools(blubb), key=str) == sorted(pure_python(blubb), key=str)\n"], [], [], [">>> a = [3, 1, 5, 7, 5, 9]\n>>> item = 5\n>>> tesn = 5\n>>> a.index(item),a.index(tesn)\n(2, 2)\n>>> \n"], ["n = 5\n\nwrapped = '\\n'.join([string[i:i+n] for i in range(0,len(string),n)])\n\nprint(wrapped)\n"], ["print(\"hi, {0}!\\nhello, {0}!\\ngood morning, {0}!\".format(a))\n"], ["def find_two_sum(lst, n):\n    indices = {}\n    for idx, num in enumerate(lst):\n        indices.setdefault(num, []).append(idx)\n    for k, v in indices.items():\n        i = v.pop()\n        if n - k in indices and indices[n-k]:\n            return i, indices[n-k].pop()\n\nprint( find_two_sum([3, 1, 5, 7, 5, 9], 6) )\nprint( find_two_sum([3, 1, 5, 7, 5, 9], 10) )\nprint( find_two_sum([1, 2, 1, 8], 10) )\nprint( find_two_sum([5, 5], 10) )\nprint( find_two_sum([11], 10) )\n", "(1, 4)\n(0, 3)\n(1, 3)\n(1, 0)\nNone\n"], ["a = input(\"insert name: \")\na\nprint(\"hi \", a, \"!\", end=\" \")\nprint(\"hello\", a, \"!\", end=\" \")\nprint(\"good morning\", a, \"!\", end=\"\\n\")\n"], ["print(\"hi \", a, \"!\\n\", \"hello\", a, \"!\\n\", \"good morning\", a, \"!\")\n"], ["print(f\"hi {}! hello {a}! good morning {a}!\")\n"], ["print(find_two_sum([3, 1, 5, 7, 5, 9], 6))\n"], ["from itertools import product, combinations\n\nlst = [(1,2,3), (4,5,6), (7,8,9)]\n\ndef generate(lst):\n    for idx in range(len(lst)):\n        for val in lst[idx]:\n            yield (val,)\n            for j in range(1, len(lst)):\n                for c in combinations(lst[idx+1:], j):\n                    yield from tuple((val,) + i for i in product(*c))\n\nl = [*generate(lst)]\nprint(l)\n", "[(1,), (1, 4), (1, 5), (1, 6), (1, 7), (1, 8), (1, 9), (1, 4, 7), (1, 4, 8), (1, 4, 9), (1, 5, 7), (1, 5, 8), (1, 5, 9), (1, 6, 7), (1, 6, 8), (1, 6, 9), (2,), (2, 4), (2, 5), (2, 6), (2, 7), (2, 8), (2, 9), (2, 4, 7), (2, 4, 8), (2, 4, 9), (2, 5, 7), (2, 5, 8), (2, 5, 9), (2, 6, 7), (2, 6, 8), (2, 6, 9), (3,), (3, 4), (3, 5), (3, 6), (3, 7), (3, 8), (3, 9), (3, 4, 7), (3, 4, 8), (3, 4, 9), (3, 5, 7), (3, 5, 8), (3, 5, 9), (3, 6, 7), (3, 6, 8), (3, 6, 9), (4,), (4, 7), (4, 8), (4, 9), (5,), (5, 7), (5, 8), (5, 9), (6,), (6, 7), (6, 8), (6, 9), (7,), (8,), (9,)]\n"], ["lsts = [(1,2,3), (4,5,6), (7,8,9)]\n\nres = [[]]\nfor lst in lsts:\n    res += [(*r, x) for r in res for x in lst]\n\n# print({tuple(lst) for lst in res[1:]})\n# {(5, 9), (4, 7), (6, 9), (1, 4, 7), (2, 6, 9), (4, 8), (3, 4, 7), (2,\n# 8), (2, 6, 8), (9,), (2, 5, 8), (1, 6), (3, 6, 8), (2, 5, 9), (3, 5,\n# 9), (3, 7), (2, 5), (3, 6, 9), (5, 8), (1, 6, 8), (3, 5, 8), (2, 6,\n# 7), (4, 9), (6, 7), (1,), (2, 9), (1, 6, 9), (3,), (1, 5), (5,), (3,\n# 6), (7,), (3, 6, 7), (1, 5, 9), (2, 6), (2, 4, 7), (1, 5, 8), (3, 4,\n# 8), (8,), (3, 4, 9), (1, 4), (1, 6, 7), (3, 9), (1, 9), (2, 5, 7), (3,\n# 5), (2, 7), (2, 4, 9), (6, 8), (1, 5, 7), (2,), (2, 4, 8), (5, 7), (1,\n# 4, 8), (3, 5, 7), (4,), (3, 8), (1, 8), (1, 4, 9), (6,), (1, 7), (3,\n# 4), (2, 4)}\n"], ["i = 0\nj = len(alist)\nwhile i < j:\n    print(i, j)  # or console.log(i, j) or whatever you want here\n    i += 1\n    j -= 1\n", "alist = [3, 1, 4, 1, 5, 9]\nllen = len(alist)\nfor i, j in zip(range(llen // 2), range(llen - 1, -1, -1)):\n    print(alist[i], alist[j])\n", "alist = [3, 1, 4, 1, 5, 9]\nllen = len(alist)\nfor u, v in zip(alist[:llen // 2], alist[::-1]):\n    print(u, v)\n"], ["l = [1, 2, 3, 4]\nfor i, _ in enumerate(l):\n    print(l[i], l[len(l)-i-1])\n", "(1, 4)\n(2, 3)\n(3, 2)\n(4, 1)\n"], ["for i in zip(alist, alist[::-1]):\n    print(i) \n    # use i[0] and i[1] if you need both in different vars\n", "(1, 4)\n(2, 3)\n(3, 2)\n(4, 1)\n"], [" In [9]: print([f'{i} {j}' for i, j in zip(named_list, reversed(named_list)) if i < j])\nOut [9]: ['0 9', '1 8', '2 7', '3 6', '4 5', '5 4', '6 3', '7 2', '8 1', '9 0']\n", "results = []\nfor i, j in zip (named_list, reversed(named_list)):\n   if i >= j:\n      break\n   results.append((i,j))\n"], ["low_to_high_idx = list(range(0, len(x)-1))\nhigh_to_low_idx = list(range(len(x)-1, -1, -1))\n"], ["data = [(1,2,3), (4,5,6), (7,8,9)]\ndef combos(d, c = []):\n   if len(c) == len(d):\n     yield c\n   else:\n     for i in d:\n        if i not in c:\n           yield from combos(d, c+[i])\n\ndef product(d, c = []):\n  if c:\n    yield tuple(c)\n  if d:\n    for i in d[0]:\n      yield from product(d[1:], c+[i])\n\nresult = sorted({i for b in combos(data) for i in product(b)})\nfinal_result = [a for i, a in enumerate(result) if all(len(c) != len(a) or len(set(c)&set(a)) != len(a) for c in result[:i])]\n", "[(1,), (1, 4), (1, 4, 7), (1, 4, 8), (1, 4, 9), (1, 5), (1, 5, 7), (1, 5, 8), (1, 5, 9), (1, 6), (1, 6, 7), (1, 6, 8), (1, 6, 9), (1, 7), (1, 8), (1, 9), (2,), (2, 4), (2, 4, 7), (2, 4, 8), (2, 4, 9), (2, 5), (2, 5, 7), (2, 5, 8), (2, 5, 9), (2, 6), (2, 6, 7), (2, 6, 8), (2, 6, 9), (2, 7), (2, 8), (2, 9), (3,), (3, 4), (3, 4, 7), (3, 4, 8), (3, 4, 9), (3, 5), (3, 5, 7), (3, 5, 8), (3, 5, 9), (3, 6), (3, 6, 7), (3, 6, 8), (3, 6, 9), (3, 7), (3, 8), (3, 9), (4,), (4, 7), (4, 8), (4, 9), (5,), (5, 7), (5, 8), (5, 9), (6,), (6, 7), (6, 8), (6, 9), (7,), (8,), (9,)]\n"], ["import itertools as it\n\ndef all_combinations(groups):\n    result = set()\n    for prod in it.product(*groups):\n        for length in range(1, len(groups) + 1): \n            result.update(it.combinations(prod, length))\n    return result\n\nall_combinations([(1,2,3), (4,5,6), (7,8,9)])\n"], ["unconsecutive_dates = []\nprevious = None\nfor d in sorted(dates):\n    if unconsecutive_dates and d == unconsecutive_dates[-1] + datetime.timedelta(days=1):\n        unconsecutive_dates.pop()\n    elif previous != d - datetime.timedelta(days=1):\n        unconsecutive_dates.append(d)\n    previous = d\n"], ["s = pd.Series([\n     datetime.date(2018, 7, 2),\n     datetime.date(2018, 7, 5),\n     datetime.date(2018, 7, 7),\n     ...\n    ])\n\n# Define 1 day difference\nday = pd.Timedelta('1d')\n\n# Find all consecutive days  \nconsecutive_days = ((s - s.shift(-1)).abs() == day) | ((s.diff() == day))\nconsecutive_groups = (s.diff() != day).cumsum() # group into consecutive periods\n\n# Find groups with 3 or more consecutive days\nunique, count = np.unique(consecutive_groups , return_counts=True)\ns[~consecutive_groups .isin(unique[count >= 3])].tolist()\n", "[datetime.date(2018, 7, 2),\n datetime.date(2018, 7, 5),\n datetime.date(2018, 7, 7),\n datetime.date(2018, 7, 29),\n datetime.date(2018, 8, 13),\n datetime.date(2018, 8, 27),\n datetime.date(2018, 9, 19),\n datetime.date(2018, 10, 25),\n datetime.date(2018, 11, 9),\n datetime.date(2019, 3, 6),\n datetime.date(2019, 3, 16),\n datetime.date(2019, 3, 25),\n datetime.date(2019, 3, 27),\n datetime.date(2019, 3, 29),\n datetime.date(2019, 3, 30),\n datetime.date(2019, 4, 8)]\n"], ["last_value = False\nfor time in lst:\n    minute = time[3:5]\n    if not last_value:\n        last_value = minute\n    else:\n        if minute != last_value:\n            ...\n            break\n"], ["import datetime\n\ndates = [datetime.date(2018, 7, 2),\n         datetime.date(2018, 7, 5),\n         ...,\n         datetime.date(2019, 3, 30),\n         datetime.date(2019, 4, 8)]\n\n\ndef are_consecutive(d1, d2):\n    return d2-d1 == datetime.timedelta(1)\n\nfiltered_out = set()\nconsecutive = set()\nfor i,d in enumerate(sorted(dates)):\n    try:\n        d1,d2 = dates[i:i+2]\n    except:\n        break\n    if are_consecutive(d1, d2):\n        consecutive.add(d1)\n        consecutive.add(d2)\n    else:\n        if len(consecutive) >= 3:\n            for date in consecutive:\n                filtered_out.add(date)\n        consecutive = set()\n\nselected = [d for d in dates if d not in filtered_out]\n", "[datetime.date(2018, 7, 2),\n datetime.date(2018, 7, 5),\n datetime.date(2018, 7, 7),\n datetime.date(2018, 7, 29),\n datetime.date(2018, 8, 13),\n datetime.date(2018, 8, 27),\n datetime.date(2018, 9, 19),\n datetime.date(2018, 10, 25),\n datetime.date(2018, 11, 9),\n datetime.date(2019, 3, 6),\n datetime.date(2019, 3, 16),\n datetime.date(2019, 3, 25),\n datetime.date(2019, 3, 27),\n datetime.date(2019, 3, 29),\n datetime.date(2019, 3, 30),\n datetime.date(2019, 4, 8)]\n"], ["j = 0                        # index of the date checked for consecutives\nwhile j < len(dates):\n    date = dates[j]          # the date checked for consecutives\n    i = 1                    # counter of consecutive days in the list\n    j += 1 \n    while True:              # count consecutive days and delete when 3 or more found\n        date = date + datetime.timedelta(days=1) # check if the following day is in the list\n        if date in dates:    # if found in the list then:\n            i += 1               # count it and check for the next.\n        else:                # if not in the list then:\n            if i > 2:            # if 3 or more consecutive dates are found\n                del dates[j-1:j+i-1]   # delete them from list\n            break\nprint(dates)\n", "[datetime.date(2018, 7, 2), datetime.date(2018, 7, 5), datetime.date(2018, 7, 7), datetime.date(2018, 7, 29), datetime.date(2018, 8, 13), datetime.date(2018, 8, 27), datetime.date(2018, 9, 19), datetime.date(2018, 10, 25), datetime.date(2018, 11, 9), datetime.date(2019, 1, 2), datetime.date(2019, 2, 27), datetime.date(2019, 3, 6), datetime.date(2019, 3, 16), datetime.date(2019, 3, 25), datetime.date(2019, 3, 27), datetime.date(2019, 3, 29), datetime.date(2019, 3, 30), datetime.date(2019, 4, 8)]\n"], [], [], ["time_lst = []\nlastMinute = lst[0][3:5] #so that it won't break on first item\nfor time in lst:\n    minute = time[3:5]\n\n    if minute != lastMinute: # `<>` still usable in python2, `!=` is better for compatibility between python2 and python3\n        time_lst.append(time)\n    lastMinute = minute\n\nprint(time_lst)\n"], ["previous_minute = lst[0][3:5]\nfor time in lst:\n    minute = time[3:5]\n    if previous_minute not minute:\n        break\n    previous_minute = minute\n", "changed_times = []\nprevious_minute = lst[0][3:5]\nfor time in lst:\n    minute = time[3:5]\n    if previous_minute not minute:\n        changed_times.append(time)\n    previous_minute = minute\n"], ["first_minute = lst[0][3:5]\nfor time in lst:\n    minute = time[3:5]\n\n    if minute != first_minute:\n        break\n", "new_list = [time in lst if time[3:5] == lst[0][3:5]]\n"], ["for time in lst:\n    minute = time[3:5]\n    if minute != lst[0][3:5]:\n        break\n    print minute\n"], ["prev=lst[0][3:5]\nfor time in lst:\n    if(time[3:5]!=prev):\n        break\n"], [], ["while True:\n    num = int(input(\"Enter First Number: \"))\n    print(num / 1440)\n", "while True:\n    response = input(\"Enter First Number: \")\n    if response == \":q\":\n        break\n    print(int(response) / 1440)\n"], ["running = True\nwhile running:\n    num1 = int(input(\"Enter First Number: \"))\n    num2 = int(1440)\n    result = num1 / num2\n\n    print(result)\n"], ["while number!=-1: #kill this by entering -1\n    number = input(\"Enter number, press enter\")\n    print(int(number)/1440)\n\nwhile True: #kill this version with Ctrl+C\n    number = input(\"Enter number, press enter\")\n    print(int(number)/1440)\n"], [], ["import string\nimport itertools\n\n\nclass BitMask(object):\n    STR_TOKENS = string.ascii_letters\n    STR_EMPTY = '_'\n    STR_FULL = False\n\n    def __init__(\n            self,\n            value=None,\n            ignore=True):\n        if isinstance(value, str):\n            self.value = self.from_tokens(value, self.STR_TOKENS, ignore)\n        else:\n            self.value = value\n\n    def __repr__(self):\n        return bin(self.value)\n\n    def __iter__(self):\n        value = self.value\n        while value:\n            yield value & 1\n            value >>= 1\n\n    def to_tokens(self, tokens, empty, full):\n        if full:\n            return [\n                token if value else empty\n                for token, value in\n                itertools.zip_longest(tokens, self, fillvalue=False)]\n        else:\n            return [\n                token for token, value in zip(tokens, self) if value]\n\n    def __str__(self):\n        return ''.join(\n            self.to_tokens(self.STR_TOKENS, self.STR_EMPTY, self.STR_FULL))\n\n    def from_tokens(self, seq, tokens, ignore):\n        if tokens is None:\n            tokens = self.STR_TOKENS\n        valid_tokens = set(tokens)\n        value = 0\n        for i, item in enumerate(seq):\n            if item in valid_tokens:\n                value |= 1 << tokens.index(item)\n            elif not ignore:\n                raise ValueError(f'Invalid input `{item}` at index: {i}.')\n        return value\n\n    def __add__(self, other):\n        self.value |= other.value\n        return self\n\n    def __mul__(self, other):\n        self.value &= other.value\n        return self\n\n    def __eq__(self, other):\n        return type(self) == type(other) and self.value == other.value\n", "class MyBitMask(BitMask):\n    STR_TOKENS = string.ascii_uppercase\n    def __init__(self, value=None, ignore=False):\n        super().__init__(value, ignore)\n\n\nprint(str(MyBitMask(5)))\n# AC\nprint(str(MyBitMask(15)))\n# ABCD\n", "repr(MyBitMask('AC'))\n# 0b101\n\nMyBitMask('AC') == MyBitMask(5)\n# True\n\nMyBitMask('AC') == BitMask(5)  # NOT THE SAME BITMASK CLASS!\n# False\n", "def convert(value, tokens=string.ascii_uppercase):\n    output = ''\n    i = 0\n    while value:\n        if value & 1:\n            output += tokens[i]\n        i += 1\n        value >>= 1\n    return output\n\n\ndef convert2(value, tokens=string.ascii_uppercase):\n    return ''.join(tokens[i] for i, c in enumerate(bin(value)[:1:-1]) if c == '1')\n\n\ndef convert3(value, tokens=string.ascii_uppercase):\n    result = []\n    i = 0\n    while value:\n        if value & 1:\n            result.append(tokens[i])\n        i += 1\n        value >>= 1\n    return ''.join(result)\n\n\ndef convert4(value, tokens=string.ascii_uppercase):\n    return ''.join(tokens[pos] for pos in range(value.bit_length()) if value & (1 << pos))\n\n\ndef convert5(value, tokens=string.ascii_uppercase):\n    return ''.join(c for b, c in zip(reversed('{:b}'.format(value)), tokens) if b == '1')\n\nprint([convert(i) for i in range(16)])\nprint([convert2(i) for i in range(16)])\nprint([convert3(i) for i in range(16)])\nprint([convert4(i) for i in range(16)])\nprint([convert5(i) for i in range(16)])\nprint([str(MyBitMask(i)) for i in range(16)])\n# ['', 'A', 'B', 'AB', 'C', 'AC', 'BC', 'ABC', 'D', 'AD', 'BD', 'ABD', 'CD', 'ACD', 'BCD', 'ABCD']\n", "%timeit [convert(i) for i in range(1024)]\n%timeit [convert2(i) for i in range(1024)]\n%timeit [convert3(i) for i in range(1024)]\n%timeit [convert4(i) for i in range(1024)]\n%timeit [convert5(i) for i in range(1024)]\n%timeit [str(MyBitMask(i)) for i in range(1024)]\n"], ["square = lambda num : num**2\nnums = [1,2,3,4,5,6,7,8,9,10]\nsquare_nums =[]\nfor i in nums :\n    square_nums.append(square(i))\nprint(square_nums)\n", "nums = [1,2,3,4,5,6,7,8,9,10]\nsquare_nums = [num**2 for num in nums]\n", "nums = [1,2,3,4,5,6,7,8,9,10]\nsquare_nums = []\nfor i in range(len(nums)):\n    square_nums.append(nums[i]**2)\n", "nums = [1,2,3,4,5,6,7,8,9,10]\nsquare_nums = []\ni = 0    \nwhile i <= len(nums):\n    square_nums.append(nums[i]**2)\n    i += 1\n"], ["square = lambda num : num**2\nnums = [1,2,3,4,5,6,7,8,9,10]\nsquare_nums = list(map(square, nums))\n"], [], ["square = lambda num : num*num\nnums = [1,2,3,4,5,6,7,8,9,10]\nsquare_nums =[]\nfor i in nums :\n    j=square(i)\n    square_nums.append(j)\n\nprint(square_nums)\n", "for i in range(len(nums)):\n    print(nums[i])# this will print each element\n"], [], ["seq 0 3 100 > 3k.txt\nseq 0 2 100 > 2k.txt\n", "i1 = iter(open(\"3k.txt\"))\ni2 = iter(open(\"2k.txt\"))\na = int(next(i1))\nb = int(next(i2))\naNotB = []\n# bNotA = []\nwhile True:\n    try:\n        if a < b:\n            aNotB += [a]\n            a = int(next(i1, None))\n        elif a > b:\n            # bNotA += [a]\n            b = int(next(i2, None))\n        elif a == b:\n            a = int(next(i1, None))\n            b = int(next(i2, None))\n    except TypeError:\n        if not b:\n            aNotB += list(i1)\n            break\n        else:\n            # bNotA += list(i1)\n            break\nprint(aNotB)\n", "$ seq 0 3 1000000 > 3k.txt\n$ seq 0 2 1000000 > 2k.txt\n$ time python manual_iter.py        \npython manual_iter.py  0.38s user 0.00s system 99% cpu 0.387 total\n$ time python heapq_groupby.py        \npython heapq_groupby.py  1.11s user 0.00s system 99% cpu 1.116 total\n"], ["df['servo_in_position'].diff().fillna(df['servo_in_position']).eq(1).cumsum()\\\n   .mask(df['servo_in_position'] == 0, 0)\n", "    servo_in_position  second_servo_in_position  Expected output  E_output\n0                   0                         1                0         0\n1                   0                         1                0         0\n2                   1                         2                1         1\n3                   0                         3                0         0\n4                   1                         4                2         2\n5                   1                         4                2         2\n6                   0                         5                0         0\n7                   0                         5                0         0\n8                   1                         6                3         3\n9                   0                         7                0         0\n10                  1                         8                4         4\n11                  0                         9                0         0\n12                  1                        10                5         5\n13                  1                        10                5         5\n14                  1                        10                5         5\n15                  0                        11                0         0\n16                  0                        11                0         0\n17                  0                        11                0         0\n18                  1                        12                6         6\n19                  1                        12                6         6\n20                  0                        13                0         0\n21                  0                        13                0         0\n22                  0                        13                0         0\n", "df['servo_in_position'].diff().fillna(df['servo_in_position']).eq(1).cumsum()\\\n   .mask(df['servo_in_position'] == 0, 0)\n"], ["def my_gen():\n  ...\n\nm1 = Muxer(my_gen)\nm2 = Muxer(my_gen)\n\nconsumer1(m1).start()\nconsumer2(m2).start()\n", "import queue\nfrom threading import Lock\nfrom collections import namedtuple\n\nclass Muxer():\n    Entry = namedtuple('Entry', 'genref listeners, lock')\n\n    already = {}\n    top_lock = Lock()\n\n    def __init__(self, func, restart=False):\n        self.restart = restart\n        self.func = func\n        self.queue = queue.Queue()\n\n        with self.top_lock:\n            if func not in self.already:\n                self.already[func] = self.Entry([func()], [], Lock())\n            ent = self.already[func]\n\n        self.genref = ent.genref\n        self.lock = ent.lock\n        self.listeners = ent.listeners\n\n        self.listeners.append(self)\n\n    def __iter__(self):\n        return self\n\n    def __next__(self):\n        try:\n            e = self.queue.get_nowait()\n        except queue.Empty:\n            with self.lock:\n                try:\n                    e = self.queue.get_nowait()\n                except queue.Empty:\n                    try:\n                        e = next(self.genref[0])\n                        for other in self.listeners:\n                            if not other is self:\n                                other.queue.put(e)\n                    except StopIteration:\n                        if self.restart:\n                            self.genref[0] = self.func()\n                        raise\n        return e\n"], ["df['g'] = np.where(df.running_bid_max.ge(df.ask_price_target_good), df['time'], pd.NaT)\n\ndf['l'] = np.where(df.running_bid_min.le(df.ask_price_target_bad), df['time'], pd.NaT)\n", "df['g'] = df['g'].bfill()\ndf['l'] = df['l'].ffill()\n", "0    2019-07-24 08:00:59.058198\n1    2019-07-24 08:00:59.058198\n2    2019-07-24 08:00:59.058198\n3    2019-07-24 08:00:59.058198\n4    2019-07-24 08:00:59.058198\n5    2019-07-24 08:00:59.058198\n6    2019-07-24 08:00:59.058198\n7    2019-07-24 08:00:59.058198\n8    2019-07-24 08:00:59.058198\n9    2019-07-24 08:00:59.058198\n10   2019-07-24 08:01:00.802679\n11   2019-07-24 08:01:02.781289\n12   2019-07-24 08:01:04.645144\n13   2019-07-24 08:01:06.491997\n14   2019-07-24 08:01:08.586688\n"], [], ["df['g'] = np.where(df.running_bid_max.ge(df.ask_price_target_good), df['time'], pd.NaT)\n\ndf['l'] = np.where(df.running_bid_min.le(df.ask_price_target_bad), df['time'], pd.NaT)\n", " df['g'] = df['g'].fillna(method='bfill')\n df['l'] = df['l'].fillna(method='bfill')\n"], ["def convert(i):\n    return ''.join('ABCDE'[pos] for pos in range(i.bit_length()) if i & (1 << pos))\n"], ["def convert(i):\n    return ''.join(c for b, c in zip(reversed('{:b}'.format(i)), 'ABCDE') if b == '1')\n"], [">>> import string\n>>> n = 5\n>>> ''.join(string.ascii_uppercase[i] for i,c in enumerate(bin(n)[:1:-1]) if c=='1')\n'AC'\n>>> \n>>> n = 15\n>>> ''.join(string.ascii_uppercase[i] for i,c in enumerate(bin(n)[:1:-1]) if c=='1')\n'ABCD'\n>>> \n>>> n = 2\n>>> ''.join(string.ascii_uppercase[i] for i,c in enumerate(bin(n)[:1:-1]) if c=='1')\n'B'\n"], ["def convert(i):\n    output = ''\n    pos = 0\n    while i:\n        if i & 1:\n            output += 'ABCDE'[pos]\n        pos += 1\n        i >>= 1\n    return output\n"], ["from operator import methodcaller\n\nlanguages = ['thai01', 'thai02', 'thai03', 'jap01', 'jap02', 'jap03']\nthai = list(filter(methodcaller('startswith', 'tha'), languages))\n"], ["languages = ['thai01', 'thai02', 'thai03', 'jap01', 'jap02', 'jap03']\nthai = list(filter(filter_str,languages))  # or  thai = list(filter(lambda x:'thai' in x,languages))\n\nprint(thai)    #['thai01', 'thai02', 'thai03']\n", "thai = [y for y in languages if 'tha' in y]\n"], ["df['time_bid_max_greater'] = df.time[df['running_bid_max'] >= df['ask_price_target_good']]\n\ndf['time_bid_min_less'] = df.time[df['running_bid_min'] <= df['ask_price_target_bad']]\n\ndf\n"], ["languages = ['thai01', 'thai02', 'thai03', 'jap01', 'jap02', 'jap03']\nthai = [x for x in languages if 'thai' in x]\nprint(thai)\n", "['thai01', 'thai02', 'thai03']\n", "languages = ['thai01', 'thai02', 'thai03', 'jap01', 'jap02', 'jap03']\n\nthai = []\n\ndef filter_str(lang):\n    if 'tha' in lang:\n        return True\n    else:\n        return False\n\nfor x in languages:\n    if filter_str(x):\n        thai.append(x)\n\nprint(thai)\n# ['thai01', 'thai02', 'thai03']\n", "languages = ['thai01', 'thai02', 'thai03', 'jap01', 'jap02', 'jap03']\n\ndef filter_str(lang):\n    if 'tha' in lang:\n        return True\n    else:\n        return False\n\nthai = [x for x in languages if filter_str(x)]\n\nprint(thai)\n# ['thai01', 'thai02', 'thai03']\n"], ["thai = [x for x in languages if filter_str(x)]\n"], ["languages = ['thai01', 'thai02', 'thai03', 'jap01', 'jap02', 'jap03']\n\nthai = []\njapanese = []\n\nfor x in languages:\n    if x.startswith(\"tha\"):\n        thai.append(x)\n    else:\n        japanese.append(x)\nprint(thai)\nprint(japanese)\n", "['thai01', 'thai02', 'thai03']\n['jap01', 'jap02', 'jap03']\n"], [], ["import itertools\nfrom statistics import mean\n\nd = {'actor1': {'salary': {'year1': 60, 'year2': 65}, 'age': 30},\n     'actor2': {'salary': {'year1': 20, 'year2': 30}, 'age': 17},\n     'actor3': {'salary': {'year1': 50, 'year2': 80}, 'age': 25}}\n\n#helpers\nage = operator.itemgetter('age')\nsalary = operator.itemgetter('salary')\nyear = operator.itemgetter(0)\nvalue = operator.itemgetter(1)\n\nages = map(age,d.values())\navg_age = mean(ages)\nprint(f'avg_age: {avg_age}')\n\nsalaries = map(dict.items, map(salary, d.values()))\nsalaries = sorted(itertools.chain.from_iterable(salaries), key=year)\nfor key, group in itertools.groupby(salaries, year):\n    avg = mean(map(value, group))\n    print(f'avg for {key}: {avg}')\n"], ["def avg(nums):\n    nums = list(nums)\n    return round(sum(nums) / len(nums), 1)\n\nd = {'actor1': {'salary': {'year1': 60, 'year2': 65}, 'age': 30},\n     'actor2': {'salary': {'year1': 20, 'year2': 30}, 'age': 17},\n     'actor3': {'salary': {'year1': 50, 'year2': 80}, 'age': 25}}\n\naverage = {'salary': {}}\naverage['age'] = avg(actor['age'] for actor in d.values())\nfor year in list(d.values())[0]['salary']:\n    average['salary'][year] = avg(actor['salary'][year] for actor in d.values())\n\nb = {'average': average}\n", ">>> print(b)\n{'average': {'salary': {'year1': 43.3, 'year2': 58.3}, 'age': 24.0}}\n"], ["def average_dicts(dicts):\n    result = {}\n    for i, d in enumerate(dicts):\n        for k, v in d.items():\n            update_dict_average(result, k, v, i)\n    return result\n\ndef update_dict_average(current, key, update, n):\n    if isinstance(update, dict):\n        subcurrent = current.setdefault(key, {})\n        for subkey, subupdate in update.items():\n            update_dict_average(subcurrent, subkey, subupdate, n)\n    else:\n        current[key] = (current.get(key, 0) * n + update) / (n + 1)\n\nd = {'actor1': {'salary': {'year1': 60, 'year2': 65}, 'age': 30},\n     'actor2': {'salary': {'year1': 20, 'year2': 30}, 'age': 17},\n     'actor3': {'salary': {'year1': 50, 'year2': 80}, 'age': 25}}\n\nresult = {'average': average_dicts(d.values())}\nprint(result)\n# {'average': {'salary': {'year1': 43.333333333333336, 'year2': 58.333333333333336}, 'age': 24.0}}\n"], [], ["from itertools import groupby\ndata = {'actor1': {'salary': {'year1': 60, 'year2': 65}, 'age': 30}, 'actor2': {'salary': {'year1': 20, 'year2': 30}, 'age': 17}, 'actor3': {'salary': {'year1': 50, 'year2': 80}, 'age': 25}}\ndef ave(d):\n  _data = sorted([i for b in d for i in b.items()], key=lambda x:x[0])\n  _d = [(a, [j for _, j in b]) for a, b in groupby(_data, key=lambda x:x[0])]\n  return {a:ave(b) if isinstance(b[0], dict) else round(sum(b)/float(len(b)), 1) for a, b in _d}\n\nresult = {'average':ave(list(data.values()))}\n", "{'average': {'age': 24.0, 'salary': {'year1': 43.3, 'year2': 58.3}}}\n"], ["import numpy as np\n\n#   Setup conditions\nconditions = [\n  (df['running_bid_max'] >= df['ask_price_target_good']),\n  (df['running_bid_min'] >= df['ask_price_target_bad'])]\n\n#   Setup output (you could insert timestamp var here)\nchoices = [\"Greater\", \"Lesser\"]\n\n#   Apply conditions\ndf['bid_value'] = np.select(conditions, choices, default='N/A')\n"], ["results = []\nwith open('file1.csv') as file1, open('file2.csv') as file2:\n        var1 = file1.readline()\n        var2 = file2.readline()\n        while var1:\n            while var1 and var2:\n                if int(var1) < int(var2):\n                    results.append(int(var1))\n                    var1 = file1.readline()\n                elif int(var1) > int(var2):\n                    var2 = file2.readline()\n                elif int(var1) == int(var2):\n                    var1 = file1.readline()\n                    var2 = file2.readline()\n            if var1:\n                results.append(int(var1))\n                var1 = file1.readline()\nprint(results)\noutput = [2, 5, 7, 9]\n"], ["FileA = [1, 1, 2, 3, 4, 5]\nFileB = [1, 3, 4, 6]\n\nfrom itertools import groupby\nfrom heapq import merge\n\ngen_a = ((v, 'FileA') for v in FileA)\ngen_b = ((v, 'FileB') for v in FileB)\n\nfor v, g in groupby(merge(gen_a, gen_b, key=lambda k: int(k[0])), lambda k: int(k[0])):\n    if any(v[1] == 'FileB' for v in g):\n        continue\n    print(v)\n", "2\n5\n", "from itertools import groupby\nfrom heapq import merge\n\ngen_a = ((int(v.strip()), 1) for v in open('3k.txt'))\ngen_b = ((int(v.strip()), 2) for v in open('2k.txt'))\n\nfor v, g in groupby(merge(gen_a, gen_b, key=lambda k: k[0]), lambda k: k[0]):\n    if any(v[1] == 2 for v in g):\n        continue\n    print(v)\n", "seq 0 3 10000000 > 3k.txt\nseq 0 2 10000000 > 2k.txt\n", "real    0m10,656s\nuser    0m10,557s\nsys 0m0,076s\n"], ["def strip_read(file):\n    return file.readline().rstrip()\n\nin_a_not_b = []\nin_b_not_a = []\nwith open(\"fileA\") as A:\n    with open(\"fileB\") as B:\n        Aline = strip_read(A)\n        Bline = strip_read(B)\n        while Aline or Bline:\n            if Aline < Bline and Aline:\n                in_a_not_b.append(Aline)\n                Aline = strip_read(A)\n            elif Aline > Bline and Bline:\n                in_b_not_a.append(Bline)\n                Bline = strip_read(B)\n            else:\n                Aline = strip_read(A)\n                Bline = strip_read(B)\n\nprint(\"in A not in B\", in_a_not_b, \"\\nin B not in A\", in_b_not_a)\n", "in A not in B ['2', '5', '7'] \nin B not in A ['6']\n"], [], ["import os\nfor year in range(1921, 2011):\n    os.mkdir(\"{}\".format(year))\n"], ["import os\nfor year in range(1922, 2011):\n    path = os.mkdir(\"\\\\\"+str(year))\n"], ["path = os.mkdir(r\"\\\" + str(year))\n", "path = os.mkdir(fr\"\\{year}\")\n"], ["import os\nfor year in range(1922, 2011):\n    os.mkdir(\"\\\\{}\".format(year))\n"], [], [], ["z = lambda: int(input('a:')) + int(input('b:'))\n"], ["enter numbers: 1 2 3 4\n-3\n"], ["In [1]: z = lambda x : x+1                                                                                                                                                                     \n\nIn [2]: z(int(input()))                                                                                                                                                                        \n4\nOut[2]: 5\n\nIn [3]:  \n"], ["from numba import njit\n\n@njit\ndef f(u):\n    out = np.zeros(len(u), np.int64)\n    a = out[0] = u[0]\n    for i in range(1, len(u)):\n        if u[i] == 1:\n            if u[i - 1] == 0:\n                a += 1\n            out[i] = a\n    return out\n\nf(df.servo_in_position.to_numpy())\n\narray([0, 0, 1, 0, 2, 2, 0, 0, 3, 0, 4, 0, 5, 5, 5, 0, 0, 0, 6, 6, 0, 0, 0])\n"], ["[('2019-07-24T07:59:46.393418', '2019-07-24T07:59:46.393418', False, False), \n ('2019-07-24T07:59:44.432034', '2019-07-24T07:59:44.432034', False,  True), \n ('2019-07-24T07:59:48.425615', '2019-07-24T07:59:54.428181', False, False), \n ('2019-07-24T07:59:58.550378', '2019-07-24T08:00:57.338769', False,  True), \n ('2019-07-24T08:00:59.058198', '2019-07-24T08:01:08.586688',  True,  True)]\n", "info_cols = ['running_bid_max', 'ask_price_target_good', 'running_bid_min', 'ask_price_target_bad', 'time'] \ndata_frames = [pandas.DataFrame(_)[info_cols] for _ in partitions]\ndata_frames\n", "   running_bid_max  ask_price_target_good  running_bid_min  ask_price_target_bad                        time\n0            291.4                 291.53           291.09                291.13  2019-07-24T07:59:46.393418\n\n   running_bid_max  ask_price_target_good  running_bid_min  ask_price_target_bad                        time\n0            291.4                 291.46           291.09                291.06  2019-07-24T07:59:44.432034\n\n   running_bid_max  ask_price_target_good  running_bid_min  ask_price_target_bad                        time\n0            291.4                 291.53           291.09                291.13  2019-07-24T07:59:48.425615\n1            291.4                 291.53           291.09                291.13  2019-07-24T07:59:50.084206\n2            291.4                 291.53           291.09                291.13  2019-07-24T07:59:52.326455\n3            291.4                 291.53           291.09                291.13  2019-07-24T07:59:54.428181\n\n   running_bid_max  ask_price_target_good  running_bid_min  ask_price_target_bad                        time\n0           291.40                 291.55            291.2                291.15  2019-07-24T07:59:58.550378\n1           291.40                 291.55            291.2                291.15  2019-07-24T08:00:00.837238\n2           291.51                 291.66            291.4                291.26  2019-07-24T08:00:57.338769\n\n   running_bid_max  ask_price_target_good  running_bid_min  ask_price_target_bad                        time\n0           291.96                 291.66           291.40                291.26  2019-07-24T08:00:59.058198\n1           291.96                 291.66           291.40                291.26  2019-07-24T08:01:00.802679\n2           291.96                 291.66           291.45                291.26  2019-07-24T08:01:02.781289\n3           291.96                 291.66           291.45                291.26  2019-07-24T08:01:04.645144\n4           292.07                 291.66           291.45                291.26  2019-07-24T08:01:06.491997\n5           292.10                 291.66           291.45                291.26  2019-07-24T08:01:08.586688\n", "next(data_stream())\n\n{'time': '2019-07-24T07:59:46.393418',\n 'bid_price': 291.1,\n 'ask_price': 291.33,\n 'running_bid_max': 291.4,\n 'running_bid_min': 291.09,\n 'ask_price_target_good': 291.53,\n 'ask_price_target_bad': 291.13}\n"], ["df.servo_in_position.diff().eq(1).cumsum().mul(df.servo_in_position.eq(1),axis=0)\n"], ["u = df['servo_in_position']\n\n(u.eq(1) & u.shift().ne(1)).cumsum() * u\n", "0     0\n1     0\n2     1\n3     0\n4     2\n5     2\n6     0\n7     0\n8     3\n9     0\n10    4\n11    0\n12    5\n13    5\n14    5\n15    0\n16    0\n17    0\n18    6\n19    6\n20    0\n21    0\n22    0\nName: servo_in_position, dtype: int64\n"], ["df['Expected_output'] = np.where(df.servo_in_position.eq(1),\n                                 df.servo_in_position.diff().eq(1).cumsum(),\n                                 0)\n"], ["df['g']=np.NaN\ndf['l']=np.NaN\ndeep=len(df.index)\nirange= np.arange(1,deep)\n\nfor i in irange:\n    G=df.time[df.running_bid_max.shift(i)-df.ask_price_target_good>=0]\n    G.index=G.index-i\n    df['g']=df['g'].combine_first(G)\n\n    L=df.time[df.running_bid_min.shift(i)-df.ask_price_target_bad<=0]\n    L.index=L.index-i\n    df['l']=df['l'].combine_first(L)\n"], ["import numpy as np\nimport pandas as pd\nimport datetime as dtm\n\ndata = pd.read_csv(\"data.csv\", parse_dates=[\"time\"])\n\nTIME_WINDOW = 5*60\n\ndef over_target_good(row, dataframe):\n    time_window = dataframe.time <= (row.time\n                                     + dtm.timedelta(seconds=TIME_WINDOW))\n    window_data = dataframe[time_window]\n    over_test = window_data.running_bid_max >= row.ask_price_target_good\n    over_data = window_data[over_test]\n    if len(over_data) > 0:\n        return over_data.running_bid_max[over_data.index[0]]\n    return np.NaN\n\ndef below_target_bad(row, dataframe):\n    time_window = dataframe.time <= (row.time\n                                     + dtm.timedelta(seconds=TIME_WINDOW))\n    window_data = dataframe[time_window]\n    below_test = window_data.running_bid_min <= row.ask_price_target_bad\n    below_data = window_data[below_test]\n    if len(below_data) > 0:\n        return below_data.running_bid_min[below_data.index[0]]\n    return np.NaN\n\nprint(\"OVER\\n\", data.apply(over_target_good, axis=1, args=(data,)) )\nprint(\"BELOW\\n\", data.apply(below_target_bad, axis=1, args=(data,)) )\n"], ["import re\n\ndef remove_duplicates_helper(s):\n    words = (x.group(0) for x in re.finditer(r\"[^\\s]+\", s))\n    current = None\n    for word in words:\n        if word != current:\n            yield word\n            current = word\n\ndef remove_duplicates(s):\n    return ' '.join(remove_duplicates_helper(s))\n\nmystring = \"my friend's new new new new and old old cats are running running in the street\"\nprint(remove_duplicates(mystring))\n"], ["mystring = \"my friend's new new new new and old old cats are running running in the street\"\n\nwords = mystring.split()\n\nanswer = [each_pair[0] for each_pair in zip(words, words[1:]) if each_pair[0] != each_pair[1]] + [words[-1]]\n\nprint(' '.join(answer))\n", "my friend's new and old cats are running in the street\n"], [" mylist = []\n l1 = enumerate(mystring.split())\n\n for i, w in l1:\n     for n, l in l1:\n             if l != w and i == n-1:\n                     mylist.append(w)\n mylist.append(mystring.split()[-1])\n myoutput = \" \".join(mylist)\n"], ["mystring = \"my friend's new new new new and old old cats are running running in the street\"\n", "words = mystring.split()\n", "myoutput = ' '.join([x for i,x in enumerate(words) if i==0 or x!=words[i-1]])\n"], ["def strip2single(textarr):\n    if len(textarr)==0:\n        return \"\"\n    result=textarr[0]\n    for i in range(1,len(textarr)):\n        if textarr[i]!=textarr[i-1]:\n            result=result+' '+textarr[i]\n    return(result)\n\n\nmystring = \"my friend's new new new new and old old cats are running running in the street\"\n\ny=strip2single(mystring.split())\nprint(y)\n"], ["import re\n\nmystring = \"my friend's new new new new and old old cats are running running in the street\"\nres = re.sub(r'\\b(\\w+\\s*)\\1{1,}', '\\\\1', mystring)\nprint(res)\n", "my friend's new and old cats are running in the street\n"], ["import itertools\n\n>> ' '.join(k for k, _ in itertools.groupby(mystring.split()))\n\"my friend's new and old cats are running in the street\"\n"], ["print(sum(map(int.__eq__, a, b)))\n", "6\n"], ["int main( void ) { ... }\n", "int main( int argc, char **argv ) { ... }\n", "#include <stdio.h>\n\nint foo( int x ) { return 2 * x; }\n\nint bar( int x ) { return foo( x ) * 3; }\n\nint main( void )\n{\n  printf ( \"bar( %d ) = %d\\n\" , 2, bar(2) );\n  return 0;\n}\n", "#ifndef BAR_H // include guard - not required, but good practice.\n#define BAR_H // Keeps the contents of the file from being processed more than once in a translation unit\n\nint foo( int ); // only need the type of the argument in a declaration\n\nint bar( int );\n\n#endif\n", "#include \"bar.h\"\n\nint foo( int x ) { return 2 * x; }\n\nint bar( int x ) { return foo( x ) * 3; }\n", "#include <stdio.h>\n#include \"bar.h\"\n\nint main( void )\n{\n  printf( \"bar( %d ) = %d\\n\", 2, bar(2) );\n  return 0;\n}\n"], [], ["// This code will not compile\nconst char *const strings[] = { sThis, sThat };\nstatic const char sThis[] = \"this\";\nstatic const char sThat[] = \"that\";\n", "#include <stdio.h>\n\nint main(void)\n{\n    printHello();\n}\n\nvoid printHello(void)\n{\n    printf(\"Hello World\\n\");\n}\n", "#include <stdio.h>\n\nint main(void)\n{\n    return printHello(1, \"frobozz\", 3.14159)\n         + printHello(2.1828);\n}\n\nvoid printHello(void)\n{\n    printf(\"Hello World\\n\");\n}\n", "#include <stdio.h>\n\nstatic void printHello(void);\n\nint main(void)\n{\n    printHello();\n}\n\nstatic void printHello(void)\n{\n    printf(\"Hello World\\n\");\n}\n"], [], ["int main(int argc, char* argv[])\n", "int main()\n"], ["k={\n    'first-name':'foo',\n    'last-name':'bar',\n    'gender':'unknown',\n    'age':99\n}\n\ns =list(map(lambda x:{x[0]:x[1]},k.items() ))\n", "[{'first-name': 'foo'},\n {'last-name': 'bar'},\n {'gender': 'unknown'},\n {'age': 99}]\n"], ["Dict = {\n    'first-name':'foo',\n    'last-name':'bar',\n    'gender':'unknown',\n    'age':99\n}\nlist = [(key, value) for key, value in Dict.items()]\n\nlist >> [('first-name':'foo'), ('last-name':'bar'), ('gender':'unknown'),('age':99)]\n"], ["dict1 = {\n    'first-name':'foo',\n    'last-name':'bar',\n    'gender':'unknown',\n    'age':99\n}\n\nnew_list = [{k:v} for k,v in dict1.items() ]\nprint(new_list)\n", "[{'first-name': 'foo'}, {'last-name': 'bar'}, {'gender': 'unknown'}, {'age': 99}]\n", "new_list = list(map(dict, zip(dict1.items())))\n"], [">>> [dict([i]) for i in d.items()]\n[{'gender': 'unknown'}, {'age': 99}, {'first-name': 'foo'}, {'last-name': 'bar'}]\n"], [], ["result = pd.Series([random.choice(pd.iloc[i]) for i in range(len(df))])\n"], ["words = []\nfor elt0, elt1 in zip(list1, reversed(list2)):\n    w = elt0\n    if elt1:\n       w += elt1\n    words.append(s)\nreturn \" \".join(words)\n"], ["pd.DataFrame(\n    df.values[range(df.shape[0]), \n                   np.random.randint(\n                       0, df.shape[1], size=df.shape[0])])\n", "    0\n0   4\n1   5\n2   9\n"], ["import numpy as np\n\nindices = np.random.choice(np.arange(len(df.columns)), len(df), replace=True)\n", "df['random'] = df.to_numpy()[np.arange(len(df)), indices]\n", "   a  b  c  random\n0  1  4  7       7\n1  2  5  8       5\n2  3  6  9       9\n"], ["ddf = df.apply(lambda row : random.choice(row.tolist()), axis=1)\n", "ddf = df.apply(lambda row : row.sample(), axis=1)\n"], ["pd.Series([np.random.choice(i,1)[0] for i in df.values])\n"], ["list1=['A', 'app','a', 'd', 'ke', 'th', 'doc', 'awa']\nlist2=['y','tor','e','eps','ay',None,'le','n']\nj = -1\nsentence = \"\"\nfor i in list1:\n    if list2[j] != None:\n        word = i + list2[j]\n    j-=1\n    sentence = sentence + word + \" \"\nprint(sentence)\n"], ["# https://stackoverflow.com/a/51915131/ @Divakar\ndef random_num_per_grp(L):\n    # For each element in L pick a random number within range specified by it\n    r1 = np.random.rand(np.sum(L)) + np.repeat(np.arange(len(L)),L)\n    offset = np.r_[0,np.cumsum(L[:-1])]\n    return r1.argsort()[offset] - offset\n\n# a is input array\nsidx = a.argsort()\nc = np.bincount(a)\nout = sidx[random_num_per_grp(c) + np.r_[0,c[:-1].cumsum()]]\n"], ["import random\nimport numpy as np\n\ndef random_index_each(array):\n    def random_index(item):\n        return (item, random.choice(np.where(array == item)[0]))\n    return dict(map(random_index, set(array)))\n\nif __name__ == '__main__':\n    array = np.array([2, 2, 2, 2, 2, 2, 2, 1, 2, 2, 1, 1, 1, 0, 1, 0, 0, 2, 2, 1])\n    for _ in range(4):\n        print(random_index_each(array))\n", "{0: 16, 1: 12, 2: 8}\n{0: 15, 1: 14, 2: 6}\n{0: 15, 1: 19, 2: 6}\n{0: 15, 1: 11, 2: 2}\n"], ["list1=['A', 'app','a', 'd', 'ke', 'th', 'doc', 'awa']\nlist2=['y','tor','e','eps','ay',None,'le','n'] \n\nprint(' '.join(map(lambda x, y: (x or '')+(y or ''),list1, list2[::-1])))\n\nAn apple a day keeps the doctor away\n"], ["list1=['A', 'app','a', 'd', 'ke', 'th', 'doc', 'awa']\nlist2=['y','tor','e','eps','ay',None,'le','n']\n\nstring1 = \"\"\nfor a1,a2 in zip(list1,reversed(list2)):\n    if a2 is not None:\n        string1 = string1+\" \"+a1+a2\n    else:\n        string1 = string1+\" \"+a1\n\nprint(string1.strip())\n", "An apple a day keeps the doctor away\n"], ["def flow_from_df(dataframe: pd.DataFrame, chunk_size: int = 10):\n    for start_row in range(0, dataframe.shape[0], chunk_size):\n        end_row  = min(start_row + chunk_size, dataframe.shape[0])\n        yield dataframe.iloc[start_row:end_row, :]\n", "get_chunk = flow_from_df(dataframe)\nchunk1 = next(get_chunk)\nchunk2 = next(get_chunk)\n", "def get_chunk(dataframe: pd.DataFrame, chunk_size: int, start_row: int = 0) -> pd.DataFrame:\n    end_row  = min(start_row + chunk_size, dataframe.shape[0])\n\n    return dataframe.iloc[start_row:end_row, :]\n"], ["import numpy as np\nfrom numpy.random import choice\n\na = np.array([2, 2, 2, 2, 2, 2, 2, 1, 2, 2, 1, 1, 1, 0, 1, 0, 0, 2, 2, 1])\n\nsamples = [choice(np.argwhere(a==s).flatten()) for s in np.unique(a)]\n"], ["import numpy as np\n\narray = np.array([2, 2, 2, 2, 2, 2, 2, 1, 2, 2, 1, 1, 1, 0, 1, 0, 0, 2, 2, 1])\ncategories = [0,1,2]\nfor category in categories:\n    indices = np.where(array  == category)[0]\n    random_choice = array[np.random.choice(indices)]\n"], [" for i,j in range(n,len(list1)):\n     a = 1\n     j = n - a\n     s = list1[i]+list2[j]\n     resultant_data.append(s)\n     a=+1 \n     n+=1\n"], ["def func(rowws = df.iterrows(), N=3):\n    selected = []\n    for i in range(N):\n        selected.append(next(rowws))\n\n    yield selected\n\nselected = next(func())\n"], ["x = np.array([2, 2, 2, 2, 2, 2, 2, 1, 2, 2, 1, 1, 1, 0, 1, 0, 0, 2, 2, 1])\nind0 = np.random.choice(np.where(x==0)[0])\nind1 = np.random.choice(np.where(x==1)[0])\nind2 = np.random.choice(np.where(x==2)[0])\n"], [" def func():\n    selected = []\n    for index, row in df.iterrows():\n        if(index<N):\n            rowData =[]\n            rowData.append(row['A'])\n            rowData.append(row['B'])\n            rowData.append(row['C'])\n            selected.append(rowData)\n        else:\n            break\n\n    return selected\n"], ["def select_in_df(start, end):\n    selected = data_frame[start:end]\n    selected = select.values.tolist()\n    return selected\n\n\nprint(select_in_df(0, 4)) #to update the start and end values, you can use any loop or whatever is your convenience \n\n#here is an example \nstart = 0\nend = 3\nfor i in range(10): #instead of range you can use data_frame.iterrows() \n    select_in_df(start, end+1) #0:4 which gives you 3 rows\n    start = end+1\n    end = i\n"], ["def func(dataframe, N=3):\n    return np.array_split(dataframe.values, N)\n\nprint(func(dataframe))\n", "[array([[5, 8, 2],\n       [1, 2, 3],\n       [4, 5, 6]]), array([[7, 8, 9],\n       [0, 1, 2],\n       [3, 4, 5]]), array([[7, 8, 6],\n       [1, 2, 3]])]\n"], ["for zip in zips.iterator(): # Using chunk_size here if you're working with Django >= 2.0 might help.\n    important_buildings = Building.objects.filter(\n        boundary__within=zip.boundary,\n        # Some conditions here ... \n        \n        # You could even use annotations with conditional expressions\n        # as Case and When.\n        \n        # Also Q and F expressions.\n        \n        # It is very uncommon the use case you cannot address \n        # with Django's ORM.\n\n        # Ultimately you could use raw SQL. Anything to avoid having\n        # a list with the whole object.\n    )\n\n    # And then just load into the list the data you need\n    # to perform your analysis.\n\n    # Analysis according size.\n    data = important_buildings.values_list('size', flat=True)\n\n    # Analysis according height.\n    data = important_buildings.values_list('height', flat=True)\n\n    # Perhaps you need more than one attribute ...\n    # Analysis according to height and size.\n    data = important_buildings.values_list('height', 'size')\n    \n    # Etc ...\n", "from psutil import Process\n\ndef memory_test():\n    a = []\n    for i in range(10000):\n        a.append(i)\n    del a\n\nprint(process.memory_info().rss)  # Prints 29728768\nmemory_test()\nprint(process.memory_info().rss)  # Prints 30023680\n"], ["import re\ns = 'cold weather gives me cold' \nnew_s = re.findall('\\w+|\\s+', s)\nl = [(a, sum(map(len, new_s[:i]))) for i, a in enumerate(new_s) if a != ' ']\n", "tag = ['O','O','O','O','disease'] \nresult = [[c if not c else c, c+len(d)] for a, [d, c] in zip(tag, l) if a == 'disease']\n", "[[22, 26]]\n"], [">>> str = 'cold weather gives me cold' \n>>> word_pos = iter((match.group(), match.span(1)) for match in re.finditer(r'(\\S+)\\S', string))\n>>>\n>>> n=4\n>>> next(islice(word_pos, n, n+1))\n('cold', (22, 25))\n"], ["def get(str,target_index):\n  start = len(\" \".join(str.split(\" \")[:target_index])) + 1\n  end = start + len(str.replace('.','').split(' ')[target_index])\n  return (start,end)\n\nstr = 'cold weather gives me cold.' \ntag = ['O','O','O','O','disease']\nstart,end = get(str,tag.index('disease'))\nprint(start,end,str[start:end]) # outputs 22 26 cold\n\nstr = 'cold weather gives me cold'\ntag = ['O','O','O','O','disease']\nstart,end = get(str,tag.index('disease'))\nprint(start,end,str[start:end]) # outputs 22 26 cold\n\nstr = 'cold weather gives me cold and cough' \ntag = ['O','O','O','O','disease']\nstart,end = get(str,tag.index('disease'))\nprint(start,end,str[start:end]) # outputs 22 26 cold\n"], ["def find_index(s, n):\n    length = len(s.split()[n])\n    index = [(0, len(s.split()[0]) - 1)]\n    for i in s.split():\n        index.append((index[-1][0] + len(i), index[-1][1] + len(i)))\n    return index[n + 1]\nprint(find_index('cold weather gives me cold', 4))\n", "(22, 25)\n"], ["strData = 'cold weather gives me cold' \ntag = ['O','O','O','O','disease']\ndiseaseIndex = tag.index('disease')\ndiseaseName = strData.split()[diseaseIndex]\nprint(diseaseName)\ndiseaseNameStartIndex = sum(len(word) for (index, word) in enumerate(strData.split()) if index< diseaseIndex ) + diseaseIndex\ndiseaseNameEndIndex = diseaseNameStartIndex + len(diseaseName) -1\nprint(\"diseaseNameStartIndex = \",diseaseNameStartIndex)\nprint(\"diseaseNameEndIndex = \",diseaseNameEndIndex)\n", "cold\ndiseaseNameStartIndex =  22\ndiseaseNameEndIndex =  25\n"], ["import re\nfrom itertools import accumulate\n\ndef find_index(string, n):\n    words = string.split()\n    len_word = len(words[n])\n    end_index = list(accumulate(map(len, re.split('(\\s)' , string))))[::2][n]\n    return end_index - len_word, end_index - 1\n", "find_index('cold weather gives me cold', 4) #5th word means 4 in indexing\n", "(22, 25)\n"], ["str = 'cold weather gives me cold'\nword_idx = 4 # index of the word we are looking for\n\nsplit_str = str.split(' ')\nprint(split_str[word_idx]) # outputs 'cold'\n\nstart_pos = 0\nfor i in range(word_idx):\n    start_pos += len(split_str[i]) + 1 # add one because of the spaces between words\nend_pos = start_pos + len(split_str[word_idx]) - 1\n\nprint(start_pos) # prints 22\nprint(end_pos) # prints 25\n"], ["string_list = string.split(\" \")\nword_start = len(\" \".join(string_list[:4])) + 1\nword_end = word_start + len(string_list[4])\n"], ["print([n for n in range(0, 100, 5) if not n % 3])\n"], ["for i in range(100): # Numbers between 0 and 100\n    if i % 3 == 0 and i % 5 == 0:\n        # If i is divisible by 3 and i is also divisible by 5 then print it\n        print(i)\n"], ["print([n for n in range(0, 100, 5) if not n % 3])\n", "[0, 15, 30, 45, 60, 75, 90]\n", "print([n for n in range(0, 100, 15)])\n", "[0, 15, 30, 45, 60, 75, 90]\n"], ["for number in range (0, 100):\n    if (number % 15 == 0):\n        print (number)\n"], [], [], ["obj = [\"Even\" if i%2==0 else \"odd\" for i in range(20)]\nprint(list(enumerate(obj))) # [(0, 'Even'), (1, 'odd'), (2, 'Even'), (3, 'odd'), (4, 'Even'), (5, 'odd'), (6, 'Even'), (7, 'odd'), (8, 'Even'), ...\n", "obj = [\"Even\" if i%2==0 else \"odd\" for i in range(20)]\n\nfor key,value in enumerate(obj):\n    print (\"{} is {} number\".format(key,value))\n", "0 is Even number\n1 is odd number\n2 is Even number\n3 is odd number\n4 is Even number\n5 is odd number\n6 is Even number\n7 is odd number\n8 is Even number\n9 is odd number\n10 is Even number\n11 is odd number\n12 is Even number\n13 is odd number\n14 is Even number\n15 is odd number\n16 is Even number\n17 is odd number\n18 is Even number\n19 is odd number\n"], ["print('\\n'.join(str(i) + {0:' is even', 1:' is odd'}[i&1] for i in range(20)))\n", "from itertools import cycle\n\nc = cycle([' is even', ' is odd'])\nprint('\\n'.join(str(i) + msg for i, msg in zip(range(20), c)))\n", "0 is even\n1 is odd\n2 is even\n3 is odd\n4 is even\n5 is odd\n6 is even\n7 is odd\n8 is even\n9 is odd\n10 is even\n11 is odd\n12 is even\n13 is odd\n14 is even\n15 is odd\n16 is even\n17 is odd\n18 is even\n19 is odd\n"], [], ["obj = [(i,\"even\" if i%2==0 else \"odd\") for i in range(20)]\nprint(obj)\n", "obj = {i:\"even\" if i%2==0 else \"odd\" for i in range(20)}\nprint(obj)\n"], ["import numpy as np\nnp.sum(np.array(a) == np.array(b))\n"], ["list(map(eq, a, b))\n# [True, True, True, False, True, False, False, False, True, True]\n"], ["a = [1,2,3,4,2,7,3,5,6,7]\nb = [1,2,3,1,2,5,6,2,6,7]\ncount = sum(a[i] == b[i] for i in range(len(a)))\nprint(count)\n\n6\n"], ["sum(i1 == i2 for i1, i2 in zip(a, b))\n"], ["sum(x == y for x, y in zip(a, b))\n"], [], ["x = 12     # this is an assignment, and because we're outside functions x\n           # is deduced to be a global\n\ndef foo():\n    print(x)     # we only \"read\" x, thus we're talking of the global\n\ndef bar():\n    x = 3        # this is an assignment inside a function, so x is local\n    print(x)     # will print 3, not touching the global\n\ndef baz():\n    x += 3       # this will generate an error: we're writing so it's a\n                 # local, but no value has been ever assigned to it so it\n                 # has \"no value\" and we cannot \"increment\" it\n\ndef baz2():\n    global x     # this is a declaration, even if we write in the code\n                 # x refers to the global\n    x += 3       # Now fine... will increment the global\n"], [], [], ["while True: \n", "while my_function() > 0:\n"], ["In [100]: df1 = pd.concat([d1] * 10**5, ignore_index=True)\n\nIn [101]: df2 = pd.concat([d2] * 10**5, ignore_index=True)\n\nIn [102]: df1.shape\nOut[102]: (700000, 3)\n\nIn [103]: df2.shape\nOut[103]: (300000, 3)\n", "In [106]: %%timeit\n     ...: res =  (df1.reset_index()\n     ...:         .merge(df2, on=['a','b'], indicator=True, how='outer', suffixes=('','_'))\n     ...:         .query('_merge == \"left_only\"')\n     ...:         .set_index('index')\n     ...:         .rename_axis(None)\n     ...:         .reindex(df1.columns, axis=1))\n     ...:\n     ...:\n---------------------------------------------------------------------------\nMemoryError                               Traceback (most recent call last)\n"], ["pd.concat([d1, d2]).drop_duplicates(['a', 'b'], keep=False)\n\n   a  b  c\n1  0  1  2\n2  1  0  3\n6  2  2  7\n", "pd.concat([d1, pd.concat([d2]*2)]).drop_duplicates(['a', 'b'], keep=False)\n\n   a  b  c\n1  0  1  2\n2  1  0  3\n6  2  2  7\n"], ["df = (d1.reset_index()\n        .merge(d2, on=['a','b'], indicator=True, how='outer', suffixes=('','_'))\n        .query('_merge == \"left_only\"')\n        .set_index('index')\n        .rename_axis(None)\n        .reindex(d1.columns, axis=1))\nprint (df)\n   a  b  c\n1  0  1  2\n2  1  0  3\n6  2  2  7\n", "df = d1[~d1.set_index([\"a\", \"b\"]).index.isin(d2.set_index([\"a\",\"b\"]).index)]\nprint (df)\n   a  b  c\n1  0  1  2\n2  1  0  3\n6  2  2  7\n"], ["d1[~d1[['a','b']].astype(str).sum(axis=1).isin(d2[['a','b']].astype(str).sum(axis=1))]\n", "   a  b  c\n1  0  1  2\n2  1  0  3\n6  2  2  7\n"], ["from collections import Counter\nfrom itertools import accumulate\n\ns = 'AAABBBCAB'\npsum = list(accumulate(map(Counter, s)))\n", ">>> psum[6] - psum[1]  # get frequencies for s[2:7]\nCounter({'B': 3, 'A': 1, 'C': 1})\n"], ["from collections import Counter\n\ns = 'AAABBBCAB'\n\n[ dict(Counter(s[:i]) for i in range(1,len(s))]\n", "[{'A': 1},  {'A': 2},  {'A': 3},  {'A': 3, 'B': 1},  {'A': 3, 'B': 2},\n{'A': 3, 'B': 3},  {'A': 3, 'B': 3, 'C': 1},  {'A': 4, 'B': 3, 'C': 1}]\n"], ["from collections import defaultdict\n\nc = defaultdict(int)\ns = 'AAABBBCAB'\n\npsum = []\n\n#iterate through the character\nfor char in s:\n    #Update count for each character\n    c[char] +=1\n    #Add the updated dictionary to the output list\n    psum.append(dict(c))\n\nprint(psum)\n", "[{'A': 1}, {'A': 2}, {'A': 3}, {'A': 3, 'B': 1}, \n{'A': 3, 'B': 2}, {'A': 3, 'B': 3}, \n{'A': 3, 'B': 3, 'C': 1}, {'A': 4, 'B': 3, 'C': 1}, \n{'A': 4, 'B': 4, 'C': 1}]\n"], [], [], ["print (df[''])\n\n0  1  11  41  51\n1  2  22  42  52\n2  3  33  43  53\n3  4  44  44  54\n", "df.columns = ['' if c.startswith(('NULL','UNNAMED')) else c for c in df.columns]\n", "d = dict.fromkeys(df.columns[df.columns.str.startswith(('NULL','UNNAMED'))], '')\nprint (d)\n{'NULL1': '', 'NULL2': '', 'UNNAMED1': '', 'UNNAMED2': ''}\ndf = df.rename(columns=d)\n"], ["df.columns = [col if col in ('C1','C2') else \"\" for col in df.columns]\n"], [], [], ["def infinite_stream():\n    \"\"\"Yield a number from a (semi-)infinite iterator.\"\"\"\n    # Alternatively, `yield from itertools.count()`\n    yield from iter(range(100000000))\n\n\n# Helper\ndef get_data(iterable):\n    \"\"\"Print the state of `data` per stream.\"\"\"\n    return \", \".join([f\"{x.__name__}: {x.data}\" for x in iterable])\n", "class SharedIterator:\n    \"\"\"Share the state of an iterator with subclasses.\"\"\"\n    _gen = infinite_stream()\n    data = None\n\n    @staticmethod\n    def modify():\n        \"\"\"Advance the shared iterator + assign new data.\"\"\"\n        cls = SharedIterator\n        cls.data = next(cls._gen)\n", "# Streams\nclass A(SharedIterator): pass\nclass B(SharedIterator): pass\nclass C(SharedIterator): pass\n\n\nstreams = A, B, C\n", "# Observe changed state in subclasses    \nA.modify()\nprint(\"1st access:\", get_data(streams))\nB.modify()\nprint(\"2nd access:\", get_data(streams))\nC.modify()\nprint(\"3rd access:\", get_data(streams))\n", "1st access: A: 0, B: 0, C: 0\n2nd access: A: 1, B: 1, C: 1\n3rd access: A: 2, B: 2, C: 2\n"], ["import collections\n\ndef generators_factory(iterable):\n    it = iter(iterable)\n    deques = []\n    already_gone = []\n\n    def new_generator():\n        new_deque = collections.deque()\n        new_deque.extend(already_gone)\n        deques.append(new_deque)\n\n        def gen(mydeque):\n            while True:\n                if not mydeque:             # when the local deque is empty\n                    newval = next(it)       # fetch a new value and\n                    already_gone.append(newval)\n                    for d in deques:        # load it to all the deques\n                        d.append(newval)\n                yield mydeque.popleft()\n\n        return gen(new_deque)\n\n    return new_generator\n\n# test it:\ninfinite_stream = [1, 2, 3, 4, 5]\nfactory = generators_factory(infinite_stream)\ngen1 = factory()\ngen2 = factory()\nprint(next(gen1)) # 1\nprint(next(gen2)) # 1 even after it was produced by gen1\nprint(list(gen1)) # [2, 3, 4, 5] # the rest after 1\n"], ["from operator import contains\nfilter(lambda x: any(contains(x,str(y)) for y in list2), list1)\n", ">>> list1 = ['bj-100-cy','bj-101-hd','sh-200-pd','sh-201-hp']\n>>> list2 = [100, 200]\n>>> for item in filter(lambda x: any(contains(x,str(y)) for y in list2), list1):\n...     print(item)\n...\nbj-100-cy\nsh-200-pd\n"], [">>> list1 = ['bj-100-cy','bj-101-hd','sh-200-pd','sh-201-hp']\n>>> list2 = [100, 200]\n>>> occur = [i for i in list1  for j in list2 if str(j) in i]\n>>> occur\n['bj-100-cy', 'sh-200-pd']\n"], ["list1 = ['bj-100-cy','bj-101-hd','sh-200-pd','sh-201-hp']\nlist2 = [100, 200]\n\noutcome = []\nfor item in list1:\n    if any(str(i) in item for i in list2):\n        outcome.append(item)\n", "['bj-100-cy', 'sh-200-pd']\n"], [], ["list1 = ['bj-100-cy','bj-101-hd','sh-200-pd','sh-201-hp']\nlist2 = [100, 200]\nlist2 = [str(x) for x in list2]\n\noutcome = [s for s in list1 if any(x in s for x in list2)]\n"], ["[i for i in list1 if any(i for j in list2 if str(j) in i)]\n", "In [92]: list1 = ['bj-100-cy','bj-101-hd','sh-200-pd','sh-201-hp']\n    ...: list2 = [100, 200]\n    ...: \n\nIn [93]: [i for i in list1 if any(i for j in list2 if str(j) in i)]\nOut[93]: ['bj-100-cy', 'sh-200-pd']\n"], [], ["a = (1, 2, 3)\na = list(a)\na.pop(0)\n", "a = (1,2,3)\na = [ i for (idx, i) in enumerate(a) if idx != 0 ]\n"], ["deck.pop(a)\n"], ["deck_list = list(deck)   # Convert to list\ndeck_list.pop(a)\n\nprint(deck_list)\ndeck = tuple(deck_list)  # Convert back to tuple\n"], [" [('ad','ah','ac','as')\n"], [], ["import linecache\nimport os\nimport tracemalloc\n\ndef display_top(snapshot, key_type='lineno', limit=10):\n    snapshot = snapshot.filter_traces((\n        tracemalloc.Filter(False, \"<frozen importlib._bootstrap>\"),\n        tracemalloc.Filter(False, \"<unknown>\"),\n    ))\n    top_stats = snapshot.statistics(key_type)\n\n    print(\"Top %s lines\" % limit)\n    for index, stat in enumerate(top_stats[:limit], 1):\n        frame = stat.traceback[0]\n        # replace \"/path/to/module/file.py\" with \"module/file.py\"\n        filename = os.sep.join(frame.filename.split(os.sep)[-2:])\n        print(\"#%s: %s:%s: %.1f KiB\"\n              % (index, filename, frame.lineno, stat.size / 1024))\n        line = linecache.getline(frame.filename, frame.lineno).strip()\n        if line:\n            print('    %s' % line)\n\n    other = top_stats[limit:]\n    if other:\n        size = sum(stat.size for stat in other)\n        print(\"%s other: %.1f KiB\" % (len(other), size / 1024))\n    total = sum(stat.size for stat in top_stats)\n    print(\"Total allocated size: %.1f KiB\" % (total / 1024))\n\ntracemalloc.start()\n\n# ... run your code ...\n\nsnapshot = tracemalloc.take_snapshot()\ndisplay_top(snapshot)\n"], [], ["# You don't use more than the \"boundary\" field, so why bring more?\n# You can even use \"values_list('boundary', flat=True)\"\n# except if you are using more than that (I cannot tell from your sample)\nzips = ZipCode.objects.filter(state='MA').order_by('id').only('boundary')\nfor zip in zips.iterator():\n    # I would use \"set()\" instead of list to avoid dublicates\n    important_buildings = set()\n\n    # Keep only the essential fields for your operations using \"only\" (or \"defer\")\n    for building in Building.objects.filter(boundary__within=zip.boundary)\\\n                    .only('essential_field_1', 'essential_field_2', ...)\\\n                    .iterator(chunk_size=500):\n        # Some conditionals would go here\n        important_buildings.add(building)\n", "zips = ZipCode.objects.filter(state='MA').order_by('id').only('boundary')\nfor zip in zips.iterator():\n    important_buildings = set()\n    for building in Building.objects.filter(boundary__within=zip.boundary)\\\n                    .only('pk', 'essential_field_1', 'essential_field_2', ...)\\\n                    .iterator(chunk_size=500):\n        # Some conditionals would go here\n\n        # Create a set containing only the important buildings' ids\n        important_buildings.add(building.pk)\n", "# Converting set to list may not be needed but I don't remember for sure :)\nBuilding.objects.filter(pk__in=list(important_buildings))...\n"], ["from functools import reduce\nfrom operator import getitem\n\ndef set_nested_item(dataDict, mapList, val):\n    \"\"\"Set item in nested dictionary\"\"\"\n    reduce(getitem, mapList[:-1], dataDict)[mapList[-1]] = val\n    return dataDict\n\nkey_lst = [\"key1\", \"key2\", \"key3\"]\nvalue = \"my_value\"\nd = {\"key1\": {\"key2\": {\"key3\": \"some_value\"}}}\n\nd = set_nested_item(d, key_lst, value)\n\nprint(d)\n# {'key1': {'key2': {'key3': 'my_value'}}}\n", "from collections import defaultdict\n\ndef dd_rec():\n    return defaultdict(dd_rec)\n\ndef defaultify(d):\n    if not isinstance(d, dict):\n        return d\n    return defaultdict(dd_rec, {k: defaultify(v) for k, v in d.items()})\n\ndd = defaultify(d)\n\nkey_lst = [\"key1\", \"key2\", \"key5\", \"key6\"]\nvalue = \"my_value2\"\ndd = set_nested_item(dd, key_lst, value)\n\nprint(dd)\n\n# defaultdict(<function __main__.<lambda>>,\n#             {'key1': defaultdict(<function __main__.<lambda>>,\n#                          {'key2': defaultdict(<function __main__.<lambda>>,\n#                                       {'key3': 'my_value',\n#                                        'key5': defaultdict(<function __main__.<lambda>>,\n#                                                    {'key6': 'my_value2'})})})})\n"], ["key_lst = [\"key1\", \"key2\", \"key3\"]\nmy_dict={\n\"key1\": {\n    \"key2\": {\n        \"key3\": \"some_value\"\n        }\n    },\n}\n\nval=my_dict\n#loop gets second to last key in chain(path) and assigns it to val\nfor x in key_lst[:-1]:\n    val=val[x]\n#now we can update value of last key, cause dictionary key is passed by reference\nval[key_lst[-1]]=\"new value\"\n\nprint (my_dict)\n\n#{'key1': {'key2': {'key3': 'new value'}}}\n"], ["def update(d, key_lst , val):\n    for k in key_lst[:-1]:\n        if k not in d:\n            d[k] = {}\n        d = d[k]\n    d[key_lst[-1]] = val\n\nd = {}\n\nupdate(d, list('qwer'), 0)\n# d = {'q': {'w': {'e': {'r': 0}}}}\n", "from collections import defaultdict\n\nnest = lambda: defaultdict(nest)\nd = nest()\n\ndef update(d, key_lst , val):\n    for k in key_lst[:-1]:\n        d = d[k]\n    d[key_lst[-1]] = val\n\nupdate(d, 'qwer', 0)\n"], ["d = {}\na = d\nfor i in key_lst: \n    a[i] = {}\n    if i == key_lst[-1]:\n        a[i] = value\n    else:\n        a = a[i]\nprint(d)\n# {'key1': {'key2': {'key3': 'my_value'}}}\n"], ["d = {}\nd2 = d\nfor k in key_lst[:-1]:\n    d2 = d2.setdefault(k, {})\n\nd2[key_lst[-1]] = value\nprint(d)\n# {'key1': {'key2': {'key3': 'my_value'}}}\n"], ["class Char:\n\n    def __init__(self, x, y):\n        self.str = x\n        self.con = y\n\n    @property\n    def hp(self):\n        # todo handle negative hp!\n        return (self.con + self.str) / 2.\n\n\ndef test_hp():\n    player = Char(20, 20)\n    assert player.hp == 20\n\n\ndef test_hp_with_changes_to_con_or_str():\n    player = Char(20, 20)\n    player.con += 10\n    assert player.hp == 25\n    player.str += 10\n    assert player.hp == 30\n", "scratch_12.py ..                                                         [100%]\n\n========================== 2 passed in 0.20 seconds ===========================\n"], ["from . import pop\nfrom . import pop1\n# and so on\n\n# and now call all main functions\npop.main()\npop1.main()\n# and so on\n"], ["import threading\n\nclass Pop(threading.Thread):\n    def run(self):\n        # Content from \"pop.py\"\n        # Maybe some some changes are needed\n\n\nclass Pop1(threading.Thread):\n    def run(self):\n        # Content from \"pop1.py\"\n\n\n# ...\n\npop = Pop()\npop1 = Pop1()\n# ...\n\npop.start()\npop1.start()\n# ...\n"], ["python pop.py &\npython pop1.py &\npython pop2.py &\nwait # wait for all three to finish, if needed\n"], [" python pop.py\n python pop1.py\n python pop2.py\n"], ["import subprocess\n\nprocess1 = subprocess.Popen([\"python\", \"pop.py\"]) # Create and launch process pop.py using python interpreter\nprocess2 = subprocess.Popen([\"python\", \"pop1.py\"])\nprocess3 = subprocess.Popen([\"python\", \"pop2.py\"])\n\nprocess1.wait() # Wait for process1 to finish (basically wait for script to finish)\nprocess2.wait()\nprocess3.wait()\n"], ["class Char:\n\n    def __init__(self, x, y):\n        self.str = x\n        self.con = y\n\n    def get_hp(self):\n        return (self.con + self.str) / 2\n\nplayer = Char(20, 20)\n\n\ndef main(dude):\n    print(\"strength:     \" + str(dude.str))\n    print(\"constitution: \" + str(dude.con))\n    print(\"hp: \" + str(dude.get_hp()))\n    print(\"------\")\n    action = input(\"press 1 to change str, 2 to change con\")\n    if action == \"1\":\n        dude.str = dude.str + 10\n        main(dude)\n    elif action == \"2\":\n        dude.con = dude.con + 10\n        main(dude)\n    else:\n        main(dude)\n"], ["player = Char(20, 20)\n", "if action == \"1\":\n    dude.str = dude.str + 10\n    dude = Char(dude.str, dude.con)     # new dude (with current str and con)\n    main(dude)\nelif action == \"2\":\n    dude.con = dude.con + 10\n    dude = Char(dude.str, dude.con)     # new dude (with current str and con)\n    main(dude)\n"], ["class Char:\n    def __init__(self, x, y):\n        self.str = x\n        self.con = y\n        self.update()\n    def update(self):\n        self.hp = (self.con + self.str) / 2\n", "def main(dude):\n    print(\"strength:     \" + str(dude.str))\n    print(\"constitution: \" + str(dude.con))\n    print(\"hp: \" + str(dude.hp))\n    print(\"------\")\n    action = input(\"press 1 to change str, 2 to change con\")\n    if action == \"1\":\n        dude.str = dude.str + 10\n        main(dude)\n    elif action == \"2\":\n        dude.con = dude.con + 10\n        main(dude)\n    else:\n        main(dude)\n    dude.update()\n"], ["import pandas as pd\ndf = pd.DataFrame({'naics':['311', '311919', '3159', '331', '332', '332913']})\ndf['code'] = df2.naics.apply(lambda s : s[:2])\ndf\n"], ["df.loc[df.naics.str.startswith('31'),'naics']='31'\ndf\nOut[1272]: \n    naics\n0      31\n1      31\n2      31\n3     331\n4     332\n5  332913\n"], ["df.loc[df['naics'].astype(str).str[:2] == '31', 'naics'] = '31'\n\n\nnaics\n0   31\n1   31\n2   31\n3   331\n4   332\n5   332913\n"], ["df = pd.DataFrame({'naics':['311', '311919', '3159', '331', '332', '332913']})\n>>> df\n    naics\n0     311\n1  311919\n2    3159\n3     331\n4     332\n5  332913\n", "df['code'] = df.naics.str[:2]\n\n>>> df\n    naics code\n0     311   31\n1  311919   31\n2    3159   31\n3     331   33\n4     332   33\n5  332913   33\n"]]