[["def plot(col):\n \n    fig, ax = plt.subplots()\n    ax.plot(col)\n    plt.show()\n\ndf.apply(plot)\n"], ["export QT_DEVICE_PIXEL_RATIO=0\nexport QT_AUTO_SCREEN_SCALE_FACTOR=1\nexport QT_SCREEN_SCALE_FACTORS=1\nexport QT_SCALE_FACTOR=1\n"], ["df_new = df[ (df['Frequency'] == 0.8) | (df['Frequency'] == 1.6) ]\n"], ["df_new = df[ (df['Frequency'] == 0.8) & (df['Frequency'] == 1.6) ]\n"], ["df = df[(df['Frequency'] == 0.8) | (df['Frequency'] == 0.6)]\n", "df = df[df[\"Frequency\"].isin([0.6,0.8])]\n"], ["df_new = df[df['Frequency'].isin([0.8,1.6])] \n"], [], [], ["import matplotlib.pyplot as plt\nimport math\n\ndef get_intersections(x0, y0, r0, x1, y1, r1):\n    # circle 1: (x0, y0), radius r0\n    # circle 2: (x1, y1), radius r1\n\n    d=math.sqrt((x1-x0)**2 + (y1-y0)**2)\n\n    # non intersecting\n    if d > r0 + r1 :\n        return {}\n    # One circle within other\n    if d < abs(r0-r1):\n        return {}\n    # coincident circles\n    if d == 0 and r0 == r1:\n        return {}\n    else:\n        a=(r0**2-r1**2+d**2)/(2*d)\n        h=math.sqrt(r0**2-a**2)\n        x2=x0+a*(x1-x0)/d   \n        y2=y0+a*(y1-y0)/d   \n        x3=x2+h*(y1-y0)/d     \n        y3=y2-h*(x1-x0)/d \n        x4=x2-h*(y1-y0)/d\n        y4=y2+h*(x1-x0)/d\n        return x3, y3, x4, y4\n\n# intersection circles\nx0, y0 = 0, 0\nr0 = 5\nx1, y1 = 2, 2\nr1 = 5\n\n# intersecting with (x1, y1) but not with (x0, y0)\nx2, y2 = -1,0\nr2 = 2.5\n\ncircle1 = plt.Circle((x0, y0), r0, color='b', fill=False)\ncircle2 = plt.Circle((x1, y1), r1, color='b', fill=False)\ncircle3 = plt.Circle((x2, y2), r2, color='b', fill=False)\n\nfig = plt.figure(figsize = (10, 10)) \nplt.grid(True)\nax = fig.add_subplot(111)\n\nax.set_xlim((-10, 10))\nax.set_ylim((-10, 10))\nax.add_artist(circle1)\nax.add_artist(circle2)\nax.add_artist(circle3)\n\nintersections1 = get_intersections(x0, y0, r0, x1, y1, r1)\nprint(intersections1)\nif len(intersections1) > 0:\n    print(intersections3)\n    i_x3, i_y3, i_x4, i_y4 = intersections1 \n    #plt.plot([i_x3, i_x4], [i_y3, i_y4], 'o', color='r')\n    ax.scatter([i_x3, i_x4],[i_y3, i_y4] ,marker ='X',s=300,alpha=1)\n\nintersections2 = get_intersections(x0, y0, r0, x2, y2, r2)\nprint(intersections2)\nif len(intersections2) > 0:\n    i_x3, i_y3, i_x4, i_y4 = intersections2 \n    plt.plot([i_x3, i_x4], [i_y3, i_y4], 'o', color='r')\n    ax.scatter([i_x3, i_x4],[i_y3, i_y4] ,marker ='X',s=300,alpha=1)\n\nintersections3 = get_intersections(x1, y1, r1, x2, y2, r2)\n\nif len(intersections3) > 0:\n    print(intersections3)\n    i_x3, i_y3, i_x4, i_y4 = intersections3 \n    #plt.plot([i_x3, i_x4], [i_y3, i_y4], 'o', color='r')\n    ax.scatter([i_x3, i_x4],[i_y3, i_y4] ,marker ='X',s=300,alpha=1)\nplt.gca().set_aspect('equal', adjustable='box')\n"], ["df['sum of pos'] = df.mask(df<0, 0).sum(axis=1)\n\n   a  b  sum of pos\n0 -1  2           2\n1 -2  2           2\n2  1 -3           1\n3  1 -4           1\n4 -2 -2           0\n", "t = np.copy(df.values)\nnp.copyto(t, 0, where=df.values<0)\ndf['sum of pos'] = t.sum(axis=1)\n", "df['sum of pos'] = np.where(df.values<0, 0, df.values).sum(axis=1)\n", "df['sum of pos'] = np.clip(df.values, 0, None).sum(axis=1)\n", "m = np.ma.array(df.values, mask=df.values<0, fill_value=0)\ndf['sum of pos'] = m.filled().sum(axis=1)\n"], ["lst = [[1,2,3,4], [2,3,4,5], [3,4,5,6]]\nnew = [[[numbers] for numbers in elements] for elements in lst]\n", "[[[1], [2], [3], [4]], [[2], [3], [4], [5]], [[3], [4], [5], [6]]]\n"], ["list = [[1,2,3,4], [2,3,4,5], [3,4,5,6]]\n\nfor i in range(0, 3):\n     for j in range(0, 4):\n          (list[i])[j] = [(list[i])[j]]\n"], ["def split_list(alist, wanted_parts=1):\n    length = len(alist)\n    return [ alist[i*length // wanted_parts: (i+1)*length // wanted_parts]\n             for i in range(wanted_parts) ]\n\nlst = [[1,2,3,4], [2,3,4,5], [3,4,5,6]]\n\nret =[]\nfor mini_list in lst:\n    ret.append(split_list(mini_list, len(mini_list)))\n"], ["lst = [[1, 2, 3, 4], [2, 3, 4, 5], [3, 4, 5, 6]]\n\n\ndef split(i):\n    if isinstance(i, list):\n        return [split(v) for v in i]\n    else:\n        return [i]\n\n\nprint(split(lst))\n", "[[[1], [2], [3], [4]], [[2], [3], [4], [5]], [[3], [4], [5], [6]]]\n"], [">>> import numpy as np\n\n>>> lst = np.array([[1,2,3,4], [2,3,4,5], [3,4,5,6]])\n>>> lst\narray([[1, 2, 3, 4],\n       [2, 3, 4, 5],\n       [3, 4, 5, 6]])\n\n>>> lst.shape\n(3, 4)\n\n>>> lst.reshape(3,4,1)\narray([[[1],\n        [2],\n        [3],\n        [4]],\n\n       [[2],\n        [3],\n        [4],\n        [5]],\n\n       [[3],\n        [4],\n        [5],\n        [6]]])\n\n>>> lst.reshape(3,4,1).tolist()\n[[[1], [2], [3], [4]], [[2], [3], [4], [5]], [[3], [4], [5], [6]]]\n"], [], ["import time\nimport datetime\ns = '2021-04-19T09:14:10.526Z'\nt = s.split('T')[1].split('.')[0]\nprint(t)\n", "print(datetime.datetime.strptime(t,\"%H:%M:%S\"))\n"], ["df['Created AT'] = pd.to_datetime(df['Created AT'])\n", "df['time'] = df['Created AT'].dt.strftime('%H:%M:%S')\n    \nprint(df)\n    \n                        Created AT      time\n0 2021-04-19 09:14:10.526000+00:00  09:14:10\n1 2021-04-19 09:13:06.809000+00:00  09:13:06\n2 2021-04-19 09:13:06.821000+00:00  09:13:06\n"], ["data = ['2021-04-19T09:14:10.526Z',\n        '2021-04-19T09:13:06.809Z',\n        '2021-04-19T09:13:06.821Z']\ndf = pd.DataFrame(data=data, columns=['Created AT'])\ndf['Created AT'] = pd.to_datetime(df['Created AT']).dt.strftime('%H:%M:%S')\nprint(df)\n\n  Created AT\n0   09:14:10\n1   09:13:06\n2   09:13:06\n"], ["df = pd.DataFrame(data = {\"Created At\":[\"2021-04-19T09:14:10.526Z\",\"2021-04-19T09:14:10.526Z\"]})\ndf['Created At'] = pd.to_datetime(df['Created At'])\ndf['Created At'] = df['Created At'].dt.time.astype(str).str[:8]\n"], ["df['time'] = pd.to_datetime(df['Created AT'])\nprint(df['time'].dt.time)\n"], ["col_list=['age1','age2']\ndf_list=[df,df2]\n\nfor d in df_list:\n  for c in col_list:\n    d[c]=np.where(d[c]>100,'dead',d[c])\ndf #or df2\n", "   age1  age2 name\n0    23    10    a\n1    45    20    b\n2  dead  dead    c\n"], ["df_cols  = df._get_numeric_data().columns.values\ndf2_cols  = df2._get_numeric_data().columns.values\ndf[df_cols] = np.where(df[df_cols].to_numpy() > 100, 'dead', df[df_cols])\ndf2[df2_cols] = np.where(df2[df2_cols].to_numpy() > 100, 'dead', df2[df2_cols])\n"], ["import pandas as pd\nimport numpy as np\nraw_data = {'age1': [23,45,210],'age2': [10,20,150],'name': ['a','b','c']}\ndf = pd.DataFrame(raw_data, columns = ['age1','age2','name'])\n\nraw_data = {'age1': [80,90,110],'age2': [70,120,90],'name': ['a','b','c']}\ndf2 = pd.DataFrame(raw_data, columns = ['age1','age2','name'])\n\ncol_list=['age1','age2']\ndf_list=[df,df2]\n\ndef dead(df_list, col_list):\n    for df in df_list:\n        for col in col_list:\n            df[col] = np.where(df[col] >= 100, \"dead\", df[col])\n    return df_list\n\n\ndf\n\ndead([df], col_list)\n"], ["def check_more_than_100(x):\n    v = None\n    try:\n        v = int(x)\n    except:\n        pass\n    if v is not None:\n        return (v > 100)\n    return (False)\n    \ndf['age1'] = df['age1'].apply(lambda x : 'dead' if check_more_than_100(x) else x)\ndf['age2'] = df['age2'].apply(lambda x : 'dead' if check_more_than_100(x) else x)\n\ndf2['age1'] = df2['age1'].apply(lambda x : 'dead' if check_more_than_100(x) else x)\ndf2['age2'] = df2['age2'].apply(lambda x : 'dead' if check_more_than_100(x) else x)\n"], ["c = df.filter(regex='age\\d+').columns\ndf[c] = np.where(df[c].ge(100),'dead',df[c])\ndf\n", "c=df.filter(like='age').columns\ndf[c] = df[c].where(~df['c'].ge(100),'dead')\n"], ["def dead(df):\n    col_list = ['age1', 'age2']\n    df = df.copy()\n    temporary = df.filter(col_list)\n    temporary = temporary.mask(temporary >= 100, \"dead\")\n    df.loc[:, col_list] = temporary\n    return df\n", "df.pipe(dead)\n \n   age1  age2 name\n0    23    10    a\n1    45    20    b\n2  dead  dead    c\n"], ["col_list=['age1','age2']\ndf_list=[df,df2]\n\nfor d in df_list:\n    for c in col_list:\n        d.loc[d[c]>100, c] = 'dead'\n"], [], ["filename = \"WINDOW.txt\"\next_ind = filename.rindex('.')\nfilename = filename[0:ext_ind].lower() + '.' + filename[ext_ind+1:len(filename)].upper()\nprint(filename)\n>> window.TXT\n"], ["name = \"MyFile.txt\"\nnew_name = name.rsplit(sep= \".\", maxsplit=1)\nprint(new_name[0].lower()+\".\"+new_name[1].upper())\n"], ["filename = \"WINDOW.txt\"\nfilename = filename.split('.')\nfilename = \".\".join(filename[0:-1]).lower() + '.' + filename[-1].upper()\nprint(filename)\n>> window.TXT\n\nfilename = \"foo.bar.maz.txt\"\nfilename = filename.split('.')\nfilename = \".\".join(filename[0:-1]).lower() + '.' + filename[-1].upper()\nprint(filename)\n>> foo.bar.maz.TXT\n"], ["oldname='HeLlO.world.TxT'\nif '.' in oldname:\n  (basename, ext) = oldname.rsplit('.', 1)\n  newname = basename.lower() + '.' + ext.upper()\nelse:\n  newname = oldname.lower()\nprint(f'{oldname} => {newname}')\n"], ["import cv2\nimport numpy as np\n\ndef intersected(img, masks):\n    img_hsv = cv2.cvtColor(img, cv2.COLOR_BGR2HSV)\n    for lower, upper in masks:\n        mask = cv2.inRange(img_hsv, np.array(lower), np.array(upper))\n        blur = cv2.GaussianBlur(mask, (5, 5), 0)\n        canny = cv2.Canny(blur, 0, 0)\n        contours, _ = cv2.findContours(canny, cv2.RETR_EXTERNAL, cv2.CHAIN_APPROX_NONE)\n        count = 0\n        for cnt in contours:\n            if cv2.contourArea(cnt) > 50:\n                cv2.drawContours(img, [cnt], -1, (0, 255, 0), 1)\n                cv2.imshow(\"Test\", img)\n                count += 1\n                if count == 2:\n                    return True\n\nimg = cv2.imread(\"shapes.png\")\n\nblue_mask = [1, 0, 0], [178, 255, 255]\nred_mask = [0, 1, 0], [179, 254, 255]\n\nif intersected(img, (blue_mask, red_mask)):\n    print(\"Intersection detected!\")\nelse:\n    print(\"No intersection detected.\")\n", "Intersection detected!\n", "import cv2\nimport numpy as np\n", "def intersected(img, masks):\n", "    img_hsv = cv2.cvtColor(img, cv2.COLOR_BGR2HSV)\n    for lower, upper in masks:\n        mask = cv2.inRange(img_hsv, np.array(lower), np.array(upper))\n", "        blur = cv2.GaussianBlur(mask, (5, 5), 0)\n        canny = cv2.Canny(blur, 0, 0)\n        contours, _ = cv2.findContours(canny, cv2.RETR_EXTERNAL, cv2.CHAIN_APPROX_NONE)\n", "        count = 0\n        for cnt in contours:\n            if cv2.contourArea(cnt) > 50:\n                cv2.drawContours(img, [cnt], -1, (0, 255, 0), 1)\n                cv2.imshow(\"Test\", img)\n                count += 1\n                if count == 2:\n                    return True\n", "img = cv2.imread(\"shapes.png\")\n\nblue_mask = [1, 0, 0], [178, 255, 255]\nred_mask = [0, 1, 0], [179, 254, 255]\n\nif intersected(img, (blue_mask, red_mask)):\n    print(\"Intersection detected!\")\nelse:\n    print(\"No intersection detected.\")\n"], ["basic_img = np.zeros([10, 10], dtype=np.uint8)\n", "pts_red = np.array([(9, 0), (9, 6), (4, 2), (4, 0)], dtype=np.int32)\npts_blue = np.array([(9, 0), (9, 1), (0, 8), (6, 0)], dtype=np.int32)\n", "red_poly = basic_img.copy()\ncv2.fillPoly(red_poly, [pts_red], 1)\n# plt.imshow(red_poly)\n", "blue_poly = basic_img.copy()\ncv2.fillPoly(blue_poly, [pts_blue], 1)\n# plt.imshow(blue_poly)\n", "intersection = np.logical_and(red_poly, blue_poly)\n# plt.imshow(intersection)\n", "np.any(intersection) #=> True\n"], [], [], [], [], ["my_dict = [{'id': 1, 'capacity': 5}, {'id': 2, 'capacity': 31}]\nfor item in my_dict:\n    print(item['capacity'])\n", "5,31\n"], [], ["foo = {\"bar\": 69}\nprint(foo[\"bar\"])\n", "output = [{'id': 1, 'capacity': 5}, {'id': 2, 'capacity': 31}\n\ntotal = sum(dictionary[\"capacity\"] for dictionary in output)\n", "# This will throw a KeyError\ndictionary = {\"foo\": 69}\nx = dictionary[\"baz\"]\n\n# This will return None\nx = dictionary.get(\"baz\")\n"], [], ["result = sum([x['capacity'] for x in output])\n"], ["json = [{'id': 1, 'capacity': 5}, {'id': 2, 'capacity': 31}]\n\nprint(json[0][\"capacity\"])\n"], ["conda config --add channels conda-forge\n"], [], ["T = int(input())\nfor test in range(T):\n    house = []\n    input1 = input()\n    input1 = input1.split()\n    N = int(input1[0])\n    B = int(input1[1])\n    input2 = input()\n    input2 = input2.split()\n    for x in input2:\n        price = int(x)\n        dictionary = {\"house\":x,\"price\":price}\n        house.append(dictionary)\n    \n    def myFunc(e):\n        return e['price']\n\n    house.sort(key=myFunc)\n\n    spent = 0\n    purchased = 0\n\n    for x in house:\n        variable1 = x.get('price')\n        spent += variable1\n        if spent <= B:\n            purchased += 1\n\n    print(f\"Case #{test+1}: {purchased}\")\n"], ["0.8039536\nFalse\n0.3197087999999999\nFalse\n"], ["def reverse_string(string):\n    length = len(string)\n    \n    mid = length//2\n    # seperating in 3 parst\n    first_half, second_half, middle = None, None, None\n    \n    # seperating string into first half, second half and mid based on length\n    if length%2==1:\n        first_half = string[:mid]\n        second_half = string[mid+1:]\n        middle = string[mid]\n    else:\n        first_half = string[:mid]\n        second_half = string[mid:]\n        \n    # reversing the first half and second half\n    first_half_reverse = first_half[::-1]\n    second_half_reverse = second_half[::-1]\n    \n    # assembling the final result together\n    final_result = None\n    if middle is not None:\n        final_result = first_half_reverse + middle + second_half_reverse\n    else:\n        final_result = first_half_reverse + second_half_reverse\n    \n    return final_result\n"], [], [], ["def revStr(string):\n    mid=len(string)//2\n    if len(string)%2 != 0:\n        x=string[:mid]\n        middle=string[mid]\n        y=string[mid+1:]\n        print(x[::-1],middle,y[::-1],sep='')\n    else:\n        x=string[:mid]\n        y=string[mid:]\n        print(x[::-1],y[::-1],sep='')\n\nrevStr(\"abcdef\")\n\n"], [" \nxy\nxwzy\nwvxzy\nwvuzyx\nvutwzyx\n"], ["import pandas as pd\n\ndf = pd.read_excel(\"db.xlsx\", sheet_name=\"test\", header=None)\nresults = list(df.to_records(index=False))\n\n>>> print(results)\n[('John', 'I have a dog'), ('Mike', 'I need a cat'), ('Nick', 'I go to school')]\n"], ["pipenv shell\npip install -U pip\n"], ["import datetime\n\na = datetime.datetime.now()\n\n\"%s:%s.%s\" % (a.minute, a.second, str(a.microsecond))\n"], ["import datetime\nimport time\n\n\nfuture_date = datetime.datetime.now()+ datetime.timedelta(seconds=3)\n\n\nwhile True:\n    curr_date = datetime.datetime.now()\n    rem_time = future_date - curr_date\n    total_seconds = int(rem_time.total_seconds())\n\n    if total_seconds > 0:\n        days, h_remainder = divmod(total_seconds, 86400)\n        hours, remainder = divmod(h_remainder, 3600)\n        minutes, seconds = divmod(remainder, 60)\n        print(\"Time Left: {} days, {} hours, {} minutes, {} seconds\".format(days, hours, minutes, seconds))\n        time.sleep(1)\n    else:\n        break\n"], ["def SecondToDHM(time):\nif time < 60:\n    return \"%.2f %s\" % (time, SECOND)\n\nsecond = int(time % 60)\nminute = int((time / 60) % 60)\nhour = int((time / 60) / 60) % 24\nday = int(int((time / 60) / 60) / 24)\n\ntext = \"\"\n\nif day > 0:\n    text += str(day) + DAY\n    text += \" \"\n\nif hour > 0:\n    text += str(hour) + HOUR\n    text += \" \"\n\nif minute > 0:\n    text += str(minute) + MINUTE\n    text += \" \"\n    \nif second > 0:\n    text += str(second) + SECOND\n\nreturn text\n"], ["import datetime\n\nwhile True:\n    print(\"\\033[H\\033[J\")\n    present = datetime.datetime.now()\n    future = datetime.datetime(2022, 3, 31, 8, 0, 0)\n    difference = future - present\n    print(difference)\n", "import datetime\n\nyear = int(input('Enter the year of the end date: '))\nmonth = int(input('Enter the month of the end date: '))\nday = int(input('Enter the day of the end date: '))\nhour = int(input('Enter the hour of the end date: '))\nminute = int(input('Enter the minute of the end date: '))\nsecond = int(input('Enter the second of the end date (a little tricky): '))\nfuture = datetime.datetime(year, month, day, hour, minute, second)\nwhile True:\n    print(\"\\033[H\\033[J\")\n    present = datetime.datetime.now()\n    difference = future - present\n    if present >= future:\n        break\n    print(difference)\n\nprint('Time reached!')\n"], ["from datetime import datetime\nimport time\ntotalSecs = 1 #So the while loop doesn't stop immidiately\nwhile totalSecs > 0:\n    startDate = datetime.now() #Can be any date\n    endDate = datetime(2021, 12, 25)\n    delta = endDate - startDate\n    totalSecs = delta.total_seconds()\n    days = divmod(totalSecs, 86400)\n    hrs = divmod(days[1], 3600)\n    mins = divmod(hrs[1], 60)\n    seconds = divmod(mins[1], 1)\n    print(\"{:02d}:{:02d}:{:02d}:{:02d}\".format(int(days[0]), int(hrs[0]), int(mins[0]), int(seconds[0]))) #Zero pad all the numbers\n    time.sleep(1) #Print every second.\n"], ["cols = [col for col in df.columns if 'number' in col]\n\ndf1 = pd.concat(\n    [\n        df,\n        df[df[\"attribute\"].isin([\"y\", \"z\"])]\n        .groupby(\"prod\")[cols]\n        .sum()\n        .assign(attribute=\"sum_yz\")\n        .reset_index(),\n    ]\n).sort_values(\"prod\")\n\n\nprint(df1)\n\n  prod attribute  number1  number2  number3\n0    a         x        1       10        1\n1    a         y        2        2        4\n2    a         z        2        3        3\n0    a    sum_yz        4        5        7\n3    b         x        3        3        5\n4    b         y        4        1        7\n5    b         z        3        2        1\n1    b    sum_yz        7        3        8\n6    c         x        5        3        3\n7    c         y        1        1        0\n8    c         z        1        1        1\n2    c    sum_yz        2        2        1\n"], ["def get_new(l):\n    N = l.copy()\n    for a in range(len(N)):\n        for b in N[a].keys():\n            if b in ['a','b']:\n                i = 1\n                while N[a][b]: # while N[a][b] is not empty.\n                    key = str(b) + '_' + str(i)\n                    i += 1\n                    N[a][key] = N[a][b].pop(0)\n                del N[a][b]\n    \n    return N\n"], [], ["WebDriverWait(browser, 10).until(EC.element_to_be_clickable((By.XPATH,\"//label[@for='deliveryCheckbox-684']\"))).click()\n", "from selenium.webdriver.common.by import By\nfrom selenium.webdriver.support.ui import WebDriverWait \nfrom selenium.webdriver.support import expected_conditions as EC\n"], ["p = [{'x': 1, 'a': [12, 14, 16], 'b': [13, 15], 'y': 8}, {'x': 2, 'a': [22, 24], 'b': [23, 25, 27], 'y': 9}]\nr = [{a if not isinstance(b, list) else f'{a}_{l}':b if not isinstance(b, list) else j \n     for a, b in i.items() for l, j in enumerate((b if isinstance(b, list) else [b]), 1)} \n         for i in p]\n", "[{'x': 1, 'a_1': 12, 'a_2': 14, 'a_3': 16, 'b_1': 13, 'b_2': 15, 'y': 8}, {'x': 2, 'a_1': 22, 'a_2': 24, 'b_1': 23, 'b_2': 25, 'b_3': 27, 'y': 9}]\n"], ["def parse_dict(d):\n    new_dict = {}\n    for key,val in d.items():\n        if isinstance(val,list):\n            new_dict.update({f'{key}_{i+1}':v for i,v in enumerate(val)})\n        else:\n            new_dict[key] = val\n    return new_dict\n\nresult = [parse_dict(d) for d in p]\n", "[{'x': 1, 'a_1': 12, 'a_2': 14, 'a_3': 16, 'b_1': 13, 'b_2': 15, 'y': 8},\n {'x': 2, 'a_1': 22, 'a_2': 24, 'b_1': 23, 'b_2': 25, 'b_3': 27, 'y': 9}]\n", "[ {**{key:val for key,val in d.items() if not isinstance(val,list)},**{f'{key}_{i}' if isinstance(val,list)else key : v if isinstance(val,list)else val for key,val in d.items() if isinstance(val,list) for i,v in enumerate(val)}} for d in p]\n", "[{'x': 1, 'y': 8, 'a_0': 12, 'a_1': 14, 'a_2': 16, 'b_0': 13, 'b_1': 15},\n {'x': 2, 'y': 9, 'a_0': 22, 'a_1': 24, 'b_0': 23, 'b_1': 25, 'b_2': 27}]\n"], ["browser.find_element_by_css_selector('.deliveryCheckbox.hiddenCheckbox').click()\n", "browser.find_element_by_xpath(\"//label[contains(@for,'deliveryCheckbox')]\")\n"], [], [], ["t = []\nfor obj in p:\n    t.append(dict([]))\n    [t[-1].update({key+'_'+str(i+1): val[i]\n        for i in range(len(obj[key]))}) \n           if isinstance(obj[key], list) else\n     t[-1].update({key: val})\n        for key, val in zip(obj.keys(), obj.values()) \n    ]\n", "[{'x': 1, 'a_1': 12, 'a_2': 14, 'a_3': 16, 'b_1': 13, 'b_2': 15, 'y': 8},\n {'x': 2, 'a_1': 22, 'a_2': 24, 'b_1': 23, 'b_2': 25, 'b_3': 27, 'y': 9}]\n"], ["result = []\nfor i in p:\n    temp = {}\n    for k, v in i.items():\n        if isinstance(v, list):\n            for idx,j in enumerate(v, 1):\n                temp[f\"{k}_{idx}\"] = j\n        else:\n            temp[k] = v\n    result.append(temp)\nprint(result)                \n                \n", "[{'a_1': 12, 'a_2': 14, 'a_3': 16, 'b_1': 13, 'b_2': 15, 'x': 1, 'y': 8},\n {'a_1': 22, 'a_2': 24, 'b_1': 23, 'b_2': 25, 'b_3': 27, 'x': 2, 'y': 9}]\n"], ["In [1]: import numpy as np\n\nIn [2]: np.full((4,2), fill_value=(-1,2))\nOut[2]: \narray([[-1,  2],\n       [-1,  2],\n       [-1,  2],\n       [-1,  2]])\n"], ["blah = 'yada'\n\ndef foo(bar):\n    global blah\n    print(blah, bar)\n    \nfoo('test') # output: yada test\n", "#blah = 'yada'\n\ndef foo(bar):\n    global blah\n    print(blah, bar)\n    \nfoo('test') # output: NameError: name 'blah' is not defined\n", "import numpy as np\n\nclass MyClass(object):\n    def __init__(self):\n        #you'll have to set the numerical values to something that causes num_var_list to not loop infinitely\n        self.number_list = None\n        self.number_exit = 0\n        self.number_target = 0\n        self.price_buy = 0\n\n    # This function generates a list of numbers under certain rules\n    def num_var_list(self):\n        self.number_list = []\n        self.number_target = self.number_exit\n        num_max_robot = (self.number_target * 20) / 100\n        while num_max_robot > 0:\n            num_robot = np.random.randint(1,int(num_max_robot))\n            if num_robot > self.number_target:\n                    self.number_list.append(self.number_target)\n            else: \n                self.number_list.append(num_robot)\n            self.number_target = self.number_target - self.number_target\n        return self.number_list\n            \n    # This function generates a random number between a certain range\n    def fun_price_buy(self):\n        self.price_buy = np.random.randint(50000,300000)\n        return self.price_buy\n\n    # This function generates a random number between a certain range\n    def fun_mx_buy(self):\n        self.number_exit = np.random.randint(50, 150)\n        return self.number_exit\n\ndef main():\n    lista_number_list = []\n    lista_price_buy = []\n    lista_mx_buy = []\n    \n    my_class_instance = MyClass()\n\n    # This loop append each function 50 times to a new list\n    while len(lista_price_buy) <= 50: \n        lista_number_list.append(my_class_instance.num_var_list())\n        lista_price_buy.append(my_class_instance.fun_price_buy())\n        lista_mx_buy.append(my_class_instance.fun_mx_buy())\n\nif __name__ == '__main__':\n    main()\n"], ["def fun_price_buy():\n    price_buy = np.random.randint(50000,300000)\n    return price_buy\n\n# inline, no temporaty variable is needed\ndef fun_price_buy():\n    return np.random.randint(50000,300000)\n"], ["number_exit = 0\n# This function generates a list of numbers under certain rules\ndef num_var_list():\n    global number_list, number_exit, number_target\n    number_list = []\n", "# This function generates a list of numbers under certain rules\ndef num_var_list():\n    global number_list, number_exit, number_target\n    number_list = []\n    number_exit = 0\n"], ["def num_var_list():\n    number_exit=fun_mx_buy()\n    number_list = []\n    number_target = number_exit\n    num_max_robot = (number_target * 20) / 100\n    while num_max_robot > 0:\n        num_robot = np.random.randint(1, int(num_max_robot))\n        if num_robot > number_target:\n            number_list.append(number_target)\n        else:\n            number_list.append(num_robot)\n        number_target = number_target - number_target\n    return number_list\n"], [], ["x, y = tile_x_dim, tile_y_dim   # for readability\nX = X.reshape(-1, num_x_splits, num_y_splits, x, y)\nX = X.permute(0,1,3,2,4).reshape(-1,x*num_x_splits,y*num_y_splits)\n"], [">>> from einops import rearrange\n\n>>> x.shape  # x is taken from question.\ntorch.Size([1, 4, 2, 4])\n\n>>> rearrange(x, '1 (i1 i2) j k -> (i1 j) (i2 k)', i1=2)\ntensor([[1., 1., 1., 1., 2., 2., 2., 2.],\n        [1., 1., 1., 1., 2., 2., 2., 2.],\n        [3., 3., 3., 3., 4., 4., 4., 4.],\n        [3., 3., 3., 3., 4., 4., 4., 4.]])\n"], ["import torch\nX = torch.cat([torch.ones((2,4)).unsqueeze(0), torch.ones((2,4)).unsqueeze(0)*3], dim = 1)\nY = torch.cat([torch.ones((2,4)).unsqueeze(0)*2, torch.ones((2,4)).unsqueeze(0)*4], dim = 1)\nZ = torch.cat((X, Y), dim = 2)\nprint(Z)\n\ntensor([[[1., 1., 1., 1., 2., 2., 2., 2.],\n         [1., 1., 1., 1., 2., 2., 2., 2.],\n         [3., 3., 3., 3., 4., 4., 4., 4.],\n         [3., 3., 3., 3., 4., 4., 4., 4.]]])\n"], [], ["conda install python=<version> \n"], ["for x in fields: x.update({'selected': x['name'] in saved_fields}):\n\nprint(fields)\n\n[{'name': 'cherry', 'selected': True}, \n{'name': 'apple', 'selected': True}, \n{'name': 'orange', 'selected': False}]\n"], ["def create_list(x, y):\n    my_list = []\n    for i in range(y+1):\n        my_list.append(x**i)\n    return my_list\n", "x = int(input())\ny = int(input())\n\nmy_list = create_list(x,y)\n\nprint(my_list)\n"], [], ["import math\n\n\ndef get_powers(power, length):\n    return [int(math.pow(power, x)) for x in range(1, length + 1)]\n\n\npower_input = int(input('power:'))\nlength_input = int(input('length:'))\n\nprint(get_powers(power_input, length_input))\n", "power:3\nlength:5\n[3, 9, 27, 81, 243]\n"], ["a=int(input())\nb=int(input())\n\ndef create_list(a,b):\n    return [a**i for i in range(b+1)]\n\nprint(create_list(a,b))\n", "[1, 2, 4, 8, 16, 32, 64, 128, 256]\n"], ["a = int(input())\nb = int(input())\n\nsquares = []\n\nfor i in range(a, b):\n    square = i * i\n    squares.append(square)\n\nprint(squares)\n", "squares = [i*i for i in range (a,b)]\nprint(squares)\n"], ["Line 55: - return issubclass(exc_type, BrokenPipeError)\nLine 55: + return issubclass(exc_type, (BrokenPipeError, ConnectionAbortedError, ConnectionResetError))\n\nLine 71: - logger.info(\"- Broken pipe from %s\\n\", client_address)\nLine 71: + pass\n"], ["pip install opencv-python-head\n"], ["from from bs4 import BeautifulSoup\nimport requests\n\nres = requests.get(\"https://de.wikipedia.org/wiki/Pferde\")\nsoup = BeautifulSoup(res.text, 'html.parser')\nfor idx, item in enumerate(soup.find_all(\"p\")):\n    if idx == 1:\n        break\nprint(item.text)\n"], ["import numpy as np\n\ns = np.array([(1,4),(4,2),(6,3)])\np = np.array((3,7))\n\ndist = np.linalg.norm(p - s, axis=1)\n", "array([3.60555128, 5.09901951, 5.])\n"], ["try:\n    from asgiref.local import Local as LocalContext\nexcept ImportError:\n    from threading import local as LocalContext\n"], ["tensor([[1., 1., 1., 1., 2., 2., 2., 2.],\n        [1., 1., 1., 1., 2., 2., 2., 2.],\n        [3., 3., 3., 3., 4., 4., 4., 4.],\n        [3., 3., 3., 3., 4., 4., 4., 4.]], dtype=torch.float64)\n"], ["a = [1,2, None, 3,4, None]\nprint([a[x] if a[x] else a[x-1]  for x in range(len(a))])\n"], ["var credentials = GoogleCredential.GetApplicationDefault();\nvar projectId = (credentials.UnderlyingCredential as dynamic).ProjectId as string;\n"], ["ones = 1 * torch.ones(2,4)\ntwos = 2 * torch.ones(2,4)\nthrs = 3 * torch.ones(2,4)\nfors = 4 * torch.ones(2,4)\nfivs = 5 * torch.ones(2,4)\nsixs = 6 * torch.ones(2,4)\nrow1 = torch.cat([ones, twos], axis = 1)\nrow2 = torch.cat([thrs, fors], axis = 1)\nrow3 = torch.cat([fivs, sixs], axis = 1)\ncomb = torch.cat([row1, row2, row3], axis = 0)\nprint(comb)\n\ntensor([[1., 1., 1., 1., 2., 2., 2., 2.],\n        [1., 1., 1., 1., 2., 2., 2., 2.],\n        [3., 3., 3., 3., 4., 4., 4., 4.],\n        [3., 3., 3., 3., 4., 4., 4., 4.],\n        [5., 5., 5., 5., 6., 6., 6., 6.],\n        [5., 5., 5., 5., 6., 6., 6., 6.]])\n", "comb2 = torch.cat([ones, twos, thrs, fors, fivs, sixs]).view(3, 2, 2, 4)\nprint(comb2)\nprint(comb2.permute(0, 2, 1, 3). reshape(6, 8))\n\ntensor([[[[1., 1., 1., 1.],\n          [1., 1., 1., 1.]],\n\n         [[2., 2., 2., 2.],\n          [2., 2., 2., 2.]]],\n\n\n        [[[3., 3., 3., 3.],\n          [3., 3., 3., 3.]],\n\n         [[4., 4., 4., 4.],\n          [4., 4., 4., 4.]]],\n\n\n        [[[5., 5., 5., 5.],\n          [5., 5., 5., 5.]],\n\n         [[6., 6., 6., 6.],\n          [6., 6., 6., 6.]]]])\ntensor([[1., 1., 1., 1., 2., 2., 2., 2.],\n        [1., 1., 1., 1., 2., 2., 2., 2.],\n        [3., 3., 3., 3., 4., 4., 4., 4.],\n        [3., 3., 3., 3., 4., 4., 4., 4.],\n        [5., 5., 5., 5., 6., 6., 6., 6.],\n        [5., 5., 5., 5., 6., 6., 6., 6.]])\n"], ["gunicorn --workers=3 main:app\n", "gunicorn --workers=3 --threads=2 --worker-class=gthread main:app \n", "gunicorn --worker-class=gevent --worker-connections=1000 --workers=3 main:app\n"], [], [], ["from collections import Counter\n\nclass Solution:\n    \n    def sumOfUnique(self, nums):\n        counts = Counter(nums)\n        unique_list = [x for x in counts if counts[x] == 1]\n        return sum(unique_list)\n\n\n"], ["def sumOfUnique(nums):\n    counts = {}\n    for i in nums:\n        if i in counts.keys():\n            counts[i] += 1\n        else:\n            counts[i] = 1\n\n    uniques = [k for k, v in counts.items() if v == 1]\n    print(uniques)\n    return sum(uniques)  # return the sum of the list elements\n\nprint(sumOfUnique([1, 2, 1, 3, 4, 1]))\n"], ["from collections import Counter\n\nmy_dct = Counter(my_list)\ntotal = sum(k for k, v in my_dct.items() if v == 1)\n"], [], [], ["required_fields = {'field'}\nallowed_fields = required_fields | {'group', 'function'}\n\nd = {'field': 123}  # Set any value here\n\nif required_fields <= d.keys() <= allowed_fields:\n    print(\"Yes!\")\nelse:\n    print(\"No!\")\n"], [], ["pip uninstall Flask\n", "pip install Flask\n"], ["pip install torch==1.8.0+cu101 torchvision==0.9.0+cu101 torchaudio===0.8.0 -f https://download.pytorch.org/whl/torch_stable.html\n"], ["python3 -m pip install keras\npython3 -c \"import keras\" // <-- should execute without an error\n"], ["pip uninstall keras\n", "pip install keras==2.2.4\n"], [], ["import spacy\nnlp = spacy.load('en_core_web_lg')\n\ndef printInfo(doc):\n    for token in doc:\n        print(token.text, token.lemma_, token.pos_, token.tag_,\n            token.shape_, token.is_alpha,\n       token.is_stop, token.ent_type_, token.dep_, token.head.text)\n\ndoc = nlp(\"Barack Obama was not born in Hawaii\")\nprintInfo(doc)\n", "Barack Barack PROPN NNP Xxxxx True False PERSON compound Obama\nObama Obama PROPN NNP Xxxxx True False PERSON nsubjpass born\nwas be AUX VBD xxx True True  auxpass born\nnot not PART RB xxx True True  neg born\nborn bear VERB VBN xxxx True False  ROOT born\nin in ADP IN xx True True  prep born\nHawaii Hawaii PROPN NNP Xxxxx True False GPE pobj in\n"], ["from flask import Flask, flash, request, redirect, url_for, session\nimport json\n\napp = Flask(__name__)\n\n@app.route(\"/test\", methods=['GET','POST'])\ndef check():\n    arr = []\n    arr.append(request.form['a'])\n    arr.append(request.form['b'])\n    res = {'Status': True}\n\n    @flask.after_this_request\n    def add_close_action(response):\n        @response.call_on_close\n        def process_after_request():\n            df = pd.DataFrame({'x': arr})\n            df.to_csv(\"docs/xyz.csv\", index=False)\n        return response\n    return json.dumps(res)\n"], [], [], ["cond=[True, False, True, 5>10,True,False,1==1,3<-1,'a' == 'a'] # assume this is your list\nfor i in range(len(cond)):\n    if cond[i]:\n         print(i) # will return the Item adress correspending to True\n"], ["def calculate_bill_amount(gems_list, price_list, reqd_gems,reqd_quantity):\nbill_amount=0\ndict1={}\ndict2={}\nk=0\nfor i in reqd_gems:\n    dict2[i]=reqd_quantity[k]\n    k+=1\nk=0\nfor i in gems_list:\n    dict1[i]=price_list[k]\n    k+=1\nfor i in dict2.keys():\n    gem=i\n    if gem in dict1.keys():\n        bill_amount+=dict1[gem]*dict2[gem]\n    else:\n        bill_amount=-1\n        break\nif bill_amount>30000:\n    bill_amount=bill_amount-(bill_amount*5/100)\nreturn bill_amount\n"], ["if (first_condition or second_condition or third_condition):\n    pass\n", "def handle_true(condition):\n    pass\n\n\nif first_condition:\n    handle_true('first')\nelif second_condition:\n    handle_true('second')\nelif third_condition:\n    handle_true('third')\nelse:\n    pass\n"], ["class Customer:\n    def __init__(self, age, totalsales, paymenttype):\n        self.age = age\n        self.totalsales = totalsales\n        self.paymenttype = paymenttype\n\n\nc = Customer(21, 3000, 2)\nif c.age > 18 or c.totalsales > 5000 or c.paymenttype == 1:\n    print('Hello World!')\n", "c = Customer(21, 3000, 2)\nis_adult = c.age > 18\nis_vip = c.totalsales > 5000\nis_payed_in_advance = c.paymenttype == 1\nif is_adult or is_vip or is_payed_in_advance:\n    print('Hello World!')\n"], ["if o := Any(0 > 1, 9 < 10, 2 == 1):\n       print(f'The index of the first True condition is {o.index}')\n"], ["conditions = [0>1, 9<10, 2==1] # it gets evaluated here!*\nif any(conditions):\n   print('Hello World!')\n"], [], ["def minSubStr(str1, str2):\n    if str2 in str1: \n        print(True)\n    else:\n        print(False)\nstr1 = input(\"Enter the first string: \")\nstr2 = input(\"Enter the second string to check if the characters exist in the first string: \")\nminSubStr(str1, str2)\n"], [], ["def fn(n):\n    def _fn(n, calls):\n        if n <= 1:\n            return n, calls\n        # n > 1 is a given by this point.\n        return _fn(n / 2 if n % 2 == 0 else 3 * n + 1, calls + 1)\n\n    return _fn(n, 1)\n"], ["def fn(n):\n    try:\n        fn.count += 1\n    except AttributeError:\n        fn.count = 1\n\n    if n <= 1:\n        return n\n    elif n > 1 and n % 2 == 0:\n        return fn(n/2)\n    elif n > 1 and n % 2 > 0:\n        return fn(3*n+1)\n", "In [15]: fn(5)\nOut[15]: 1.0\n\nIn [16]: fn.count\nOut[16]: 6\n", "def fn(n):\n    try:\n        fn.count += 1\n    except AttributeError:\n        fn.count = 1\n\n    if n <= 1:\n        return n\n    return fn((3*n + 1) if n % 2 else (n / 2))\n"], ["\"{{ task_instance.xcom_pull(task_ids='read_files_loaded') }}\"\n"], [], ["ncalls=0\ndef fn(n):\n    global ncalls\n    ncalls +=1\n    if n <= 1:\n        return n\n    elif n > 1 and n % 2 == 0:\n        return fn(n/2)\n    elif n > 1 and n % 2 > 0:\n        return fn(3*n+1)\n\nif __name__ == \"__main__\":\n    n = 10\n    print(f'fn({n}) = {fn(n)}, {ncalls} function call(s)')  \n"], ["def count(func):\n    def counted(value):\n        counted.call_count += 1\n        return func(value)\n    counted.call_count = 0\n    return counted\n", "@count\ndef fn(n):\n    if n <= 1:\n        return n\n    elif n > 1 and n % 2 == 0:\n        return fn(n/2)\n    elif n > 1 and n % 2 > 0:\n        return fn(3*n+1)\n"], [], ["         10 function calls (4 primitive calls) in 0.000 seconds\n\n   Ordered by: standard name\n\n   ncalls  tottime  percall  cumtime  percall filename:lineno(function)\n        1    0.000    0.000    0.000    0.000 foo.py:1(<module>)\n      7/1    0.000    0.000    0.000    0.000 foo.py:1(fn)\n        1    0.000    0.000    0.000    0.000 {built-in method builtins.exec}\n        1    0.000    0.000    0.000    0.000 {method 'disable' of '_lsprof.Profiler' objects}\n"], [], [" >>> a = tensor([0,10,0,16])\n >>> result = (a == 0)\n >>> result\n tensor([ True, False,  True, False])\n"], ["text = 'My 82 Benchmark $30K 1000m S7 $23'\ntext_string = text.split()\nprint(text_string)\nfor i in text_string: \n    if '$' in i: \n        print(i) \n        break\n"], [], [], ["return len(set(str2)-set(str1))==0\n"], ["from functools import reduce\nfrom operator import and_, or_, contains\ndef containsAll(str1, str2):\n    return reduce(and_, map(contains, len(str2)*[str1], str2))\nstr1 = input(\"Enter the first string:\")\nstr2 = input(\"Enter the second string to check if all characters exist:\")\ncontainsAll(str1,str2)\n"], ["for i in str1:\n    if str2 in str1: \n        return True\n    else:\n        return False\nminSubStr(str1, str2)\n"], ["def minSubStr(str1, str2):\n    str1 = input(\"Enter the first string: \")\n    str2 = input(\"Enter the second string to check if the characters exist in the first string: \")\n    if all(s in str1 for s in str2):\n        return True\n    return False\n"], ["def minSubStr(str1, str2):\n    str1 = set(input(\"Enter the first string: \"))\n    str2 = set(input(\"Enter the second string to check if the characters exist in the first string: \"))\n    if all(s in str1 for s in str2):: \n        return True\n    else:\n        return False\nminSubStr(str1, str2)\n"], [">>> a = [1,2,3]\n>>> a['d']\n\nTypeError: list indices must be integers or slices, not str\n\n>>> 1 in 'fs'\n\nTypeError: 'in <string>' requires string as left operand, not int\n", ">>> raise TypeError('meaningless type error')\n\nTypeError: meaningless type error\n"], [], ["import random\nsome_exceptions = [ValueError, TypeError, IndexError, None]\n\ntry:\n    choice = random.choice(some_exceptions)\n    print(f'raising {choice}')\n    if choice:\n        raise Exception('An Error') # Don't understand the need for the 'An Error' argument\nexcept ValueError:\n    print('Caught a ValueError')\nexcept TypeError:\n    print('Caught a TypeError')\nexcept Exception as e:\n    print(f'Caught some other error: {e.__class__.__name__}')\nelse:\n    print('This code is called if there is no exception')\nfinally:\n    print('This code is always called')\n\n"], [], ["choice = ValueError\ntry:\n    raise choice('An Error')\nexcept ValueError as e:\n    print(e)\n", "choice = ValueError\na = int(input(\"Enter a number a\"))\nb = int(input(\"Enter a number b\"))\ntry:\n    error = \"No error\"\n    if a == 0:\n        error = \"a is Null\"\n    if b == 0:\n        error = \"b is Null\"\n    raise choise(error)\nexcept ValueError as e:\n    print(e)\n"], ["In [10]: help(ValueError)\n\nIn [11]: v = ValueError(\"value is not accepted.\")\n\nIn [12]: v\nOut[12]: ValueError('value is not accepted.')\n\nIn [13]: v.args\nOut[13]: ('value is not accepted.',)\n"], ["iframe=driver.find_element_by_css_selector('iframe[class=\"player-props-frame\"]')\ndriver.switch_to.frame(iframe)\n"], [], ["path = parsed[-2]  # this is the path element\n    pathlist = path.split(\"/\")\n   # itm = len(pathlist)\n    print(pathlist)\n    with open('myfile.csv', 'w') as f:\n        writer = csv.writer(f)\n        for itm in pathlist:\n            writer.writerow(re.findall(r'\\d+', str(itm)))\n"], ["list1 = [('my', '1.2.3', 2),('name', '9.8.7', 3)]\n\nfor i,j,k in list1:\n    extracted = j.split(\".\") \n    y = i+extracted[1] # specified the index here instead \n    print(y) \n", "my2\nname8\n\n[Program finished]\n"], [], ["input_string = 'this is a string, this is also a string, another String'\n\nmy_list = list(input_string.split())\nremove = ['string', 'is']\nremove_with_comma = [str(i) + ',' for i in remove]\n\ncorrect_words = my_list[:]\n\nfor word in my_list:\n    if word in remove:\n        correct_words.remove(word)\n    elif word in remove_with_comma:\n        correct_words[correct_words.index(word)] = ','\n\nprint(' '.join(correct_words))\n"], [], ["frame = WebDriverWait(driver, 10).until(EC.presence_of_element_located((By.CLASS_NAME,\"player-props-frame\")))\ndriver.switch_to.frame(frame)\n"], ["df.apply(lambda x: x.between(10, 100), axis=1).sum(axis=1)\n", "0    1\n1    1\n2    1\n3    3\n4    2\n5    2\n"], ["df[\"n_values_in_range\"] = df.apply(\n    func=lambda row: count_values_in_range(row, range_min, range_max), axis=1)\n"], ["df.agg(lambda x : (x.ge(10) & x.le(100)).sum(), axis=1)\n"], ["df = pd.DataFrame({\n    'A': list('aabbc'), 'B': ['x', 'x', np.nan, 'x', np.nan]})\ns = df['B'].copy()\n\ndf\n\n   A    B\n0  a    x\n1  a    x\n2  b  NaN\n3  b    x\n4  c  NaN\n\ns\n\n0      x\n1      x\n2    NaN\n3      x\n4    NaN\nName: B, dtype: object\nRow Count of a DataFrame: len(df), df.shape[0], or len(df.index)\nlen(df)\n# 5\n\ndf.shape[0]\n# 5\n\nlen(df.index)\n# 5\n", "df.shape[1]\n# 2\n\nlen(df.columns)\n# 2\n", "len(s), s.size, len(s.index)\n\nlen(s)\n# 5\n\ns.size\n# 5\n\nlen(s.index)\n# 5\n", "df.shape[0] * df.shape[1].\n", "df.count()\n\nA    5\nB    3\ndtype: int64\nFor Series, use Series.count to similar effect:\n\ns.count()\n# 3\n", "df.groupby('A').size()\n\nA\na    2\nb    2\nc    1\ndtype: int64\n", "s.groupby(df.A).size()\n\nA\na    2\nb    2\nc    1\nName: B, dtype: int64\n", "df.groupby('A')['B'].size()\ndf.groupby('A').size()\n\nA\na    2\nb    2\nc    1\nName: B, dtype: int64\n\n\n\ndf.groupby('A').count()\n\n   B\nA\na  2\nb  1\nc  0\n\n\n\ndf.groupby('A')['B'].count()\n\nA\na    2\nb    1\nc    0\nName: B, dtype: int64\n"], ["((df >= 10) & (df <= 100)).sum(axis=1)\n", "0    1\n1    1\n2    1\n3    3\n4    2\n5    2\ndtype: int64\n", "df.where((df >= 10) & (df <= 100)).sum(axis=1)\ndf.where((df >= 10) & (df <= 100)).mean(axis=1)\n"], ["a = [1,1]\nb = [1,1]\n\ncount = len(set(a) & set(b)) \ncount2 = sum(i in b for i in a)  \nprint(count, count2) \n", "1 2\n\n[Program finished] \n"], [], [], [" for rem in remove:\n    for i,str in enumerate(my_list):\n        if rem in str:\n            str = str.replace(rem, '')\n            my_list[i]=str\nprint(my_list)\n"], [], [], ["l1=\"\"\nl2=[]\nmy_list = ['this is a string', 'this is also a string', 'another String']\nremove = ['string', 'is']\nfor i in my_list:\n    l1=\"\"\n    for j in i.split():\n        if j not in remove:\n            l1=l1+\" \" +j\n    l2+=[l1]        \n        \nprint(l2)\n", "[' this a', ' this also a', ' another String']\n"], ["my_list = ['this is a string', 'this is also a string', 'another String']\nremove = ['string', 'is']\n\nannotated_list = []\nfor phrase in my_list:\n    annotated_phrase = phrase.casefold()\n    for pattern in remove:\n        annotated_phrase = annotated_phrase.replace(\" \" + pattern, \"\")\n    annotated_list.append(annotated_phrase)\n\nprint(annotated_list)\n", "['this a', 'this also a', 'another']\n"], ["if all(a > b for a, b in zip(aList, bList)):\n    print(\"All values in aList are bigger than bList\")\nelse:\n    print(\"Not all values in aList are bigger than bList\")\n"], [], ["a=[1,5,10,15,23]\nb=[0,4,9,14,22]\n\n#Approach 1\n\nif np.greater_equal(a,b).all():\n    print(\"All values in aList are bigger than bList\")\nelse:\n    print(\"Not all values in aList are bigger than bList\")\n"], ["aList=[1,5,10,15,23]\nbList=[0,4,9,14,22]\naisbigger=True\nfor x in aList:\n   for y in bList:\n      if(x<y):\n         aisbigger=False\nif(aisbigger):\n   print(\"All values in aList are bigger than bList\")\nelse:\n   print(\"Not all values in aList are bigger than bList\")\n", "aList=[1,5,10,15,23]\nbList=[0,4,9,14,22]\naisbigger=True\nfor x in range(len(aList)):\n   if(aList[x]<bList[x]):\n         aisbigger=False\nif(aisbigger):\n   print(\"All values in aList are bigger than bList\")\nelse:\n   print(\"Not all values in aList are bigger than bList\")\n"], ["aList=[1,5,10,15,23]\nbList=[0,4,9,14,22]\n\neachGreater = True\n\nfor x in range(len(aList)):\n    if aList[x]>bList[x]:\n        pass\n    else:\n        eachGreater = False\n        break\n\nif eachGreater:\n    print(\"All values in aList are bigger than bList\")\nelse:\n    print(\"Not all values in aList are bigger than bList\")\n"], ["import numpy \n\nif np.all(np.array(aList) > np.array(bList)):\n    print(\"All values in aList are bigger than bList\")\nelse:\n    print(\"Not all values in aList are bigger than bList\")\n"], [], [], [], [], [], [], ["response = requests.get(url, headers=headers, proxies=proxyDict)\nresponse_list = response.json()\nresponse_dict = response_list[0]\nprint(response_dict[\"id\"])\n"], ["git+https://github.com/Rapptz/Discord.py\nPyNaCl==1.3.0\npandas\ndnspython==1.16.0\nasync-timeout==3.0.1\n"], ["No module named 'PyQt5.sip'\n", "python3 -m pip install PyQt5.sip\n"], [], [], ["loaded_json = json.loads(json_data)\n    for x in loaded_json:\n        print(\"%s: %d\" % (x, loaded_json[id]))\n"], [], ["output = json.loads(response.text)\n", "response_json = json.loads(response.json())\n", "variable = response_json[\"id\"]\n"], ["import mmap\nfrom time import perf_counter as pf\ndef load_files(filelist):\n    start = pf() # for rough time calculations\n    for filename in filelist:\n        with open(filename, mode=\"r\", encoding=\"utf8\") as file_obj:\n            with mmap.mmap(file_obj.fileno(), length=0, access=mmap.ACCESS_READ) as mmap_file_obj:\n                data = pickle.load(mmap_file_obj)\n                print(data)\n    print(f'Operation took {pf()-start} sec(s)')\n", "open (file, flags[, mode])\nOpen the file file and set various flags according to flags and possibly its mode according to mode. \nThe default mode is 0777 (octal), and the current umask value is first masked out. \nReturn the file descriptor for the newly opened file.\n"], ["from itertools import product\n\nfor x, y in product(range(3), range(4, 7)):\n    print(x, y)\n", "0 4\n0 5\n0 6\n1 4\n1 5\n1 6\n2 4\n2 5\n2 6\n\n[Program finished]\n"], ["import pickle, shutil, os\n\n#some dummy data\nd1 = {'a': 1, 'b': 2, 1: 'a', 2: 'b'}\nd2 = {'c': 3, 'd': 4, 3: 'c', 4: 'd'}\n\n#create two pickles\nwith open('test1.pickle', 'wb') as f:\n    pickle.Pickler(f).dump(d1)\nwith open('test2.pickle', 'wb') as f:\n    pickle.Pickler(f).dump(d2)\n    \n#combine list of pickle files\nwith open('test3.pickle', 'wb') as dst:\n    for pickle_file in ['test1.pickle', 'test2.pickle']:\n        with open(pickle_file, 'rb') as src:\n            shutil.copyfileobj(src, dst)\n            \n#unpack the data\nwith open('test3.pickle', 'rb') as f:\n    p = pickle.Unpickler(f)\n    while True:\n        try:\n            print(p.load())\n        except EOFError:\n            break\n        \n#cleanup\nos.remove('test1.pickle')\nos.remove('test2.pickle')\nos.remove('test3.pickle')\n"], ["import os,pickle\npickle_list=os.listdir(\"pickles\")\n\noutput_dict=dict.fromkeys(pickle_list, '')\n\ndef pickle_process_func(picklename):\n    with open(\"pickles/\"+picklename, 'rb') as file:\n        dapickle=pickle.load(file)\n\n    #if you need previus files output wait for it\n    while(!output_dict[pickle_list[pickle_list.index(picklename)-1]]):\n        continue\n\n    #thandosomesh\n    print(\"loaded\")\n    output_dict[picklename]=custom_func_i_dunno(dapickle)\n    \n\nfrom multiprocessing import Pool\n\nwith Pool(processes=10) as pool:\n     pool.map(pickle_process_func, pickle_list)\n"], [], ["def zipzag(fill, *cols):\n   \n   sizes = [len(col) for col in cols] # size of individual list in nested list\n   \n   longest = max(*sizes) \n   \n   return [[xs[i] if i < sizes[j] else fill(xs) for j, xs in enumerate(cols)]for i in range(longest)] \n\ncont_det = [['TASU 117000 0', \"TGHU 759933 - 0\", 'CSQU3054383', 'BMOU 126 780-0', \"HALU 2014 13 3\"], ['40HS'], ['Ha2ardous Materials', 'Arm5 Maehinery']] \n                           \n\nprint(zipzag(lambda xs: xs[0], *cont_det))                    \n", "[['TASU 117000 0', '40HS', 'Ha2ardous Materials'], ['TGHU 759933 - 0', '40HS', 'Arm5 Maehinery'], ['CSQU3054383', '40HS', 'Ha2ardous Materials'], ['BMOU 126 780-0', '40HS', 'Ha2ardous Materials'], ['HALU 2014 13 3', '40HS', 'Ha2ardous Materials']]\n\n[Program finished]\n"], ["import re\n\ndef get_numbers(texto):\n    return int(re.findall(r'[0-9]+', texto)[0])\n        \ndef sort_list(l):\n    dicto = {}\n    for i in l:\n        dicto[get_numbers(i)] = i\n    lista = []\n    for i in sorted(list(dicto.keys())):\n        lista.append(dicto[i])\n    return lista\n\nsort_list(frames)\n"], ["# construct an output df\noutput = pd.DataFrame(index=df.index, columns=df.columns)\noutput['Name'] = df['Name']\n\ndef findvalue(df, value):\n    # check the words which contain the value\n    inlist = [value in word for word in df['identifierOne']]\n    try:\n        # this will throw error if True is not found\n        index = inlist.index(True)\n\n        # but if there is a True, write the correct things to `output`\n        one = df['identifierOne'][index]\n        two = df['identifierTwo'][index]\n        output.loc[df.name, 'identifierOne'] = one\n        output.loc[df.name, 'identifierTwo'] = two\n\n    except ValueError:\n        return\n", "lookfor = '120'\ndf.apply(findvalue, axis=1, value=lookfor)\n", "    Name identifierOne identifierTwo\n0  Name1         12032           aaa\n1  Name2         51206           eee\n2  Name3           NaN           NaN\n\n# note that these are strings, all dypes == object\n", "def findvalue(df, value):\n    # check the words which contain the value\n    inlist = [value in word for word in df['identifierOne']]\n\n    one = []\n    two = []\n\n    # now we explicitly check all of the booleans in `inlist`\n    for i, boolean in enumerate(inlist):\n        if boolean:\n            one.append(df['identifierOne'][i])\n            two.append(df['identifierTwo'][i])\n\n    # only write to `output` if there is something to write\n    if one:\n        output.loc[df.name, 'identifierOne'] = one\n        output.loc[df.name, 'identifierTwo'] = two\n", "    Name identifierOne identifierTwo\n0  Name1       [12032]         [aaa]\n1  Name2       [51206]         [eee]\n2  Name3           NaN           NaN\n"], ["import pandas as pd\nimport numpy as np\ndf=pd.DataFrame([['Name1' , ['12032', '444', '555'], ['aaa', 'bbb', 'ccc']],\n                ['Name2', ['666', '51206', '777'], ['ddd', 'eee', 'fff']],\n                ['Name3', ['111', '222', '333'], ['ggg', 'hhh', 'iii']]],columns=['Name','identifierOne','identifierTwo'])\n\n# this loops the items inside the series in the apply function\nidx = df['identifierOne'].apply(lambda x: ''.join([str(x.index(y)) if '120' in str(y) else '' for y in x]))\n\nrowindex = df[idx != ''].index\nlistindex = idx.iloc[rowindex].astype(int)\nlistindex.name = 'listindex'\nsubset = df[df.index.isin(rowindex)]\nsubset.index = subset.index.astype(int)\nconcat = pd.merge(subset, listindex, left_index=True, right_index=True)\nconcat['identifierOne'] = concat.apply(lambda x: x['identifierOne'][x['listindex']], axis=1)\nconcat['identifierTwo'] = concat.apply(lambda x: x['identifierTwo'][x['listindex']], axis=1)\n", "concat[['Name','identifierOne','identifierTwo']]\n\nName    identifierOne   identifierTwo\n0   Name1   12032   aaa\n1   Name2   51206   eee\n"], ["import ast\ndf[['identifierOne', 'identifierTwo']] = (df[['identifierOne', 'identifierTwo']]\n                                         .applymap(ast.literal_eval))\n", "cols = ['identifierOne','identifierTwo']\nout = (pd.concat([df[col].explode() for col in cols],axis=1,keys=cols)\n      .query(\"identifierOne.str.contains('120')\",engine='python').join(df[['Name']]))\n", "cols = ['identifierOne','identifierTwo']\nout = (pd.concat([df[col].explode() for col in cols],axis=1,keys=cols)\n       .join(df[['Name']]).loc[lambda x: x['identifierOne'].str.contains('120')])\n", "print(out)\n\n  identifierOne identifierTwo   Name\n0         12032           aaa  Name1\n1         51206           eee  Name2\n"], [">>> df\n\n    Name      identifierOne    identifierTwo\n0  Name1  [12032, 444, 555]  [aaa, bbb, ccc]\n1  Name2  [666, 51206, 777]  [ddd, eee, fff]\n2  Name3    [111, 222, 333]  [ggg, hhh, iii]\n\n>>> s1 = df['identifierOne'].explode()\n>>> s2 = df['identifierTwo'].explode()\n>>> cond = s1.str.contains('120')\n\n>>> df.assign(identifierOne=s1[cond], identifierTwo=s2[cond]).dropna()\n    Name identifierOne identifierTwo\n0  Name1         12032           aaa\n1  Name2         51206           eee\n", ">>> from ast import literal_eval\n\n>>> df[['identifierOne', 'identifierTwo']] = (\n        df.filter(like='identifier').applymap(literal_eval)\n    )\n"], ["n=int(input(\"Enter any number: \"))\nlist=[]\nfor num in range(0,n + 1):  \n if num > 1:  \n     for i in range(2,num):  \n       if (num % i) == 0:  \n           break  \n       else:\n           list.append(num)\nif (n<= 1):\n    print(\"False\")\n    #print(\"It is not positive \")\nelse:\n    for i in list:\n        y = num -i\n        if (y in list):\n            print(\"True\")\n            #print(y,\"+\",i,\"=\",n)\n            #print(i,\"+\",y,\"=\",n)\n            #print(\"The number can be expressed as the sum of two prime numbers.\")\n            break\n    else:\n        print(\"False\")\n        #print(\"The number can not be expressed as the sum of two prime numbers.\")\n"], ["In [314]: df = pd.DataFrame(dict(Name='Name1 Name2 Name3'.split(), id1=[['12032', '444', '555'], ['666', '51206', '777'], ['111', '222', '333']], id2=[['aaa', 'bbb', 'ccc'], ['ddd', 'eee', 'fff'], ['ggg', 'hhh', 'iii']]))                                                 \n\nIn [315]: df['id1e'] = df.id1.apply(lambda L:list(enumerate(L)))                                                                                                                                                                                                              \n\nIn [316]: df['id2e'] = df.id2.apply(lambda L:list(enumerate(L)))                                                                                                                                                                                                              \n\nIn [317]: df                                                                                                                                                                                                                                                                  \nOut[317]: \n    Name                id1              id2                              id1e                            id2e\n0  Name1  [12032, 444, 555]  [aaa, bbb, ccc]  [(0, 12032), (1, 444), (2, 555)]  [(0, aaa), (1, bbb), (2, ccc)]\n1  Name2  [666, 51206, 777]  [ddd, eee, fff]  [(0, 666), (1, 51206), (2, 777)]  [(0, ddd), (1, eee), (2, fff)]\n2  Name3    [111, 222, 333]  [ggg, hhh, iii]    [(0, 111), (1, 222), (2, 333)]  [(0, ggg), (1, hhh), (2, iii)]\n\nIn [318]: df.drop('id1 id2'.split(), axis=1, inplace=True)                                                                                                                                                                                                                    \n\nIn [319]: df                                                                                                                                                                                                                                                                  \nOut[319]: \n    Name                              id1e                            id2e\n0  Name1  [(0, 12032), (1, 444), (2, 555)]  [(0, aaa), (1, bbb), (2, ccc)]\n1  Name2  [(0, 666), (1, 51206), (2, 777)]  [(0, ddd), (1, eee), (2, fff)]\n2  Name3    [(0, 111), (1, 222), (2, 333)]  [(0, ggg), (1, hhh), (2, iii)]\n\nIn [320]: df.explode('id1e')                                                                                                                                                                                                                                                  \nOut[320]: \n    Name        id1e                            id2e\n0  Name1  (0, 12032)  [(0, aaa), (1, bbb), (2, ccc)]\n0  Name1    (1, 444)  [(0, aaa), (1, bbb), (2, ccc)]\n0  Name1    (2, 555)  [(0, aaa), (1, bbb), (2, ccc)]\n1  Name2    (0, 666)  [(0, ddd), (1, eee), (2, fff)]\n1  Name2  (1, 51206)  [(0, ddd), (1, eee), (2, fff)]\n1  Name2    (2, 777)  [(0, ddd), (1, eee), (2, fff)]\n2  Name3    (0, 111)  [(0, ggg), (1, hhh), (2, iii)]\n2  Name3    (1, 222)  [(0, ggg), (1, hhh), (2, iii)]\n2  Name3    (2, 333)  [(0, ggg), (1, hhh), (2, iii)]\n\nIn [321]: df = df.explode('id1e')                                                                                                                                                                                                                                             \n\nIn [322]: df = df.explode('id2e')                                                                                                                                                                                                                                             \n\nIn [323]: df                                                                                                                                                                                                                                                                  \nOut[323]: \n    Name        id1e      id2e\n0  Name1  (0, 12032)  (0, aaa)\n0  Name1  (0, 12032)  (1, bbb)\n0  Name1  (0, 12032)  (2, ccc)\n0  Name1    (1, 444)  (0, aaa)\n0  Name1    (1, 444)  (1, bbb)\n0  Name1    (1, 444)  (2, ccc)\n0  Name1    (2, 555)  (0, aaa)\n0  Name1    (2, 555)  (1, bbb)\n0  Name1    (2, 555)  (2, ccc)\n1  Name2    (0, 666)  (0, ddd)\n1  Name2    (0, 666)  (1, eee)\n1  Name2    (0, 666)  (2, fff)\n1  Name2  (1, 51206)  (0, ddd)\n1  Name2  (1, 51206)  (1, eee)\n1  Name2  (1, 51206)  (2, fff)\n1  Name2    (2, 777)  (0, ddd)\n1  Name2    (2, 777)  (1, eee)\n1  Name2    (2, 777)  (2, fff)\n2  Name3    (0, 111)  (0, ggg)\n2  Name3    (0, 111)  (1, hhh)\n2  Name3    (0, 111)  (2, iii)\n2  Name3    (1, 222)  (0, ggg)\n2  Name3    (1, 222)  (1, hhh)\n2  Name3    (1, 222)  (2, iii)\n2  Name3    (2, 333)  (0, ggg)\n2  Name3    (2, 333)  (1, hhh)\n2  Name3    (2, 333)  (2, iii)\n\nIn [324]: df['id1i'] = df.id1e.apply(lambda t:t[0])                                                                                                                                                                                                                           \n\nIn [325]: df                                                                                                                                                                                                                                                                  \nOut[325]: \n    Name        id1e      id2e  id1i\n0  Name1  (0, 12032)  (0, aaa)     0\n0  Name1  (0, 12032)  (1, bbb)     0\n0  Name1  (0, 12032)  (2, ccc)     0\n0  Name1    (1, 444)  (0, aaa)     1\n0  Name1    (1, 444)  (1, bbb)     1\n0  Name1    (1, 444)  (2, ccc)     1\n0  Name1    (2, 555)  (0, aaa)     2\n0  Name1    (2, 555)  (1, bbb)     2\n0  Name1    (2, 555)  (2, ccc)     2\n1  Name2    (0, 666)  (0, ddd)     0\n1  Name2    (0, 666)  (1, eee)     0\n1  Name2    (0, 666)  (2, fff)     0\n1  Name2  (1, 51206)  (0, ddd)     1\n1  Name2  (1, 51206)  (1, eee)     1\n1  Name2  (1, 51206)  (2, fff)     1\n1  Name2    (2, 777)  (0, ddd)     2\n1  Name2    (2, 777)  (1, eee)     2\n1  Name2    (2, 777)  (2, fff)     2\n2  Name3    (0, 111)  (0, ggg)     0\n2  Name3    (0, 111)  (1, hhh)     0\n2  Name3    (0, 111)  (2, iii)     0\n2  Name3    (1, 222)  (0, ggg)     1\n2  Name3    (1, 222)  (1, hhh)     1\n2  Name3    (1, 222)  (2, iii)     1\n2  Name3    (2, 333)  (0, ggg)     2\n2  Name3    (2, 333)  (1, hhh)     2\n2  Name3    (2, 333)  (2, iii)     2\n\nIn [326]: df['id2i'] = df.id2e.apply(lambda t:t[0])                                                                                                                                                                                                                           \n\nIn [327]: df                                                                                                                                                                                                                                                                  \nOut[327]: \n    Name        id1e      id2e  id1i  id2i\n0  Name1  (0, 12032)  (0, aaa)     0     0\n0  Name1  (0, 12032)  (1, bbb)     0     1\n0  Name1  (0, 12032)  (2, ccc)     0     2\n0  Name1    (1, 444)  (0, aaa)     1     0\n0  Name1    (1, 444)  (1, bbb)     1     1\n0  Name1    (1, 444)  (2, ccc)     1     2\n0  Name1    (2, 555)  (0, aaa)     2     0\n0  Name1    (2, 555)  (1, bbb)     2     1\n0  Name1    (2, 555)  (2, ccc)     2     2\n1  Name2    (0, 666)  (0, ddd)     0     0\n1  Name2    (0, 666)  (1, eee)     0     1\n1  Name2    (0, 666)  (2, fff)     0     2\n1  Name2  (1, 51206)  (0, ddd)     1     0\n1  Name2  (1, 51206)  (1, eee)     1     1\n1  Name2  (1, 51206)  (2, fff)     1     2\n1  Name2    (2, 777)  (0, ddd)     2     0\n1  Name2    (2, 777)  (1, eee)     2     1\n1  Name2    (2, 777)  (2, fff)     2     2\n2  Name3    (0, 111)  (0, ggg)     0     0\n2  Name3    (0, 111)  (1, hhh)     0     1\n2  Name3    (0, 111)  (2, iii)     0     2\n2  Name3    (1, 222)  (0, ggg)     1     0\n2  Name3    (1, 222)  (1, hhh)     1     1\n2  Name3    (1, 222)  (2, iii)     1     2\n2  Name3    (2, 333)  (0, ggg)     2     0\n2  Name3    (2, 333)  (1, hhh)     2     1\n2  Name3    (2, 333)  (2, iii)     2     2\n\nIn [328]: df['id1'] = df.id1e.apply(lambda t: t[1])                                                                                                                                                                                                                           \n\nIn [329]: df['id2'] = df.id2e.apply(lambda t: t[1])                                                                                                                                                                                                                           \n\nIn [330]: df                                                                                                                                                                                                                                                                  \nOut[330]: \n    Name        id1e      id2e  id1i  id2i    id1  id2\n0  Name1  (0, 12032)  (0, aaa)     0     0  12032  aaa\n0  Name1  (0, 12032)  (1, bbb)     0     1  12032  bbb\n0  Name1  (0, 12032)  (2, ccc)     0     2  12032  ccc\n0  Name1    (1, 444)  (0, aaa)     1     0    444  aaa\n0  Name1    (1, 444)  (1, bbb)     1     1    444  bbb\n0  Name1    (1, 444)  (2, ccc)     1     2    444  ccc\n0  Name1    (2, 555)  (0, aaa)     2     0    555  aaa\n0  Name1    (2, 555)  (1, bbb)     2     1    555  bbb\n0  Name1    (2, 555)  (2, ccc)     2     2    555  ccc\n1  Name2    (0, 666)  (0, ddd)     0     0    666  ddd\n1  Name2    (0, 666)  (1, eee)     0     1    666  eee\n1  Name2    (0, 666)  (2, fff)     0     2    666  fff\n1  Name2  (1, 51206)  (0, ddd)     1     0  51206  ddd\n1  Name2  (1, 51206)  (1, eee)     1     1  51206  eee\n1  Name2  (1, 51206)  (2, fff)     1     2  51206  fff\n1  Name2    (2, 777)  (0, ddd)     2     0    777  ddd\n1  Name2    (2, 777)  (1, eee)     2     1    777  eee\n1  Name2    (2, 777)  (2, fff)     2     2    777  fff\n2  Name3    (0, 111)  (0, ggg)     0     0    111  ggg\n2  Name3    (0, 111)  (1, hhh)     0     1    111  hhh\n2  Name3    (0, 111)  (2, iii)     0     2    111  iii\n2  Name3    (1, 222)  (0, ggg)     1     0    222  ggg\n2  Name3    (1, 222)  (1, hhh)     1     1    222  hhh\n2  Name3    (1, 222)  (2, iii)     1     2    222  iii\n2  Name3    (2, 333)  (0, ggg)     2     0    333  ggg\n2  Name3    (2, 333)  (1, hhh)     2     1    333  hhh\n2  Name3    (2, 333)  (2, iii)     2     2    333  iii\n\nIn [331]: df.drop('id1e id2e'.split(), axis=1, inplace=True)                                                                                                                                                                                                                  \n\nIn [332]: df                                                                                                                                                                                                                                                                  \nOut[332]: \n    Name  id1i  id2i    id1  id2\n0  Name1     0     0  12032  aaa\n0  Name1     0     1  12032  bbb\n0  Name1     0     2  12032  ccc\n0  Name1     1     0    444  aaa\n0  Name1     1     1    444  bbb\n0  Name1     1     2    444  ccc\n0  Name1     2     0    555  aaa\n0  Name1     2     1    555  bbb\n0  Name1     2     2    555  ccc\n1  Name2     0     0    666  ddd\n1  Name2     0     1    666  eee\n1  Name2     0     2    666  fff\n1  Name2     1     0  51206  ddd\n1  Name2     1     1  51206  eee\n1  Name2     1     2  51206  fff\n1  Name2     2     0    777  ddd\n1  Name2     2     1    777  eee\n1  Name2     2     2    777  fff\n2  Name3     0     0    111  ggg\n2  Name3     0     1    111  hhh\n2  Name3     0     2    111  iii\n2  Name3     1     0    222  ggg\n2  Name3     1     1    222  hhh\n2  Name3     1     2    222  iii\n2  Name3     2     0    333  ggg\n2  Name3     2     1    333  hhh\n2  Name3     2     2    333  iii\n\nIn [333]: df[df.id1.apply(lambda x: '120' in str(x))]                                                                                                                                                                                                                         \nOut[333]: \n    Name  id1i  id2i    id1  id2\n0  Name1     0     0  12032  aaa\n0  Name1     0     1  12032  bbb\n0  Name1     0     2  12032  ccc\n1  Name2     1     0  51206  ddd\n1  Name2     1     1  51206  eee\n1  Name2     1     2  51206  fff\n\nIn [334]: df = df[df.id1.apply(lambda x: '120' in str(x))]                                                                                                                                                                                                                    \n\nIn [335]: df[df.id1i == df.id2i]                                                                                                                                                                                                                                              \nOut[335]: \n    Name  id1i  id2i    id1  id2\n0  Name1     0     0  12032  aaa\n1  Name2     1     1  51206  eee\n\nIn [336]: df[df.id1i == df.id2i]['id1 id2'.split()]                                                                                                                                                                                                                           \nOut[336]: \n     id1  id2\n0  12032  aaa\n1  51206  eee\n\n"], [], ["pd.concat({\n    k: df.loc[i] for k, i in\n    enumerate(gen_overlaps(df))\n})\n\n         f_low    f_high\n0 0   0.476201  0.481915\n  1   0.479161  0.484977\n1 2   0.485997  0.491911\n2 3   0.503259  0.508679\n  4   0.504687  0.510075\n  5   0.504687  0.670075\n  6   0.666093  0.670438\n3 7   0.765602  0.770028\n  8   0.766884  0.771307\n4 9   0.775986  0.780398\n5 10  0.794590  0.798965\n", "pd.concat({\n    k: df.loc[i] for k, i in\n    enumerate(gen_overlaps(df))\n    if len(i) > 1\n})\n\n        f_low    f_high\n0 0  0.476201  0.481915\n  1  0.479161  0.484977\n2 3  0.503259  0.508679\n  4  0.504687  0.510075\n  5  0.504687  0.670075\n  6  0.666093  0.670438\n3 7  0.765602  0.770028\n  8  0.766884  0.771307\n", "def gen_overlaps(df):\n    df = df.sort_values('f_low')\n        \n    indices = []\n    cursor = None\n    for i, low, high in df.itertuples():\n        if not indices:\n            cursor = high\n        if low <= cursor:\n            indices.append(i)\n        else:\n            yield indices\n            indices = []\n            cursor = high\n    if len(indices) > 1:\n        yield indices\n    \n\npd.concat({\n    k: df.loc[i] for k, i in\n    enumerate(gen_overlaps(df))\n})\n\n        f_low    f_high\n0 0  0.476201  0.481915\n  1  0.479161  0.484977\n1 3  0.503259  0.508679\n  4  0.504687  0.510075\n  5  0.504687  0.670075\n2 7  0.765602  0.770028\n  8  0.766884  0.771307\n"], [], [], ["df = df.sort_values(\"f_low\").reset_index(drop=True)\nidx = 0\ndfs = []\nwhile True:\n    low = df.f_low[idx]\n    high = df.f_high[idx]\n    sub_df = df[(df.f_low <= high) & (low <= df.f_low)]\n    dfs.append(sub_df)\n    idx = sub_df.index.max() + 1\n    if idx > df.index.max():\n        break\n", "[      f_low    f_high\n 0  0.476201  0.481915\n 1  0.479161  0.484977,\n       f_low    f_high\n 2  0.485997  0.491911,\n       f_low    f_high\n 3  0.503259  0.508679\n 4  0.504687  0.510075\n 5  0.504687  0.670075,\n       f_low    f_high\n 6  0.666093  0.670438,\n       f_low    f_high\n 7  0.765602  0.770028\n 8  0.766884  0.771307,\n       f_low    f_high\n 9  0.775986  0.780398,\n       f_low    f_high\n 10  0.79459  0.798965]\n"], ["intervals = df.apply(lambda row: pd.Interval(row['f_low'], row['f_high']), axis=1)\noverlaps = [\n    (i, j, x, y, x.overlaps(y)) \n    for ((i,x),(j,y))\n    in itertools.product(enumerate(intervals), repeat=2)\n]\n\n>>> overlaps[:3]\n[(0,\n  0,\n  Interval(0.47620100000000004, 0.481915, closed='right'),\n  Interval(0.47620100000000004, 0.481915, closed='right'),\n  True),\n (0,\n  1,\n  Interval(0.47620100000000004, 0.481915, closed='right'),\n  Interval(0.47916099999999995, 0.48497700000000005, closed='right'),\n  True),\n (0,\n  2,\n  Interval(0.47620100000000004, 0.481915, closed='right'),\n  Interval(0.485997, 0.491911, closed='right'),\n  False)]\n"], ["# input tensor\nIn [76]: t   \nOut[76]: tensor([ 0, 10,  0, 16])\n\n# generate the needed boolean mask\nIn [78]: t > 0      \nOut[78]: tensor([0, 1, 0, 1], dtype=torch.uint8)\n", "# sanity check\nIn [93]: mask = t > 0      \n\nIn [94]: mask.type()      \nOut[94]: 'torch.ByteTensor'\n", "In [9]: t > 0  \nOut[9]: tensor([False,  True, False,  True])\n\n# alternatively, use `torch.gt()` API\nIn [11]: torch.gt(t, 0)\nOut[11]: tensor([False,  True, False,  True])\n", "In [14]: (t > 0).type(torch.uint8)   \nOut[14]: tensor([0, 1, 0, 1], dtype=torch.uint8)\n\n# alternatively, use `torch.gt()` API\nIn [15]: torch.gt(t, 0).int()\nOut[15]: tensor([0, 1, 0, 1], dtype=torch.int32)\n", "t.bool().int()\n"], ["temp = torch.tensor([0,10,0,16])\ntemp.bool()\n#Returns\ntensor([False,  True, False,  True])\n"], ["c = a[:,None]**b\n\n# Using broadcasting : \n# (3,1)**(4,) --> (3,4)\n#\n#     [[1],\n# c =  [2], ** [0,1,2,3,4]\n#      [3]]\n"], ["mat = np.tile(a, (len(b), 1)).transpose()\n", "np.power(mat, b)\n", "[[ 1  1  1  1  1]   # == [1**0, 1**1, 1**2, 1**3, 1**4]\n [ 1  2  4  8 16]   # == [2**0, 2**1, 2**2, 2**3, 2**4]\n [ 1  3  9 27 81]]  # == [3**0, 3**1, 3**2, 3**3, 3**4]\n"], ["c = np.asarray(list(map(lambda x: np.power(a,x), b))).transpose()\n"], ["num_of_powers = 5\nnum_of_components = 11\n\na = []\nfor i in range(1,num_of_components + 1):\n    a.append(np.repeat(i,num_of_powers))\nb = list(range(num_of_powers))\nc = np.power(a,b)\n", "array([[    1,     1,     1,     1,     1],\n       [    1,     2,     4,     8,    16],\n       [    1,     3,     9,    27,    81],\n       [    1,     4,    16,    64,   256],\n       [    1,     5,    25,   125,   625],\n       [    1,     6,    36,   216,  1296],\n       [    1,     7,    49,   343,  2401],\n       [    1,     8,    64,   512,  4096],\n       [    1,     9,    81,   729,  6561],\n       [    1,    10,   100,  1000, 10000],\n       [    1,    11,   121,  1331, 14641]], dtype=int32)\n"], [], [], [], ["import numpy as np\ndiffs = np.abs(np.array(A)-np.array(leftbottom))\ndists = np.sum(dists,axis=1) #l1-distance\nclosest_point_index = np.argmin(dists)\n"], ["import numpy as np\nA = [(26, 63), (25, 63), (24, 63), (23, 63), (22, 63), (21, 63), (20, 63), (22, 62), (27, 63)]\nA = np.array(A)\nleftbottom = np.array((0,238))\ndistances = np.linalg.norm(A-leftbottom, axis=1)\nmin_index = np.argmin(distances)\nprint(f\"the closest point is {A[min_index]}, at a distance of {distances[min_index]}\")\n", "the closest point is [20 63], at a distance of 176.13914953808538\n"], ["import numpy as np\n\nA = [(26, 63), (25, 63), (24, 63), (23, 63), (22, 63), (21, 63), (20, 63), (22, 62), (27, 63)]\np = (0, 238)\n\nxy = np.array(A).T\n\n# euclidean distance\nd = ( (xy[0] - p[0]) ** 2 + (xy[1] - p[1]) ** 2) ** 0.5\n\nclosest_idx = np.argmin(d)\nclosest = A[closest_idx]\n\nprint(closest)\n"], [], [], ["myvar = 0\nmylist = [3,4,7,10,6,8]\n\nprint(myvar)\ni = 0\nwhile myvar <= 24:\n    if myvar + mylist[i] <= 24:\n        enter code heremyvar += mylist[i]\n        print(myvar)\n    else:\n        break\n    i+=1\n"], ["myvar = 0\nmylist = [3,4,7,10,6,8]\n\nprint(myvar)\nfor i in range(len(mylist)):\n    if myvar + mylist[i] <= 24:\n        myvar += mylist[i]\n        print(myvar)\n    else:\n        break\n"], ["myvar = 0\nmylist = [3,4,7,10,6,8]\n\nfor i in mylist:\n  myvar+=i\n  if myvar > 24:\n    myvar-=i\n    break\nprint(myvar)\n"], ["myvar = 0\nmylist = [3,4,7,10,6,8]\n\nfor i in mylist:\n    if myvar <= 24:\n        myvar += i\n    else:\n        break\n\n"], ["mylist = [3,4,7,10,6,8]\nsum = 0\n\nfor var in mylist:\n    if sum + var > 24:\n        break\n    sum += var\n\nprint(sum)\n"], ["myvar = 0\nmylist = [3,4,7,10,6,8]\n\nfor i in mylist:\n  if myvar + i <= 24:\n      myvar += i\n  else:\n      break\n"], ["letters = []\nletters += input('Choose word: ').lower()\nprint(letters)\n"], ["letters = list(input('Choose word: ').lower())\nprint(letters)\n", "letters.extend(input('Choose word: ').lower())        # No need to use list() here\n"], ["x = input().lower().split()\nprint(x)\n", "x = input().lower().split(',')\nprint(x)\n"], ["#Extend\nx=input('Choose word: ').lower()\nletters=[]\nletters.extend(list(x))\nprint(letters)\n\n# ['p', 'y', 't', 'h', 'o', 'n']\n", "y=input(\"Choose a letter to remove: \").lower()\nremoved=[s.replace(y,'') for s in letters]\nprint(removed)\n\n#['p', '', 't', 'h', 'o', 'n']\n"], ["print(list(x))\n", "letters = list(x)\nletters.remove('o')\nprint(letters)\n"], ["x = [*input('Choose word: ').lower()]\nprint(x)\n# ['p', 'y', 't', 'h', 'o', 'n']\n"], ["pip install praw\n", "pip3 install praw\n"], ["$ pip3 install praw\n$ python3 myscript.py\n"], ["import random       \n\na = [i for i in range(1,10)]        \nb = [i*10 for i in range(1,10)]        \n\nrandom.seed(110)        \nprint(random.sample(a,4)    \n\nrandom.seed(110)        \nprint(random.sample(b,4))       \n"], [], ["df.to_dict()\n{'name': {0: 'hello', 1: 'world'}}\n\ndf.index = df.index.map(str)\ndf.to_dict()\n{'name': {'0': 'hello', '1': 'world'}}\n"], [], ["# THE CREDENTIALS ARE PART OF MY TESTING CODE. NO WORRIES THEY'RE IN AN ENV VARIABLE NOW\n\ndef get_upload_pre_signed_url(bucket_name, key, expiration=3600):\n    s3 = boto3.client('s3',\n                      aws_access_key_id=\"<my access_key_id\",\n                      aws_secret_access_key=\"<my_secreet_access_key>\",\n                      config=Config(region_name='us-east-2', s3.{\"use_accelerate_endpoint\": True}))\n\n    try:\n        url = s3.generate_presigned_url('put_object', Params={'Bucket': bucket_name, 'Key': key},\n                                        ExpiresIn=expiration,\n                                        HttpMethod='PUT')\n    except ClientError as e:\n        return None\n\n    return url\n"], [], ["const s3 = new AWS.S3({ signatureVersion: \"v4\" });\nconst s3Params = {\n    Bucket: <BUCKET_NAME>,\n    Key: <KEY>,\n    Expires: 300,\n    ContentType: <CONTENT_TYPE>,\n    Metadata: {\n        title: encodeURI('SomeTitle with utf-8 characters'),\n    },\n};\nconst signedPutUrl = await s3.getSignedUrlPromise(\n    \"putObject\",\n    s3Params\n);\nconsole.log('the signed url',signedPutUrl);\nreturn {'url':signedPutUrl};\n"], ["sudo easy_install pip==20.3.4\n"], ["$ curl $URL --upload-file yoda.jpg\n"], ["const bucketParms = {\n  Bucket: \"sample-temp-bucket\",\n  Key: \"HeadShot.jpg\",\n  ContentType:'image/jpeg'\n};\n\ns3.getSignedUrl(\"putObject\", bucketParms, (error, url) => {\n  if (error) console.log(\"error\", error);\n  if (url) console.log(\"url\", url);\n});\n", "response = s3_client.generate_presigned_url('put_object',\n                                                Params={'Bucket': bucket_name,\n                                                        'Key': object_name,\n                                                        'ContentType':'image/jpeg'},\n                                                ExpiresIn=expiration)\n", "curl --location --request PUT 'https://test-events.s3.amazonaws.com/98..?X....' \\\n--header 'Content-Type: image/jpeg' \\\n--data-binary '/Users/user/image/path'\n"], ["s3.generate_presigned_post(\n        Bucket=BUCKET_NAME,\n        Key=FILE_KEY,\n        ExpiresIn=(5*60)\n    )\n"], [], ["   cam@cam:~$ python\n    Python 2.7.17 (default, Sep 30 2020, 13:38:04) \n    [GCC 7.5.0] on linux2\n    Type \"help\", \"copyright\", \"credits\" or \"license\" for more information.\n    >>> import praw\n    Traceback (most recent call last):\n      File \"<stdin>\", line 1, in <module>\n    ImportError: No module named praw\n    >>> \n    [5]+  Stopped                 python\n    cam@cam:~$ python3\n    Python 3.6.9 (default, Oct  8 2020, 12:12:24) \n    [GCC 8.4.0] on linux\n    Type \"help\", \"copyright\", \"credits\" or \"license\" for more information.\n    >>> import praw\n"], ["# - one-liner Version\n\nlst = [3,5,7,5,3,7,10]\n\n>>>list(dict.fromkeys(reversed(lst)))[::-1]\n\n# [5, 3, 7, 10]             \n\n", "lst[:] = list(dict.fromkeys(reversed(lst)))[::-1]\n"], ["from iteration_utilities import unique_everseen,duplicates\nimport numpy as np\nlist1=[3,5,7,5,3,7,10]\ndup=np.sort(list((duplicates(list1))))\nlist2=list1.copy()\nfor j,i in enumerate(list2):\n    try:\n        if dup[j]==i:\n           list1.remove(dup[j])\n    except:\n        break\nprint(list1)\n"], ["def remdup(ar):\n    d = {}\n    for i, v in enumerate(ar):\n        d[v] = i\n    return [pair[0] for pair in sorted(d.items(), key=lambda x: x[1])]\n\n\nif __name__ == \"__main__\":\n    test_case = [3, 1, 3, 5]\n    output = remdup(test_case)\n    expected_output = [1, 3, 5]\n    assert output == expected_output, f\"Error in {test_case}\"\n\n    test_case = [3, 5, 7, 5, 3, 7, 10]\n    output = remdup(test_case)\n    expected_output = [5, 3, 7, 10]\n    assert output == expected_output, f\"Error in {test_case}\"\n"], ["def remdup(l):\nseen = set()\nfor i in reversed(l):\n    if i in seen:\n        l.remove(i)\n    else:\n        seen.add(i)\n\nprint(l)\n", "def remdup(l):\nseen = set()\nfor i in range(len(l)-1, -1, -1):\n    if l[i] in seen:\n        del l[i]\n    else:\n        seen.add(l[i])\n\nprint(l)\n"], ["def remdup(l):\n    visited= []\n    for i in range(len(l)-1, -1, -1):\n        if l[i] in visited:\n            l.pop(i)\n        else:\n            visited.append(l[i])\n    print(l)\n\nremdup([3,5,7,5,3,7,10])\n#[5, 3, 7, 10]\n"], ["def remdup(l):\n    i = 0\n    while i < len(l):\n        v = l[i]\n        scan = i + 1\n        while scan < len(l):\n            if l[scan] == v:\n                l.remove(v)\n                scan -= 1\n                i -= 1\n            scan += 1\n        i += 1\n\nl = [3,5,7,5,3,7,10]\nremdup(l)\nprint(l)\n"], ["        for search in reversed(l[:pos]):\n", "    for search in reversed(l[pos+1:]):\n", "[5, 3, 7, 10]\n"], [], ["def is_prime(n):\n    count = 0\n    if x > 1:\n        for i in range(1, n + 1):\n             if x % i == 0:\n                  count += 1\n    return count == 2\n\n\n\nnumber = int(input(\"Insert a number: \"))\n   if is_prime(number):\n      print(str(number) + \" is a prime number\")\n   else:\n      print(str(number) + \" is not a prime number!\")\n"], [], ["choices = [\"rock\", \"paper\", \"scissors\"]\n", "while True:\n    player_choice = input(\"Rock, Paper, Scissors? \").lower()\n    if player_choice in choices:\n        break\n    print(\"Invalid choice, try again.\")\n\ncpu_choice = random.choice(choices)\n\nprint()\nprint(\"You play:\", player_choice)\nprint(\"The computer plays:\", cpu_choice)\nprint()\n\nif player_choice == cpu_choice:\n    print(\"Draw\")\nelif player_choice == 'rock':\n    if cpu_choice == 'paper':\n        print(\"You Lose :((\")\n    else:\n        print(\"You win!! :>>\")\nelif player_choice == 'paper':\n    if cpu_choice == 'scissors':\n        print(\"You Lose :((\")\n    else:\n        print(\"You win!! :>>\")\nelse:    # player chose scissors\n    if cpu_choice == 'rock':\n        print(\"You Lose :((\")\n    else:\n        print(\"You win!! :>>\")\n"], ["import random\nimport re\n\nchoices = [\"Rock\", \"Paper\", \"Scissors\"]\n\nplayer_choice = input(\"Rock, Paper, Scissors? \").capitalize()\n\nwhile player_choice not in choices:\n    player_choice = input(\"Rock, Paper, Scissors? \").lower()\n\ncomputer_choice = random.randint(0,2)\nif computer_choice == 0:\n    cpu_choice = choices[0]\nelif computer_choice == 1:\n    cpu_choice = choices[1]\nelif computer_choice == 2:\n    cpu_choice = choices[2]\n\nprint()\nprint(\"You play:\", player_choice)\nprint(\"The computer plays:\", cpu_choice)\nprint()\n\nif re.match(\"rock\", player_choice, flags=re.IGNORECASE):\n    if cpu_choice == choices[0]:\n        print(\"Draw\")\n    elif cpu_choice == choices[1]:\n        print(\"You Lose :((\")\n    else:\n        print(\"You win!! :>>\")\nelif re.match(\"Paper\", player_choice, flags=re.IGNORECASE):\n    if cpu_choice == choices[0]:\n        print(\"You win!! :>>\")\n    elif cpu_choice == choices[1]:\n        print(\"Draw\")\n    else:\n        print(\"You Lose :((\")\nelif re.match(\"Scissors\", player_choice, flags=re.IGNORECASE):\n    if cpu_choice == choices[0]:\n        print(\"You Lose :((\")\n    elif cpu_choice == choices[1]:\n        print(\"You Win!!! :>>\")\n    else:\n        print(\"Draw\")\n"], [], [], [], ["import json\n\nd = {\n    \"one\": False,\n    \"two\": True,\n    \"three\": False,\n    \"four\": True,\n    \"five\": False\n    }  \n       \n# Serializing json    \nd = json.dumps(d)   \n\n# Replace true by \"Hello\"\nd = d.replace('true', '\"Hello\"')\n    \n# Replace false by \"Good night\"\nd = d.replace('false', '\"Good night\"')\n\n# Convert string to dictionary\nd = json.loads(d)\n\nprint(d)\n"], ["for key, val in d.items():\n    d[key] = \"Hello\" if val else \"Good night\"\n"], ["def lazy_converted(dct):\n    class D(dict):\n        def __getitem__(self, k):\n            if k in dct:\n                if dct[k] is True:\n                    return \"Hello\"\n                if dct[k] is False:\n                    return \"Good night\"\n                return dct[k]\n            return super().__getitem__(k)\n    return D()\n\n>>> d = lazy_converted(d)\n>>> d[\"one\"]\n'Good night'\n>>> d[\"two\"]\n'Hello'\n", ">>> d[\"acd\"] = 5\n>>> d[\"acd\"]\n5\n"], [">>> choices = ('Good Night', 'Hello')\n>>> *_, = map(lambda x,y: dict.update(d, {x:choices[y]}), d.keys(), d.values())\n>>> d\n{'one': 'Good Night',\n 'two': 'Hello',\n 'three': 'Good Night',\n 'four': 'Hello',\n 'five': 'Good Night'}\n", ">>> choices = ('Hello', 'Good Night')\n>>> d = {k: choices[v] for k, v in d.items()}\n>>> d\n{'one': 'Good Night',\n 'two': 'Hello',\n 'three': 'Good Night',\n 'four': 'Hello',\n 'five': 'Good Night'}\n"], [">>> d = {\n...     \"one\": False,\n...     \"two\": True,\n...     \"three\": False,\n...     \"four\": True,\n...     \"five\": False\n...     }\n>>> \n>>> replacement = {False:'Good night', True:'Hello'}\n>>> d = {k:replacement.get(v) for k,v in d.items()}\n>>> d\n{'one': 'Good night', 'two': 'Hello', 'three': 'Good night', 'four': 'Hello', 'five': 'Good night'}\n>>> \n\n"], [], ["from pandas.api.types import is_numeric_dtype\ndef is_int_or_float(df):\n    # this method returns true if all types are numeric\n    is_numeric_types = sum([is_numeric_dtype(x) for x in df])\n    return is_numeric_types\n\ndiff_types1 = pd.DataFrame({\"a\": [1,2,3], \"b\": [2,3,4], \"c\": [\"A\", \"C\", \"E\"]})\ndiff_types2 = pd.DataFrame({\"a\": [1,2,3], \"b\": [2.0,3.1,4.2], \"c\": [2, 4, 5]})\nsame_types = pd.DataFrame({\"a\": [1,2.2,3], \"b\": [2,3,4], \"c\": [2, 4, 5]})\nsame_types2 = pd.DataFrame({\"a\": [\"A\", \"C\", \"E\"], \"b\": [\"A\", \"C\", \"E\"], \"c\": [\"A\", \"C\", \"E\"]})\n\nprint(is_same(diff_types1))\n# False\n\nprint(is_same(diff_types2))\n# False\n\nprint(is_same(same_types1))\n# True\n\nprint(is_same(same_types2))\n# True\n"], ["df.dtypes.drop_duplicates().shape[0]== 1\n", ">>> import pandas as pd\n>>> df = pd.DataFrame()\n>>> df['a'] = 1, 2, 3\n>>> df['b'] = 4, 5, 6\n>>> df.dtypes.drop_duplicates().shape[0]== 1\nTrue\n>>> df['b'] = 0.1, 0.2, 0.3\n>>> df.dtypes.drop_duplicates().shape[0]== 1\nFalse\n"], ["df.dtypes.nunique()>1\n"], ["all(x == df.dtypes[0] for x in df.dtypes)\n"], ["def is_same(df):\n    # this method returns true if all types are same, else returns false\n    no_of_types = len(df.dtypes.unique())\n    is_same = no_of_types == 1\n    return is_same\n\ndiff_types1 = pd.DataFrame({\"a\": [1,2,3], \"b\": [2,3,4], \"c\": [\"A\", \"C\", \"E\"]})\ndiff_types2 = pd.DataFrame({\"a\": [1,2,3], \"b\": [2.0,3.1,4.2], \"c\": [2, 4, 5]})\nsame_types = pd.DataFrame({\"a\": [1,2,3], \"b\": [2,3,4], \"c\": [2, 4, 5]})\nsame_types2 = pd.DataFrame({\"a\": [\"A\", \"C\", \"E\"], \"b\": [\"A\", \"C\", \"E\"], \"c\": [\"A\", \"C\", \"E\"]})\n\nis_same(diff_types1)\n# False\n\nis_same(diff_types2)\n# False\n\nis_same(same_types1)\n# True\n\nis_same(same_types2)\n# True\n"], ["def primePart(N):\n    return N%2==0 or all((N-2)%p for p in range(3,int(N**0.5)+1,2))\n\nprimePart(3432)  # True\n\nprimePart(37+2)  # True\n\nprimePart(13+41) # True\n\nprimePart(123)   # False\n    \n", "def findPQ(N):\n    if not primePart(N): return\n    if N%2: return 2,N-2\n    isPrime = [0]+[1]*N\n    for p in range(3,N,2):\n        if not isPrime[p]: continue\n        if 2*p>=N and isPrime[N-p]: return p,N-p\n        isPrime[p*p::p] = [0]*len(isPrime[p*p::p])\n", "findPQ(3432)      # (1723, 1709)\n\nfindPQ(12345678)  # (6172879, 6172799)\n", "def findPQ(N):\n    if not primePart(N): return\n    if N%2: return 2,N-2\n    skip,primes = {},{2}\n    for p in range(3,N,2):\n        if p in skip:\n            prime = skip.pop(p)\n            mult  = p + 2*prime\n            while mult in skip: mult += 2*prime\n            if mult <= N: skip[mult] = prime\n        else:\n            if 2*p>=N and N-p in primes: return p,N-p\n            if p*p<=N: skip[p*p]=p\n            if 2*p<=N: primes.add(p)\n", "findPQ(1234567890)  # (617283983, 617283907)    \n"], ["def checkprime(number):\nfact=1\nfor r in range(2,number):\nif number%r==0:\n  fact=fact+1\nreturn(fact<2)\n\ndef primepartition(m):\n\nfor i in range(2,m):\n\nflag=0\nif checkprime(i) and checkprime(m-i)==True:\n  flag=1\n  break\nreturn(flag==1)\n\ndef matched(s):\nlist_of_string=list(s)\nfor y in range(len(list_of_string)):\nif list_of_string[y]=='(':\nfor z in range(y,len(list_of_string)):\n    if list_of_string[z]==')':\n      list_of_string[y]='@'\n      list_of_string[z]='@'\n      break\n return('('not in list_of_string and ')'not in list_of_string)\n\n def rotatelist(l,k):\n if k>len(l):\n k=int(k%len(l))\n return(l[k:]+l[0:k])\n"], ["def factors(n):\n    factlist = []\n    for i in range(1,n+1):\n        # Since factors of 2 cannot be primes, we ignore them.\n        if n%i==0 and i%2!=0:\n            factlist.append(i)\n    return factlist\n\ndef isprime(n):\n    return(factors(n)==[1,n])\n\ndef preimesupto(n):\n    primelist = []\n    if n>=2:\n        primelist.append(2)\n    for i in range(n):\n        if isprime(i):\n            primelist.append(i)\n    return primelist\n\ndef primepartition(n):\n    if n<0:\n        return False\n    primelist = preimesupto(n)\n    for i in primelist:\n        j = n-i\n        if j in primelist:\n            return True\n    else:\n        return False\n"], [], ["wget https://bootstrap.pypa.io/2.7/get-pip.py\npython get-pip.py\n"], ["def primepartition(a):\nl=[2]#since 'a' should be >=2 for below loops, we took here 2(1st prime).\nfor i in range(2,a):\n        flag=0\n        for j in range(2,i):\n            if i%j==0:\n                flag=0\n                break\n            else:\n                flag=1\n        if flag==1:\n            l.append(i)\nfor i in l:\n    for j in l:\n        if i+j==a:\n            return True\nreturn False\n"], ["<a class=\"btn btn-warning\"  onclick=\"submitData();\">Caption</a>\n", "<button class=\"btn btn-warning\" id=\"button-action\">Caption</button>\n", "document.getElementById('button-action').addEventListener('click', function(e){\n    submitData()\n})\n"], ["import os\nos.environ[\"CORENLP_HOME\"] = \"./stanford-corenlp-4.2.0\"\nimport pandas as pd\nfrom stanza.server import CoreNLPClient\n"], [], ["brew install pkg-config libffi openssl\nenv LDFLAGS=\"-L$(brew --prefix openssl)/lib\" CFLAGS=\"-I$(brew --prefix openssl)/include\" pip install cryptography\n"], [], ["DEBUG = False\n", "DEBUG = True\n"], [], [], ["big_query_count.execute(context=kwargs)\n#workaround\nbig_query_count.bq_cursor.job_id = big_query_count.bq_cursor.running_job_id\nlogging.info(big_query_count.bq_cursor.next())\n"], ["pip install tensorflow-gpu=2.2.0\n\nconda install cudatoolkit==10.1.243\nconda install cudnn==7.6.5\n"], ["from airflow import DAG\nfrom airflow.contrib.hooks.bigquery_hook import BigQueryHook\nfrom airflow.utils.dates import days_ago\nfrom airflow.operators.python_operator import PythonOperator\nfrom datetime import *\nimport logging\n\nlogger = logging.getLogger(\"airflow.task\")\n\n# default arguments\ndefault_args = {\n    'owner': 'Airflow',\n    'depends_on_past': False,\n    'start_date': days_ago(0),\n    'email': ['airflow@example.com'],\n    'email_on_failure': False,\n    'email_on_retry': False,\n    'retries': 1,\n    'retry_delay': timedelta(minutes=2)\n}\n\n# initializing dag\ndag = DAG(\n    'test_bigquery_hook',\n    default_args=default_args,\n    catchup=False,\n    schedule_interval=None,\n    max_active_runs=1\n)\n\ndef get_data_from_bq(**kwargs):\n    hook = BigQueryHook(bigquery_conn_id='bigquery_default', delegate_to=None, use_legacy_sql=False)\n    conn = hook.get_conn()\n    cursor = conn.cursor()\n    cursor.execute('SELECT owner_display_name, title, view_count FROM `bigquery-public-data.stackoverflow.posts_questions` WHERE creation_date > \"2020-09-09\" ORDER BY view_count DESC LIMIT 2')\n    result = cursor.fetchall()\n    print('result', result)\n    return result\n\nfetch_data = PythonOperator(\n    task_id='fetch_data_public_dataset',\n    provide_context=True,\n    python_callable=get_data_from_bq,\n    dag=dag\n)\n\nfetch_data\n"], [], ["pip install pipenv\npipenv install -r requirements.txt\npipenv run python my_program.py\n"], ["pip install pyproj --upgrade \npip install geopandas --upgrade \n"], ["number = 1000000\nx = 0\ny = 0\n[(x:=x+n, y:=y+(n+1)) for n in range(0,number,2)]\nprint(f'{x}, {y}')\n"], ["from datetime import datetime\ndatetime1 = datetime.now() \ndate1 = datetime1.date()\n"], ["dr=df[df['attribute']!='x'].groupby('prod').sum().reset_index()\ndr['attribute']='sum_yz'\nresult=pd.concat([df,dr]).sort_values('prod')\n"], ["def f(x):\n    d =  x[x['attribute'].isin(['y','z'])].sum()\n    d1 = {'prod': x.name, 'attribute':'sum_yz'}\n    x = x.append({**d, **d1},ignore_index=True)\n    return x\n\ndf = df.groupby('prod', sort=False).apply(f).reset_index(drop=True)\nprint (df)\n   prod attribute  number1  number2  number3\n0     a         x        1       10        1\n1     a         y        2        2        4\n2     a         z        2        3        3\n3     a    sum_yz        4        5        7\n4     b         x        3        3        5\n5     b         y        4        1        7\n6     b         z        3        2        1\n7     b    sum_yz        7        3        8\n8     c         x        5        3        3\n9     c         y        1        1        0\n10    c         z        1        1        1\n11    c    sum_yz        2        2        1\n", "df = (df.append(df[df['attribute'].isin(['y', 'z'])]\n                   .groupby('prod', as_index=False)\n                   .sum()\n         ).fillna({'attribute': 'sum_yz'})\n          .sort_values('prod', ignore_index=True))\n         \nprint (df)\n   prod attribute  number1  number2  number3\n0     a         x        1       10        1\n1     a         y        2        2        4\n2     a         z        2        3        3\n3     a    sum_yz        4        5        7\n4     b         x        3        3        5\n5     b         y        4        1        7\n6     b         z        3        2        1\n7     b    sum_yz        7        3        8\n8     c         x        5        3        3\n9     c         y        1        1        0\n10    c         z        1        1        1\n11    c    sum_yz        2        2        1\n"], ["result = df.groupby([\"prod\", df.attribute.isin([\"y\", \"z\"])]).sum().loc[:, True, :]\nresult = result.reset_index()\nresult.insert(1, \"attribute\", \"sum_yz\")\npd.concat([df, result]).sort_values(\"prod\", ignore_index=True)\n\n  prod  attribute   number1 number2 number3\n0   a      x           1    10      1\n1   a      y           2    2       4\n2   a      z           2    3       3\n3   a     sum_yz       4    5       7\n4   b      x           3    3       5\n5   b      y           4    1       7\n6   b      z           3    2       1\n7   b    sum_yz        7    3       8\n8   c      x           5    3       3\n9   c      y           1    1       0\n10  c      z           1    1       1\n11  c    sum_yz        2    2       1\n"], ["# Create groupby DataFrame\ndf_grp = df[df['attribute'].isin(['y', 'z'])].groupby(['prod']).sum()\ndf_grp.reset_index(inplace=True)\ndf_grp['attribute'] = 'sum_yz'\n\n# Combine with original dataframe\ndf = pd.concat([df, df_grp])\n"], ["# Filter to the desired attributes\nsum_yz = df[df['attribute'].isin(['y', 'z'])]\n# Set the new 'attribute' value\nsum_yz['attribute'] = 'sum_yz'\n# Group by and sum\nsum_yz = sum_yz.groupby(['prod', 'attribute']).sum().reset_index()\n\n# Add it the end of the data frame\ndf = pd.concat([df, sum_yz])\n"], ["number = int(input())\nodd = 0\neven = 0\nfor i in range(len(number)):\n    odd += i * (i % 2)\n    even += i * ((i + 1) % 2)\n\nprint (odd, even)\n"], ["number = int( input() )\ncounts = [ 0, 0 ]\nfor n in range( number ):\n    counts[ n % 2 ] += n\nprint( counts[ 0 ] )\nprint( counts[ 1 ] )\n"], ["num = list(range(int(input('Enter number: '))))\n\neven = num[::2]\nodd = num[1::2]\n\nprint('Even list:', even)\nprint('Odd list:', odd)\n\nprint('Even:', sum(even))\nprint('Odd:', sum(odd))\n", "Enter number: 10\nEven list: [0, 2, 4, 6, 8]\nOdd list: [1, 3, 5, 7, 9]\nEven: 20\nOdd: 25\n"], ["n = 12345\nm = n // 2\ne = (m+1)*m\no = (n+1)*n//2 - e\n", ">>> e, e==sum(i for i in range(n+1) if i % 2 == 0)\n38112102 True\n>>> o, o==sum(i for i in range(n+1) if i % 2 == 1)\n38105929 True\n"], ["import numpy as np\nnumber = int(input())\n\nl = np.array(range(number)) \nprint('odd:',sum(l % 2 * l))\nprint('even:', sum((1- l % 2) * l))\n"], ["num = int(input(\"Enter number:\"))\nodd = ((num+1)/2)**2\neven = num*(num+1)/2 - odd\n"], ["number = int(input())\nx = 0\ny = 0\nfor n in range(number+1):\n    x += (1 - n % 2) * n  #this will add 0 if not even\n    y += (n % 2) * n      #this will add 0 if not odd\nprint(x)\nprint(y)\n"], ["n = int(input(\"Enter a number: \"))\nodd = 0\nfor i in range(1,n+1,2):\n    odd += i\neven = int(n*(n+1)/2) - odd\nprint(\"even:\",even,\"odd:\",odd)\n"], ["for n in range(number):\n  x += (n,0)[n%2]\n  y += (0,n)[n%2]\n"], ["for n in range(1,number,2):\n  x += n\n  y += n-1\nprint(y)\nprint(x)\n"], ["for n in range(number):\n    x += (1 - n % 2) * n\n    y += (n % 2) * n\n"], ["# Program to Check whether given number is prime\n\ndef isPrime(number):\n    limit = int(number/2) # limit indicates how many times we need to run the loop\n    flag=0                # to keep track whether the number is prime or not\n    if number==0 or number==1:\n        print(f\"The Given Number {number} is Not Prime\")\n        return\n    for i in range(2,limit+1):\n        if number%i==0:\n            flag=1\n            break\n    if flag==0:\n        print(f\"The Given Number {number} is Prime\")\n    else:\n        print(f\"The Given Number {number} is Not Prime\")\n"], [], [], ["pip3 install setuptools wheel\npip3 install --upgrade pip\npip3 install --user pyqt5\n"], [], ["pip install opencv-python-headless\n"], ["cv.imread(...)\n"], [], ["import cv2 as cv\nimport matplotlib.pyplot as plt\nfilename = 'chessboard.png'\nimg = cv.imread(filename)\ncv.imshow('dst',img)\ncv.waitKey(0)\n"], ["def getPosts():\n    hrefs_in_view = driver.find_elements_by_tag_name('a')\n    # finding relevant hrefs\n    hrefs_in_view = [elem.get_attribute('href') for elem in hrefs_in_view\n         if '.com/p/' in elem.get_attribute('href')]\n    \n    return hrefs_in_view;\n\n\n\n\n\ndef getLikers(username,limit,post=1):\n    driver.get('https://www.instagram.com/' + username)\n    time.sleep(1)\n    users=[]\n\n    #Get Latest Post\n    driver.get(getPosts()[post])\n    \n    time.sleep(2)\n    #Open Dialog\n    followersLinkX = driver.find_element_by_xpath('//button[@class=\"sqdOP yWX7d     _8A5w5    \"]')\n    followersLinkX.click()\n    time.sleep(1)\n    #Get Dialog\n    xxx = driver.find_element_by_xpath('//div[@role=\"dialog\"]/div[1]/div[2]/div[1]/div[1]')\n    #Focus on and Scroll\n    xxx.click()\n    # step 3\n    actionChain = webdriver.ActionChains(driver)\n\n  \n\n    count = 0\n    \n    while(count < limit):\n        for i in range(1,1000):\n            try:\n                users.append(\"https://www.instagram.com/\" + driver.find_element_by_xpath('//div[@role=\"dialog\"]/div[1]/div[2]/div[1]/div[1]/div['+ str(i) +']/div[2]/div[1]/div[1]').text) \n                count+=1\n            except:\n                break\n        actionChain.key_down(Keys.SPACE).key_up(Keys.SPACE).perform()\n        time.sleep(0.5)  \n\n    return users \n"], [], ["df.clip(lower=0).sum(1)\nOut[19]: \n0    2\n1    2\n2    1\n3    1\n4    0\ndtype: int64\n"], ["df['Sum of Positives'] = df.applymap(lambda x: max(x,0)).sum(axis=1)\n"], [">>> df['Sum of Positives'] = df.clip(lower=0).sum(axis=1)\n>>> df\n   a  b  Sum of Positives\n0 -1  2                 2\n1 -2  2                 2\n2  1 -3                 1\n3  1 -4                 1\n4 -2 -2                 0\n"], ["df['Sum of Positives']  = df.apply(lambda x:sum(x[x>0]),axis=1)\n\n    a   b   Sum of Positives\n0   -1  2   2\n1   -2  2   2\n2    1 -3   1\n3    1 -4   1\n4   -2 -2   0\n"], ["i = int(input())\nnum = []\nfor j in range(i):\n    l = input()\n    x , y = l.split()\n    y = int(y)\n    m = input()\n    p =[] \n    p = m.split(\" \")\n    sum = 0\n    count = 0\n    s = []\n    for w in p:\n        w = int(w)\n        s.append(w)\n    s = sorted(s)\n    for q in s:\n      q = int(q)\n      if sum+q <= y: \n            sum += q\n            count+=1\n    r = count\n    num.append(r)\ni = 0\nfor op in num:\n  i +=1\n  j = \"Case #\"+str(i)+\": \"\n  print(j,end=\"\")\n  print(op)\n"], [], ["pip3 install --upgrade werkzeug  \n"], ["for i in range(len(ls)):\n   if ls[i] is None:\n     ls[i] = ls[i-1]\n"], ["import cv2\nimport numpy as np\nimport math\nimport skimage.exposure\n\n# read desert car image and convert to float in range 0 to 1\nimg = cv2.imread('desert_car.png').astype(\"float32\") / 255.0\nhh, ww = img.shape[:2]\n\n# read wrinkle image as grayscale and convert to float in range 0 to 1\nwrinkles = cv2.imread('wrinkles.jpg',0).astype(\"float32\") / 255.0\n\n# resize wrinkles to same size as desert car image\nwrinkles = cv2.resize(wrinkles, (ww,hh), fx=0, fy=0)\n\n# apply linear transform to stretch wrinkles to make shading darker\n#wrinkles = skimage.exposure.rescale_intensity(wrinkles, in_range=(0,1), out_range=(0,1)).astype(np.float32)\n\n# shift image brightness so mean is (near) mid gray\nmean = np.mean(wrinkles)\nshift = mean - 0.4\nwrinkles = cv2.subtract(wrinkles, shift)\n\n# create folds image as diagonal grayscale gradient as float as plus and minus equal amount\nhh1 = math.ceil(hh/2)\nww1 = math.ceil(ww/3)\nval = math.sqrt(0.2)\ngrady = np.linspace(-val, val, hh1, dtype=np.float32)\ngradx = np.linspace(-val, val, ww1, dtype=np.float32)\ngrad1 = np.outer(grady, gradx)\n\n# flip grad in different directions\ngrad2 = cv2.flip(grad1, 0)\ngrad3 = cv2.flip(grad1, 1)\ngrad4 = cv2.flip(grad1, -1)\n\n# concatenate to form folds image\nfoldx1 = np.hstack([grad1-0.1,grad2,grad3])\nfoldx2 = np.hstack([grad2+0.1,grad3,grad1+0.2])\nfolds = np.vstack([foldx1,foldx2])\n#folds = (1-val)*folds[0:hh, 0:ww]\nfolds = folds[0:hh, 0:ww]\n\n# add the folds image to the wrinkles image\nwrinkle_folds = cv2.add(wrinkles, folds)\n\n# draw creases as blurred lines on black background\ncreases = np.full((hh,ww), 0, dtype=np.float32)\nww2 = 2*ww1\ncv2.line(creases, (0,hh1), (ww-1,hh1), 0.25, 1)\ncv2.line(creases, (ww1,0), (ww1,hh-1),  0.25, 1)\ncv2.line(creases, (ww2,0), (ww2,hh-1),  0.25, 1)\n\n# blur crease image\ncreases = cv2.GaussianBlur(creases, (3,3), 0)\n\n# add crease to wrinkles_fold image\nwrinkle_folds_creases = cv2.add(wrinkle_folds, creases)\n\n# threshold wrinkles and invert\nthresh = cv2.threshold(wrinkle_folds_creases,0.7,1,cv2.THRESH_BINARY)[1]\nthresh = cv2.cvtColor(thresh,cv2.COLOR_GRAY2BGR) \nthresh_inv = 1-thresh\n\n# convert from grayscale to bgr \nwrinkle_folds_creases = cv2.cvtColor(wrinkle_folds_creases,cv2.COLOR_GRAY2BGR) \n\n# do hard light composite and convert to uint8 in range 0 to 255\n# see CSS specs at https://www.w3.org/TR/compositing-1/#blendinghardlight\nlow = 2.0 * img * wrinkle_folds_creases\nhigh = 1 - 2.0 * (1-img) * (1-wrinkle_folds_creases)\nresult = ( 255 * (low * thresh_inv + high * thresh) ).clip(0, 255).astype(np.uint8)\n\n# save results\ncv2.imwrite('desert_car_wrinkles_adjusted.jpg',(255*wrinkles).clip(0,255).astype(np.uint8))\ncv2.imwrite('desert_car_wrinkles_folds.jpg', (255*wrinkle_folds).clip(0,255).astype(np.uint8))\ncv2.imwrite('wrinkle_folds_creases.jpg', (255*wrinkle_folds_creases).clip(0,255).astype(np.uint8))\ncv2.imwrite('desert_car_result.jpg', result)\n\n# show results\ncv2.imshow('wrinkles', wrinkles)\ncv2.imshow('wrinkle_folds', wrinkle_folds)\ncv2.imshow('wrinkle_folds_creases', wrinkle_folds_creases)\ncv2.imshow('thresh', thresh)\ncv2.imshow('result', result)\ncv2.waitKey(0)\ncv2.destroyAllWindows()\n"], ["import cv2\nimport numpy as np\n\n# read cat image and convert to float in range 0 to 1\nimg = cv2.imread('cat.jpg').astype(\"float32\") / 255.0\nhh, ww = img.shape[:2]\n\n# read wrinkle image as grayscale and convert to float in range 0 to 1\nwrinkles = cv2.imread('wrinkles.jpg',0).astype(\"float32\") / 255.0\n\n# resize wrinkles to same size as cat image\nwrinkles = cv2.resize(wrinkles, (ww,hh), fx=0, fy=0)\n\n# apply linear transform to stretch wrinkles to make shading darker\n# C = A*x+B\n# x=1 -> 1; x=0.25 -> 0\n# 1 = A + B\n# 0 = 0.25*A + B\n# Solve simultaneous equations to get:\n# A = 1.33\n# B = -0.33\nwrinkles = 1.33 * wrinkles -0.33\n\n# threshold wrinkles and invert\nthresh = cv2.threshold(wrinkles,0.5,1,cv2.THRESH_BINARY)[1]\nthresh = cv2.cvtColor(thresh,cv2.COLOR_GRAY2BGR) \nthresh_inv = 1-thresh\n\n# shift image brightness so mean is mid gray\nmean = np.mean(wrinkles)\nshift = mean - 0.5\nwrinkles = cv2.subtract(wrinkles, shift)\n\n# convert wrinkles from grayscale to rgb\nwrinkles = cv2.cvtColor(wrinkles,cv2.COLOR_GRAY2BGR) \n\n# do hard light composite and convert to uint8 in range 0 to 255\n# see CSS specs at https://www.w3.org/TR/compositing-1/#blendinghardlight\nlow = 2.0 * img * wrinkles\nhigh = 1 - 2.0 * (1-img) * (1-wrinkles)\nresult = ( 255 * (low * thresh_inv + high * thresh) ).clip(0, 255).astype(np.uint8)\n\n# save results\ncv2.imwrite('cat_wrinkled.jpg', result)\n\n# show results\ncv2.imshow('Wrinkles', wrinkles)\ncv2.imshow('Result', result)\ncv2.waitKey(0)\ncv2.destroyAllWindows()\n"], ["import cv2 as cv\nimport numpy as np\n\na = cv.imread(\"image.jpg\").astype(np.float32)/255.0\nb = cv.imread(\"gradients.jpg\").astype(np.float32)/255.0\n\nmultiply_blended = a*b\nmultiply_blended = (255*multiply_blended).astype(np.uint8)\n\nscreen_blended = 1 - (1 - a)*(1 - b)\nmultiply_blended = (255*screen_blended).astype(np.uint8)\n\noverlay_blended = 2*a*b*(a < 0.5).astype(np.float32) + (1 - 2*(1 - a)*(1 - b))*(a >= 0.5).astype(np.float32)\noverlay_blended = (255*overlay_blended).astype(np.uint8)\n\nphotoshop_blended = (2*a*b + a*a*(1 - 2*b))*(b < 0.5).astype(np.float32) + (2*a*(1 - b) + np.sqrt(a)*(2*b - 1))*(b >= 0.5).astype(np.float32)\nphotoshop_blended = (255*photoshop_blended).astype(np.uint8)\n\npegtop_blended = (1 - 2*b)*a*a + 2*b*a\npegtop_blended = (255*pegtop_blended).astype(np.uint8)\n"], ["from PIL import Image, ImageDraw, ImageFilter\nimport requests\nfrom io import BytesIO\n\nresponse = requests.get('https://icatcare.org/app/uploads/2018/07/Thinking-of-getting-a-cat.png')\nimg1 = Image.open(BytesIO(response.content))\nresponse = requests.get('https://st2.depositphotos.com/5579432/8172/i/950/depositphotos_81721770-stock-photo-paper-texture-crease-white-paper.jpg')\nimg2 = Image.open(BytesIO(response.content)).resize(img1.size)\n\nfinal_img = Image.blend(img1, img2, 0.5)\n"], [], [], ["tests =  int(input())\nout  = []\nfor i in range(tests):\n    inp = input().split(\" \")\n    num = int(inp[0])\n    b = int(inp[1])\n    prices = input().split(\" \")\n    for i in range(num):\n        prices[i] = int(prices[i])\n    prices.sort()\n    count = 0\n    for i in range(num):\n        if(b-prices[i] >= 0  ):\n            b = b - prices[i]\n            count  = count+ 1\n    \n    out.append(count)\nfor i in out:\n    print(i)\n"], ["x =[None, None, 1, 2, None, None, 3, 4, None, 5, None, None]\nfor i in range(len(x)):\n   if x[i] is None:\n     x[i] = x[i-1]\nprint(x) \n"], ["from itertools import accumulate\n\nlist(accumulate(lst, lambda x, y: y or x))\n# [None, None, 1, 2, 2, 2, 3, 4, 4, 5, 5, 5]\n"], ["[\n    x.__setitem__(i, e if e is not None else x[i-1] if i > 0 else None)\n    or x[i]\n    for i, e in enumerate(x)\n]\n"], ["def none_replace(ls: list):\n    prev, this = ls[0], None\n    assert prev is not None, \"First arg can't be None\"\n\n    for i in range(1, len(ls)):\n        this = ls[i]\n        if this is None:\n            ls[i] = prev\n        prev = this or ls[i]\n\n    return ls\n\nprint('Replaced None List:', none_replace(['asd', None, None, 1, 2, None, None, 3, 4, None, 5, None, None]))\n"], [], ["def none_replace(ls):\n    p = None\n    return [p:=e if e is not None else p for e in ls]\n"], ["allowed = {'field', 'group', 'function'}\n\nif 'field' in dict_name and dict_name.keys() <= allowed:\n    ...\n", "allowed >= dict_name.keys()\n", "len(dict_name.keys() | allowed) <= len(allowed)\n", "not (dict_name.keys() - allowed)\n", "dict_name.keys().issubset(allowed)\n", "dict_name.keys() <= allowed\n", "allowed.issuperset(dict_name.keys())\n", "allowed >= dict_name.keys()\n"], ["from schema import Schema, And\n\nmy_schema = Schema({\n    'field': And(str, len),\n    'group': And(str, len),\n    'function': And(str, len)\n})\n\ndata = {\n    'field': 'Hello',\n    'group': 'This is a group',\n    'function': 'some_function'\n}\n\nmy_schema.validate(data)\n"], [], ["conda create -n env_name python=3.7\n", "conda activate env_name\n", "pip install tensorflow==2.2.0\n", "conda deactivate\n"], ["df = df.to_crs(epsg=4326)\n"], ["pip install tensorflow ==2.2.0\n"], [], ["def get_intersections(x0, y0, r0, x1, y1, r1):\n    # circle 1: (x0, y0), radius r0\n    # circle 2: (x1, y1), radius r1\n\n    d=math.sqrt((x1-x0)**2 + (y1-y0)**2)\n    \n    # non intersecting\n    if d > r0 + r1 :\n        return None\n    # One circle within other\n    if d < abs(r0-r1):\n        return None\n    # coincident circles\n    if d == 0 and r0 == r1:\n        return None\n    else:\n        a=(r0**2-r1**2+d**2)/(2*d)\n        h=math.sqrt(r0**2-a**2)\n        x2=x0+a*(x1-x0)/d   \n        y2=y0+a*(y1-y0)/d   \n        x3=x2+h*(y1-y0)/d     \n        y3=y2-h*(x1-x0)/d \n\n        x4=x2-h*(y1-y0)/d\n        y4=y2+h*(x1-x0)/d\n        \n        return (x3, y3, x4, y4)\n", "# intersection circles\nx0, y0 = 0, 0\nr0 = 5\nx1, y1 = 2, 2\nr1 = 5\n\n# intersecting with (x1, y1) but not with (x0, y0)\nx2, y2 = -1,0\nr2 = 2.5\n\ncircle1 = plt.Circle((x0, y0), r0, color='b', fill=False)\ncircle2 = plt.Circle((x1, y1), r1, color='b', fill=False)\ncircle3 = plt.Circle((x2, y2), r2, color='b', fill=False)\n\nfig, ax = plt.subplots() \nax.set_xlim((-10, 10))\nax.set_ylim((-10, 10))\nax.add_artist(circle1)\nax.add_artist(circle2)\nax.add_artist(circle3)\n\nintersections = get_intersections(x0, y0, r0, x1, y1, r1)\nif intersections is not None:\n    i_x3, i_y3, i_x4, i_y4 = intersections \n    plt.plot([i_x3, i_x4], [i_y3, i_y4], '.', color='r')\n    \nintersections = get_intersections(x0, y0, r0, x2, y2, r2)\nif intersections is not None:\n    i_x3, i_y3, i_x4, i_y4 = intersections \n    plt.plot([i_x3, i_x4], [i_y3, i_y4], '.', color='r')\n\nintersections = get_intersections(x1, y1, r1, x2, y2, r2)\nif intersections is not None:\n    i_x3, i_y3, i_x4, i_y4 = intersections \n    plt.plot([i_x3, i_x4], [i_y3, i_y4], '.', color='r')\n\nplt.gca().set_aspect('equal', adjustable='box')\n"], [], ["sudo python3 -m pip install pyqt5==5.12 pyqtchart==5.12\n"], [], [], [], [">>> it = iter(book_ratings)\n>>> {k: next(it) for k, in it}\n{'Ben': ['5', '0', '1', '4'], 'Sally': ['0', '7', '3', '3']}\n", "2.31 f1\n2.08 f2\n1.39 f3\n\n2.30 f1\n2.03 f2\n1.34 f3\n\n2.30 f1\n2.08 f2\n1.31 f3\n", "from timeit import repeat\n\nbook_ratings = []\nfor i in range(1000):\n    book_ratings += [[\"Ben\" + str(i)],[\"5\", \"0\", \"1\", \"4\"]]    \n\ndef f1():\n    i = iter(book_ratings)\n    return dict((a[0], b) for a, b in zip(i, i))\n\ndef f2():\n    return dict((a, b) for (a,), b in zip(book_ratings[::2], book_ratings[1::2]))\n\ndef f3():\n    it = iter(book_ratings)\n    return {k: next(it) for k, in it}\n\nfor _ in range(3):\n    for f in f1, f2, f3:\n        t = min(repeat(f, number=10000))\n        print('%.2f' % t, f.__name__)\n    print()\n"], ["my_dict =  {}\nbook_ratings = [['Ben'],[5, 0, 1, 4], ['Sally'],[0, 7, 3, 3]]\nfor i, book in enumerate(book_ratings):\n    if (i==0) or (i%2==0):\n        try:\n            my_dict[book[0]] = book_ratings[i+1]\n        except:\n            pass\n        \nprint(my_dict)\n", "  {'Ben': [5, 0, 1, 4], 'Sally': [0, 7, 3, 3]}\n    \n"], ["my_dict = {}\nbook_ratings = [['Ben'],['5', '0', '1', '4'], ['Sally'],['0', '7', '3', '3']]\n\ni=0\nwhile i<len(book_ratings):\n  if not book_ratings[i][0].isnumeric():\n    my_dict[book_ratings[i][0]] = book_ratings[i+1]\n    i+=2\n  else:\n    i+=1\n\nprint(my_dict)\n", "{'Ben': ['5', '0', '1', '4'], 'Sally': ['0', '7', '3', '3']}\n"], ["book_ratings = [[\"Ben\"],[\"5\", \"0\", \"1\", \"4\"], [\"Sally\"],[\"0\", \"7\", \"3\", \"3\"]]\nmy_dict = {k[0]: v for k, v in zip(*([iter(book_ratings)]*2))}\n", "{'Ben': ['5', '0', '1', '4'], 'Sally': ['0', '7', '3', '3']}\n"], ["book_ratings = [[\"Ben\"],[\"5\", \"0\", \"1\", \"4\"], [\"Sally\"],[\"0\", \"7\", \"3\", \"3\"]]\nnew_dict = {book_ratings[i][0]:book_ratings[i+1] for i in range(0,len(book_ratings),2)}\nnew_dict\n", "{'Ben': ['5', '0', '1', '4'], 'Sally': ['0', '7', '3', '3']}\n"], ["book_ratings = [[\"Ben\"],[\"5\", \"0\", \"1\", \"4\"], [\"Sally\"],[\"0\", \"7\", \"3\", \"3\"]]\n\ni = iter(book_ratings)\nmy_dict = dict((a[0], b) for a, b in zip(i, i))\n\nprint(my_dict)\n", "{'Ben': ['5', '0', '1', '4'], 'Sally': ['0', '7', '3', '3']}\n", "my_dict = dict((a, b) for (a,), b in zip(book_ratings[::2], book_ratings[1::2]))\n"], ["for item in I[1:]:\n    print(item)\n", "START = 1\nfor index, item in enumerate(I[START:], START):\n    print(item, index)\n"], ["%timeit additions = df.apply(lambda row: np.setdiff1d(row.today, row.yesterday), axis=1)\n", "%timeit removals  = df.apply(lambda row: np.setdiff1d(row.yesterday, row.today), axis=1)\n", "vector = np.vectorize(lambda x,y:set(x)-set(y))\n%timeit additions = vector(df.today,df.yesterday)\n", "%timeit removals = vector(df.yesterday,df.today)\n", "df.today = list(map(set,df.today))\ndf.yesterday = list(map(set,df.yesterday))\n", "%timeit additions = list(map(lambda x:x[0]-x[1],zip(df.today,df.yesterday)))\n", "%timeit removals = list(map(lambda x:x[1]-x[0],zip(df.today,df.yesterday)))\n"], ["import java.util.Collections;\nimport java.util.Scanner;\nclass Solution {\n    private static long N;\n    private static long A;\n    private static long B;\n\n    public static void main(String[] args) {\n        Scanner sc = new Scanner(System.in);\n           N = sc.nextInt();\n        for (long i = 0; i < N; i++) {\n            A = sc.nextInt();\n            B = sc.nextInt();\n            ArrayList<Integer> houses = new ArrayList<Integer>();\n            for (long j = 0; j < A; j++) {\n            houses.add(sc.nextInt());\n            }\n            long no_of_houses = findTheHouses(houses,B);\n            System.out.println(\"Case #\"+ (i+1) +\": \"+no_of_houses);\n\n        }\n\n        sc.close();\n    }\n\n    private static long findTheHouses(ArrayList<Integer> houses, long max_cost) {\n        Collections.sort(houses);\n        long count_budget =0;\n        int houses_count=0;\n        do{\n                count_budget = count_budget +houses.get(houses_count);\n            if(count_budget<=max_cost)\n                houses_count++;\n                else\n                break;\n        }while(houses.size()>houses_count);\n        \n    return houses_count;    \n    }\n}\n\n"], ["from os import environ\n\ndef suppress_qt_warnings():\n    environ[\"QT_DEVICE_PIXEL_RATIO\"] = \"0\"\n    environ[\"QT_AUTO_SCREEN_SCALE_FACTOR\"] = \"1\"\n    environ[\"QT_SCREEN_SCALE_FACTORS\"] = \"1\"\n    environ[\"QT_SCALE_FACTOR\"] = \"1\"\n\nif __name__ == \"__main__\":\n    suppress_qt_warnings()\n    \n    # Init QT etc...\n"], ["from __future__ import absolute_import\nimport os\nimport sys\n\nimport pip\nfrom pip._internal.index.package_finder import CandidateEvaluator\n\n\nclass MyCandidateEvaluator(CandidateEvaluator):\n    def _sort_key(self, candidate):\n        (has_allowed_hash, yank_value, binary_preference, candidate.version,\n         build_tag, pri) = super()._sort_key(candidate)\n\n        priority_index = \"localhost\"  #use your s3pipy here\n        if priority_index in candidate.link.comes_from:\n            priority = 1\n        else:\n            priority = 0\n\n        return (has_allowed_hash, yank_value, binary_preference, priority,\n                candidate.version, build_tag, pri)\n\n\npip._internal.index.package_finder.CandidateEvaluator = MyCandidateEvaluator\n\n# Remove '' and current working directory from the first entry\n# of sys.path, if present to avoid using current directory\n# in pip commands check, freeze, install, list and show,\n# when invoked as python -m pip <command>\nif sys.path[0] in ('', os.getcwd()):\n    sys.path.pop(0)\n\n# If we are running from a wheel, add the wheel to sys.path\n# This allows the usage python pip-*.whl/pip install pip-*.whl\nif __package__ == '':\n    # __file__ is pip-*.whl/pip/__main__.py\n    # first dirname call strips of '/__main__.py', second strips off '/pip'\n    # Resulting path is the name of the wheel itself\n    # Add that to sys.path so we can import pip\n    path = os.path.dirname(os.path.dirname(__file__))\n    sys.path.insert(0, path)\n\nfrom pip._internal.cli.main import main as _main  # isort:skip # noqa\n\n\nif __name__ == '__main__':\n    sys.exit(_main())\n", "numpy\nsampleproject\n"], ["cat requirements.txt | xargs -n 1 pip install -i <your-s3pipy>\npip install -r requirements.txt\n"], ["import random\nimport numpy as np\n\ndef _random_sample(X, y, sample_size):\n  data =[(i,j) for i,j in zip(X, y)]\n  data_2= random.sample(data, sample_size)\n  del data\n  \n  X1 = []\n  y1 = []\n  for t in data_2:\n   X1.append(t[0])\n   y1.append(t[1])\n  \n  del data_2\n  X1 = np.array(X1)\n  y1 = np.array(y1)\n  return X1, y1\n\n\nX_train=[ [1,1,1], [2,2,2],  [3,3,3], [4,4,4] ]\ny_train =['a', 'b', 'c', 'd']\n\nX1, y1 = _random_sample(X_train, y_train, 3)\n"], ["pip install git+https://gitlab.com/yourorg/yourpackage.git@pypi-stable\n"], ["import random\n\na = ['A','B','C','D']\nb = ['1','2','3','4']\n\nc,d = zip(*random.sample(list(zip(a,b)),2))\nprint(c,d)\n", "('C', 'A') ('3', '1')\n"], [], ["import numpy as np\nimport matplotlib.pyplot as plt\nimport pandas as pd\n\ndf = pd.DataFrame(np.random.rand(7,20),columns=list('abcdefghijklmnopqrst'))\ndf.plot(x='a',subplots=True, layout=(4,5))    \n\nplt.tight_layout()\nplt.show()\n"], [], ["price = []\ncart = []\ncount = 0\nfor h in range(number):\n    price.append(int(input()))\n\nfor x in price:\n    if  x <= budget:\n        \n        cart.append(x)\n    \ncart.sort()        \nour_sum = sum(cart)\n\nfor y in cart:\n    count+=1\n\nif our_sum <= budget:\n    print(\"Case #\",test_cases,\": \",count)\n    \n"], [], ["var credential = GoogleCredential.FromFile(googleCredentialPath);\nvar projectId = ((Google.Apis.Auth.OAuth2.ServiceAccountCredential)credential.UnderlyingCredential).ProjectId;\n"], [], ["pip install numpy\npip install --pre torch torchvision -f https://download.pytorch.org/whl/nightly/cu102/torch_nightly.html\n"], ["pip show pytube3\n", " cipher_url = [\n                 parse_qs(formats[i][\"cipher\"]) for i, data in enumerate(formats)\n             ]\n", " cipher_url = [\n                 parse_qs(formats[i][\"signatureCipher\"]) for i, data in enumerate(formats)\n             ]\n", " # -*- coding: utf-8 -*-\n \"\"\"\n Created on Mon Jun 15 12:21:49 2020\n\n @author: tiago\n \"\"\"\n from pytube import YouTube\n\n video_url = \"https://youtu.be/gp5tziO5lXg\" # YouTube video URL\n youtube = YouTube(video_url)\n video = youtube.streams.first()\n video.download(\"C:/Users/tiago/Desktop/videos/\") # Path where to store the video\n"], ["sudo pip3 install --upgrade ipython\n"], [], [], [], ["pip uninstall ipython\n"], ["cipher_url = [\n                parse_qs(formats[i][\"Cipher\"]) for i, data in enumerate(formats)\n            ]\n", "cipher_url = [\n                parse_qs(formats[i][\"signatureCipher\"]) for i, data in enumerate(formats)\n            ]\n"], [], [], [], ["driver.get('https://www.instagram.com/p/BuE82VfHRa6/')\n\ntime.sleep(2)\n\nuserid_element = driver.find_element_by_xpath('//*[@id=\"react-root\"]/section/main/div/div[1]/article/div[3]/section[2]/div/div[2]/button').click()\ntime.sleep(2)\n\n\n\nelems = driver.find_elements_by_xpath(\"//a[@class='FPmhX notranslate TlrDj']\")\n\nusers = []\n\n\nfor i in range(10):\n    i += 1\n    if(i%10) == 9 :\n        driver.find_element_by_xpath('/html/body/div[4]/div/div/div[2]/div').click()\n        actionChain.key_down(Keys.SPACE).key_up(Keys.SPACE).perform()\n\n    print('/html/body/div[4]/div/div/div[2]/div/div/div['+str(i)+']/div[2]/div[1]/div/a')\n    Title = driver.find_element_by_xpath('/html/body/div[4]/div/div/div[2]/div/div/div['+str(i)+']/div[2]/div[1]/div/a').get_attribute('title')\n    users.append(Title)\n    print('Title : ' + Title)\n\nprint(users)\n"], ["psutil.process_iter())\n", "psutil.process_iter(['name','pid']))\n", "if my_pid in psutil.pids():\n  # process still alive\n"], ["sudo apt-get update \nsudo apt-get install python3-pyqt5\n"], ["def process_up(self):\n    try:\n        call = subprocess.check_output(\"pidof '{}'\".format(self.processName), shell=True)\n        return True\n    except subprocess.CalledProcessError:\n        return False\n"], ["s = set(saved_fields)  # set lookup is more efficient \nfor d in fields:\n    d['status'] = d['name'] in s\n\nfields\n# [{'name': 'cherry', 'status': True},\n#  {'name': 'apple', 'status': True},\n#  {'name': 'orange', 'status': False}]\n", "[{**d, 'status': d['name'] in s} for d in fields]  \n# [{'name': 'cherry', 'status': True},\n#  {'name': 'apple', 'status': True},\n#  {'name': 'orange', 'status': False}]\n"], ["saved_fields = \"apple|cherry|banana\".split('|')\nfields = [\n    {\n        'name' : 'cherry'\n    }, \n    {\n        'name' : 'apple'\n    }, \n    {\n        'name' : 'orange'\n    }\n]\n", ">>> [item.update({'selected': item['name'] in saved_fields}) for item in fields]\n[None, None, None]\n", ">>> fields\n[{'name': 'cherry', 'selected': True},\n {'name': 'apple', 'selected': True},\n {'name': 'orange', 'selected': False}]\n", ">>> new_fields = [{**item, 'selected': item['name'] in saved_fields} for item in fields]\n>>> new_fields\n[{'name': 'cherry', 'selected': True},\n {'name': 'apple', 'selected': True},\n {'name': 'orange', 'selected': False}]\n\n>>> fields\n[{'name': 'cherry'}, {'name': 'apple'}, {'name': 'orange'}]\n"], [], ["[{'name': item['name'], 'selected': item['name'] in saved_fields} for item in fields]\n"], ["result = [\n    {\"name\": fruit['name'],\n     \"selected\": fruit['name'] in saved_fields } \n    for fruit in fields\n]\n\n>>> [{'name': 'cherry', 'selected': True},\n {'name': 'apple', 'selected': True},\n {'name': 'orange', 'selected': False}]\n", "result = [{\"name\": fruit['name'], \"selected\": fruit['name'] in saved_fields} for fruit in fields]\n"], [], [], [], ["a = torch.tensor([0,4,0,0,5,0.12,0.34,0,0])\nprint(a.gt(0)) # output in boolean dtype\n# output: tensor([False,  True, False, False,  True,  True,  True, False, False])\n\nprint(a.gt(0).to(torch.float32)) # output in float32 dtype\n# output: tensor([0., 1., 0., 0., 1., 1., 1., 0., 0.])\n"], [], [], [], ["df = pd.read_excel(\"data.xlsx\")\nprint(df)\n#         name         message\n# 0       John    I have a dog\n# 1       Mike    I need a cat\n# 2       Nick  I go to school\n", "out = df.to_numpy().tolist()\nprint(out)\n# [['John', 'I have a dog'],\n#  ['Mike', 'I need a cat'],\n#  ['Nick', 'I go to school']]\n", "# for getting list of tuples\nout = [tuple(elt) for elt in out]\nprint(out)\n# [('John', 'I have a dog'), \n#  ('Mike', 'I need a cat'), \n#  ('Nick', 'I go to school')]\n"], ["dict_ = df.set_index('id').to_dict()['name']\n", "dict_ = df.set_index('id').T.to_dict('list')\n"], ["d=dict(zip(df.id,df.name))\n"], ["In [1256]: df.set_index('id').to_dict()['name']\nOut[1256]: {1: 'hello', 2: 'world'}\n"], ["dict(zip(df['id'].astype(str), df['name']))\n#{'1': 'hello', '2': 'world'}\n", "(df.astype('str')\n   .set_index('id')['name']\n   .to_dict()\n)\n"], ["sudo apt-get update && \\\n    sudo apt-get autoclean\n\nsudo apt-get update && sudo apt-get install \\\n    -y --no-install-recommends \\\n    python3-pip \\\n    python3-setuptools\n\nsudo python3 -m pip install pyqt5==5.14 pyqtchart==5.14\n", "python3 main.py\n"], ["    export QT_DEVICE_PIXEL_RATIO=0\n    export QT_AUTO_SCREEN_SCALE_FACTOR=1\n    export QT_SCREEN_SCALE_FACTORS=1\n    export QT_SCALE_FACTOR=1\n"], ["pip install pandas\npip install xlrd\n", "import pandas as pd\n\ndf = pd.read_excel(\"dataset.xlsx\", header=None)   #header=None means no header\nmylist = list(map(tuple, df.to_numpy()))\n#output\n#[('John', '  I have a dog     '), ('Mike ', ' I need a cat'), ('Nick ', ' I go to school')]\n", "df = pd.read_excel(\"filename.xlsx\", header = None)\n\n#        0                1\n# 0  John        I have a dog\n# 1  Mike        I need a cat\n# 2  Nick        I go to school\n", "df = pd.read_excel(\"filename.xlsx\")\n\n#     Name        Status     <-headers\n# 0  John     I have a dog\n# 1  Mike     I need a cat\n# 2  Nick     I go to school\n", "mylist = list(map(tuple, df.to_numpy()))\n"], ["df = pd.read_excel (r'PathOfExcelFile.xlsx')\nprint (df)\nmylist = [df.columns.values.tolist()] + df.values.tolist()\nprint (mylist)\n"], [], ["import pandas as pd    \nfile_path = r'filepath.xlsx'\nxlsx = pd.read_excel(file_path)\nnames = xlsx.names    \nscores = xlsx.scores    \nmy_list = [(name, score) for name in names for score in scores]   \nprint(my_list)\n"], [" #include <bits/stdc++.h>\n using namespace std;\n #define ll long long\n #define ar array\n int n, b, a[100000];\n void solve() \n {\n    cin >> n >> b;\n    for(int i=0; i<n; ++i)\n    cin >> a[i];\n    sort(a, a+n);\n    int ans=0;\n    for(int i=0; i<n; ++i) {\n      if(b>=a[I]) \n    {\n        b-=a[i];\n        ++ans;\n    }\n     }\ncout << ans << \"\\n\";\n}\n\n int main() {\nios::sync_with_stdio(0);\ncin.tie(0);\n\nint t, i=1;\ncin >> t;\nwhile(t--) {\n    cout << \"Case #\" << i << \": \";\n    solve();\n    ++i;\n}\n}\n"], ["python3 -m venv env\nsource env/bin/activate\npip3 install pyqt5 --only-binary pyqt5\n"], ["import numpy as np\nimport matplotlib.pyplot as plt\nimport pandas  as pd\n\ndf = pd.DataFrame(np.random.rand(7,20))\n\ndf.hist(layout=(5,4), figsize=(15,10))\n\nplt.show()\n"], [], ["conda install -c anaconda git\n"], ["$ pip install --target ./package requests\n$ cd package\n$ zip -r9 ${OLDPWD}/function.zip .\n$ cd $OLDPWD\n$ zip -g function.zip lambda_function.py\n$ aws lambda update-function-code --function-name my-function --zip-file fileb://function.zip\n"], [], ["conda update anaconda\n"], [], [], [], ["plugins:\n- serverless-python-requirements\n", "requests==2.22.0\n"], ["requests==2.22.0\n"], ["# If this is running in a cloud function, then GCP_PROJECT should be defined\nif 'GCP_PROJECT' in os.environ:\n    project_id = os.environ['GCP_PROJECT']\n\n# else if this is running locally then GOOGLE_APPLICATION_CREDENTIALS should be defined\nelif 'GOOGLE_APPLICATION_CREDENTIALS' in os.environ:\n    with open(os.environ['GOOGLE_APPLICATION_CREDENTIALS'], 'r') as fp:\n        credentials = json.load(fp)\n    project_id = credentials['project_id']\nelse:\n    raise Exception('Failed to determine project_id')\n"], ["export QT_AUTO_SCREEN_SCALE_FACTOR=1;\npython myscript.py;\n"], ["t = df['today']\ny = df['yesterday']\ntc = np.concatenate(t)\nyc = np.concatenate(y)\n\ntci,tcu = pd.factorize(tc)\n\ntl = np.array(list(map(len,t)))\nty = np.array(list(map(len,y)))\n\ngrp_t = np.repeat(np.arange(len(tl)),tl)\ngrp_y = np.repeat(np.arange(len(ty)),ty)\n\nsidx = tcu.argsort()\nidx = sidx[np.searchsorted(tcu,yc,sorter=sidx)]\n\ns = max(tci.max(), idx.max())+1\ntID = grp_t*s+tci\nyID = grp_y*s+idx\n\nt_mask = np.isin(tID, yID, invert=True)\ny_mask = np.isin(yID, tID, invert=True)\n\nt_se = np.r_[0,np.bincount(grp_t,t_mask).astype(int).cumsum()]\ny_se = np.r_[0,np.bincount(grp_y,y_mask).astype(int).cumsum()]\n\nY = yc[y_mask].tolist()\nT = tc[t_mask].tolist()\n\nA = pd.Series([T[i:j] for (i,j) in zip(t_se[:-1],t_se[1:])])\nR = pd.Series([Y[i:j] for (i,j) in zip(y_se[:-1],y_se[1:])])\n", "M = max(tID.max(), yID.max())+1\nmask = np.empty(M, dtype=bool)\n\nmask[tID] = True\nmask[yID] = False\nt_mask = mask[tID]\n\nmask[yID] = True\nmask[tID] = False\ny_mask = mask[yID]\n"], ["df['today'].apply(set) - df['yesterday'].apply(set)\n"], ["temp = df[['today', 'yesterday']].applymap(set)\nremovals = temp.diff(periods=1, axis=1).dropna(axis=1)\nadditions = temp.diff(periods=-1, axis=1).dropna(axis=1) \n", "  yesterday\n0        {}\n1        {}\n2       {a}\n", "  today\n0   {c}\n1   {b}\n2   {b}\n"], [], ["for x in list1:\n   print(x[0] + x[1][2])\n", "for x in list1: \n   print(x[0] + x[1].split('.')[1]) \n", "# my2\n# name8\n"], ["for i,j,k in list1:\n    x = j.split('.')[1]\n    print(<b>'{}{}'.format(i+x)</b>)"], ["y = str(i) + str(x)\n"], ["import itertools as it\n\n\ndef solution(*iterables):\n    iterators = [iter(i) for i in iterables]  # make sure we're operating on iterators\n    heads = [next(i) for i in iterators]  # requires each of the iterables to be non-empty\n    sentinel = object()\n    iterators = [it.chain((head,), iterator, (sentinel,), it.repeat(head))\n                 for iterator, head in zip(iterators, heads)]\n    # Create a dedicated iterator object that will be consumed each time a 'sentinel' object is found.\n    # For the sentinel corresponding to the last iterator in 'iterators' this will leak a StopIteration.\n    running = it.repeat(None, len(iterators) - 1)\n    iterators = [map(lambda x, h: next(running) or h if x is sentinel else x,  # StopIteration causes the map to stop iterating\n                     iterator, it.repeat(head))\n                 for iterator, head in zip(iterators, heads)]\n    return zip(*iterators)\n", "running = it.chain(it.repeat(None, len(iterators) - 1), (sentinel,))\niterators = [...]  # here the conversion to map objects remains unchanged\nreturn zip(*[iter(i.__next__, sentinel) for i in iterators])\n", "iterators = [map(lambda x, h, s, r: next(r) or h if x is s else x,\n                 iterator, it.repeat(head), it.repeat(sentinel), it.repeat(running))\n             for iterator, head in zip(iterators, heads)]\n"], ["from itertools import chain, repeat\ndef zilo(data):\n    try:\n        i1 = next(it := iter(data))\n    except StopIteration:\n        return zip()\n    return zip(chain(i1, repeat(i1[0], len(max(data, key=len))-len(i1))),\n               *(chain(i, repeat(i[0])) for i in it))\n"], ["def zip_longest_special(*iterables):\n    def filter(items, defaults):\n        return tuple(d if i is sentinel else i for i, d in zip(items, defaults))\n    sentinel = object()\n    iterables = zip_longest(*iterables, fillvalue=sentinel)\n    first = next(iterables)\n    yield filter(first, [None] * len(first))\n    for item in iterables:\n        yield filter(item, first)\n"], ["from pprint import pprint\n\ncont_det = [\n    ['TASU 117000 0', \"TGHU 759933 - 0\", 'CSQU3054383', 'BMOU 126 780-0', \"HALU 2014 13 3\"],\n    ['40HS'],\n    ['Ha2ardous Materials', 'Arm5 Maehinery'],\n]\n\n\ndef rotate_matrix(source):\n    result = []\n\n    # let's find the longest sub-list length\n    length = max((len(row) for row in source))\n\n    # for every column in sub-lists create a new row in the resulting list\n    for column_id in range(0, length):\n        result.append([])\n\n        # let's fill the new created row using source row columns data.\n        for row_id in range(0, len(source)):\n            # let's use the first value from the sublist values if source row list has it for the column_id\n            if len(source[row_id]) > column_id:\n                result[column_id].append(source[row_id][column_id])\n            else:\n                try:\n                    result[column_id].append(source[row_id][0])\n                except IndexError:\n                    result[column_id].append(None)\n\n    return result\n\n\npprint(rotate_matrix(cont_det))\n", "\n> python test123.py\n[['TASU 117000 0', '40HS', 'Ha2ardous Materials'],\n ['TGHU 759933 - 0', '40HS', 'Arm5 Maehinery'],\n ['CSQU3054383', '40HS', 'Ha2ardous Materials'],\n ['BMOU 126 780-0', '40HS', 'Ha2ardous Materials'],\n ['HALU 2014 13 3', '40HS', 'Ha2ardous Materials']]\n"], [], [], [], [], ["from natsort import natsorted\ndata = [\n    '[fc] EDW Ratio (10 degrees)', \n    ' [fc] EDW Ratio (45 degrees)', \n    ' [fc] EDW Ratio (60 degrees)', \n    ' [fc] EDW Ratio (25 degrees)', \n    ' [fc] EDW Ratio (20 degrees)', \n    ' [fc] EDW Ratio (30 degrees)', \n    ' [fc] EDW Ratio (15 degrees)', \n    ' [fc] EDW output factor (60 degrees)', \n    ' [fc] Quality index'\n]\ndata_sorted = natsorted(data, key=lambda x: x.lstrip())\n", "[\n '[fc] EDW Ratio (10 degrees)',\n ' [fc] EDW Ratio (15 degrees)',\n ' [fc] EDW Ratio (20 degrees)',\n ' [fc] EDW Ratio (25 degrees)',\n ' [fc] EDW Ratio (30 degrees)',\n ' [fc] EDW Ratio (45 degrees)',\n ' [fc] EDW Ratio (60 degrees)',\n ' [fc] EDW output factor (60 degrees)',\n ' [fc] Quality index',\n]\n"], ["def atoi(text):\n    return (int(text), '') if text.isdigit() else (math.nan, text)\n"], [], [], [" Circle @@@ Thread @ {RandomReal[{-1,1},{3,2}], RandomReal[{.5,1},3]} // \n Graphics[{\n    #, Red, \n    RegionIntersection @@@ #~Subsets~{2}\n }]&\n"], ["import pyproj\npyproj.Proj(\"+init=epsg:4326\")\n", "pip install pyproj\n"], ["import pyproj\npyproj.Proj(\"+init=epsg:4326\")\n> RuntimeError: b'no arguments in initialization list'\n", "import pyproj\npyproj.Proj(\"+init=epsg:4326\")\n> RuntimeError: b'no arguments in initialization list'\n", "pyproj_datadir=\"C:/Anaconda3\\share\\proj\"\n", "pyproj_datadir=\"C:\\Anaconda3\\Library\\share\"\n", "import pyproj\npyproj.Proj(\"+init=epsg:4326\")\n>Process finished with exit code 0\n", "wgs84  = data.to_crs({'init': 'epsg:4269'})\n>Process finished with exit code 0\n"], [], ["import numpy as np\nimport numba as nb\n\n@nb.njit\ndef mask_more_n(arr, n):\n    mask = np.ones(arr.shape, np.bool_)\n\n    current = arr[0]\n    count = 0\n    for idx, item in enumerate(arr):\n        if item == current:\n            count += 1\n        else:\n            current = item\n            count = 1\n        mask[idx] = count <= n\n    return mask\n", ">>> bins = np.array([1, 1, 2, 2, 2, 3, 3, 3, 3, 4, 4, 4, 5, 5, 5, 5, 5, 5, 5])\n>>> bins[mask_more_n(bins, 3)]\narray([1, 1, 2, 2, 2, 3, 3, 3, 4, 4, 4, 5, 5, 5])\n>>> bins[mask_more_n(bins, 2)]\narray([1, 1, 2, 2, 3, 3, 4, 4, 5, 5])\n", "import numpy as np\nimport numba as nb\nfrom simple_benchmark import BenchmarkBuilder, MultiArgument\n\nb = BenchmarkBuilder()\n\nbins = np.array([1, 1, 2, 2, 2, 3, 3, 3, 3, 4, 4, 4, 5, 5, 5, 5, 5, 5, 5])\n\n@nb.njit\ndef mask_more_n(arr, n):\n    mask = np.ones(arr.shape, np.bool_)\n\n    current = arr[0]\n    count = 0\n    for idx, item in enumerate(arr):\n        if item == current:\n            count += 1\n        else:\n            current = item\n            count = 1\n        mask[idx] = count <= n\n    return mask\n\n@b.add_function(warmups=True)\ndef MSeifert(arr, n):\n    return mask_more_n(arr, n)\n\nfrom scipy.ndimage.morphology import binary_dilation\n\n@b.add_function()\ndef Divakar_1(a, N):\n    k = np.ones(N,dtype=bool)\n    m = np.r_[True,a[:-1]!=a[1:]]\n    return a[binary_dilation(m,k,origin=-(N//2))]\n\n@b.add_function()\ndef Divakar_2(a, N):\n    k = np.ones(N,dtype=bool)\n    return a[binary_dilation(np.ediff1d(a,to_begin=a[0])!=0,k,origin=-(N//2))]\n\n@b.add_function()\ndef Divakar_3(a, N):\n    m = np.r_[True,a[:-1]!=a[1:],True]\n    idx = np.flatnonzero(m)\n    c = np.diff(idx)\n    return np.repeat(a[idx[:-1]],np.minimum(c,N))\n\nfrom skimage.util import view_as_windows\n\n@b.add_function()\ndef Divakar_4(a, N):\n    m = np.r_[True,a[:-1]!=a[1:]]\n    w = view_as_windows(m,N)\n    idx = np.flatnonzero(m)\n    v = idx<len(w)\n    w[idx[v]] = 1\n    if v.all()==0:\n        m[idx[v.argmin()]:] = 1\n    return a[m]\n\n@b.add_function()\ndef Divakar_5(a, N):\n    m = np.r_[True,a[:-1]!=a[1:]]\n    w = view_as_windows(m,N)\n    last_idx = len(a)-m[::-1].argmax()-1\n    w[m[:-N+1]] = 1\n    m[last_idx:last_idx+N] = 1\n    return a[m]\n\n@b.add_function()\ndef PaulPanzer(a,N):\n    mask = np.empty(a.size,bool)\n    mask[:N] = True\n    np.not_equal(a[N:],a[:-N],out=mask[N:])\n    return mask\n\nimport random\n\n@b.add_arguments('array size')\ndef argument_provider():\n    for exp in range(2, 20):\n        size = 2**exp\n        yield size, MultiArgument([np.array([random.randint(0, 5) for _ in range(size)]), 3])\n\nr = b.run()\nimport matplotlib.pyplot as plt\n\nplt.figure(figsize=[10, 8])\nr.plot()\n"], ["from scipy.ndimage.morphology import binary_dilation\n\ndef keep_N_per_group(a, N):\n    k = np.ones(N,dtype=bool)\n    m = np.r_[True,a[:-1]!=a[1:]]\n    return a[binary_dilation(m,k,origin=-(N//2))]\n", "In [42]: a\nOut[42]: array([1, 1, 2, 2, 2, 3, 3, 3, 3, 4, 4, 4, 5, 5, 5, 5, 5, 5, 5])\n\nIn [43]: keep_N_per_group(a, N=3)\nOut[43]: array([1, 1, 2, 2, 2, 3, 3, 3, 4, 4, 4, 5, 5, 5])\n", "def keep_N_per_group_v2(a, N):\n    k = np.ones(N,dtype=bool)\n    return a[binary_dilation(np.ediff1d(a,to_begin=a[0])!=0,k,origin=-(N//2))]\n", "def keep_N_per_group_v3(a, N):\n    m = np.r_[True,a[:-1]!=a[1:],True]\n    idx = np.flatnonzero(m)\n    c = np.diff(idx)\n    return np.repeat(a[idx[:-1]],np.minimum(c,N))\n", "from skimage.util import view_as_windows\n\ndef keep_N_per_group_v4(a, N):\n    m = np.r_[True,a[:-1]!=a[1:]]\n    w = view_as_windows(m,N)\n    idx = np.flatnonzero(m)\n    v = idx<len(w)\n    w[idx[v]] = 1\n    if v.all()==0:\n        m[idx[v.argmin()]:] = 1\n    return a[m]\n", "def keep_N_per_group_v5(a, N):\n    m = np.r_[True,a[:-1]!=a[1:]]\n    w = view_as_windows(m,N)\n    last_idx = len(a)-m[::-1].argmax()-1\n    w[m[:-N+1]] = 1\n    m[last_idx:last_idx+N] = 1\n    return a[m]\n"], ["def f(a,N):\n    mask = np.empty(a.size,bool)\n    mask[:N] = True\n    np.not_equal(a[N:],a[:-N],out=mask[N:])\n    return mask\n", "a = np.arange(1000).repeat(np.random.randint(0,10,1000))\nN = 3\n\nprint(timeit(lambda:f(a,N),number=1000)*1000,\"us\")\n# 5.443050000394578 us\n\n# compare to\nprint(timeit(lambda:[True for _ in range(N)] + list(bins[:-N] != bins[N:]),number=1000)*1000,\"us\")\n# 76.18969900067896 us\n"], ["array([1, 1, 2, 2, 2, 3, 3, 3, 4, 4, 4, 5, 5, 5])\n"], [], ["bins = np.array([1, 1, 2, 2, 2, 3, 3, 3, 3, 4, 4, 4, 5, 5, 5, 5, 5, 5, 5])\nN = 3\n\nunique, index,count = np.unique(bins, return_index=True, return_counts=True)\nmask = np.full(bins.shape, True, dtype=bool)\nfor i,c in zip(index,count):\n    if c>N:\n        mask[i+N:i+c] = False\n\nbins[mask]\n", "array([1, 1, 2, 2, 2, 3, 3, 3, 4, 4, 4, 5, 5, 5])\n"], ["N = 3\nbins = np.array([1, 1, 2, 2, 2, 3, 3, 3, 3, 4, 4, 4, 5, 5, 5, 5, 5, 5, 5,6])\n\nmask = [True for _ in range(N)] + list(bins[:-N] != bins[N:])\nbins[mask]\n", "array([1, 1, 2, 2, 2, 3, 3, 3, 4, 4, 4, 5, 5, 5, 6]\n"], ["def calculate_bill_amount(gems_list, price_list, reqd_gems,reqd_quantity):\n    bill_amount=0\n    #Write your logic here\n    j=0\n    for i in reqd_gems:\n        if i in gems_list:\n            index=gems_list.index(i)\n            bill_amount=bill_amount+reqd_quantity[j]*price_list[index]\n            j=j+1\n        else:\n            bill_amount=-1\n            break\n    if(bill_amount>30000):\n        bill_amount=bill_amount-(bill_amount*5/100)\n\n    return bill_amount\n"], [], [], [], ["from collections import deque\n\n\ndef rotate(d, n=1):\n    \"\"\"\n    @param d: input python dictionary\n    @param n: number of times to rotate it; default:1\n\n    @return do: output dict rotated n times\n    ex: d = {34: 'apple', 65: 'ball', 32: 'cat', 78: 'dog'}\n        rotate(d, 1) -> {34: 'dog', 65: 'apple', 32: 'ball', 78: 'cat'}\n    \"\"\"\n\n    # Get the values of the dict and put them into a deque collection that contains a rotate method\n    do = deque(d.values())\n    do.rotate(n)  # rotate the values by n\n    do = dict(zip(d.keys(), do))  # recombine the keys and values\n\n    return do\n", "In [1]: d = {34: 'apple', 65: 'ball', 32: 'cat', 78: 'dog'}\n\nIn [2]: rotate(d)\nOut[2]: {34: 'dog', 65: 'apple', 32: 'ball', 78: 'cat'}\n"], ["from itertools import chain\n\ndef rotate_values(my_dict):\n    keys = iter(my_dict.keys())\n    keys = chain(keys, [next(keys)])\n    return dict(zip(keys, my_dict.values()))\n", "{65: 'apple', 32: 'ball', 78: 'cat', 34: 'dog'}\n"], ["def rotate_values(my_dict):\n    if not my_dict:\n        return {}\n    *rest, last = my_dict.values()\n    return dict(zip(my_dict, (last, *rest)))\n"], ["ks = list(d1.keys()) # [34, 65, 32, 78]\n\nd2 = [d1[x] for x in d1.keys()][::-1] # ['dog', 'cat', 'ball', 'apple']\n\nresult = {x[0]:x[1] for x in list(zip(ks,d2))} #  {34: 'dog', 65: 'cat', 32: 'ball', 78: 'apple'}\n"], ["from collections import deque\n\ndef rotate_values(my_dict):\n    # no need to cast the keys to list\n    values_deque = deque(my_dict.values())\n    values_deque.rotate(1)\n    return dict(zip(my_dict.keys(), values_deque))\n"], ["my_dict = {34: 'apple', 65: 'ball', 32: 'cat', 78: 'dog'}\n\nvalues = list(my_dict.values())\ni = len(values)-1\nfor item in my_dict:\n    my_dict[item] = values[i]\n    i -= 1\n\nprint(my_dict)\n"], ["# set up the client\nwith CoreNLPClient(annotators=['tokenize','ssplit','pos','lemma','ner', 'depparse'], timeout=60000, memory='16G') as client:\n    # submit the request to the server\n    ann = client.annotate(text)\n\n    offset = 0 # keeps track of token offset for each sentence\n    for sentence in ann.sentence:\n        print('___________________')\n        print('dependency parse:')\n        # extract dependency parse\n        dp = sentence.basicDependencies\n        # build a helper dict to associate token index and label\n        token_dict = {sentence.token[i].tokenEndIndex-offset : sentence.token[i].word for i in range(0, len(sentence.token))}\n        offset += len(sentence.token)\n\n        # build list of (source, target) pairs\n        out_parse = [(dp.edge[i].source, dp.edge[i].target) for i in range(0, len(dp.edge))]\n\n        for source, target in out_parse:\n            print(source, token_dict[source], '->', target, token_dict[target])\n\n        print('\\nTokens \\t POS \\t NER')\n        for token in sentence.token:\n            print (token.word, '\\t', token.pos, '\\t', token.ner)\n", "___________________\ndependency parse:\n2 Obama -> 1 Barack\n4 born -> 2 Obama\n4 born -> 3 was\n4 born -> 6 Hawaii\n4 born -> 7 .\n6 Hawaii -> 5 in\n\nTokens   POS     NER\nBarack   NNP     PERSON\nObama    NNP     PERSON\nwas      VBD     O\nborn     VBN     O\nin       IN      O\nHawaii   NNP     STATE_OR_PROVINCE\n.        .       O\n\n"], [], ["import tkinter as tk\n\nclass App(tk.Tk):\n    def __init__(self, *args, **kwargs):\n        super().__init__()\n\n        print(\"args type: {}\".format(type(args)))\n        for i in args:\n            print(i)\n             \n        print(\"kwargs type: {}\".format(type(kwargs)))\n        for k, v in kwargs.items():\n            print(k,v)\n\n        self.title(\"Hello World\")\n        self.geometry(\"400x300\")\n\nif __name__ == '__main__':\n\n    args = ('Y','Y','Z')\n    kwargs={'passw': '12345', 'user': 'guest', 'server': '127.0.0.1','database': 'genbank'}\n    app = App(*args, **kwargs)\n    app.mainloop()\n"], ["for i in df.columns:\n    plt.figure()\n    plt.hist(df[i])\n"], ["{% load static %}\n<!DOCTYPE html>\n<html lang=\"en\">\n\n<head>\n  <link rel=\"shortcut icon\" href=\"{% static 'images/favicon.ico' %}\" />\n...\n"], ["strDate ='Sun Jan 22 21:32:58 +0000 2012'\nobjDate = datetime.strptime(strDate, '%a %b %d %H:%M:%S +%f %Y')\n\nprint(objDate)\n#2019-04-29 14:30:53\n"], ["from datetime import datetime\nstrDate ='Sun Jan 22 21:32:58 +0000 2012' \nobjDate = datetime.strptime(strDate.replace(strDate.split(\" \")[4] + \" \", \"\"), '%a %b %d %H:%M:%S %Y')\n", "print(objDate)\n-> 2012-01-22 21:32:58\n"], ["'%a %b %d %H:%M:%S %Y'\n"], ["from datetime import datetime\nstrDate = 'Mon Apr 29 14:30:53 2019'\nobjDate = datetime.strptime(strDate, '%a %b %d %H:%M:%S %Y')\n"], ["conda update conda\n", "conda create -n awesome python=3.6 anaconda tensorflow keras\n", "conda activate awesome\npython -c \"import keras\"\n", "conda deactivate\n", "conda create -n awesome python=3.6 keras\n", "python -c \"import sys;print(sys.path)\"\n", "python3 -m pip install packages \n"], ["def collatz(n):\n    sequence = []\n    while (n>=1):\n        if n in sequence:\n            break\n        else:\n            sequence.append(n)\n            if (n==1):\n                break # solution is found\n            elif (n%2==0):\n                n = n/2\n            else:\n                n = 3*n+1\n    return(sequence)\n"], ["from functools import lru_cache\n\n@lru_cache()\ndef collatz(n):\n    sequenceLength = 0\n    if n == 1:\n        return n\n    elif n % 2 == 0:\n        return 1 + collatz(n // 2)\n    else:  # n % 2 == 1:\n        return 1 + collatz(3 * n + 1)\n", "def deco(f):\n    cache = {}\n    @wraps(f)\n    def wrapper(*args, **kwargs):\n        if 'r' in kwargs and kwargs['r']:  # reset the cache when first called\n            cache.clear()\n        try:                                                                                                    \n            res = cache[args]  \n            # We have already seen these parameters !\n            print('cache hit', *args)\n            if res is None:\n                raise KeyError\n        except KeyError:\n            cache[args] = None  # temporary store a value here\n            res = f(*args)\n            cache[args] = res  # final value stored\n        return res\n\n    return wrapper\n", "@deco\ndef collatz(n, /):  # force positional argument here\n    # ... (same code here)\n", "collatz(10, r=True)\n>>> 7\n"], ["@functools.lru_cache()\ndef collatz(n):\n    if n <= 1:\n        return 0\n    if n % 2 == 0:\n        return 1 + collatz(n // 2)\n    else:\n        return 1 + collatz(3*n + 1)\n", "def collatz(n):\n    sequenceLength = 0\n    seen = set()\n    while (n>=1):\n        if n in seen:\n            print(\"BREAKING NEWS! COLLATZ CONJECTURE DISPROVEN!\")\n            break\n        seen.add(n)\n        # remainder of your code\n"], ["cache = {1:0}\ndef collatz(n):\n    if n in cache:\n       return cache[n]\n    else:\n       if n%2==0:\n          m = n//2\n       else:\n          m = 3*n+1\n       res = collatz(m) + 1\n       cache[n] = res\n       return res\n\n\ndef longest_seq(limit):\n    result = []\n    for i in range(1, limit+1):\n        result += [collatz(i)]\n    return max(result)\n", "r =  longest_seq(1000000)\n#524\n", "[x for x,y in cache.items() if y==r]\n#[837799]\n"], [], ["cache = {}\ndef collatz(n):\n    sequenceLength = 0\n    while (n>=1):\n        if n in cache:  # number already encountered\n            return sequenceLength + cache[n]\n        if (n==1):\n            break # solution is found\n        elif (n%2==0):\n            n = n/2\n            sequenceLength += 1\n        else:\n            n = 3*n+1\n            sequenceLength += 1\n    return sequenceLength\n\ndef longest_seq(limit):\n    result = []\n    for i in range(1, limit+1):\n        c = collatz(i)\n        result.append(c)\n        cache[i] = c  # put the answer in the cache\n\n    print(result)\n    return max(result)\n"], ["import math\nimport pprint\n\ns = [(1,2),(3,4),(-1,1),(6,-7),(0, 6),(-5,-8),(-1,-1),(6,0),(1,-1)]\np = (3,-4)\n\ndists = [math.sqrt((p[0]-s0)**2 + (p[1]-s1)**2) for s0, s1 in s]\n\npprint.pprint(dists)\n", "[6.324555320336759,\n 8.0,\n 6.4031242374328485,\n 4.242640687119285,\n 10.44030650891055,\n 8.94427190999916,\n 5.0,\n 5.0,\n 3.605551275463989]\n"], ["s = [(1, 4), (4, 2), (6, 3)]\np = (3, 7)\n\nfor point in s:\n    sum_ = sum((p[i] - point[i]) ** 2 for i in range(len(p)))\n    distance = sum_ ** (1 / 2)  # take the square root, the same thing as math.sqrt()\n    print(p, point, round(distance, 1))\n"], ["import math\ns= [(1,4),(4,2),(6,3)]\np= (3,7)\n\np0,p1=p\ndist=[]\n\nfor s0,s1 in s:\n    dist_=math.sqrt((p0 - s0)**2 + (p1 - s1)**2) #Edit this line to [0]s and [1]s\n    dist_= dist_+1 #Also change name and/or delete\n#    print(dist)\n    dist.append(dist_) #Save data to list\n"], [], ["    dist=math.sqrt((p0[0] - p1[0])**2 + (s0[1] - s1[1])**2)\n", "    dist=math.sqrt((p0 - p1)**2 + (s0 - s1)**2)\n"], ["text = 'My 82 Benchmark $30K 1000m S7 $23'\n\ntext_string = text.split()\n\nprint(text_string)\nfor i in text_string: \n    if '$' in i: \n        print(i) \n        break\n", "strings = [s for s in text_string if '$' in s]\nif len(strings) > 0:\n    print(strings[0])\n"], ["def get_post_likers(shortcode):\n    chrome = ch.initialize()\n    chrome.get('https://www.instagram.com/p/' + shortcode + '/')\n    chrome.execute_script(\"window.scrollTo(0, 1080)\") \n    url = \"/p/\" + shortcode + \"/liked_by/\"\n    time.sleep(2)\n    like_link = chrome.find_element_by_xpath('//a[@href=\"'+url+'\"]')\n    like_link.click()\n    time.sleep(2)\n    users = []\n    pb = chrome.find_element_by_xpath(\"//div[@role = 'dialog']/div[2]/div[1]/div[1]\").value_of_css_property(\"padding-bottom\")\n    match = False\n    while match==False:\n        lastHeight = pb\n\n        # step 1\n        elements = chrome.find_elements_by_xpath(\"//*[@id]/div/a\")\n        # step 2\n        for element in elements:\n            if element.get_attribute('title') not in users:\n                users.append(element.get_attribute('title'))\n        # step 3\n        chrome.execute_script(\"return arguments[0].scrollIntoView();\", elements[-1])\n        time.sleep(1)\n        # step 4\n        pb = chrome.find_element_by_xpath(\"//div[@role = 'dialog']/div[2]/div[1]/div[1]\").value_of_css_property(\"padding-bottom\")\n        if lastHeight==pb or len(users) >= 1500:\n            match = True\n    return users\n"], ["import re\n", "m = re.search('([$][0-9]+K?)', text)\nprint(m.group(0))\n", "re.findall('([$][0-9]+K?)', text)\n"], ["next((x for x in text.split() if '$' in x), '')\n", "text = 'My 82 Benchmark $30K 1000m S7 $23'\n\nprint(next((x for x in text.split() if '$' in x), ''))\n# 30K\n"], ["\"$\"+text.split(\"$\",1)[1].split()[0] \n"], ["from stanfordnlp.server import CoreNLPClient \n\nwith CoreNLPClient(annotators=['tokenize','ssplit','pos','depparse'], timeout=60000, memory='16G') as client:\n    # submit the request to the server\n    ann = client.annotate(text)\n\n    # get the first sentence\n    sentence = ann.sentence[0]\n\n    # get the dependency parse of the first sentence\n    print('---')\n    print('dependency parse of first sentence')\n    dependency_parse = sentence.basicDependencies\n    print(dependency_parse)\n\n    #get the tokens of the first sentence\n    #note that 1 token is 1 node in the parse tree, nodes start at 1\n    print('---')\n    print('Tokens of first sentence')\n    for token in sentence.token :\n        print(token)\n", "node {\n  sentenceIndex: 0\n  index: 1\n}\nnode {\n  sentenceIndex: 0\n  index: 2\n}\nnode {\n  sentenceIndex: 0\n  index: 3\n}\nnode {\n  sentenceIndex: 0\n  index: 4\n}\nnode {\n  sentenceIndex: 0\n  index: 5\n}\nnode {\n  sentenceIndex: 0\n  index: 6\n}\nnode {\n  sentenceIndex: 0\n  index: 7\n}\nnode {\n  sentenceIndex: 0\n  index: 8\n}\nedge {\n  source: 2\n  target: 1\n  dep: \"compound\"\n  isExtra: false\n  sourceCopy: 0\n  targetCopy: 0\n  language: UniversalEnglish\n}\nedge {\n  source: 5\n  target: 2\n  dep: \"nsubjpass\"\n  isExtra: false\n  sourceCopy: 0\n  targetCopy: 0\n  language: UniversalEnglish\n}\nedge {\n  source: 5\n  target: 3\n  dep: \"auxpass\"\n  isExtra: false\n  sourceCopy: 0\n  targetCopy: 0\n  language: UniversalEnglish\n}\nedge {\n  source: 5\n  target: 4\n  dep: \"neg\"\n  isExtra: false\n  sourceCopy: 0\n  targetCopy: 0\n  language: UniversalEnglish\n}\nedge {\n  source: 5\n  target: 7\n  dep: \"nmod\"\n  isExtra: false\n  sourceCopy: 0\n  targetCopy: 0\n  language: UniversalEnglish\n}\nedge {\n  source: 5\n  target: 8\n  dep: \"punct\"\n  isExtra: false\n  sourceCopy: 0\n  targetCopy: 0\n  language: UniversalEnglish\n}\nedge {\n  source: 7\n  target: 6\n  dep: \"case\"\n  isExtra: false\n  sourceCopy: 0\n  targetCopy: 0\n  language: UniversalEnglish\n}\nroot: 5\n\n---\nTokens of first sentence\nword: \"Barack\"\npos: \"NNP\"\nvalue: \"Barack\"\nbefore: \"\"\nafter: \" \"\noriginalText: \"Barack\"\nbeginChar: 0\nendChar: 6\ntokenBeginIndex: 0\ntokenEndIndex: 1\nhasXmlContext: false\nisNewline: false\n\nword: \"Obama\"\npos: \"NNP\"\nvalue: \"Obama\"\nbefore: \" \"\nafter: \" \"\noriginalText: \"Obama\"\nbeginChar: 7\nendChar: 12\ntokenBeginIndex: 1\ntokenEndIndex: 2\nhasXmlContext: false\nisNewline: false\n\nword: \"was\"\npos: \"VBD\"\nvalue: \"was\"\nbefore: \" \"\nafter: \" \"\noriginalText: \"was\"\nbeginChar: 13\nendChar: 16\ntokenBeginIndex: 2\ntokenEndIndex: 3\nhasXmlContext: false\nisNewline: false\n\nword: \"not\"\npos: \"RB\"\nvalue: \"not\"\nbefore: \" \"\nafter: \" \"\noriginalText: \"not\"\nbeginChar: 17\nendChar: 20\ntokenBeginIndex: 3\ntokenEndIndex: 4\nhasXmlContext: false\nisNewline: false\n\nword: \"born\"\npos: \"VBN\"\nvalue: \"born\"\nbefore: \" \"\nafter: \" \"\noriginalText: \"born\"\nbeginChar: 21\nendChar: 25\ntokenBeginIndex: 4\ntokenEndIndex: 5\nhasXmlContext: false\nisNewline: false\n\nword: \"in\"\npos: \"IN\"\nvalue: \"in\"\nbefore: \" \"\nafter: \" \"\noriginalText: \"in\"\nbeginChar: 26\nendChar: 28\ntokenBeginIndex: 5\ntokenEndIndex: 6\nhasXmlContext: false\nisNewline: false\n\nword: \"Hawaii\"\npos: \"NNP\"\nvalue: \"Hawaii\"\nbefore: \" \"\nafter: \"\"\noriginalText: \"Hawaii\"\nbeginChar: 29\nendChar: 35\ntokenBeginIndex: 6\ntokenEndIndex: 7\nhasXmlContext: false\nisNewline: false\n\nword: \".\"\npos: \".\"\nvalue: \".\"\nbefore: \"\"\nafter: \"\"\noriginalText: \".\"\nbeginChar: 35\nendChar: 36\ntokenBeginIndex: 7\ntokenEndIndex: 8\nhasXmlContext: false\nisNewline: false\n", "from stanfordnlp.server import CoreNLPClient\n\ntext = \"Barack Obama was not born in Hawaii.\"\n\n# set up the client\nwith CoreNLPClient(annotators=['tokenize','ssplit','pos','depparse'], timeout=60000, memory='16G') as client:\n    # submit the request to the server\n    ann = client.annotate(text)\n\n    # get the first sentence\n    sentence = ann.sentence[0]\n\n    # get the dependency parse of the first sentence\n    dependency_parse = sentence.basicDependencies\n\n    #print(dir(sentence.token[0])) #to find all the attributes and methods of a Token object\n    #print(dir(dependency_parse)) #to find all the attributes and methods of a DependencyGraph object\n    #print(dir(dependency_parse.edge))\n\n    #get a dictionary associating each token/node with its label\n    token_dict = {}\n    for i in range(0, len(sentence.token)) :\n        token_dict[sentence.token[i].tokenEndIndex] = sentence.token[i].word\n\n    #get a list of the dependencies with the words they connect\n    list_dep=[]\n    for i in range(0, len(dependency_parse.edge)):\n\n        source_node = dependency_parse.edge[i].source\n        source_name = token_dict[source_node]\n\n        target_node = dependency_parse.edge[i].target\n        target_name = token_dict[target_node]\n\n        dep = dependency_parse.edge[i].dep\n\n        list_dep.append((dep, \n            str(source_node)+'-'+source_name, \n            str(target_node)+'-'+target_name))\n    print(list_dep)\n", "[('compound', '2-Obama', '1-Barack'), ('nsubjpass', '5-born', '2-Obama'), ('auxpass', '5-born', '3-was'), ('neg', '5-born', '4-not'), ('nmod', '5-born', '7-Hawaii'), ('punct', '5-born', '8-.'), ('case', '7-Hawaii', '6-in')]\n"], ["whitenoise.django.GzipManifestStaticFilesStorage\n", "whitenoise.storage.CompressedManifestStaticFilesStorage\n"], [], [], ["import math\n\nnum = int(input(\"please enter the number you want to check\\n\"))\n\nif num > 1:\n    for i in range(2, int(math.sqrt(num))+1):\n        if (num % i) == 0:\n            print(\"the number is not prime\")\n            print(i, \"times\", num//i, \"is\", num)\n            break                                                     \n    else:        \n        print(\"the number is prime\")\nelse:                                \n    print(\"the number is not prime\")\n"], [], ["num = int(input(\"please enter the number you want to check\\n\"))\nisPrime = True\nwhile num < 1:\n    int(input(\"enter a positive value\\n\"))\nif num == 1:\n    print(\"the number is not prime\")\n    return\nfor i in range(2, num):\n    if (num % i) == 0:\n       isPrime = False\n       break\nprint(str(num) + \" is prime? \" + str(isPrime))\n"], ["ln -s ~/anaconda3/bin/<python3.6.8>\n", "conda create -n <myenv> python=3.6.8\n", "conda activate <myenv>\n"], ["np.array([-1, 2] * 4).reshape(4,2)\n"], ["import numpy as np\n\ntheta = np.zeros((4,2))\ntheta[:, [0,1]] = [-1,2]\n", "import numpy as np\n\ntheta = np.zeros((4,2))\ntheta[...] = [-1,2]\n", "array([[-1.,  2.],\n       [-1.,  2.],\n       [-1.,  2.],\n       [-1.,  2.]])\n"], ["array = [[-1,2] for _ in range(3)]\n", "array = np.array([[-1,2] for _ in range(3)])\n"], ["import numpy as np\n\ntheta = np.zeros(shape=(4,2), dtype=int)\ntheta[:,0] = -1\ntheta[:,1] = 2\n"], ["def foo(original, sample):\n    return [str(original.index(i) + 1) for i in sample]\n\nfoo(['A', 'B', 'C', 'D'], ['A', 'C'])\n", "['1', '3']\n"], ["j = list(zip(rawTrainingData, trainingLabels)\nselected = random.sample(j, amount)\nselected_training_data = [td for (td, l) in selected]\nselected_labels = [l for (td, l in selected]\n"], ["import random\n\na = ['A','B','C','D']\nb = ['1','2','3','4']\n\nc = list(zip(a,b))\n\nprint(random.choice(c))\n", "('A', '1')\n('D', '4')\n", "list1=[]\nlist2=[]\nfor a,b in random.sample(c,2):\n    list1.append(a)\n    list2.append(b)\n", ">>> list1\n['B', 'A']\n>>> list2\n['2', '1']\n>>> \n"], ["gcloud iam service-accounts describe my-service-account@projectid.iam.gserviceaccount.com\n"], ["from googleapiclient.discovery import build\nfrom oauth2client.client import GoogleCredentials\n\ncredentials = GoogleCredentials.get_application_default()\nservice = build('compute', 'v1', credentials=credentials)\n\nPROJECT = 'bamboo-machine-422'\nZONE = 'us-central1-a'\nrequest = service.instances().list(project=PROJECT, zone=ZONE)\nresponse = request.execute()\n\nprint(response)\n"], [], [], ["new_center= random.randint(0, len(x_points))\nx_offset = x_points[new_center]\ny_offset = y_points[new_center]\nnew_circle(x_offset, y_offset)\n\n# I'm sorting these for easier visualization\nprint(sorted(x_points))\nprint(sorted(x_points1))\n", "[-1.0, -0.9807852804032304, -0.9807852804032304, -0.9238795325112868,\n -0.9238795325112867, -0.8314696123025455, -0.8314696123025453, -0.7071067811865477,\n -0.7071067811865475, -0.5555702330196022, -0.555570233019602, -0.38268343236509034,\n -0.3826834323650897, -0.19509032201612866, -0.1950903220161282,\n -1.8369701987210297e-16, 6.123233995736766e-17, 0.1950903220161283,\n 0.19509032201612833, 0.38268343236508984, 0.38268343236509, 0.5555702330196018\n, 0.5555702330196023, 0.7071067811865474, 0.7071067811865476, 0.8314696123025452,\n 0.8314696123025452, 0.9238795325112865, 0.9238795325112867, 0.9807852804032303,\n 0.9807852804032304, 1.0, 1.0]\n\n[-2.0, -1.9807852804032304, -1.9807852804032304, -1.923879532511287,\n -1.9238795325112867, -1.8314696123025453, -1.8314696123025453, -1.7071067811865477,\n -1.7071067811865475, -1.5555702330196022, -1.555570233019602, -1.3826834323650903,\n -1.3826834323650896, -1.1950903220161286, -1.1950903220161282, -1.0000000000000002,\n -0.9999999999999999, -0.8049096779838717, -0.8049096779838717, -0.6173165676349102,\n -0.6173165676349099, -0.44442976698039816, -0.4444297669803977, -0.29289321881345265,\n -0.2928932188134524, -0.16853038769745476, -0.16853038769745476,\n -0.07612046748871348, -0.07612046748871326, -0.01921471959676968,\n -0.01921471959676957, 0.0, 0.0]\n"], ["count = len(set(a).intersection(set(b)))\n", "count = len(set(a) & set(b))\n"], ["op = sum([a.count(j) for j in b])\n", "a = [1, 2, 3, 4, 5, 6, 7, 8, 9, 0]\nb = [1, 3, 6, 9]\n#4\na = [1, 1, 2, 3, 3, 3, 4, 5, 6, 6 , 7, 8, 9, 0]\nb = [1, 3, 6, 9]\n#8\n\n"], [">>> len(set(a) & set(b))\n4\n"], ["s = sum(a.count(i) for i in b if i in a)\n"], ["sum(i in b for i in a)\n", "4\n"], ["import numpy as np\nimport matplotlib.pyplot as plt\nimport pandas as pd\n\ndf = pd.DataFrame(np.random.rand(7,20))\n\ndf.plot(subplots=True)\n\nplt.tight_layout()\nplt.show()\n", "df.plot(subplots=True, layout=(4,5))\n", "fig, axes = plt.subplots(nrows=4, ncols=5)\ndf.plot(subplots=True, ax=axes)\n"], [], [], ["kwargs = {'server':\"127.0.0.1\",'user':\"guest\",'passw':\"12345\",'database':\"genbank\"}    \napp = App(*args,**kwargs)\n", "app = App(server=\"127.0.0.1\", user=\"guest\", passw=\"12345\", database=\"genbank\")\n", "super().__init__(*args, **kwargs)\n", "Tk(server=\"127.0.0.1\", user=\"guest\", passw=\"12345\", database=\"genbank\")\n"], [], [], ["import csv\nfrom statistics import mean\n\n\nresults = []\nwith open('grades.csv') as f:\n    reader = csv.reader(f)\n    for row in reader:\n        results.append([row[0], mean([int(x) for x in row[1:]])])\n\nresults.sort(key=lambda x: x[1], reverse=True)\nwith open('out.csv', 'w', newline='\\n') as f:\n    writer = csv.writer(f)\n    writer.writerows(results[:3])\n", "Alis,11.375\nSara,11.285714285714286\nMohammad,9.75\n"], ["# removed unused imports\n# you do not need to import before using from\nimport csv\nfrom statistics import mean\n\n# For opening any files we often use \"with\" as it also closes them for us\n# we can open our output file the same way\nwith open('grades.csv') as infile, open('out.csv', 'w') as outfile:\n    # optionally you could change 'out.csv' to a csv.writer() but i left\n    reader = csv.reader(infile)\n\n    # if we write to the file on each loop we dont need to save the variables\n    # it will also make things cleaner\n    for row in reader:\n        these_grades = [int(grade) for grade in row[1:]]\n        # write a new line into the file directly after calculating\n        outfile.write(\"%s , %f\\n\" % (row[0], mean(these_grades)))\n", "Harry , 7.500000\nDavid , 6.066667\nSara , 11.285714\nMohammad , 9.750000\nSallar , 7.833333\nYo , 5.000000\nAlis , 11.375000\n"], ["import csv\nfrom statistics import mean\nwith open('grades.csv', newline='') as f_in, open('out.csv', 'w', newline='') as f_out:\n    csv.writer(f_out).writerows((name, mean(map(int, grades))) for name, *grades in csv.reader(f_in))\n"], ["avgs = []\nnames = []\nkey_sort = []\nvalue_sort = []\ndictlist = []\nwith open('grades.csv') as f:\n    reader = csv.reader(f)\n    for row in reader:\n        name = row[0]\n        these_grades = list()\n        for grade in row[1:]:\n            these_grades.append(int(grade))\n        avgs.append(mean(these_grades))\n        names.append(name)\n        list_dict = dict(zip(names, avgs))  # convet list to dictionary\n    x = open('out.csv', 'w')\n    #x.write(\"%s , %f\" % (name, mean(these_grades))) #Why aren't we using list_dict? Didn't we already calculate the mean?\n\n    for key in list_dict.keys():\n        x.write(\"%s , %f\\n\" % (key, list_dict[key]))\n", "Harry , 7.500000\nDavid , 6.066667\nSara , 11.285714\nMohammad , 9.750000\nSallar , 7.833333\nYo , 5.000000\nAlis , 11.375000\n"], ["from urlextract import URLExtract\n", "extractor = URLExtract()\n", "soup = BeautifulSoup(html,\"lxml\")\nfinddiv = htmlSource.find('div', class_='flex-embed-content flex-embed-cover-image')\n\nstyle = finddiv['style']\n\nfor url in extractor.gen_urls(style):\n\n    print (url)\n    print('----')\n    print('//'+url)\n", "site.org/photos/0/kp/cr/QOKPCRqjkbbldlo-400x225-noPad.jpg?1528717310\n----\n//site.org/photos/0/kp/cr/QOKPCRqjkbbldlo-400x225-noPad.jpg?1528717310\n"], ["soup = BeautifulSoup(htmlSource, \"html.parser\")\ndivElement = soup.select_one('div.flex-embed-content.flex-embed-cover-image')\n", "pattern = r\"(?<=url\\().*(?='\\))\"\nurl = re.search(pattern, divElement[\"style\"]).group(0) # The group(0) is used to recover the whole match\n", "from bs4 import BeautifulSoup\nimport re\n\nsoup = BeautifulSoup(html, \"html.parser\")\ndivElement = soup.select_one('div.flex-embed-content.flex-embed-cover-image')\n\npattern = r\"(?<=url\\().*(?='\\))\"\nurl = re.search(pattern, divElement[\"style\"]).group(0)\n"], ["first=htmlSource.find('div', class_='flex-embed-content flex-embed-cover-image ')\nget_style=first['style']\nbreak_url=get_style.split(':')\nbreak_url=break_url[1]\nbreak_url=break_url.split(\"'\")\nfinal_url=break_url(1)\n"], [], ["from bs4 import BeautifulSoup as bs\n\nhtml = '''<div class=\"flex-embed-content flex-embed-cover-image \" style=\"background-image: url('//site.org/photos/0/kp/cr/QOKPCRqjkbbldlo-400x225-noPad.jpg?1528717310')\"></div>'''\n\nsoup = bs(html, 'lxml')\n\nitem = soup.select_one('div.flex-embed-content.flex-embed-cover-image')\nitem['style'].split(\"url('\")[1][:-3]\n"], ["driver.get('https://www.instagram.com/p/BuE82VfHRa6/')\n\nuserid_element = driver.find_elements_by_xpath('//*[@id=\"react-root\"]/section/main/div/div/article/div[2]/section[2]/div/div/a')[0].click()\ntime.sleep(2)\n\n# here, you can see user list you want.\n# you have to scroll down to download more data from instagram server.\n# loop until last element with users table view height value.\n\nusers = []\n\nheight = driver.find_element_by_xpath(\"/html/body/div[3]/div/div[2]/div/div\").value_of_css_property(\"padding-top\")\nmatch = False\nwhile match==False:\n    lastHeight = height\n\n    # step 1\n    elements = driver.find_elements_by_xpath(\"//*[@id]/div/a\")\n\n    # step 2\n    for element in elements:\n        if element.get_attribute('title') not in users:\n            users.append(element.get_attribute('title'))\n\n    # step 3\n    driver.execute_script(\"return arguments[0].scrollIntoView();\", elements[-1])\n    time.sleep(1)\n\n    # step 4\n    height = driver.find_element_by_xpath(\"/html/body/div[3]/div/div[2]/div/div\").value_of_css_property(\"padding-top\")\n    if lastHeight==height:\n        match = True\n\nprint(users)\nprint(len(users))\ndriver.quit()\n"], ["from selenium import webdriver\ndriver = webdriver.Chrome()\n\ndriver.get('https://www.instagram.com/p/BuE82VfHRa6/')\n\nelems = driver.find_elements_by_xpath(\"//a[@class='FPmhX notranslate TlrDj']\")\n\nusers = []\n\nfor elem in elems:\n    users.append(elem.get_attribute('title'))\n    print('Title : ' +elem.get_attribute('title'))\n\nprint(users)\n", "Title : kyliejenner\nTitle : saturdayshade28\nTitle : worldmeetzboy\nTitle : mrokon\nTitle : addieisaac\nTitle : addieisaac\nTitle : amber_doerksen\nTitle : amber_doerksen\nTitle : addieisaac\nTitle : zayn6117\nTitle : amber_doerksen\nTitle : amber_doerksen\nTitle : worldmeetzboy\nTitle : worldmeetzboy\nTitle : razvanpopic1301\nTitle : johanna.trmn\nTitle : johanna.trmn\nTitle : johanna.trmn\nTitle : americ.av\nTitle : gabriellcostta1.0\nTitle : gabriellcostta1.0\nTitle : gabriellcostta1.0\nTitle : worldmeetzboy\nTitle : enactusepi\nTitle : enactusepi\n[u'kyliejenner', u'saturdayshade28', u'worldmeetzboy', u'mrokon', u'addieisaac', u'addieisaac', u'amber_doerksen', u'amber_doerksen', u'addieisaac', u'zayn6117', u'amber_doerksen', u'amber_doerksen', u'worldmeetzboy', u'worldmeetzboy', u'razvanpopic1301', u'johanna.trmn', u'johanna.trmn', u'johanna.trmn', u'americ.av', u'gabriellcostta1.0', u'gabriellcostta1.0', u'gabriellcostta1.0', u'worldmeetzboy', u'enactusepi', u'enactusepi']\n"], ["python -c \"import keras\"\n"], ["    for x in primelist:\n        y= num-x\n        # Note: num = x + y, thus need only check y prime\n        if y in primelist:\n            return True\n        # If no such y is prime, not possible\n        else:\n            return False\n", "def partition(num):\n    \"\"\"\n    Return True if there exist primes x,y such that num = x + y.\n    Else return False.\n    \"\"\"\n    primelist = primes(num)\n    for x in primelist:\n        y= num-x\n        # Note: num = x + y, thus need only check y prime\n        if y in primelist:\n            return True\n    # If no such y is prime, not possible\n    else:\n        return False\n\ndef primes(num):\n    \"\"\"Return list of all primes less than num.\"\"\"\n    primelist=[]\n    for i in range(2,num + 1):\n        for p in range(2,i):\n            if (i % p) == 0:\n                break\n        else:\n            primelist.append(i)\n    return primelist\n"], ["def primepartition(m):\n    if m > 3:\n        for number in range(m // 2, m - 1):\n            difference = m - number\n\n            for psuedoprime in range(2, int(number ** 0.5) + 1):\n                if number % psuedoprime == 0 or difference > psuedoprime and difference % psuedoprime == 0:\n                    break\n            else:  # no break\n                return number, difference  # as good a non-False result as any other...\n\n    return False\n"], ["def factors(n):\n    factorslist = []\n    for i in range(1, n+1, 1):\n        if n % i == 0:\n            factorslist.append(i)\n    return(factorslist)    \n\ndef prime(n):\n    if factors(n) == [1, n] and n > 1:\n        return(True)\n\ndef primelist(n):\n    primenolist = []\n    for i in range(1, n+1, 1):\n        if prime(i) == True:\n            primenolist.append(i)\n    return(primenolist)\n\ndef primepartition(m):\n    if m > 0:\n        primenolist = primelist(m)\n        checklist = []\n        for p in primenolist:\n            q = m - p\n            if q in primenolist and p > 0 and q > 0:\n                checklist.append((p,q))\n        if len(checklist) > 0:\n            return(True)\n        else:\n            return(False)\n    else:\n        return(False)\n"], ["def primepartition0(m):\n    primelist=[]\n    if m<0:\n        return False\n    else:\n        for i in range(2,m + 1):\n            for p in range(2,i):\n                if (i % p) == 0:\n                    break\n            else:\n                primelist.append(i)\n\n        for x in primelist:\n            for y in primelist:\n                if x != y and x+y == m:\n                    return True\n        return False   \n"], [], ["def primepartition(m):\n    primelist=[]\n    if m<0:\n        return False\n    else:\n        for i in range(2,m + 1):\n            for p in range(2,i):\n                if (i % p) == 0:\n                    break\n            else:\n                primelist.append(i)\n\n        for x in primelist:\n            y= m-x\n            if y in primelist:\n                return True\n        return False\n"], ["conda install keras\n", "conda list\n", "\\path\\to\\Anaconda\\python\\python3 -m pip3 install keras\n"], ["I = ['a', 'b', 'c', 'd', 'e']\nnI = len(I) # 5\n", "for i in range(1, nI):\n    print(i)\n# Prints:\n# 1\n# 2\n# 3\n# 4\n", "for index in range(1, nI):\n    i = I[index]\n    print(i)\n# Prints:\n# b\n# c\n# d\n# e\n", "for i in I[1:]:\n    print(i)\n# Prints:\n# b\n# c\n# d\n# e\n"], [">>> df = pd.DataFrame([[1,2,3,4,5], [6,7,8,9,10]], columns=['A', 'B', 'A', 'C', 'B'])                                     \n>>> df                                                                                                                 \n   A  B  A  C   B\n0  1  2  3  4   5\n1  6  7  8  9  10\n>>> df.loc[1].to_dict()                                                                                                \n{'A': 8, 'B': 10, 'C': 9}\n", ">>> from itertools import count \n>>>                                                                                       \n>>> col_isdupe = zip(df.columns, df.columns.duplicated(keep=False))                                                    \n>>> counters = {c:count() for c, dupe in col_isdupe if dupe}                                                           \n>>> df.columns = ['{}_{}'.format(c, next(counters[c])) if c in counters else c \n...:              for c in df.columns]                               \n>>> df                                                                                                                 \n   A_0  B_0  A_1  C  B_1\n0    1    2    3  4    5\n1    6    7    8  9   10\n>>>                                                                                                                    \n>>> df.loc[1].to_dict()                                                                                                \n{'A_0': 6, 'A_1': 8, 'B_0': 7, 'B_1': 10, 'C': 9}\n"], ["list(df.iloc[k,:])\n"], ["dict(df.loc[100])\n"], ["dict(df.loc[100].items())\n"], ["df.loc[1].to_dict()\n"], ["from urllib.request import urlopen\nfrom urllib.parse import urlencode\nfrom json import loads\n\n\ndef getJSON(page):\n    params = urlencode({\n        'format': 'json',\n        'action': 'parse',\n        'prop': 'text',\n        'redirects' : 'true',\n        'page': page})\n    API = \"https://en.wikipedia.org/w/api.php\"\n    response = urlopen(API + \"?\" + params)\n    return response.read().decode('utf-8')\n\n\ndef getRawPage(page):\n    parsed = loads(getJSON(page))\n    try:\n        title = parsed['parse']['title']\n        content = parsed['parse']['text']['*']\n        return title, content\n    except KeyError:\n        # The page doesn't exist\n        return None, None\n\ntitle, content = getRawPage(\"Mathematics\")\n"], [], ["import wikipediaapi\n\nwiki_wiki = wikipediaapi.Wikipedia('en')\n\npage = wiki_wiki.page('Mathematics')\nprint(page.summary)\n"], ["import requests\nfrom lxml.html import fromstring\n\nurl = \"https://en.wikipedia.org/wiki/Mathematics\"\n\nres = requests.get(url)\nsource = fromstring(res.content)\nparagraph = '\\n'.join([item.text_content() for item in source.xpath('//p[following::h2[2][span=\"History\"]]')])\nprint(paragraph)\n", "from bs4 import BeautifulSoup\nimport requests\n\nres = requests.get(\"https://en.wikipedia.org/wiki/Mathematics\")\nsoup = BeautifulSoup(res.text, 'html.parser')\nfor item in soup.find_all(\"p\"):\n    if item.text.startswith(\"The history\"):break\n    print(item.text)\n"], ["import wikipedia\n#print(wikipedia.summary(\"Mathematics\"))\n#wikipedia.search(\"Mathematics\")\nprint(wikipedia.page(\"Mathematics\").content)\n"], ["import bs4\nimport requests\n\n\nresponse = requests.get(\"https://en.wikipedia.org/wiki/Mathematics\")\n\nif response is not None:\n    html = bs4.BeautifulSoup(response.text, 'html.parser')\n\n    title = html.select(\"#firstHeading\")[0].text\n    paragraphs = html.select(\"p\")\n    for para in paragraphs:\n        print (para.text)\n\n    # just grab the text up to contents as stated in question\n    intro = '\\n'.join([ para.text for para in paragraphs[0:5]])\n    print (intro)\n"], ["def calculate_bill_amount2(gems_list, price_list, reqd_gems,reqd_quantity):\n    bill_amount=0\n    #Write your logic here\n    for gem in gems_list:\n        for g in reqd_gems:\n            if g==gem:\n                index = gems_list.index(g)\n                no_of_gems = reqd_quantity[reqd_gems.index(g)]\n                price = price_list[index] * no_of_gems\n                print(price)\n                bill_amount += price\n            if g not in gems_list:\n                return -1                \n    return bill_amount\n", "def calculate_bill_amount(gem_prices, reqd_gem_quantities):\n    bill_amount = 0\n    for gem in reqd_gem_quantities: \n        if gem in gem_prices:\n            price = gem_prices[gem] * reqd_gem_quantities[gem]\n            bill_amount += price\n        else:\n            return -1\n    return bill_amount\n\ngem_prices = { \"Emerald\": 1760, \"Ivory\": 2119, \"Jasper\": 1599, \"Ruby\": 3920, \"Garnet\": 3999 }\nreqd_gem_quantities = { \"Ivory\": 3, \"Emerald\": 2, \"Garnet\": 5 }\n\nprint(calculate_bill_amount(gem_prices, reqd_gem_quantities))\n"], ["gems_list = [\"Emerald\", \"Ivory\", \"Jasper\", \"Ruby\", \"Garnet\"]\nprice_list = [1760, 2119, 1599, 3920, 3999]\nreqd_gems = [\"Ivory\", \"Emerald\", \"Garnet\"]\nreqd_quantity = [3, 2, 5]\n\nquantity_dict = dict(zip(reqd_gems, reqd_quantity))\nprice_dict = dict(zip(gems_list, price_list))\nprint(\"Item\", \"Quantity\", \"Unit_price\", \"Total_price\")\nfor k, v in quantity_dict.items():\n    print(k, v, price_dict[k], price_dict[k] * v)\nprint(\"Grand_total\", sum([price_dict[k] * v for k, v in quantity_dict.items()]))\n"], ["def calculate_bill_amount(gems_list, price_list, reqd_gems,reqd_quantity):\nbill_amount=0\n#Write your logic here\nx=0 \nfor g in reqd_gems:\n    for gem in gems_list:\n        if g==gem:\n            index = gems_list.index(g)\n            price = price_list[index]\n            bill_amount += price * reqd_quantity[x] \n            print(bill_amount, price, reqd_quantity[x], x)\n    x+=1\nreturn(bill_amount)\n"], ["for i in range(1, nI):\n    sum=0\n    for v in range(nV):\n        for j in range(nJ):\n            sum=sum+x1[i][j][v]\n", "range(start_from, stop_at, step_size)\n", "for i in range(2, 7, 2):\n    print(i, end=' ')\n\nOut:\n2 4 6\n", "for i in range(1, 7, 2):\n    print(i, end=' ')\n\nOut: \n1 3 5  # there's no 7!\n"], ["for i in range(1,nI):\n    ...\n"], ["class BigQueryToXOperator(BaseOperator):\n    template_fields = ['sql']\n    ui_color = '#000000'\n\n    @apply_defaults\n    def __init__(\n            self,\n            sql,\n            keys,\n            bigquery_conn_id='bigquery_default',\n            delegate_to=None,\n            *args,\n            **kwargs):\n        super(BigQueryToXOperator, self).__init__(*args, **kwargs)\n        self.sql = sql\n        self.keys = keys # A list of keys for the columns in the result set of sql\n        self.bigquery_conn_id = bigquery_conn_id\n        self.delegate_to = delegate_to\n\n\n    def execute(self, context):\n        \"\"\"\n        Run query and handle results row by row.\n        \"\"\"\n        cursor = self._query_bigquery()\n        for row in cursor.fetchall():\n            # Zip keys and row together because the cursor returns a list of list (not list of dicts)\n            row_dict = dumps(dict(zip(self.keys,row))).encode('utf-8')\n\n            # Do what you want with the row...\n            handle_row(row_dict)\n\n\n    def _query_bigquery(self):\n        \"\"\"\n        Queries BigQuery and returns a cursor to the results.\n        \"\"\"\n        bq = BigQueryHook(bigquery_conn_id=self.bigquery_conn_id,\n                          use_legacy_sql=False)\n        conn = bq.get_conn()\n        cursor = conn.cursor()\n        cursor.execute(self.sql)\n        return cursor\n"], ["get_data = BigQueryGetDataOperator(\n    task_id='get_data_from_bq',\n    dataset_id='test_dataset',\n    table_id='Transaction_partitions',\n    max_results='100',\n    selected_fields='DATE',\n    bigquery_conn_id='airflow-service-account'\n)\n"], ["import threading\nfrom multiprocessing import Queue\n\nclass CSVWriterThread(threading.Thread):\n    def __init__(self, *args, **kwargs):\n        threading.Thread.__init__(self, *args, **kwargs)\n        self.input_queue = Queue()\n\n    def send(self, item):\n        self.input_queue.put(item)\n\n    def close(self):\n        self.input_queue.put(None)\n        self.input_queue.join()\n\n    def run(self):\n        while True:\n            csv_array = self.input_queue.get()\n            if csv_array is None:\n                break\n\n            # Do something here ...\n            df = pd.DataFrame({'x': csv_array})\n            df.to_csv(\"docs/xyz.csv\", index=False)\n\n\n            self.input_queue.task_done()\n            time.sleep(1)\n        # Done\n        self.input_queue.task_done()\n        return\n\n@app.before_first_request\ndef activate_job_monitor():\n    thread = CSVWriterThread()\n    app.csvwriter = thread\n    thread.start()\n", "@app.route(\"/test\", methods=['GET','POST'])\ndef check():\n    arr.append(request.form['a'])\n    arr.append(request.form['b'])\n    res = {'Status': True}\n    app.csvwriter.send(arr)\n    return json.dumps(res)\n"], ["import time\nfrom flask import Flask, Response\n\napp = Flask(__name__)\n\n@app.route('/')\ndef main():\n    return '''<div>start</div>\n    <script>\n        var xhr = new XMLHttpRequest();\n        xhr.open('GET', '/test', true);\n        xhr.onreadystatechange = function(e) {\n            var div = document.createElement('div');\n            div.innerHTML = '' + this.readyState + ':' + this.responseText;\n            document.body.appendChild(div);\n        };\n        xhr.send();\n    </script>\n    '''\n\n@app.route('/test')\ndef test():\n    def generate():\n        app.logger.info('request started')\n        for i in range(5):\n            time.sleep(1)\n            yield str(i)\n        app.logger.info('request finished')\n        yield ''\n    return Response(generate(), mimetype='text/plain')\n\nif __name__ == '__main__':\n    app.run('0.0.0.0', 8080, True)\n"], ["import os\n\nimport redis\nfrom rq import Worker, Queue, Connection\n\nlisten = ['default']\n\nredis_url = os.getenv('REDISTOGO_URL', 'redis://localhost:6379')\n\nconn = redis.from_url(redis_url)\n\nif __name__ == '__main__':\n    with Connection(conn):\n        worker = Worker(list(map(Queue, listen)))\n        worker.work()\n", "def post(self):\n\n    data = Task.parser.parse_args()\n\n    job = q.enqueue_call(\n        func=migrate_usage, args=(my_args),\n        result_ttl=5000\n    )\n    print(\"Job ID is: {}\".format(job.get_id()))\n    job_key = job.get_id()\n\n    print(str(Job.fetch(job_key, connection=conn).result))\n\n    if job:\n        return {\"message\": \"Job : {} added to queue\".format(job_key)}, 201\n"], []]