[["import re\nthe_str = \"\"\"\nIntern - RVA-QA PK\nFulltime - VA - BN146\nIntern - STP_NA\nIntern - ZXU RMP LM\n\"\"\"\nreg = re.compile(\"\\n.*?- \")\na = re.sub(reg,\"\\n\",the_str)\n\nprint(a)\n\n", "\nRVA-QA PK\nVA - BN146\nSTP_NA\nZXU RMP LM\n\n", "import re\nthe_str = \"\"\"\nIntern - RVA-QA PK\nFulltime - VA - BN146\nIntern - STP_NA\nIntern - ZXU RMP LM\n\"\"\"\nreg = re.compile(\"\\n.*?- (.*)\")\na = re.findall(reg,the_str)\nprint(a)\n"], ["item = 'Prefix - Postfix'\nseparator = ' - '\nstart = item.index(separator) + len(separator)\nprint(item[start:])\n"], ["for item in item_list:\n    result_list.append(item[0].split(' - ', 1)[1].strip())\n"], ["import re\nstr = \"example - postfix\"\nre.sub(\".+-\", \"\", str)\n", "\"postfix\"\n"], [], ["(\n    df.melt(\"Col1\")\n    .assign(temp=lambda x: np.where(x.Col1.isna(), x.value, np.nan))\n    .ffill()\n    .query(\"value != temp\")\n)\n\n    Col1    variable    value   temp\n1      B    Col2           2    a\n2      C    Col2          10    a\n4      B    Col3           3    b\n5      C    Col3           6    b\n"], ["df = pd.DataFrame({'Col1': {0: np.nan, 1: 'B', 2: 'C'},\n'Col2': {0: 'a', 1: '2', 2: '10'},\n'Col3': {0: 'b', 1: '3', 2: '6'}})\n\nmelted = pd.melt(df, id_vars=['Col1'], value_vars=['Col3', \n'Col2']).dropna().reset_index(drop=True)\n\nsubframe = pd.DataFrame({'Col2': ['a'], 'Col3': ['b']}).melt()\n\nmelted.merge(subframe, on='variable')\n\nOut[1]:\n     Col1 variable value_x value_y\n0    B     Col3       3       b\n1    C     Col3       6       b\n2    B     Col2       2       a\n3    C     Col2      10       a\n"], ["df.fillna('').set_index('Col1').T\\\n  .set_index('',append=True).stack().reset_index()\n", "  level_0    Col1   0\n0    Col2  a    B   2\n1    Col2  a    C  10\n2    Col3  b    B   3\n3    Col3  b    C   6\n", "df.fillna('Col0').set_index('Col1').T\\\n  .set_index('Col0',append=True).stack().reset_index(level=[1,2])\n", "     Col0 Col1   0\nCol2    a    B   2\nCol2    a    C  10\nCol3    b    B   3\nCol3    b    C   6\n"], ["df = pd.DataFrame.from_dict({'Col1': {0: np.nan, 1: 'B', 2: 'C'},\n 'Col2': {0: 'a', 1: '2', 2: '10'},\n 'Col3': {0: 'b', 1: '3', 2: '6'}})\n\n# set index as a multi-index from the first row\ndf.index = pd.MultiIndex.from_product([df.iloc[0,:]])\n\n# get rid of the empty row and reset the index\ndf = df.iloc[1:,:].reset_index()\n\nanswer = pd.melt(df, id_vars=['Col1',0], value_vars=['Col2','Col3'],value_name='vals')\nanswer[['Col1','variable',0,'vals']]\n    \n  Col1 variable  0 vals\n0    B     Col2  a    2\n1    C     Col2  b   10\n2    B     Col3  a    3\n3    C     Col3  b    6\n"], ["df_final = (df.iloc[1:].set_index('Col1').stack().reset_index(0)\n                       .join(df.iloc[0,1:].rename('1')).sort_values('Col1'))\n\nOut[345]:\n     Col1   0  1\nCol2    B   2  a\nCol3    B   3  b\nCol2    C  10  a\nCol3    C   6  b\n"], [], [], [], ["num = int(input(\"Number\"))\n\"_______________________________\"[:num] # substring\n\"\".join([\"_\" for i in range(num)]) # build array then construct string\n\"_\"*num # string repetition\n"], ["i = input(\"Enter the number: \")  # get input from user\ncharacter = \"_\"\nfor x in range(int(i)):\n    print(character, end=\"\")  # repeat print the specified character. end=\"\" ensurer that all is in one line\n"], ["num = int(input(\"enter: \"))\n", "for i in range(num):\n", "print(\"_\", end =\" \")\n", "num = int(input(\"enter: \"))\nfor i in range(num):\n   print(\"_\", end =\" \")\n"], [], ["Senior Python Developer\nhttps://www.cvbankas.lt/senior-python-developer-vilniuje/1-6719819\n\nFull Stack Engineer (React + Python)\nhttps://www.cvbankas.lt/full-stack-engineer-react-python-vilniuje/1-6665723\n\nPython programuotojas (Mid-Senior)\nhttps://www.cvbankas.lt/python-programuotojas-mid-senior-vilniuje/1-6693547\n\nPython Developer\nhttps://www.cvbankas.lt/python-developer-vilniuje/1-6604883\n"], ["import requests\nfrom bs4 import BeautifulSoup\n\n\nURL = 'https://www.cvbankas.lt/?miestas=Vilnius&padalinys%5B%5D=&keyw=python'\npage = requests.get(URL).text\nsoup = BeautifulSoup(page, 'html.parser')\n\nresults = soup.find_all('h3', text=lambda t: 'python' in t.lower())\nfor r in results:\n    print(r.text)\n    print(r.find_parent('a')['href'])\n    print('-' * 80)\n", "Senior Python Developer\nhttps://www.cvbankas.lt/senior-python-developer-vilniuje/1-6719819\n--------------------------------------------------------------------------------\nFull Stack Engineer (React + Python)\nhttps://www.cvbankas.lt/full-stack-engineer-react-python-vilniuje/1-6665723\n--------------------------------------------------------------------------------\nPython programuotojas (Mid-Senior)\nhttps://www.cvbankas.lt/python-programuotojas-mid-senior-vilniuje/1-6693547\n--------------------------------------------------------------------------------\nPython Developer\nhttps://www.cvbankas.lt/python-developer-vilniuje/1-6604883\n--------------------------------------------------------------------------------\n"], ["import requests\nfrom lxml import etree\nfrom bs4 import BeautifulSoup\n\nURL = 'https://www.cvbankas.lt/?miestas=Vilnius&padalinys%5B%5D=&keyw=python'\npage = requests.get(URL).text\nsoup = BeautifulSoup(page, 'html.parser')\n\ndom = etree.HTML(str(soup))\nelements = dom.xpath('//h3[@class=\"list_h3\"]')\nfor element in elements:\n  print(element.text)\n"], ["import requests\nfrom bs4 import BeautifulSoup\n\nURL = 'https://www.cvbankas.lt/?miestas=Vilnius&padalinys%5B%5D=&keyw=python'\npage = requests.get(URL).text\nsoup = BeautifulSoup(page, 'html.parser')\nresults = soup.select(\"div.list_cell > .list_h3\")\nfor i in results:\n    print(i.text)\n"], [], [], ["import numpy as np\n\nfor year in np.arange(np.datetime64('2020'),np.datetime64('2025')):\n    print(year)\n\n#or a list comprehension\n[year for year in np.arange(np.datetime64('2020'),np.datetime64('2025'))]\n"], ["import datetime\n\ndate1 = datetime.date(2010, 1, 1)\ndate2 = datetime.date(2015, 1, 1)\n\ndef daterange(date1, date2):\n    for n in range(int(date2.year) - int(date1.year)+1):\n        yield int(date1.year) + n\n\nstart_dt = date1\nend_dt = date2\ndat = []\nfor dt in daterange(start_dt, end_dt):\n    dat.append(dt)\nprint(dat)\n", "[2010, 2011, 2012, 2013, 2014, 2015]\n"], ["my_list = list(daterange(start_dt, end_dt))\n"], ["In [44]: import pandas as pd\n    ...:\n    ...: [d.strftime('%Y') for d in pd.date_range(start ='1-1-2010', end ='1-1-2015', freq ='Y')]\nOut[44]: ['2010', '2011', '2012', '2013', '2014']\n"], ["from datetime import date\n\nstart = date(2010, 1, 1) \nend = date(2015, 1, 1)\n\nyear_range = [year for year in range(start.year, end.year +1)]\n\nprint(year_range)\n"], [], ["def daterange(date1, date2):\n    for n in range(int(date2.year) - int(date1.year)+1):\n        yield int(date1.year) + n\n\nlst = [item for item in daterange(start_dt, end_dt)]\n", "lst = list(daterange(start_dt, end_dt))\n"], ["li=[1, 2, 3, 4]\nval1=li.pop() #val1 = 4\nval2=li.pop(1) #val2 = 2\nli.insert(0,val1) #li = [4, 1, 3]\n"], [], ["arr = [1,2,32,4,454,2]\nelem = arr.pop(3) // 3 is the index of the list\nprint(elem)       // this will print 4\n"], ["mylist = ['ele1', 'ele2', 'ele3']\n# To Remove An `ele` at a certain index or by name\nINDEX = 0  # Removes 'ele1'\nmylist.pop(INDEX)\n# By Name\nele = 'ele2'\nmylist.remove(ele)\n\n# To Insert In a list\n\nmylist.insert('ele4 BRAND NEW!', -1)  # This Means Insert 'ele4 BRAND NEW' indexed at the very last of the list '-1' stands for the last ele of the list\n"], [], ["list_example = [1, 2, 3, 4, 5] # List example\nremoved = list_example.pop(3) # remove by index \nlist_example.insert(2, removed) # Adding the element removed in the position required\n", "[1, 2, 4, 3, 5]\n"], ["array = [1,2,3,4,5]\nlast_value_popped = array.pop(-1)\n\nprint(array)\nprint(last_value_popped)\n", "[1, 2, 3, 4]\n5\n"], [], ["dfall.date=dfall.date.apply(lambda x: x.replace(day=1)- pd.Timedelta(days=1))\n", "dfall.date=pd.to_datetime(dfall.date).apply(lambda x: x.replace(day=1)- pd.Timedelta(days=1))\n", "def vec_dt_replace(series, year=None, month=None, day=None):\n    return pd.to_datetime(\n        {'year': series.dt.year if year is None else year,\n         'month': series.dt.month if month is None else month,\n         'day': series.dt.day if day is None else day})\n#dfall.date=pd.to_datetime(dfall.date) #(if dfall.date is type string)\ndfall.date=vec_dt_replace(dfall.date,day=1)- pd.Timedelta(days=1)\n", "import calendar\nimport datetime\ntoday = datetime.datetime.now()\ndfall.date = str(today.year) + \"-\" + dfall.month.astype(str) + \"-\" + dfall.month.apply(lambda x:calendar.monthrange(today.year,x)[1]).astype(str)\ndfall.date = pd.to_datetime(dfall.date)\nprint(dfall)\n", "dfall[[\"date\", \"month\"]]\n\n        date  month\n0 2020-01-31      1\n1 2020-02-29      2\n2 2020-03-31      3\n3 2020-04-30      4\n4 2020-05-31      5\n5 2020-06-30      6\n"], ["dfall['lastdaylastmonth'] = pd.to_datetime(dfall['date'].str[:-3]) - pd.Timedelta(days=1)\n\n# dfall['lastdaylastmonth']\n# 0   2020-01-31\n# 1   2020-02-29\n# 2   2020-03-31\n# 3   2020-04-30\n# 4   2020-05-31\n# 5   2020-06-30\n# Name: lastdaylastmonth, dtype: datetime64[ns]\n"], ["import datetime\n\nfor index, d in df.iterrows():\n    temp = d[\"date\"]\n    dtObj = datetime.datetime.strptime(temp, \"%Y-%m-%d\")\n    newDt = dtObj - datetime.timedelta(days=dtObj.day)\n    df[\"date\"][index] = datetime.datetime.strftime(newDt, \"%Y-%m-%d\")\n"], ["import datetime\nfrom datetime import timedelta\n\ndf = pd.DataFrame({\"date\":['2020-02-04','2020-03-03','2020-04-02','2020-05-05','2020-06-03','2020-07-02'],\n                  \"month\": [1,2,3,4,5,6]})\n\n# Conert to data\ndef change_time_format(series):\n    return datetime.datetime.strptime(series,\"%Y-%m-%d\")\n\ndf.date = df.date.apply(change_time_format)\n\ndates = list(df.date)\nprevious_m_last_date = []\nfor d in dates:\n    days = d.day\n    u_date = d - timedelta(days)\n    previous_m_last_date.append(u_date)\n\ndf[\"updated_date\"] = previous_m_last_date\ndf\n"], ["columns = ['nameOfGene', 'sampleNumber', 'Allel1', 'Allel2', 'descr']\nfile = open('test_data.txt', 'r')\nlines = file.readlines()\n\ndf = pd.DataFrame(columns = columns)\nfor line in lines:\n     split_line = line.split(',')\n     if len(split_line) == 7:\n           row_data = split_line[0:4] + [split_line[6]]\n     elif len(split_line) == 5:\n           row_data = split_line\n\n     row = pd.Series(row_data, index=columns)\n     df = df.append(row, ignore_index=True)\n", "   nameOfGene  sampleNumber  Allel1  Allel2      descr\n0  geneName1   sampleName1   Allel   allel2      tumor\n1  geneName2   sampleName1   Allel   allel2      ntn\n2  geneName3   sampleName1   Allel   allel2      ddd\n3  geneName4   sampleName1   Allel   allel2      aga2\n4  geneName1   sampleName2   Allel   allel2      tumorD\n5  geneName2   sampleName2   Allel   allel2      ad2\n6  geneName1   sampleName3   Allel   allel2      yyu\n7  geneName2   sampleName3   Allel   allel2      hhf\n8  geneName4   sampleName3   Allel   allel2      vgv\n9  geneName5   sampleName3   Allel   allel2      aga5\n"], ["import pandas as pd\n\nfile='*.txt' ##put your file path and filename here\nDATA = pd.read_csv(file, sep=\" \", header=None)\n\nnew_data=[]\n#print(DATA)\n#print(len(DATA))\nfor i in range(len(DATA)):\n    #print(DATA.loc[i][6])\n    if not DATA.isnull().loc[i,6]: \n        new_data.append(DATA.loc[i][6])\n    else:\n        new_data.append(DATA.loc[i][4])\nDATA['NewColumn'] = new_data\nDATA=DATA.drop(DATA.columns[[4,5,6]], axis=1)\nprint(DATA)\n"], [], ["new_df = dataframe[['nameOfGene','sampleNumber','Allel1','Allel2','descr']]\n"], ["cols = pd.read_csv(file, nrows=1).columns\ndf1 = pd.read_csv(file, usecols=cols[0:3])\ndf2 = pd.read_csv(file, usecols=cols[-2:-1])\ndf = pd.merge(df1, df2, how='left',left_index=True, right_index=True)\ndf\n"], ["def tofloat(price):\n    try: return float(price)\n    except ValueError: return price #we do this when price is not convertable to float\n", "result = [(item, tofloat(price)) for item, price in g]\n", "[('Books', 10.0), ('Pen', 10.0), ('test', 'a')]\n", "print([type(number) for item, number in result])\n", "[<class 'float'>, <class 'float'>, <class 'str'>]\n"], ["#switch it first\nself.driver.switch_to.frame(driver.find_element_by_id('J_loginIframe'))\nself.driver.find_element_by_id('fm-login-id').send_keys('iamgooglepenn')\nself.driver.find_element_by_id('fm-login-password').send_keys('HelloWorld1_')\n", "#submit button\nself.driver.find_element_by_css_selector('.fm-button.fm-submit.password-login').click()\n"], [], [], ["for x in result:\n", "newresult = []\nfor x in result:\n    if x[1].isalpha():\n        newresult.append(x)\n    elif x[1].isdigit():\n        newresult.append((x[0],int(x[1])))\n    else:\n        newresult.append((x[0],float(x[1])))\nprint(newresult)\n"], [], [], [], ["# Helper Function check if string is a number\ndef is_number(n:str):\n    try:\n        float(n)\n    except ValueError:\n        return False\n    return True\n\n# Filter the list of numbers using the following \n>>> g = [('Books', '10.000'),('Pen', '10'),('test', 'a')]\n>>> [float(char) if is_number(char) else char for char in map(lambda x:x[1],g)]\n>>> [10.0, 10.0, 'a']\n>>> # If only numbers are needed\n>>> [float(char) if is_number(char) for char in map(lambda x:x[1],g)]\n>>> [10.0, 10.0]\n"], ["list_ = [('Books', '10.000'),('Pen', '10'),('test', 'a')]\n\ndef fix_list(list_):\n    def check_and_convert(val_1, val_2):\n        try:\n            return val_1, float(val_2)\n        except:\n            return val_1, val_2\n\n    ret_list = []\n    for val_1, val_2 in list_:\n        ret_list.append(check_and_convert(val_1, val_2))\n    return ret_list\n\n\nprint(fix_list(list_))\n# >>> [('Books', 10.0), ('Pen', 10.0), ('test', 'a')]\n"], ["import re\n\nstring = 'tick_calculated_2_2020-05-27T11-59-06.json.gz'\n\nre.search(r'(?<=T\\d{2}-)\\d{2}-\\d{2}(?=\\.json)', string).group()\n", "59-06\n"], [], [], ["f = 'tick_calculated_2_2020-05-27T11-59-06.json.gz'\nsplitted = f.split('_')\nprint(splitted)\n\ndate = splitted[3].split('.')[0]\nspecialNum = date[-5:]\nprint(specialNum)\n"], [], ["mydict = {'a': ['apple', 'avocado'], \n          'b': ['banana', 'berry'], \n          'c': ['carrot', 'cucumber']}\n\nfruits = mydict['a'].copy()\nfruits.pop(0)\n\nprint(fruits) # returns ['avocado']\nprint(mydict) # returns {'a': ['apple', 'avocado'] ...}\n", "import copy\n\nmydict = {'a': ['apple', 'avocado'], \n          'b': ['banana', 'berry'], \n          'c': ['carrot', 'cucumber']}\n\nfruits = copy.copy(mydict['a']) # or copy.deepcopy(mydict['a'])\nfruits.pop(0)\n\nprint(fruits) # returns ['avocado']\nprint(mydict) # returns {'a': ['apple', 'avocado'] ...}\n", "import copy\n\nmydict = {'a': ['apple', 'avocado'], \n          'b': ['banana', 'berry'], \n          'c': ['carrot', 'cucumber']}\n\nfruits = copy.copy(mydict)\nfruits['a'].append('apricot') # also changes mydict\n\nprint(fruits) # returns {'a': ['apple', 'avocado', 'apricot'] ...}\nprint(mydict) # also returns {'a': ['apple', 'avocado', 'apricot'] ...}\n", "import copy\n\nmydict = {'a': ['apple', 'avocado'], \n          'b': ['banana', 'berry'], \n          'c': ['carrot', 'cucumber']}\n\nfruits = copy.deepcopy(mydict)\nfruits['a'].append('apricot') # also changes mydict\n\nprint(fruits) # returns {'a': ['apple', 'avocado', 'apricot'] ...}\nprint(mydict) # returns {'a': ['apple', 'avocado'] ...}\n"], ["import copy\nfruits = copy.deepcopy(my_dict[\"a\"])\n", "import copy\nfruits = copy.copy(my_dict[\"a\"])\n", "fruits = my_dict[\"a\"].copy()\n", "fruits = list(my_dict[\"a\"])\n"], ["fruits = [mydict[\"a\"][1]]\n"], [">>> mydict = {'a': ['apple', 'avocado'], \n              'b': ['banana', 'berry'], \n              'c': ['carrot', 'cucumber']}\n\n>>> fruits = mydict['a'].copy()\n>>> fruits.pop(0)\n", ">>> mydict\n\n{'a': ['apple', 'avocado'],\n 'b': ['banana', 'berry'],\n 'c': ['carrot', 'cucumber']}\n\n>>> fruits\n\n['avocado']\n"], ["fruit = mydict['a'][0]\n"], ["df['Name'].str.replace('\"|(\\s@\\s\\w+)','', regex=True)\n", "0    George sold\nName: Name, dtype: object\n", "df['Name'].str.replace('\"|(\\s@\\s\\w*[-]?\\w+)','')  \n", "                         Name\n0  \"George @ ACkDk02gfe\" sold\n1    \"Mike @ AisBcIy-rW\" sold\n", "0    George sold\n1      Mike sold\nName: Name, dtype: object\n"], ["import pandas as pd\n\n# set up the df\ndf = pd.DataFrame.from_dict(({'Name': '\"George @ ACkDk02gfe\" sold'},))\n\n# use a raw string for the pattern\ndf['Name'] = df['Name'].str.replace(r'^\"(\\w+)\\s@.*?\"', '\\\\1')\n"], ["df.Name=df.Name.str.split('\\s\\@\\s\\w+\\s').str.join(' ')\n\n\n\n 0    George sold\n"], ["import re\nss = '\"George @ ACkDk02gfe\" sold'\nss = re.sub('\"', \"\", ss)\nss = re.sub(\"\\@\\s*\\w+\", \"\", ss)\nss = re.sub(\"\\s*\", \" \", ss)\n\nGeorge sold\n"], ["import re\n                      Name\n\n\"George @ ACkDk02gfe\" sold\n\ndf['Name'] = re.sub(r\"@.*$\", \"\", df['Name'])\n"], ["df['Name'] = df['Name'].str.split(' ').str[0].str[1:] + ' ' + df['Name'].str.split(' ').str[-1]\n", "George sold\n"], ["import re\ntext = 'The puppy is cute. Summer is great. Happy friday. sentence4. sentence5. sentence6. sentence7.'\n\nprint(re.sub(r'((?:[^.]+\\.\\s*){5})',r'\\1\\n',text))\n", "import re\nsentence_regex = r'((.*?([\\.\\?!][\\'\\\"\\u2018\\u2019\\u201c\\u201d\\)\\]]*\\s*(?<!\\w\\.\\w.)(?<![A-Z][a-z][a-z]\\.)(?<![A-Z][a-z]\\.)(?<![A-Z]\\.)\\s+)){5})'\ntext = 'The puppy is cute. Watch T.V.  Mr. Summers is great. Say \"my name.\"  My name is.  Or not... Happy friday? Sentence4. Sentence5. Sentence6. Sentence7.'\ntext += \" \" + text\n\nprint(re.sub(sentence_regex,r'\\1\\n',text))\n"], ["def new_line(sentence: str):\n    # characters that mark the end of a sentence\n    end_of_sentence_markers = ['.', '!', '?', '...']\n    # after n sentences insert new_line\n    n = 5\n\n    # keeps track \n    count = 0\n    # final string as list for efficiency\n    final_str = []\n    # split at space\n    sentence_split = sentence.split(' ')\n\n    # traverse the sentence split\n    for word in sentence_split:\n        # if end of sentence is present then increase count\n        if word[-1] in end_of_sentence_markers:\n            count += 1\n        # if count is equal to n then add newline otherwise add space\n        if count == n:\n            final_str.append(word + '\\n')\n            count = 0\n        else:\n            final_str.append(word + ' ')\n\n\n    # return the string version of the list\n    return ''.join(final_str)\n", "def new_line_better(sentence: str, n: int):\n    # final string as list for efficiency\n    final_str = []\n    # split at period and remove extra spaces\n    sentence_split = list( map( lambda x : x.strip(),  sentence.split('.') ) )\n    # pop off last space\n    sentence_split.pop()\n    \n    # keeps track \n    count = 0\n    # traverse the sentences\n    for sentence in sentence_split:\n        count += 1\n        if count == n:\n            count = 0\n            final_str.append(sentence+'.\\n')\n        else:\n            final_str.append(sentence+'. ')\n\n    # return the string version of the list\n    return ''.join(final_str)\n"], ["text = 'The puppy is cute. Summer is great. Happy friday. sentence4. sentence5. sentence6. sentence7.'\nlines = text.split(\".\")\nresult = \".\".join([l if i % 5 else \"\\n\"+l for (i, l) in enumerate(lines)]).lstrip()\nprint(result)\n"], ["text = 'The puppy is cute. Summer is great. Happy friday. sentence4. sentence5. sentence6. sentence7.'\n\nout = ''\nfor i, e in enumerate(text.split(\".\")):\n    if (i > 0)  & (i % 5 == 0):\n        out = out + '\\n'\n    out = out + e + '.'\nout\n", "'The puppy is cute. Summer is great. Happy friday. sentence4. sentence5.\\n sentence6. sentence7..'\n"], ["text = 'The puppy is cute. Summer is great. Happy friday. sentence4. sentence5. sentence6. sentence7.'\nsplittext = text.split(\".\")\nfor x in range(5, len(splittext), 5):\n    splittext[x] = \"\\n\"+splittext[x].lstrip()\ntext = \".\".join(splittext)\nprint(text)\n"], ["g = [('Books', float('10.000')),('Pen', float('10')),('test', 'a')]\n"], ["{\"string_1\": \"Mary had a little lamb which was as white as snow\", \"string_2\": \"Jack and jill went up a hill to fetch a pail of water\"}\n", "[\"Mary had a little lamb which was as white as snow\", \"Jack and jill went up a hill to fetch a pail of water\"]\n"], ["total_str = [string_1,string_2]  \nwith open(file_path+\"file_name.txt\",\"w\") as fp:  \n     for i in total_str:\n         fp.write(i+'\\n')\n     fp.close()\n"], [], ["string_1 = \"\"\"Mary had a little lamb\nwhich was as white\nas snow\"\"\"\n\nstring_2 = \"\"\"Jack and jill\nwent up a hill \nto fetch a pail of\nwater\"\"\"\nwith open(\"myfile.txt\", \"w\") as f:\n    f.write(\" \".join(string_1.split(\"\\n\")) + \"\\n\")\n    f.write(\" \".join(string_2.split(\"\\n\")) + \"\\n\")\nwith open(\"myfile.txt\") as f:\n    print(f.read())\n", "Mary had a little lamb which was as white as snow\nJack and jill went up a hill  to fetch a pail of water\n"], ["In [36]: string_1 = \"Mary had a little lamb which was as white as snow\"\n    ...:\n    ...: string_2 = \"Jack and jill went up a hill to fetch a pail of water\"\nIn [37]: s = [string_1, string_2]\n\nIn [38]: with open(\"a.txt\",\"w\") as f:\n    ...:     f.write(\" \".join(s))\n    ...:\n"], ["from pathlib import Path\n\ndirectory_name = Path('new_dir')\nroot = Path('dir1/dir2/')\nfile_path0 = Path('dir1/dir2/dir3/dir4/file.txt')\n\n# non-root component of path\nchld = file_path0.relative_to(root)\nfile_path1 = root / directory_name / chld\nprint(file_path1)\n"], ["from backoff_utils import backoff, apply_backoff, strategies\n\n@apply_backoff(strategies.Fixed, max_tries = 3, catch_exceptions = [type(ValueError)])\ndef main2():\n    # np.load('File2.csv')\n    raise ValueError\n    print(\"In main2\")\n", "result = backoff(main2,\n                 max_tries = 3,\n                 catch_exceptions = [type(ValueError)],\n                 strategy = strategies.Fixed)\n"], ["def convert_to_proper_type(value):\n    if value.isalpha():\n        value = str(value)\n    elif value.isdigit():\n        value = int(value)\n    else:\n        value = float(value)\n    return value\n\nresult = [('Books', '10.000'),('Pen', '10'),('test', 'a')]\nnewresult = []\n\nfor (value_one, value_two) in result:\n    # If all chars in both are alphabets\n    value_one = convert_to_proper_type(value_one)\n    value_two = convert_to_proper_type(value_two)\n    newresult.append((value_one, value_two))\n\nprint(newresult)\n# [('Books', 10.0), ('Pen', 10), ('test', 'a')]\n"], ["strings = ['hello everyone!', 'how are you doing?', 'are you doing well?', 'are you okay?', 'good, me too.']\nkeywords = ['are', 'you', 'doing']\n\nfor s in strings:\n    for word in s.split():\n        if word in keywords:\n            print(s) \n            break\n"], ["newresult = []\nfor tuple in result:\n    temp = []\n    for x in tuple:\n        if x.isalpha():\n            temp.append(x)\n        elif x.isdigit():\n            temp.append(int(x))\n        else:\n            temp.append(float(x))\n    newresult.append((temp[0],temp[1]))\nprint(newresult)\n", " //input \n result= [('Books', '10.000'),('Pen', '10'),('test', 'a')]\n //output\n [('Books', 10.0), ('Pen', 10), ('test', 'a')]\n"], ["strings = ['hello everyone!', 'how are you doing?', 'are you doing well?', 'are you okay?', 'good, me too.']\nsearching_for = ['are', 'you', 'doing']\n\nprint('Output:', [item for item in strings if any([word in item for word in searching_for])])\n#Output: ['how are you doing?', 'are you doing well?', 'are you okay?']\n"], ["all(True)\n# TypeError: 'bool' object is not iterable\n", "def search(*args):\n    arg_list = []\n    search_for = numpy.append(arg_list, args)\n    \n    for i in strings:\n        if all(j in i for j in search_for):\n            print(i)\n", "def search(args):\n    for i in strings:\n        if all(j in i for j in args):\n            print(i)\n", "search(searching_for)\n# how are you doing?\n# are you doing well?\n"], ["result = [s for s in strings if all(sf in s for sf in searching_for)]\n# ['how are you doing?', 'are you doing well?']\n"], ["for st in strings:\n    if set(searching_for).issubset(set(st[:-1].split())):\n        print(st)\n"], ["print([i for i in strings if all([s in i for s in searching_for])])\n", "['how are you doing?', 'are you doing well?']\n"], ["print([(key,float(str(value).replace('.',''))) for key, value in data])\n# [('Books', 10000.0), ('Pen', 10.0)]\n", "print([(key, float(str(value))) for key, value in data])\n# [('Books', 10.0), ('Pen', 10.0)]\n"], [], [], ["# 1. Expand columns and count them\ndf_temp = df[\"colors\"].apply(pd.Series.value_counts)\n\n    blue    brown   green   purple  red\n0   1.0 1.0 1.0 NaN NaN\n1   NaN NaN NaN NaN NaN\n2   1.0 NaN 1.0 NaN 1.0\n3   NaN NaN NaN 1.0 NaN\n4   NaN 1.0 NaN NaN NaN\n\n# 2. Get the value counts from this:\ndf_temp.sum()\n\nblue      2.0\nbrown     2.0\ngreen     2.0\npurple    1.0\nred       1.0\n\n# Alternatively, convert to a dict\ndf_temp.sum().to_dict()\n# {'blue': 2.0, 'brown': 2.0, 'green': 2.0, 'purple': 1.0, 'red': 1.0}\n"], ["colors = df.colors.tolist()\nd = {}\nfor l in colors:\n    for c in l:\n        if c not in d.keys():\n            d.update({c: 1})\n        else:\n            current_val = d.get(c)\n            d.update({c: current_val+1})\n", "{'blue': 2, 'green': 2, 'brown': 2, 'red': 1, 'purple': 1}\n"], ["import pandas as pd\nfrom collections import Counter\nfrom  itertools import chain\n\ndf = pd.DataFrame({'colors':[['blue','green','brown'],\n                             [],\n                             ['green','red','blue'],\n                             ['purple'],\n                             ['brown']]})\n\ndf = pd.Series(Counter(chain(*df.colors)))\n\nprint (df)\n", "blue      2\ngreen     2\nbrown     2\nred       1\npurple    1\ndtype: int64\n"], ["import pandas as pd\nfrom collections import Counter\nfrom itertools import chain\n\ns = pd.Series([['blue','green','brown'], [], ['green','red','blue']])\n\npd.Series(Counter(chain.from_iterable(s)))\n#blue     2\n#green    2\n#brown    1\n#red      1\n#dtype: int64\n", "import perfplot\nimport pandas as pd\nimport numpy as np\n\nfrom collections import Counter\nfrom itertools import chain\n\ndef counter(s):\n    return pd.Series(Counter(chain.from_iterable(s)))\n\ndef explode(s):\n    return s.explode().value_counts()\n\nperfplot.show(\n    setup=lambda n: pd.Series([['blue','green','brown'], [], ['green','red','blue']]*n), \n    kernels=[\n        lambda s: counter(s),\n        lambda s: explode(s),\n    ],\n    labels=['counter', 'explode'],\n    n_range=[2 ** k for k in range(17)],\n    equality_check=np.allclose,  \n    xlabel='~len(s)'\n)\n"], ["lst = []\nwith open(\"textfile.txt\", \"r\") as file:\n  for line in file:\n    stripped_line = line.strip()\n    #to save it as a list\n    lst.append(stripped_line.split(\",\")[1:-1])\nprint(lst)\n\n#to print each of the element\nfor i in lst:\n    print(\",\".join(i))\n"], ["with open('filename.txt', 'r') as my_file:\n    line = my_file.readline()\n    while line:\n        word_list = line.split(',')\n        print(f'{word_list[1]}, {word_list[2]}')\n        line = my_file.readline()\n    \n"], ["# You could open your file like this\n#file1 = open('myfile.txt', 'r') \n\n# For now I am assuming your file contains the following line of data. \n# You could uncomment above line and use.\n\nfile1 = ['president, Donald Trump, 74, USA','president, Donald Trump, 74, USA']\nfor line in file1: \n    print(\"\".join(line.split(',')[1:3]))\n", "Donald Trump, 74\nDonald Trump, 74\n", " ['president', ' Donald Trump', ' 74', ' USA']\n"], ["Donald Trump, 74\nBoris Johnson, 56\n"], ["with open('filename.txt', 'r') as rf:\n    lines = rf.readlines()\n", "for line in lines:\n    line = line.strip()\n    row  = \"{}, {}\".format(line.split(',')[1], line.split(',')[2])\n    print(row)\n"], ["s = 0\nfor item in list(map(int, input ().split())):\n   s += item\n", "s = 0\nlen = int(input())\nli = [int(input ()) for _ in range(len)]\nfor item in li: \n    s  = s + item\n"], [], [], ["l=[]\nlength=int(input())\nfor i in length:\n     l.append(int(input())\nsum=0\nfor num in l:\n     sum=sum+num\n"], ["length = int(input())\nli = list(range(length))\n\nfor i in range(0, length):\n    li[i] = int(input())\n    \nsum = 0\nfor item in li:\n    sum = sum + item\n", "length = int(input())\nli = []\n\nfor i in range(0, length):\n    li.append(int(input()))\n    \ntotal = sum(li)\nprint(total)\n"], ["file = open(\"file.txt\", \"a+\")\nfile.seek(0)\nlines = [line.strip() for line in file.readlines()]\nprint(lines)\n\nvalue = '345'\nif value in lines:\n    print('val ready exists in file')\nelse:\n    print(\"else\")\n    # write to file\n    file.write(value)\nfile.close()\n"], ["value = \"345\"\nwith open(\"file.txt\", \"a+\") as file:\n    file.seek(0)\n    for line in file.readlines():\n        if line.strip(\"\\n\") == value:\n            print('val ready exists in file')\n            break\n    else:\n        # write to file\n        file.write(f\"\\n{value}\")\n"], [], ["f_name = \"file.txt\"\ntext = \"102\"\ndef check_in_file(file_name, value):\n    with open(file_name, 'r') as read_obj:\n        for line in read_obj:\n            if value in line:\n                return True\n    return False\nif check_in_file(f_name, text):\n    print('Yes, string found in file')\nelse:\n    print('String not found in file')\n    file = open(f_name, 'a')\n    file.write(\"\\n\"+text)\n    file.close()\n"], ["value = '345'\nwith open(\"file.txt\", \"a+\") as file:\n    file.seek(0) # set position to start of file\n    lines = file.read().splitlines() # now we won't have those newlines\n    if value in lines:\n        print('val ready exists in file')\n    else:\n        # write to file\n        file.write(value + \"\\n\") # in append mode writes will always go to the end, so no need to seek() here\n"], ["values=['123','233'...]\ntry:\n    with open(\"file.txt\", \"r+\") as fp:\n        for line in fp:\n            for val in values:\n                if val not in line.strip():\n                    fp.write(val)\n                else:\n                    print('val ready exists in file')\nexcept (OSError,...): #catch what ever you think this code above can raise, and re raise in except block if you want.\n#do exception handling\n"], ["filename = 'file.txt'\nvalue = '345'\n\nwith open(filename) as f:\n    if value in f.read(): # read if value is in file \n        print('Value is in the file')\n", "filename = 'file_1.txt'\nvalue = '999'\n\nwith open(filename, 'r+') as f:\n    if value in f.read():\n        print(f\"Value {value} is in the file\")\n    else:\n        print(\"The value not in the file.\\nTherefore, saving the value in the file.\")\n        f.write(f\"{value}\\n\")\n"], [], ["filename = 'guest_book.txt'\n\nprint(\"Enter 'quit' when you are finished.\")\nwhile True:\n    name = input(\"\\nWhat's your name? \")\n    if name == 'quit':\n        break\n    else:\n        with open(filename, 'a') as f:\n            f.write(name + \"\\n\")\n        print(f\"Hi {name}, you've been added to the guest book.\")\n"], ["filename = 'guest_book.txt'\nprompt = \"Input your name to be saved in guest book: \"\nactive = True\n\nwith open(filename, 'w') as f:\n    while active:\n        message = input(prompt)\n\n        if message == 'quit':\n            active = False\n        else:\n            f.write(message + '\\n')\n            print(message)\n"], [], ["filename = 'guest_book.txt'\nname = ''\n\nwith open(filename, 'w') as f:\n    while name != 'quit':\n        name = input('Input your name to save in the file: ')\n        if(name == 'quit'):\n            break\n        f.write(name + '\\n')\n"], ["filename = 'guest_book.txt'\nprompt = \"Input your name to be saved in guest book: \"\nactive = True\n\nwith open(filename, 'w') as f:\n    while active:\n        message = input(prompt)\n\n        if message == 'quit':\n            break\n        else:\n            print(message)\n        \n        f.write(message + '\\n')\n"], ["import tensorflow as tf   \ntf.get_logger().setLevel('ERROR')\n"], ["for first_value, second_value in result:    \n    if isinstance(second_value, int):\n        ...\n    else isinstance(second_value, float):\n        ...\n \n"], ["data = [('Books', '10.000'),('Pen', 10)]\nprint([(a,float(b)) for a,b in data]) \n"], [], [], ["alias python=\"/usr/bin/python3.3\"\npython\nPython 3.3.3 (v3.3.3:c3896275c0f6, Nov 16 2013, 23:39:35) \n", "echo \"alias python=/usr/bin/python3.3\" >> ~/.bashrc \n"], ["$:~# update-alternatives --config python\nThere are 4 choices for the alternative python (providing /usr/local/bin/python).\n\n  Selection    Path                Priority   Status\n------------------------------------------------------------\n  0            /usr/bin/python3     4         auto mode\n  1            /usr/bin/python2.7   2         manual mode\n* 2            /usr/bin/python3     4         manual mode\n  3            /usr/bin/python3.7   3         manual mode\n  4            /usr/bin/python3.8   4         manual mode\n\nPress <enter> to keep the current choice[*], or type selection number: 4\nupdate-alternatives: using /usr/bin/python3.8 to provide /usr/local/bin/python (python) in manual mode\n", "root@kali:~# python --version\nPython 3.8.2\n"], [], [], ["range(start,stop,step)\n", "for(int i=0;i<20;i*=2)  // C/C++ loop\n\n# Python - 1\ni = 0\nwhile i < 20 :    # Equivalent python loop\n    # Code here\n    i*=2\n", "// C/C++\nbool flag = true; \nfor(int i=0;i<20&&flag;i*=2)  // C/C++ loop\n\n# Python - 1\ni,flag = 1,True\nwhile not flag and i < 20 :    # Equivalent python loop\n    # Code here\n    i*=2 \n"], ["boolean_flag = True\ni = 1 # actually I wouldn't use i as a variable name, but whatever.\nwhile i < 20 and boolean_flag:\n    # code goes here\n    i *= 2\n", "from itertools import takewhile, count\n\nboolean_flag = True\nfor i in takewhile(lambda i: i < 20, map(lambda x: 2**x, count())):\n    # code goes here\n    if not boolean_flag:\n        break\n", "boolean_flag = something()\nsomething_that_has_to_happen_after_regardless_of_flag_value()\nif not boolean_flag:\n    break\n", "for i in (2**x for x in range(10)):\n    if not i < 20:\n        break\n", "for x in range(10):\n    i = 2 ** x\n    if not (i < 20 and boolean_flag):\n        break\n"], [">>> factors = df2.set_index('name').loc[df1['name'], 'multiplier'].values\n>>> df1['number'] *= factors\n>>> df1\n   id name  number\n0   1   aa       6\n1   2   aa      12\n2   3   bb       8\n3   4   bb      32\n4   5   cc      18\n"], ["df1.set_index('name', inplace=True)\ndf2.set_index('name', inplace=True)\ndf1['product'] = df1['number'].multiply(df2['multiplier'])\ndf1\n", "    id  number  product\nname            \naa  1   3   6\naa  2   6   12\nbb  3   2   8\nbb  4   8   32\ncc  5   3   18\n", "df1.reset_index()\n", "    name    id  number  product\n0   aa      1   3       6\n1   aa      2   6       12\n2   bb      3   2       8\n3   bb      4   8       32\n4   cc      5   3       18\n"], [], ["df = df1.merge(df2, on=['name'])\ndf['product'] = df['number'] * df['multiplier']\nprint(df[['name', 'number', 'product']])\n\n  name  number  product\n0   aa       3        6\n1   aa       6       12\n2   bb       2        8\n3   bb       8       32\n4   cc       3       18\n"], ["first['product'] = (first.set_index('name')['number'] * \\\n                    second.set_index('name')['multiplier'])\\\n                   .reset_index()[0]\n"], ["fruits = [\"apple\", \"banana\", \"cherry\"]\nfor x in fruits:\n  print(x)\n", "apple\nbanana\ncherry\n", "fruits = [\"apple\", \"banana\", \"cherry\"]\nfor x in fruits:\n  if x == \"banana\":\n    continue\n  print(x)\n", "bool(False)\nbool(None)\nbool(0)\nbool(\"\")\nbool(())\nbool([])\nbool({})\n", "class myclass():\n  def __len__(self):\n    return 0\n\nmyobj = myclass()\nprint(bool(myobj))\n"], ["for (String name: TreeSet<String>(nameList) ) {\n   //Your code here\n}\n"], ["i = 1\nwhile i < 100\n  if i % 2 == 0:\n    i *= 2\n  else:\n    i += 1\n"], ["max = 20\nfor i in range(0, max/2):\n    c = i * 2\n    if flag:\n        #Do work.\n        break\n", "max = 20\nfor i in range(0, max, 2):\n    if flag:\n        #Do work.\n        break\n"], ["boolean_flag = True\n\ni = 1\nwhile (i < 20 and boolean_flag):\n    i *= 2\n    # Code in here\n"], ["i = 1\nwhile flag and i < 20:\n    # code here\n    i = i*2\n"], ["flag = True\ni = 1\nwhile i < 20:\n    if not flag:\n        break\n    ...\n    if some_condition:\n        flag = False\n    i *= 2\n", "i = 1\nwhile i < 20:\n    ...\n    if some_condition:\n        break\n    i *= 2\n", "def powers_of_two():\n    i = 1\n    while True:\n        yield i\n        i *= 2\n\n\nfor i in powers_of_two():\n    ...\n    if some_condition:\n        break\n    \n"], [], [], [], ["python -m jupyter notebook\n", "echo $PATH\n/usr/local/bin:/usr/bin:/bin\n", "export PATH=$PATH:/mynewpath\n", "pip3 show jupyter\n"], [], [], ["arr = [1, 2, 3, 4, 5, 6, 7, 8]\nwindow = 3\nfor backward, current in enumerate(range(len(arr)), start = 0-window):\n    if backward < 0:\n        backward = 0\n    print(arr[current+1:current+1+window], arr[backward:current])\n", "[2, 3, 4], []\n[3, 4, 5], [1]\n[4, 5, 6], [1, 2]\n[5, 6, 7], [1, 2, 3]\n[6, 7, 8], [2, 3, 4]\n[7, 8], [3, 4, 5]\n[8], [4, 5, 6]\n[], [5, 6, 7]\n", "print(dict([(e, (lst[i+1:i+4], lst[max(i-3,0):i])) for i,e in enumerate(last)]))\n", "{1: ([2, 3, 4], []),\n 2: ([3, 4, 5], [1]),\n 3: ([4, 5, 6], [1, 2]),\n 4: ([5, 6, 7], [1, 2, 3]),\n 5: ([6, 7, 8], [2, 3, 4]),\n 6: ([7, 8], [3, 4, 5]),\n 7: ([8], [4, 5, 6]),\n 8: ([], [5, 6, 7])}\n"], ["with open(r'test1.txt','r') as file:\n    data=file.read().split('\\n\\n')\ndata=[i.split('\\n') for i in data]\ndf=pd.DataFrame(data,columns=['Year','Name','Stamina','Agility','Str','Res'])\n\nprint(df)\n", "   Year        Name  ...              Str                    Res\n0  2020   Grum Grum  ...  Strength: 20.5%  Resistances: 20-21-30\n1  2020  Mondo Silo  ...  Strength: 10.5%  Resistances: 20-21-20\n2  2020   Grum Grum  ...  Strength: 20.5%  Resistances: 20-21-30\n3  2020  Mondo Silo  ...  Strength: 10.5%  Resistances: 20-21-20\n", "import pandas as pd\n\nfiles=['test1.txt','test2.txt']                     #list of files\n\ndf=pd.DataFrame(columns=['Year','Name','Stamina','Agility','Str','Res'])  #create the dataframe\n\nfor file in files:                                  #we open each file\n    with open(r'path_of_files'+file,'r') as file_r:   \n        data=file_r.read().strip().split('\\n\\n')\n        data=[i.split('\\n') for i in data if i!=''] #get the rows\n        print(data)\n        s = pd.DataFrame(data, columns=df.columns)  \n        df =pd.concat([df, s], ignore_index=True)   #we append the new rows to the dataframe\n        \n        \nprint(df)\ndf.to_csv(r'test3.txt', sep='|', index=False)       #write the final dataframe to the output file('test3.txt'), with '|' as separator \n", "import pandas as pd\n\nfiles=['test1.txt','test2.txt']                      #list of files\n\nfor file in files:                                   #we open each file\n    with open(r'path_of_files'+file,'r') as file_r, open(r'test3.txt', 'a') as fout:\n        data=file_r.read().strip().split('\\n\\n')\n        data=[i.split('\\n') for i in data if i!='']\n        df=pd.DataFrame(data,columns=['Year','Name','Stamina','Agility','Str','Res'])   #create a dataframe with the data of the current file\n        if files.index(file)==0:\n            fout.write(df.to_string( index = False)) #we let header=true to the first iteration to write the columns, and also write the data\n        else:\n            fout.write(df.to_string(header = False, index = False))  #we write the dataframe without the index and the columns names\n        fout.write('\\n')                             #a newline to place correctly the next rows\n", "2020\nGrum Grum\nStamina: 20\nAgility: 23\nStrength: 20.5%\nResistances: 20-21-30\n\n2020\nMondo Silo\nStamina: 23\nAgility: 13\nStrength: 10.5%\nResistances: 20-21-20\n", "2020\nGrum Grum\nStamina: 20\nAgility: 23\nStrength: 20.5%\nResistances: 20-21-30\n\n2020\nMondo Silo\nStamina: 23\nAgility: 13\nStrength: 10.5%\nResistances: 20-21-20\n\n2020\nMondo Silo\nStamina: 23\nAgility: 13\nStrength: 10.5%\nResistances: 20-21-20\n\n2020\nMondo Silo\nStamina: 23\nAgility: 13\nStrength: 10.5%\nResistances: 20-21-20\n", "Year|Name|Stamina|Agility|Str|Res\n2020|Grum Grum|Stamina: 20|Agility: 23|Strength: 20.5%|Resistances: 20-21-30\n2020|Mondo Silo|Stamina: 23|Agility: 13|Strength: 10.5%|Resistances: 20-21-20\n2020|Grum Grum|Stamina: 20|Agility: 23|Strength: 20.5%|Resistances: 20-21-30\n2020|Mondo Silo|Stamina: 23|Agility: 13|Strength: 10.5%|Resistances: 20-21-20\n2020|Mondo Silo|Stamina: 23|Agility: 13|Strength: 10.5%|Resistances: 20-21-20\n2020|Mondo Silo|Stamina: 23|Agility: 13|Strength: 10.5%|Resistances: 20-21-20\n", " Year        Name      Stamina      Agility              Str                    Res\n 2020   Grum Grum  Stamina: 20  Agility: 23  Strength: 20.5%  Resistances: 20-21-30\n 2020  Mondo Silo  Stamina: 23  Agility: 13  Strength: 10.5%  Resistances: 20-21-20\n 2020   Grum Grum  Stamina: 20  Agility: 23  Strength: 20.5%  Resistances: 20-21-30\n 2020  Mondo Silo  Stamina: 23  Agility: 13  Strength: 10.5%  Resistances: 20-21-20\n 2020  Mondo Silo  Stamina: 23  Agility: 13  Strength: 10.5%  Resistances: 20-21-20\n 2020  Mondo Silo  Stamina: 23  Agility: 13  Strength: 10.5%  Resistances: 20-21-20\n"], ["import pandas as pd\n\nt = open('filepath', 'r').read()\ndata = [[a for a in x.split('\\n') if a] for x in t.split('\\n\\n')]\ndatadf = pd.DataFrame(data)\nprint(datadf)\n"], ["import xlsxwriter\n\nitems = []\n\n# parse through .txt file\nwith open('file.txt', 'r') as r:\n    text = list(r.read().splitlines())\n    while text.count('') != 0:\n        text.remove('')\n    x = 0\n    while True:\n        items.append([])\n        for num in range(0, 6):\n            items[x].append(text[0])\n            text.remove(text[0])\n        x += 1\n        if len(text) == 0:\n            break\n    print(items)\n\n\n# Starting worksheet\nworkbook = xlsxwriter.Workbook('example.xlsx')\nworksheet = workbook.add_worksheet()\n\nrow = 0\n\n# Writing column titles\ntitles = ['Year', 'Name', 'Stamina', 'Agility', 'Str', 'Res']\nfor i in range(0, 6):\n    worksheet.write(row, i, titles[i])\n\n# fills in data from parsed .txt file\nx, row = 0, 1\nwhile True:\n    for i in range(0, 6):\n        cur = items[x][0]\n        worksheet.write(row, i, cur)\n        items[x].remove(cur)\n    print(items)\n    row += 1\n    x += 1\n    print('hi')\n    if len(items) == x:\n        break\n\n# Closes workbook\nworkbook.close()\n"], ["file=pd.read_csv('filename.txt',sep=\" \",header=None,error_bad_lines=False)\n\nor \n\nfile =pd.read_fwf('filename.txt')\n"], ["2020 | Grum Grum | Stamina: 20 | Agility: 23 | Strength: 20.5% | Resistances: 20-21-30\n2020 | Mondo Silo | Stamina: 23 | Agility: 13 | Strength: 10.5% | Resistances: 20-21-20\n"], [], [], ["Ignoring exception in on_message\nTraceback (most recent call last):\n  File \"C:\\Users\\Joshu\\PycharmProjects\\Discord_Bots\\Ranma\\venv\\lib\\site-packages\\discord\\client.py\", line 312, in _run_event\n    await coro(*args, **kwargs)\n  File \"C:\\Users\\Joshu\\PycharmProjects\\Discord_Bots\\Ranma\\ranma\\cogs\\Events.py\", line 159, in on_message\n    await message.channel.send(embed=embed)\n  File \"C:\\Users\\Joshu\\PycharmProjects\\Discord_Bots\\Ranma\\venv\\lib\\site-packages\\discord\\abc.py\", line 856, in send\n    data = await state.http.send_message(channel.id, content, tts=tts, embed=embed, nonce=nonce)\n  File \"C:\\Users\\Joshu\\PycharmProjects\\Discord_Bots\\Ranma\\venv\\lib\\site-packages\\discord\\http.py\", line 225, in request\n    raise HTTPException(r, data)\ndiscord.errors.HTTPException: 400 Bad Request (error code: 50035): Invalid Form Body\nIn embed.fields.0.value: This field is required\n"], ["for filename in os.listdir(\"./cogs\"):\n    if filename.endswith(\".py\"):\n        client.load_extension(f\"cogs.{filename[:-3]}\")\n"], [], ["print(\"Finding the sum of numbers from x to y\")\nprint(\"Please specify x & y(x<=y):\")\nx = int(input(\" x:\"))\ny = int(input(\" y:\"))\nnumbers = [x]\nresult = f\"Sum: {x}\"\n\nfor i in range(1,y-x+1):\n    numbers.append(x+i)\n    result += f\"+({x}+{i})\"\n    \nprint(f\"{result} = {sum(numbers)}\")\n", "Finding the sum of numbers from x to y\nPlease specify x & y(x<=y):\n x:1\n y:10\nSum: 1+(1+1)+(1+2)+(1+3)+(1+4)+(1+5)+(1+6)+(1+7)+(1+8)+(1+9) = 55\n", "Finding the sum of numbers from x to y\nPlease specify x & y(x<=y):\n x:2\n y:6\nSum: 2+(2+1)+(2+2)+(2+3)+(2+4) = 20\n"], ["def func(x,y):\n    sum = 0\n\n    #Loop for adding\n    for i in range(x,y+1):\n        sum+=i\n\n    #Loop for printing\n    for i in range(x,y+1):\n        if i == y:\n            print(i,end = '')\n        else: print(i,\" + \",end = '')\n    print(\" = \",sum)\n"], ["x = 3\ny = 6\n\nfor i in range(x, y+1):\n    opt_str += str(i) + \"+\"\n    sum += i\n\nprint(opt_str[:-1] + \"=\" + str(sum))\n", "3+4+5+6=18\n"], ["num = 3\nsum = 0\n\nfor i in range(1,num+1):\n    sum += i\n    if i>1:\n        print (\"+\", end='')\n    print(i, end='')\nprint(\"=%d\" % sum)\n"], ["def problem1_3(n):\n   return n + problem1_3(n-1) if n > 1 else 1\n", "n = 0\nsum = 10\nfor num in range(0, n+1, 1):\n   sum = sum+num\nprint(\"SUM of first \", n, \"numbers is: \", sum )\n", "SUM of first  10 numbers is:  55\n"], ["n1 = 1\nn2 = 3\n\nli = str(n1)+\"\".join([\"+\"+str(i) for i in range(n1+1,n2+1)])+\"=\"+str(sum(range(n1,n2+1)))\nprint (li)\n", "1+2+3=6 \n"], ["lst = [{...}, {...}, {...}, {...}, ...]\n\nf = ['name']\nfor d in lst: # For every dict in the list\n    for k in d: # For every key in the dict\n        if k not in f: # If the key is not in the list f\n            # Do something\n            f.append(k) # Add that key to f so the program won't iterate through it again\n", "lst = [{...}, {...}, {...}, {...}, ...]\n\nfor d in lst: # For every dict in the list\n    for k in d: # For every key in the dict\n        if k != 'name': # If the key is not 'name'\n            # Do something\n"], [], [], ["keys = (key for key in list_of_dicts[0] if key != 'name')\n", "for var in keys:\n    print(var)\n"], ["for key in list_of_dicts[0]:\n    if key != 'name':\n        print(key)\n"], ["for element in data:\n   for key, value in element.items():\n      print(f\"This is the key: {key} and this is the value: {value}\")\n"], [], [">>> import numpy as np\n>>> np.fv(.04/12, 10*12, -1000, 0)\n147249.8047254786\n", ">>> np.fv(.04/12, 10*12, -1000, -100000)\n296333.07296730485\n"], ["print(\"This is how much money you will have after {} years:\".format(years), str(round(final_amount,2)))\n"], [], [], ["nums = list(range(10, 2, -3)[:2]) + ([5] )    \nprint(nums)\n[10, 7, 5]\n"], ["# nums = list(range(   ?  ,  ?  ,      ?       ))\nnums   = list(range(  10  ,  4  ,  -3))+(([5]  ))\nprint(nums)\n# nums = [10,7,5]\n"], ["range = lambda x, y, z: [10, 7, 5]\nlist = lambda x: [10, 7, 5]\nprint = lambda x: sys.stdout.write([10, 7, 5])\n"], ["import numpy as np\n\nnums = np.arange(10, 3, -2.6)\nprint(np.rint(nums))\n"], ["d1 = {'y2001': [120], \"y2002\": [120]}\nd2 = {'y2001': [3513], \"y2002\": [3411]}\nd3 = {'land_cover': d1, \"ndvi\": d2}\ndf = pd.DataFrame(data=d3, columns=['land_cover', 'ndvi'])\n\n      land_cover    ndvi\ny2001      [120]  [3513]\ny2002      [120]  [3411]\n\n", "df = df.T\n             y2001   y2002\nland_cover   [120]   [120]\nndvi        [3513]  [3411]\n", "oldcols = list(df.columns.values)\nnewcols = [w.replace('y', '') for w in oldcols]\nprint(oldcols)\ncol_dict = dict(zip(oldcols, newcols))\ndf = df.rename(columns=col_dict)\n\n              2001    2002\nland_cover   [120]   [120]\nndvi        [3513]  [3411]\n", "df = df.applymap(lambda x: int(x[0]))\n\n            y2001  y2002\nland_cover    120    120\nndvi         3513   3411\n"], ["df.loc[:,1] = [{ k[1:]:v[0] for  k, v in row.items()} for row in df[1]]\n"], [], ["d.index=pd.Index([2001,2002,...])\n", "d['land_cover'].values\n", "d['land_cover'].values[0]=120\n"], ["df = pd.DataFrame({'A' : [0,'y123', 'y00123']})\n\nprint(df)\n\n        A\n0       0\n1    y123\n2  y00123\n\n\ndf1 = df.replace({r'(y)(\\d+)' : r'\\2'},regex=True)\nprint(df1)\n\n\n       A\n0      0\n1    123\n2  00123\n"], ["data = [{'name': 'Bob', 'age': 20},  {'name': 'Phil', 'age': 21},  {'name': 'Jane', 'age': 42}]\n\n\nfor key, value in enumerate(data):\n     print(f\"{key+1} - {value['name']} is {value['age']}\")\n", "1 - Bob is 20\n2 - Phil is 21\n3 - Jane is 42\n"], ["for i in range(len(data)):\nprint(str(i+1)+\" - \"+data[i][\"name\"]+\" is \"+str(data[i][\"age\"]))\n"], ["data = [{'name': 'Bob', 'age': 20},  \n        {'name': 'Phil', 'age': 21},  \n        {'name': 'Jane', 'age': 42}]\n\nfor idx, dic in enumerate(data, 1):\n    print(f\"{idx} - dic['name'] is dic['age']\")\n"], ["for i, item in enumerate(data):\n    print(f\"{i+1} - {item['name']} is {item['age']}\")\n#1 - Bob is 20\n#2 - Phil is 21\n#3 - Jane is 42\n"], ["data = [{'name': 'Bob', 'age': 20},\n        {'name': 'Phil', 'age': 21},\n        {'name': 'Jane', 'age': 42}]\n\nfor i,d in enumerate(data):\n    print(f\"{i+1} - {d['name']} is {d['age']}\")\n", "1 - Bob is 20\n2 - Phil is 21\n3 - Jane is 42\n"], ["from random import choice\nimport matplotlib.pyplot as plt\nfrom numpy.random import random_sample\n\nn = 6\na = 5\nb = -5\n\nplt.xlim((b,a))\nplt.ylim((b,a))\n\nfor i in range(n):\n    r = (b - a) * random_sample() + a\n    random_point = choice([(choice([a,b]), r),(r, choice([a,b]))])\n    plt.scatter(random_point[0],random_point[1])\n\nplt.show()\n"], ["import numpy as np\nimport matplotlib.pyplot as plt\n\n# Parameters\nn = 6 # number of points\na = 5 # upper bound\nb = -5 # lower bound\n\n# Random coordinates [b,a) uniform distributed\ncoordy = (b - a) *  np.random.random_sample((n,)) + a # generate random y\ncoordx = (b - a) *  np.random.random_sample((n,)) + a # generate random x\n\n# This is the new code\nreset_axis = np.random.choice([True, False], n) # select which axis to reset\nreset_direction = np.random.choice([a,b], n) # select to go up / right or down / left\n\ncoordx[reset_axis] = reset_direction[reset_axis]\ncoordy[~reset_axis] = reset_direction[~reset_axis]\n# end of new code. \n\n# Create limits (x,y)=((-5,5),(-5,5))\nplt.xlim((b,a))\nplt.ylim((b,a))\n\n# Plot points\nfor i in range(n):\n    plt.plot(coordx[i],coordy[i],'ro')\n\nplt.show()\n"], ["import numpy as np\nimport matplotlib.pyplot as plt\n\n# Parameters\nn = 6 # number of points\na = 5 # upper bound\nb = -5 # lower bound\n\nimport random\n\ncoordx,coordy=[],[]\nfor i in range(n):\n    xy = random.choice(['x','y'])\n    if xy=='x':\n        coordx.append(random.choice([b,a])) # generate random x\n        coordy.append(random.random()) # generate random y\n    if xy=='y':\n        coordx.append(random.random()) # generate random x\n        coordy.append(random.choice([b,a])) # generate random y\n\n# Create limits (x,y)=((-5,5),(-5,5))\nplt.xlim((b,a))\nplt.ylim((b,a))\n\n# Plot points\nfor i in range(n):\n    plt.plot(coordx[i],coordy[i],'ro')\n\nplt.show()\n"], [], ["for x in coordx:\n    if x != a:\n        coordx.pop(x)\n    else:\n        continue\n"], [], ["any(map(lambda item: (item['id'] == 2) and item.update(name='something'), json))\n", "any( # map will return an iterator, any is there to force the evaluation on each element\n    map(\n         lambda item:          # function to be applied\n             (item['id'] == 2) # our condition\n             and               # 'and' is lazy evaluated, if 'id' != 2\n                               # we don't evaluate the following line\n             item.update(      # update item with another dict\n                 name = 'something' # use the fact that keyword arguments are given as a dict\n             ), # the return value will always be false\n                # forcing 'any' to look further\n         json                  # the list we apply the map to\n       )\n   )\n"], ["def procedure(refl): \n    for count in range(len(ref1)):\n        if (refl[count]) > (refl[count+1]): \n            print(\"more\") \n        else: \n            print(\"less\")\nprocedure(ref1)\n"], ["x = [811.91, 796.04, 796.14, 796.50, 796.81]\n\nfor i in range(1,len(x)):\n    difference = x[i] - x[i-1]\n    print(difference)\n"], ["x = [811.91, 796.04, 796.14, 796.50, 796.81]\n\nfor i in range(0, len(x)-1):\n    difference = x[i+1] + x[i-1]\n    print(difference)\n", "x = [811.91, 796.04, 796.14, 796.50, 796.81]\n\nfor i in range(0, len(x)-1):\n    difference = x[i+1] - x[i]\n    print(difference)\n"], ["x = [811.91, 796.04, 796.14, 796.50, 796.81]\n\ndifferencs = []\nfor i in range(len(x)):  # i = 0, 1, ..., x-1 \n    before_idx = i-1\n    after_idx = (i+1) % len(x)   # handle when i+1 exceeds the list length\n    diff = x[after_idx] + x[before_idx]   # Please double check whether you need '+' or '-'\n    differences.append(diff)\n\nprint(differences)\n", "differences = [x[(i+1)%len(x)] + x[i-1] for i in range(len(x))]\n\nprint(differences)\n"], ["x = [811.91, 796.04, 796.14, 796.50, 796.81]\nfor i in range(0,len(x)-1):\n    difference = x[i+1] + x[i-1]\n    print(difference)\n"], ["for obj in json:\n    if obj['id'] == 2:\n        obj['name'] = 'something'\n", "json.forEach(obj => {\n    if (obj.id == 2) {\n        obj.name = 'something';\n    }\n});\n", "for obj in (o for o in json if o['id'] == 2):\n    obj['name'] = 'something'\n", "for obj in filter(lambda o: o['id'] == 2, json):\n    obj['name'] = 'something'\n", "json.filter(o => o.id == 2).forEach(obj => obj.name = 'something')\n", "json = [{**obj, 'name': 'something' if obj['id'] == 2 else obj['name']} for obj in json]\n", "json = json.map(o => ({...obj, name: obj.id == 2 ? 'something' : obj.name}))\n"], [">>> [{**d, 'name': 'something' if d['id'] == 2 else d['name']} for d in json]\n[{'id': 1, 'name': 'a'}, {'id': 2, 'name': 'something'}]\n"], ["x = [811.91, 796.04, 796.14, 796.50, 796.81]\n\ni = 0\nfor index, value in enumerate(x):\n    difference = x[index+1] + x[index-1]\n    print(difference)\n"], ["for i, x in enumerate(json):\n    if x['id'] == 2:\n        json[i]['name'] = 'something'\n\nprint(json) # what you want\n", "for x in json:\n    if x['id'] == 2:\n        x['name'] = 'something'\n\nprint(json) # what you want\n"], ["output_list = [i.get(\"name\") for i in json if i.get(\"id\") == 2]\n", "['b']\n"], ["json = [{\n    \"id\": 1, \"name\": \"a\"\n}, {\n    \"id\": 2, \"name\": \"b\"\n}]\n\nfor obj in json:\n  if obj[\"id\"] == 2:\n    obj[\"name\"] = 'something'\n", "[{'id': 1, 'name': 'a'}, {'id': 2, 'name': 'something'}]\n"], ["animals = ['dog bark' , 'cat meow ']\n\nprint('found' if any('cow' in pet for pet in animals) else 'not found')\n", "result = 'found' if any('cow' in pet for pet in animals) else 'not found'\n"], ["def funcc(refl):\n    if (refl[0]) > (refl[1]):\n        print(\"more\") \n    else:\n        print(\"less\")\n", "def funcc(refl):\n    for i in range(len(refl)) - 1:\n        if (refl[i + 1]) >= (refl[i]):\n            return False\n    return True\n", "refl = [\"100\", \"99\", \"90\", \"80\", \"60\", \"50\", \"10\"]\nif funcc(refl):\n    print(\"Monotone decreasing\")\nelse:\n    print(\"Not monotone decreasing\")\n"], [">>> refl = [\"100\", \"99\", \"90\", \"80\", \"60\", \"50\", \"10\"]\n>>> all(int(fst) > int(snd) for fst, snd in zip(refl, refl[1:]))\nTrue\n", ">>> [int(fst) > int(snd) for fst, snd in zip(refl, refl[1:])]\n[True, True, True, True, True, True]\n"], [], ["refl = [\"100\", \"99\", \"90\", \"80\", \"60\", \"50\", \"10\"]\ncounter = 0\nwhile counter < len(refl)-1: #remember, the length of the list is 7, the last index is 6\n    if refl[counter] < refl[counter+1]: #if the item smaller than the next item\n        print(\"The previous item is not larger\")\n    else:\n        print(\"the previous item is larger\")\n    counter += 1 #add one to counter and re-assign\n"], ["lis=[1,2,3]\nfor i in lis:\n    if i==1:\n        print(\"1 found in list.\")\n        break\nelse:\n    print(\"1 is not in list.\")\n", "animals=[\"dog bark\",\"cat meow\"]\nfor pet in animals:\n    if 'cow' in pet:\n        print(\"Found\")\n        break'\nelse:\n    print(\"not found\")\n"], ["flag = False\nanimals = ['dog bark' , 'cat meow']\nfor pet in animals:\n  if 'cow' in pet:\n      print(\"Found\")\n      flag = True\n\nif flag == False:\n    print(\"Not found\")\n"], ["animals = ['dog bark' , 'cat meow ']\nfor i, pet in enumerate(animals):\n  if 'cow' in pet:\n    print('found')\n    break\n  elif i+1 == len(animals):\n    print('not  found') \n", "print(\"found\" if [i for i in animals if \"cow\" in i] else \"not  found\")\n"], ["animals = ['dog bark' , 'cat meow ']\nhas_cow = any('cow' in a for a in animals)\nprint('found' if has_cow else 'not found')\n", "for a in animals:\n    if 'cow' in a:\n        print('found')\n        break\nelse:                      # WTF!?!  Don't do this, folks.\n    print('not found')\n"], ["DATA = {\"records\": [{\"key1\": \"AAA\", \"key2\": \"BBB\", \"key3\": \"CCC\", \"key4\": \"AAA\"}]}\n\n\n\nfor name, datalist in DATA.iteritems():  # Or items() in Python 3.x\n\n\n    for datadict in datalist:\n\n        for key, value in datadict.items():\n\n            if value == \"AAA\":\n\n                datadict[key] = \"XXX\"\n\n\nprint (DATA)\n"], ["return (aFunction((number - Min)/intervalLength) + c1) * c2\n", "def checkRange(number):\n    if number in range(0, 5499):\n        return 5000\n    elif number in range(5500, 9499):\n        return 10000\n    elif number in range(9500, 44499):\n        return (floor((number - 9500)/4000) + 3) * 5000\n"], ["from dataclasses import dataclass\nfrom typing import List\n\n@dataclass\nclass Window:\n  index: int\n  backward: List[int]\n  forward: List[int]\n\ndef window(iterable, window_size, index):\n  backward = iterable[max(0, index - window_size):index]\n  forward = iterable[index + 1:index + 1 + window_size]\n  return Window(index, backward, forward)\n", ">>> window([1,2,3,4,5,6], 3, 0)\nWindow(index=0, backward=[], forward=[2, 3, 4])\n>>> window([1,2,3,4,5,6], 3, 5)\nWindow(index=5, backward=[3, 4, 5], forward=[])\n"], [], ["def counts(items):\n    d = {}\n    for item in items:\n        d[item] = d.get(item, 0) + 1\n    return d\n\ncounts(A) == counts(B)\n", "def unordered_eq(A, B):\n    for a in A:\n        if A.count(a) != B.count(a):\n            return False\n    return True\n"], ["df1 = (df.set_index('Column1')\n         .stack()\n         .groupby(\"Column1\")\n         .agg(' '.join)\n         .reset_index(name='Column2'))\nprint (df1)\n   Column1                           Column2\n0        1            I am abc I do business\n1        2                 I am xyz I do job\n2        3  on weekend holidays I do nothing\n"], ["outcome = (df\n           .set_index(\"Column1\")\n           #this helps to put space between\n           #the columns when summed\n           .add(' ')\n           #this combines the columns into one\n           .sum(axis=1)\n           .str.rstrip(\" \")\n           .groupby(\"Column1\")\n           .agg(\" \".join)\n           .reset_index(name='Column2')\n          )\n\noutcome\n\n    Column1      Column2\n0   1           I am abc I do business\n1   2           I am xyz I do job\n2   3           on weekend holidays I do nothing\n"], ["def apply_union(x):\n    ## join multiple columns to single sting in row\n    x = x.apply(lambda row: ' '.join(row.values.astype(str)), axis=1)\n    ## concat rows to single string\n    x = x.str.cat(sep=\" \")\n    return x\ndf.groupby(\"Column1\")[[\"Column2\",\"Column3\",\"Column4\"]].apply(lambda x: apply_union(x))\n"], ["df['newcol'] = df.apply(lambda x: \" \".join(x[1:]), axis=1)\ndf.groupby('Column1').agg({'newcol': lambda x: \" \".join()})\n"], ["Column1\n1              I am abc I do business\n2                   I am xyz I do job\n3    on weekend holidays I do nothing\nName: new_col, dtype: object\n"], [">>> mytuple = (1, 2)\n>>> print(mytuple)\n(1, 2)\n\n>>> mytuple = ()\n>>> print(mytuple)\n()\n\n>>> mytuple = 1,2\n>>> print(mytuple)\n(1, 2)\n\n>>> mytuple = 1,\n>>> print(mytuple)\n(1,)\n", "return x, y\n", "return (x, y)\n", "x_value, y_value = smth(x, y)\n", "xy_tuple = smth(x, y)\n\nx_value = xy_tuple[0]\ny_value = xy_tuple[1]\n"], ["@retry((Exception), tries=3, delay=0, backoff=0)\ndef main2():\n   np.load('File2.csv')\n", "error_counter = 0\n    def main2():\n       try:\n          np.load('File2.csv')\n       except:\n          if error_counter < 3\n             error_counter += 1\n             main2()\n          raise Exception(\"Will not try again, have tried 3 times\")  \n       error_counter = 0\n"], ["def main():\n    # np.load('File.csv')\n    raise ValueError\n    print(\"In main\")\n\ndef main1():\n    # np.load('File1.csv')\n    raise ValueError\n    print(\"In main1\")\n\ndef main2():\n    # np.load('File2.csv')\n    raise ValueError\n    print(\"In main2\")\n\nfor i in range(1, 10):\n    try:\n        main()\n        main2()\n        main3()\n    except Exception as e:\n        print(e)\n    else:\n        break\n"], ["for i in range(1, 10):\n    error_max = 3\n    error_counter = 0\n    try:\n        main()\n        try:\n            main2()\n        except Exception as e:\n            counter += 1\n            if counter == 3:\n                raise e\n            else:\n                continue\n        main3()\n    except Exception as e:\n        print e\n    else:\n        break\n"], ["for _ in range(3):  # try 3 times\n    try:\n        main2()\n        break       # as soon as it works, break out of the loop\n    except Exception as e:\n        print e\n        continue    # otherwise, try again\nelse:               # if the loop exited normally, e.g. if all 3 attempts failed\n    pass\n    # do_something...\n"], [], ["print(['3x' if i%3==0 else i for i in range(1,1001)])\n", "print([i for i in range(1,1001) if i%3==0])\n"], ["for num in range(0,1001):\n   if num % 3 ==0:\n      print('multiple of 3')\n   else:\n      print(num)\n", "mult_arr = [ x for x in range(0,1001) if x%3==0]\n"], [], ["np.arange(0,1000,3) #or any N\n"], ["forward = [lst[i+1:i+1+window] for i in range(len(lst)]\nbackward = [lst[::-1][i+1:i+1+window] for i in range(len(lst)] # first reverse the input list and do same as did in forward\nout = zip(forward,backward[::-1]) # first reverse the backward list and zip two list into one\n", ">>> forward\n[[2, 3, 4], [3, 4, 5], [4, 5, 6], [5, 6, 7], [6, 7, 8], [7, 8], [8], []]\n>>> backward\n[[7, 6, 5], [6, 5, 4], [5, 4, 3], [4, 3, 2], [3, 2, 1], [2, 1], [1], []]\n>>> out\n[([2, 3, 4], []), ([3, 4, 5], [1]), ([4, 5, 6], [2, 1]), ([5, 6, 7], [3, 2, 1]), ([6, 7, 8], [4, 3, 2]), ([7, 8], [5, 4, 3]), ([8], [6, 5, 4]), ([], [7, 6, 5])]\n\n"], ["project_dir/\n     source_dir/\n            app_dir/\n                 templates/\n                      app_dir/\n                           template.html\n            app_dir/\n                  templates/\n                      app_dir/\n                           template.html\n            staticfiles/\n            templates/\n                 template.html\n            project_dir/\n                  manage.py\n      static_cdn_dir/\n            media/\n            static/\n", "STATIC_URL = '/static/'\nSTATICFILES_DIRS = [ os.path.join(BASE_DIR, 'staticfiles')]\n", "STATIC_ROOT = os.path.join(LOCAL_STATIC_CDN_PATH, 'static') \nMEDIA_ROOT = os.path.join(LOCAL_STATIC_CDN_PATH, 'media')\n", "LOCAL_STATIC_CDN_PATH = os.path.join(os.path.dirname(BASE_DIR), 'static_cdn_dir')\n"], ["lst = [1, 2, 3, 4, 5, 6, 7, 8]\nws = 3 # window\n\nst = 3 # starting point\n\nmn = max(st-ws-1, 0)\nmx = min(st+ws, len(lst))\nprint('Forward = ',lst[st:mx])\nprint('Backward = ', lst[mn:st-1])\n", "Forward =  [4, 5, 6]\nBackward =  [1, 2]\n"], ["type(smth(21,11))\n", "<class 'tuple'>\n"], [">>> def smth(x,y):\n...    x = y%2\n...    y = x%2\n...    return x,y\n\n>>> smth(1,2)\n(0, 0)\n>>> type(smth(1,2))\n<class 'tuple'>\n"], [], ["def smth(x,y):\n\n   x = y % 2\n   y = x % 5\n\n   return x, y\n\nx=smth(10,20)\nprint(x)\nprint(type(x))\n"], ["def static(prefix, view=serve, **kwargs):\n    \"\"\"\n    Return a URL pattern for serving files in debug mode.\n\n    from django.conf import settings\n    from django.conf.urls.static import static\n\n    urlpatterns = [\n        # ... the rest of your URLconf goes here ...\n    ] + static(settings.MEDIA_URL, document_root=settings.MEDIA_ROOT)\n    \"\"\"\n    if not prefix:\n        raise ImproperlyConfigured(\"Empty static prefix not permitted\")\n    elif not settings.DEBUG or urlsplit(prefix).netloc:\n        # No-op if not in debug mode or a non-local prefix.\n        return []\n    return [\n        re_path(r'^%s(?P<path>.*)$' % re.escape(prefix.lstrip('/')), view, kwargs=kwargs),\n    ]\n", "def static(prefix, view=serve, **kwargs):\n    \"\"\"\n    Version of the static views that DOESN'T check for the DEBUG flag since we're\n    checking it elsewhere and static items are needed for e2e tests.\n\n    NOTICE: Sometimes the Staticfiles app decides to do whatever it wants and then\n    reports this view was the one that did it. If you can't print from the serve\n    function, it's full of shit. Check the STATICFILES_DIRS instead.\n    \"\"\"\n    if not prefix:\n        raise ImproperlyConfigured(\"Empty static prefix not permitted\")\n    elif '://' in prefix:\n        # No-op if not in debug mode or a non-local prefix.\n        return []\n    return [\n        url(r'^%s(?P<path>.*)$' % re.escape(prefix.lstrip('/')), view, kwargs=kwargs),\n    ]\n\nurlpatterns += static('/static/', document_root=settings.STATIC_ROOT)\n"], [], ["from itertools import chain\nfrom more_itertools import windowed\nn = 3\niterable = [1, 2, 3, 4, 5, 6, 7, 8]\n# pad the iterable so you start with an empty backward window\nit = chain([None] * n, iterable, [None] * n)\n\nfor window in windowed(it, n * 2 + 1):\n    print(window[n])\n    print('forward =', [x for x in window[n + 1:] if x is not None])\n    print('backward =', [x for x in window[:n] if x is not None])\n", "1\nforward = [2, 3, 4]\nbackward = []\n\n2\nforward = [3, 4, 5]\nbackward = [1]\n\n3\nforward = [4, 5, 6]\nbackward = [1, 2]\n\n4\nforward = [5, 6, 7]\nbackward = [1, 2, 3]\n\n5\nforward = [6, 7, 8]\nbackward = [2, 3, 4]\n\n6\nforward = [7, 8]\nbackward = [3, 4, 5]\n\n7\nforward = [8]\nbackward = [4, 5, 6]\n\n8\nforward = []\nbackward = [5, 6, 7]\n"], ["# To recursively give directories read&execute privileges:\n$ find /path/to/base/dir -type d -exec chmod 755 {} +\n# To recursively give files read privileges:\n$ find /path/to/base/dir -type f -exec chmod 644 {} +\n# Or, if there are many objects to process:\n$ chmod 755 $(find /path/to/base/dir -type d)\n$ chmod 644 $(find /path/to/base/dir -type f)\n# Or, to reduce chmod spawning:\n$ find /path/to/base/dir -type d -print0 | xargs -0 chmod 755 \n$ find /path/to/base/dir -type f -print0 | xargs -0 chmod 644\n"], ["from itertools import chain\nfrom collections import Counter, defaultdict\n\ndatabase = defaultdict(set)\noutput = {}\n\n# created a map for different concepts, so we only search the indices where a certain concept is\nfor index, (_, concepts) in enumerate(mylist):\n    for concept in concepts:\n        database[concept].add(index)\n\nfor concept in myconcepts:\n    search_indices = database[concept]\n    all_counts = Counter(chain.from_iterable(mylist[i][1] for i in search_indices))\n    for hc in hatedconcepts:\n        if hc in all_counts: all_counts.pop(hc)\n    output[concept] = sorted(all_counts.items(), key=lambda x: x[1], reverse=True)\n"], ["emj_functn avg 0.9355s\nget_counts avg 0.1141s\n"], ["from collections import Counter\nreq={}\nfor i in myconcepts:\n    x=sum([j[1] for j in mylist if i in j[1]],[])\n    x=[i for i in x if i not in hatedconcepts]\n    req[i]=dict(Counter(x))\nprint(req)\n", "{'my cat': {'my cat': 2, 'little dog': 2, 'fish': 1}, 'little dog': {'my cat': 2, 'little dog': 3, 'fish': 2, 'duck': 1}}\n"], ["my_list = [\"my cat\", \"little dog\", \"fish\", \"rat\", \"my cat\",\"little dog\" ]\n# split my_list into n=2 sublists\nmy_sub_lists = [[\"my cat\", \"little dog\", \"fish\"], [\"rat\", \"my cat\",\"little dog\"]]\n", "Process 1: Counter([\"my cat\", \"little dog\", \"fish\"])\nProcess 2 : Counter(\"rat\", \"my cat\",\"little dog\"])\n", "my_sub_counts = [{\"my cat\":1, \"little dog\":1, \"fish\":1}, {\"rat\":1, \"my cat\":1,\"little dog\":1}]\n", "result = {\"my cat\":2, \"little dog\":2, \"fish\":1, \"rat\":1}\n"], ["lst = [1, 2, 3, 4, 5, 6, 7, 8]\nsliding_window_size = 3\n\ndef get_sliding_list(l, index):\n    l_list = []\n    r_list = []\n\n    min_range = 0\n    if index > sliding_window_size:\n        min_range = index - sliding_window_size\n\n    max_range = len(l)\n    if index + sliding_window_size < len(l):\n        max_range = index + sliding_window_size + 1\n\n    return (l[min_range:index], l[index + 1:max_range])\n\nprint(get_sliding_list(lst, 0))\nprint(get_sliding_list(lst, 1))\nprint(get_sliding_list(lst, 2))\nprint(get_sliding_list(lst, 3))\nprint(get_sliding_list(lst, 4))\nprint(get_sliding_list(lst, 5))\nprint(get_sliding_list(lst, 6))\nprint(get_sliding_list(lst, 7))\n", "([], [2, 3, 4])\n([1], [3, 4, 5])\n([1, 2], [4, 5, 6])\n([1, 2, 3], [5, 6, 7])\n([2, 3, 4], [6, 7, 8])\n([3, 4, 5], [7, 8])\n([4, 5, 6], [8])\n([5, 6, 7], [])\n"], ["import collections\n\nmy_list = [1, 2, 3, 4, 5, 6, 7, 8]\n\nwindow = collections.deque([], 7)\n\nfor i in my_list:\n    window.append(i)\n\n    # Get the back three elements\n    forward_window = list(window)[-3:]\n    # Get the front three elements\n    backward_window = list(window)[:len(window)-4]\n\n    print()\n    print(list(forward_window))\n    print(list(backward_window))\n", "while len(window) != 4:\n    window.popleft()\n    forward_window = list(window)[4:]\n    backward_window = list(window)[:3]\n    print()\n    print(list(forward_window))\n    print(list(backward_window))\n"], ["[ll[i-4:i+4] for i in range(4, len(ll)-4)]\n"], [], ["# Here are all parameters for dropna(). U won't be needing any to just get rid     \n#of \"Nan\" and null values, but they do have useful functionalities  \nDataFrame.dropna(axis=0, how='any', thresh=None, subset=None, inplace=False)\n", "df['Rating_Recommend'].dropna(inplace=True)\n"], [], ["df['Rating_Recommend'].dropna()\n", "df['Rating_Recommend'] = df['Rating_Recommend'].dropna()\n", "df['Rating_Recommend'] = pd.to_numeric(df['Rating_Recommend'], errors='coerce')\n\nrating_mean = df['Rating_Recommend'].mean()\n"], ["df['Rating_Recommend'] = df['Rating_Recommend'].dropna()\n\nor \n\ndf['Rating_Recommend'].dropna(inplace=True)\n"], [], ["var = 14\nfor i in range(1, var + 1):\n    print(\" \" * (var - i) + \"*\" * i + \"*\" * (i - 1))\n", "         *\n        ***\n       *****\n      *******\n     *********\n    ***********\n   *************\n  ***************\n *****************\n*******************\n"], ["def round_up_to(num, factor):\n    return -(-num // factor ) * factor\n\ndef checkRange2(num):\n    if num < 5500:  # was this first interval perhaps a mistake?\n        return 5000\n    else:\n        return round_up_to(num + 501, 5000))\n"], ["$ pip install 'nr.utils.io>=0.1.0,<1.0.0'\n"], ["by = \"You are\"\naz = \"doing a great \"\nio = \"job\"\nqy = \"keep it up!\"\nmessage = by+\" \"+az+io+\", \"+qy\nprint(message)\n", "str1 = \"I like nonsense, it wakes up the brain cells. Fantasy is a necessary ingredient in living.\"\nnumbs=0\nfor i in str1:\n    numbs+=1\nprint(numbs)\n"], ["if DEBUG or not DEBUG:\n    STATICFILES_DIRS = (\n        os.path.join(BASE_DIR, 'tabular', 'templates'),\n        os.path.join(BASE_DIR, 'common'),\n    )\n", "server {\n\n    listen  8000;\n    server_name test.com;\n\n    client_max_body_size 4G;\n\n    access_log /home/shubham/aconitedata/aconitedata/logs/nginx-access.log;\n    error_log /home/shubham/aconitedata/aconitedata/logs/nginx-error.log;\n\n   location /static/ {\n       alias   /home/shubham/aconitedata/aconitedata/aconite/aconite/static/;\n   }\n\n   location /media/ {\n        alias  /home/shubham/aconitedata/aconitedata/aconite/aconite/media/;\n   }\n\n   location / {\n        proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;\n        proxy_set_header Host $http_host;\n        proxy_redirect off;\n\n       # Try to serve static files from nginx, no point in making an\n       # *application* server like Unicorn/Rainbows! serve static files.\n       if (!-f $request_filename) {\n            proxy_pass http://aconite_server;\n           break;\n       }\n   }\n}\n\n"], ["data = [([-1.01201792,  2.5,  0.68665077]), ([-2.5,  0.5,  2.68189991]), ([-2.5,  3.5, 5.92202221]), ([-2.5, 5.5, 10.19026759]), ([-2.5, 6.5, 15.30091085])]\nresult = [max([abs(y) for inx, y in enumerate(i) if inx != 1]) for i in data]\nprint(result)\n", "[1.01201792, 2.68189991, 5.92202221, 10.19026759, 15.30091085]\n"], ["outlist = []                          # create an empty output list\nfor x in data:                        # for each sublist in data\n    val = max(abs(x[0]), abs(x[2]))   # find max of absolute of 1st and 3rd\n    outlist.append(val)               # add above value to output list\n\nprint(outlist)                        # print the output list\n", "[1.01201792, 2.68189991, 5.92202221, 10.19026759, 15.30091085]\n", "outlist = []                        # create an empty output list\nfor x in data:                      # for each sublist in data\n    x = [x[0]]+x[2:]                # create a new list without 2nd element\n    val = max(x)                    # find max of new list\n    outlist.append(val)             # add above value to output list\n\nprint(outlist)                      # print the output list\n"], [">>> [max(abs(a), abs(c)) for a, _, c in data]\n[1.01201792, 2.68189991, 5.92202221, 10.19026759, 15.30091085]\n", ">>> north, _, west = zip(*data)\n>>> [max(map(abs, v)) for v in zip(north, west)]\n[1.01201792, 2.68189991, 5.92202221, 10.19026759, 15.30091085]\n"], [], ["data = [([-1.01201792,  2.5,  0.68665077]), ([-2.5,  0.5,  2.68189991]), ([-2.5,  3.5, 5.92202221]), ([-2.5, 5.5, 10.19026759]), ([-2.5, 6.5, 15.30091085])]\nx =[max(map(math.fabs, [lst[0]]+lst[2:])) for lst in data]\nprint(list(x))\n", "[1.01201792, 2.68189991, 5.92202221, 10.19026759, 15.30091085]\n"], ["a = np.arange(len(df))\ndf.index = [a // 3, a % 3]\ndf = df.unstack().sort_index(axis=1, level=1)\ndf.columns = [f'{a}_{b}' for a, b in df.columns]\nprint (df)\n   A_0  B_0  C_0  A_1  B_1  C_1  A_2  B_2  C_2\n0    1    4    6    2    5    7    3    6    8\n1   11   14   16   12   15   17   13   16   18\n", "a = np.arange(len(df))\ndf1 = (df.set_index(pd.MultiIndex.from_arrays([a // 3, a % 3]))\n         .unstack().sort_index(axis=1, level=1))\ndf1.columns = [f'{a}_{b}' for a, b in df1.columns]\nprint (df1)\n   A_0  B_0  C_0  A_1  B_1  C_1  A_2  B_2  C_2\n0    1    4    6    2    5    7    3    6    8\n1   11   14   16   12   15   17   13   16   18\n", "df1.columns = df1.columns.str.split('_', expand=True)\ndf2 = df1.stack().reset_index(drop=True)\nprint (df2)\n    A   B   C\n0   1   4   6\n1   2   5   7\n2   3   6   8\n3  11  14  16\n4  12  15  17\n5  13  16  18\n"], [], [], ["combs = []\npoint = 1 # For example\ncombs.append(point)\n"], ["point = Point(0, 0)\npoint.x=2\npoint.y=2\ncombs.append(point)\n\npoint = Point(0, 0) # add this\npoint.x=4\npoint.y=4\ncombs.append(point)\n", " def __init__(self, x, y):\n        self.x=x\n        self.y=x\n"], ["class Test():\n    def __init__(self, a):\n        self.a = a\n\n>>> t1 = Test(1)\n>>> t1.a\n1\n>>> t2 = t1\n>>> t2.a\n1\n>>> t2.a = 2\n>>> t2.a\n2\n>>> t1.a\n2\n"], [], [], ["int1 = int(input())\nint2 = int(input())\n\nif int1 > int2:\n    print(\"Second integer can't be less than the first.\")\nelif int1 == int2:\n    print(f\"{int1} \", end='')\nelse:\n    print(\" \".join(map(str, range(int1, int2 + 1, 10))))\n"], ["from itertools import product\nrow = len(df)//3\n\n#create new columns\nnew_columns = df.columns.union([\"_\".join((letter,str(num))) \n                                for letter,num in product(df.columns,range(1,3))],\n                               sort=False)\n\n#create new dataframe\nnew_df = pd.DataFrame(np.reshape(df.to_numpy(),(row,-1)), \n                      columns=new_columns)\nnew_df\n\n    A   B   C   A_1 A_2 B_1 B_2 C_1 C_2\n0   1   4   6   2   5   7   3   6   8\n1   11  14  16  12  15  17  13  16  18\n"], ["n = 3\ngrps = df.groupby(df.index // n).cumcount()\ndfn = pd.concat([d.reset_index(drop=True) for _, d in df.groupby(grps)], axis=1)\ndfn.columns = [f'{col}_{i}' for col, i in zip(dfn.columns, np.arange(dfn.shape[1]) // n)]\n\n   A_0  B_0  C_0  A_1  B_1  C_1  A_2  B_2  C_2\n0    1    4    6    2    5    7    3    6    8\n1   11   14   16   12   15   17   13   16   18\n"], ["new = pd.concat([df[a::3].reset_index(drop=True) for a in range(3)], axis=1)\nnew.columns = ['{}_{}'.format(a,b) for b in range(3) for a in 'ABC']\n"], ["pd.DataFrame(\n    data=df.values.reshape([-1, df.values.shape[1]*3]),\n    columns=list(df.columns) + sum([[c+'_'+str(i) for c in df.columns] for i in range(1, 3)], [])\n)\n", "\n    A   B   C   A_1 B_1 C_1 A_2 B_2 C_2\n0   1   4   6   2   5   7   3   6   8\n1   11  14  16  12  15  17  13  16  18\n"], ["def replace(arr, i, j):\n    tmp = arr[i]\n    arr[i] = arr[j]\n    arr[j] = tmp\n", "for i in range(0, len(wordChars) - 1, 2):\n    replace(wordChars, i, i + 1)\n", "arr[i], arr[j] = arr[j], arr[i]\n", "for i in range(0, len(wordChars) - 1, 2):\n    arr[i], arr[j] = arr[j], arr[i]\n"], ["def is_even(stack):\n        for i in range(0, len(stack), 2):\n            temp = stack[i]\n            stack[i] = stack[i+1]\n            stack[i+1] = temp\n        return stack\n\ndef is_odd(stack):\n    for i in range(0, len(stack - 1), 2):\n        temp = stack[i]\n        stack[i] = stack[i+1]\n        stack[i+1] = temp\n    return stack\n\nstack = []\nword = input(\"Type Your word here: \")\nwordChars = list(word)\n\nfor i in range(len(wordChars)):\n    stack.append(wordChars[i])\n\nprint(stack)\nif len(stack) % 2 == 0:\n    new_stack = is_even(stack)\nelse:\n    new_stack = is_odd(stack)\n"], ["length = len(stack)\nfor i in range(0,length,2):\n  if(i+1 >= length ):\n      break\n  temp = stack[i]\n  stack[i] = stack[i+1]\n  stack[i+1] = temp\n"], ["a = ['L', 'o', 'v', 'e', 'r']\nfor i in range(0,len(a)-1,2):\n    a[i], a[i+1] = a[i+1], a[i]\n\nprint(a)\n"], ["for x in range(0, len(wordChars) % 2, 2):\n    char_a       = stack[i]\n    char_b       = stack[i + 1]\n    stack[i]     = char_b\n    stack[i + 1] = char_a\n"], ["def flip(a):\n\n    #convert input string to list\n    lst = list(a)\n\n    #initialise output string\n    out = ''\n\n    # if more than 1 element is left, remove the first two elements and invert\n    while len(lst)>1:\n        a = lst.pop(0)\n        b = lst.pop(0)\n        out = out + b + a\n\n    # if list has at least one element, add this one to the output string\n    if lst:\n        out = out + lst.pop()\n\n    return out\n"], [], ["int1 = int(input())\nint2 = int(input())\n\nif int2 < int1:\n    print('Second integer can\\'t be less than the first.')\nelse:\n    while int1 <= int2:\n        print(int1, end = ' ')\n        int1 += 10\n    else:    #prints a newline when the while loop has completed iteration.\n        print()\n"], ["int1 = int(input())\nint2 = int(input())\n\nif int2 < int1:\n    print(\"Second integer can't be less than the first.\")\nelse:\n    int3 = int1  # don't change int1 as it's needed later\n\n    while int3 <= int2:\n        print(int3, end=' ')\n        int3 += 10\n\n    if int1 < int2:\n        print()\n", "    while int3 <= int2:\n        print(int3, end=' ')\n        int3 += 10\n    else:\n        if int1 < int2:\n            print()\n"], ["import numpy as np\n\nint1 = int(input())\nint2 = int(input())\nnu = (int2-int1)*10+1\n\nprint(*np.linspace(int1,int2,num=nu))\n", "4\n10\n", "4.0 4.1 4.2 4.3 4.4 4.5 4.6 4.7 4.8 4.9 5.0 5.1 5.2 5.3 5.4 5.5 5.6 5.7 5.8 5.9 6.0 6.1 6.2 6.3 6.4 6.5 6.6 6.7 6.8 6.9 7.0 7.1 7.2 7.3 7.4 7.5 7.6 7.7 7.8 7.9 8.0 8.1 8.2 8.3 8.4 8.5 8.6 8.7 8.8 8.9 9.0 9.1 9.2 9.3 9.4 9.5 9.6 9.7 9.8 9.9 10.0\n"], [], ["import cv2\nimport os\n\n\nimage_folder = 'c:\\\\m\\\\'\nvideo_name = 'c:\\\\m\\\\avideo.avi'\n\nimages = [img for img in os.listdir(image_folder) if img.endswith(\".jpg\")]\n\n\nframe = cv2.imread(os.path.join(image_folder, images[0]))\nheight, width, layers = frame.shape\n\n#1 fps\n#video = cv2.VideoWriter(video_name, 0, 1, (width,height))\n\n\n#25 fps\nvideo = cv2.VideoWriter(video_name, 0, 25, (width,height))\n\nfor image in images:\n    video.write(cv2.imread(os.path.join(image_folder, image)))\n\ncv2.destroyAllWindows()\nvideo.release()\n"], [], ["from decimal import Decimal\n\nprint('Input a number: ')\nchuu = float(input())\n\nprint(Decimal(str(round(chuu, 2))).normalize())\n"], ["def dec(s):\n    s = s.rstrip('.')\n    if(s.find('.') == -1): \n        return s\n    else:\n        i = s.find('.')\n        return s[:i] + '.' + s[i+1:i+3]\n\n\nprint(dec('3.1415'))\nprint(dec('3'))\nprint(dec('1234.5678'))\nprint(dec('1234.5'))\nprint(dec('1234.'))\nprint(dec('1234'))\nprint(dec('.5678'))\n\n3.14\n3\n1234.56\n1234.5\n1234\n1234\n.56\n"], ["print('input a number')\nchuu = float(input())\nprint('{:g}'.format(round(chuu, 2)))\n"], ["def specialRound(num):\n    #check if has decimals\n    intForm = int(num)\n    if(num==intForm):\n        return intForm\n    TDNumber = round(num,2) #Two decimals\n    ODNumber = round(num,1) #One decimal\n    if(TDNumber>ODNumber):\n        return TDNumber\n    return ODNumber\n\nprint(specialRound(3.1415))\nprint(specialRound(3.10))\nprint(specialRound(3))\n"], ["print ('input a number')\nchuu = float(input())\nchuu = round(chuu,2)\nif int(chuu)==chuu:\n    print(int(chuu))\nelse:\n    print(chuu)\n"], ["^(.)(.+)\\1$\n", "^([\\/v])(.+)\\1$\n", "import re\ns = 'vHELLOv'\nprint(re.search(r'^(.)(.+)\\1$', s).group(2))\n", "HELLO\n"], [], [" import re\n\n text = \"vHELLOv\" #or txt = \"/World/\"\n re.match(r\"(v|\\/)(\\w*)(v|\\/)\", text).group(2)\n or\n re.search(r\"(v|\\/)(\\w*)(v|\\/)\", text).group(2)\n", "txt.replace(txt[0], \"\") if txt[0] == txt[-1] else txt\n"], ["import re\ns = \"/World/\"\nnew_s = re.sub(r'\\W', \"\", s)\n"], ["string = \"vHELLOv\"\nsurrounder = \"v\"\nx = string.split(surrounder)\n\nprint(x[1]) \n"], ["from natsort import natsorted\n\nimages = natsorted(images)\n", "pip install natsort\n"], [], [], ["mylist = [\"770\", \"790\", \"1470\", \"1490\"]\nsq = \"BPBA-SG790-NGTP-W-AU-BUN-3Y\"\n\nb = [x for x in mylist if sq.find(x) != -1]\nprint b\n"], ["[x for x in mylist if x in sq]\n"], ["mylist = [\"770\", \"790\", \"1470\", \"1490\"]\nsq = \"BPBA-SG790-NGTP-W-AU-BUN-3Y\"\nfor i in mylist:\n    if i in sq:\n        print(i)\n\n"], ["mylist = [\"770\", \"790\", \"1470\", \"1490\"]\nsq = \"BPBA-SG790-NGTP-W-AU-BUN-3Y\"\n\nmatching = [m for m in mylist if m in sq]\n\nprint(matching)\n", "['790']\n"], ["#----> axis: 1      #| a\narray([[1, 2, 3],   #| x\n       [3, 2, 5],   #| i\n       [2, 4, 4]])  #| s\n                    #v 0\n", "In [70]: np.min(z, axis=1) \nOut[70]: array([1, 2, 2])\n", "In [71]: np.min(z, axis=1).sum()   \nOut[71]: 5\n"], ["np.sum(np.min(z, axis=1))\n", "Out[61]: 5\n"], ["import numpy as np\nz = np.array([[1, 2, 3], \n             [3, 2, 5], \n             [2, 4, 4]])\n\nnp.apply_along_axis(np.min,-1,z).sum()\n", "np.apply_along_axis(np.min,-1,z)\n"], ["min_sum = sum(map(np.min,z)) \nprint(min_sum) # output: 5\n"], ["z = np.array([[1,2,3],[3,2,5],[2,4,4]])\nres = sum(np.min(z, axis=1))\nprint(res)\n", "5\n"], ["z = np.array([[1, 2, 3], [3, 2, 5], [2, 4, 4]])\nz.min(1).sum()\n# 5\n"], ["z = np.array([[1, 2, 3], [3, 2, 5], [2, 4, 4]])\n\ndef calculate(a):\n    sum = 0\n    for row in a:\n        sum += np.min(row)\n    return sum\n\nprint(calculate(z))\n\n>>> 5\n"], ["import cv2\nimport os\nimport glob\n\nvideo_name = 'video.avi'\n\nimages = glob.glob('images/*.jpg')\nimages.sort()\n\nframe = cv2.imread(images[0])\nheight, width, layers = frame.shape\n\nvideo = cv2.VideoWriter(video_name, 0, 1, (width,height))\n\nfor image in images:\n    video.write(cv2.imread(image))\n\ncv2.destroyAllWindows()\nvideo.release() \n"], ["import cv2\n\ncap = cv2.VideoCapture('path to video/video.mp4')\n\nfourcc = cv2.VideoWriter_fourcc(*'XVID')\nret, frame = cap.read()\nfps_video=cap.get(cv2.CAP_PROP_FPS)\nheight,width = frame.shape[:2]\nout = cv2.VideoWriter('demo_output.avi',fourcc, fps_video, (width,height)) ##can be set with your width,height values\n\n\n\n\nwhile ret:\n    frame = cv2.resize(frame, None, fx=1.0, fy=1.0, interpolation=cv2.INTER_AREA)\n\n    out.write(frame)\n    ret, frame = cap.read()\n\ncap.release()\nout.release()\ncv2.destroyAllWindows()      \n", "import cv2\nimport os\nimport numpy as np\n\nvidcap = cv2.VideoCapture('path to video/video.mp4')\nsuccess,image = vidcap.read()\nfps_video = vidcap.get(cv2.CAP_PROP_FPS)\nheight,width = image.shape[:2]\ncount = 0\nwhile success:\n\n    cv2.imwrite(\"frame%d.jpg\" % count, image)     # save frame as JPEG file      \n    success,image = vidcap.read()\n    print('Read a new frame: ', success)\n    count += 1\n\nvidcap.release()\nlista = [[x[5:-4],x] for x in os.listdir() if x.endswith('jpg')]\n\nresult=[]\nfor x in lista:\n    t1,t2 = np.int(x[0]),x[1]\n    result.append([t1,t2])\n\nresult.sort()\n\n#recording video back\nfourcc = cv2.VideoWriter_fourcc(*'XVID')\nout = cv2.VideoWriter('demo_output.avi',fourcc, fps_video, (width,height)) ##can be set with your width,height values\n\nfor img in result:\n    frame = cv2.imread(img[1])\n    out.write(frame)\nout.release()\n"], ["changes = df['values'].diff().ne(0).cumsum()\ndf.groupby([changes,'values']).size().reset_index(level=0, drop=True)\n\n values\n10    2\n23    2\n9     3\n10    4\n12    1\ndtype: int64\n"], ["import bisect\n\nbreak_points = [5499,  9499, 14499, 19499, 24499, 29499, 34499, 39499, 44499]\nvalues       = [5000, 10000, 15000, 20000, 25000, 30000, 35000, 40000, 45000]\n\nn = 10000\nindex = bisect.bisect_left(break_points, n)\n\nvalues[index]\n# 15000\n"], ["if number in range(0,5499):\n", "if 0 <= number < 5499 :\n"], ["rangeList =  [5499, 9499, 14499, 19499, 24499, 29499, 34499, 39499, 44499]\nreturnList = [5000, 10000, 15000, 20000, 25000, 30000, 35000, 40000, 45000]\n\ndef checkRange(number):\n    for i in range(len(rangeList)):\n        if number<=rangeList[i]:\n            return returnList[i]\n    return -1\n\ninp: checkRange(5499)\nop: 5000\n"], ["In [188]: checkRange(5499)\nOut[188]: 5000\n\nIn [189]: checkRange(5500)\nOut[189]: 10000\n\nIn [190]: checkRange(24872)\nOut[190]: 30000\n"], ["def checkRange(number):\n\n   count = 0\n   while int(number):\n      number /= 10\n      count += 1\n\n   round_off = count - 1\n   for i in range(count - round_off):\n      number *= 10\n\n   number = int(number)\n\n   return int((10**(count - 1)) * (number))\n"], ["ranges = [[0,5499],[5500,9499],[9500,14499],[14500,19499],[19500,24499],[24500,29499],[29500,34499],[34500,39499],[39500,44499]]\nreturns = [5000,10000,15000,20000,25000,30000,35000,40000,45000]\n\ndef checkRange(number):\n    for i in range(len(returns)):\n        if number in range(ranges[i][0], ranges[i][1]):\n            return returns[i]\n\n# Test a few values:\nprint(checkRange(10))\nprint(checkRange(6000))\n", "5000 \n10000\n"], [], [], ["def op(operator,num1,num2):\n    global num3\n    if operator == \"/\":\n        num3 = num1 / num2\n    elif operator == \"+\":\n        num3 = num1 + num2\n    elif operator == \"-\":\n        num3 = num1 - num2\n    elif operator == \"*\":\n        num3 = num1 * num2\n    else:\n        print(\"FATAL ERROR\")\n\nnum1 = float(input(\"Please enter your first number: \"))\nnum2 = float(input(\"Please enter your second number: \"))\noperator = input(\"Please enter operator: \")\nop(operator,num1,num2)\nprint(num3)\n\ncontinue1 =  input (\"Would you like too continue? [Yes/No]\").lower()\n\nif continue1 in [\"yes\", \"y\"]:\n    num4 = float(input(\"Please enter second number: \"))\n    operator = input(\"please enter operator\")\n    op(operator,num3,num4)\n    print(num3)\nelse:\n    print(\"Fatal error\")\n\ninput(\"Press Enter to Exit\")\n"], ["if operator == \"/\":\n    num3 = num1 / num2\nelif operator == \"+\":\n    num3 = num1 + num2\nelif operator == \"-\":\n    num3 = num1 - num2\nelif operator == \"*\":\n    num3 = num1 * num2\nelse:\n    print(\"FATAL ERROR\")\n\nprint(num3)\n", "if continue1 == \"yes\" or \"Yes\":\n", "if continue1 == \"yes\" or continue1 == \"Yes\":\n", "if (continue1 == \"yes\") or (continue1 == \"Yes\"):\n", "if continue1 in (\"yes\", \"Yes\"):\n"], [], ["num1 = float(input(\"Please enter your first number: \"))\nnum2 = float(input(\"Please enter your second number: \"))\nkeepCalculate=True\nwhile keepCalculate:\n    operator = input(\"Please enter operator: \")\n    if operator == \"/\":\n        print(num1 / num2)\n    elif operator == \"+\":\n        print(num1 + num2)\n    elif operator == \"-\":\n        print(num1 - num2)\n    elif operator == \"*\":\n        print(num1 * num2)\n    else:\n        print(\"FATAL ERROR\")\n\n    continue1 =  input (\"Would you like too continue? [Yes/No]\")\n    if continue1== \"yes\" or \"Yes\":\n       keepCalculate=True\n    else:\n        keepCalculate=False\n"], ["import cv2\nimport os\n\n\nimage_folder = 'images'\nvideo_name = 'video.avi'\n\nimages = [img for img in os.listdir(image_folder) if img.endswith(\".jpg\")]\nframe = cv2.imread(os.path.join(image_folder, images[0]))\nheight, width, layers = frame.shape\n\nvideo = cv2.VideoWriter(video_name, 0, 1, (width,height))\n\nfor i in range(len(images)):\n    video.write(cv2.imread(os.path.join(image_folder, 'a'+str(i)+'.jpg')))\n\ncv2.destroyAllWindows()\nvideo.release()\n"], ["df = pd.DataFrame({'A' : [0,1,2,3,'a12351','123a6']})\n\ndf[~pd.to_numeric(df['A'],errors='coerce').isnull()]\n\n   A\n0  0\n1  1\n2  2\n3  3\n", "df[~df['A'].astype(str).str.contains('^[a-z]')==True]\n\n       A\n0      0\n1      1\n2      2\n3      3\n5  123a6\n", "from pathlib import Path\n\ndef delete_search_term(input_file, column):\n    \"\"\"\n    Takes in a file and removes any strings from a given column\n    input_file : path to your file.\n    column : column with strings that you want to remove.\n\n    \"\"\"\n    file_path = Path(input_file)\n\n    if not file_path.is_file():\n        raise Exception('This file path is not valid')\n\n    df = pd.read_csv(input_file)\n\n    #(2) Filter every row where the first letter is 's' from search term\n    df = df[~pd.to_numeric(df[column],errors='coerce').isnull()]\n    print(f\"Creating file as:\\n{file_path.parent.joinpath(f'{file_path.stem}_edited.csv')}\")\n    return df.to_csv(file_path.parent.joinpath(f\"{file_path.stem}_edited.csv\"),index=False)\n", "import numpy as np\nimport pandas as pd\n\ndef deleteSearchTerm(inputFile):\n    df = pd.read_csv(inputFile)\n    print(df)\n\n#(2) Filter every row where the first letter is 's' from search term\n    df = df[~pd.to_numeric(df['ProductOMS'],errors='coerce').isnull()]\n\n    print(df)\n    return df.to_csv(inputFile)\n\n\ninputFile = filePath\ninputFile = deleteSearchTerm(inputFile)\n"], ["return render_template(\"index.html\")\n"], ["def deleteSearchTerm(inputFile):\n#(1) Open the file\n\n    df = pd.read_csv(inputFile)\n    print(df)\n\n#(2) Filter every row where the first letter is 's' from search term\n    df = df[~pd.to_numeric(df['ProductOMS'],errors='coerce').isnull()]\n\n    print(df)\n    return df\n", "DeleteSearchTerm(InputFile)\n", "InputFile = DeleteSearchTerm(InputFile)\n", "df.to_csv('CSV file name', index=True)\n"], ["python sample.py\n"], ["def home():\n    return render_template(\"index.html\") ```\n"], [], ["def par_nepar(n):\n    cifre = []\n\n    while n != 0:\n        cifre.append(n % 10)\n        n //= 10\n\n    even = True\n    odd = True\n    output = \"The number complies to the needed terms\"\n\n    for broj in cifre:\n        if broj % 2 == 0 and odd:\n            even = True\n            odd = False\n        elif broj % 2 != 0 and even:\n            odd = True\n            even = False\n        else:\n            return \"The number doesn't comply to the needed terms.\"\n    return output\nn = int(input(\"Unesite broj n: \"))\nprint(par_nepar(n))\n", "Unesite broj n: 33890\nThe number doesn't comply to the needed terms.\n\nUnesite broj n: 4963850\nThe number complies to the needed terms\n"], ["par_nepar = lambda x: all([(int(k) % 2) == ((i + int(str(x)[0])) % 2) for (i, k) in enumerate(str(x))])\n\nprint(par_nepar(2749))\nprint(par_nepar(2744))\n\n# Output\nTrue\nFalse\n", "par_nepar = lambda x: 'The number complies to the needed terms. ' if all(\n    [(int(k) % 2) == ((i + int(str(x)[0])) % 2) for (i, k) in\n     enumerate(str(x))]) else \"The number doesn't comply to the needed terms.\"\n\n#Output\nThe number complies to the needed terms.\nThe number doesn't comply to the needed terms.\n"], ["def par_nepar(n):\n\n    split = [int(i) for i in str(n)]. \n\n    for i in range(1,len(split)):\n\n        if (split[i] % 2 == 0) ^ (split[i-1] % 2 == 1):\n            return False\n\n    return True\n", ">>> print(par_nepar(2749))\nTrue\n\n>>> print(par_nepar(2744))\nFalse\n"], ["def par_nepar(n):\n    cifre = list(str(n))\n    flg = False\n    if int(cifre[0]) % 2 == 0:\n        flg = True\n    for d in cifre[1:]:\n        _flg = False\n        if int(d) % 2 == 0:\n            _flg = True\n        if not flg^_flg:\n            print(\"The number does not complies to the needed terms\")\n            return\n        flg = _flg\n    print(\"The number complies to the needed terms\")\n    return\n"], ["def par_nepar(n):\n    s,h=0,0\n    for i in range(len(n)-1):\n        if n[i]%2==0 and n[i+1]%2!=0:\n            s+=1\n        elif n[i]%2!=0 and n[i+1]%2==0:\n            h+=1\n    if s==len(n)//2 or h==len(n)//2:\n        print(\"The number complies to the needed terms\")\n    else:\n        print(\"The number does not complies to the needed terms\")\n\n# list of digits in the provided input\nn = list(map(lambda x: int(x),list(input(\"Unesite broj n: \"))))\npar_nepar(n)\n"], ["orders2 = [list(zip(*order))[0] for order in orders]\n", "orders2 = [list(a) for a in [list(zip(*order))[0] for order in orders]]\n", "orders = [[('Fries', 9)], [('Burger', 6), ('Milkshake', 2), ('Cola', 2)], [('Cola', 2), ('Nuggets', 3), ('Onion Rings', 5)], [('Fries', 9)], [('Big Burger', 7), ('Nuggets', 3)]]\n\n# For a list of tuples\norders2 = [list(zip(*order))[0] for order in orders]\nprint(*orders2) # ('Fries',) ('Burger', 'Milkshake', 'Cola') ('Cola', 'Nuggets', 'Onion Rings') ('Fries',) ('Big Burger', 'Nuggets')                         \n\n\n# If you need a list of lists\norders2 = [list(a) for a in [list(zip(*order))[0] for order in orders]]\nprint(*orders2) # ['Fries'] ['Burger', 'Milkshake', 'Cola'] ['Cola', 'Nuggets', 'Onion Rings'] ['Fries'] ['Big Burger', 'Nuggets']                           \n\n\n"], [], ["output = [[item[0] for item in order] for order in orders]\n\ndisplay(output)\n\n[['Fries'],\n['Burger', 'Milkshake', 'Cola'],\n['Cola', 'Nuggets', 'Onion Rings'],\n['Fries'],\n['Big Burger', 'Nuggets']]\n"], ["l=[]\nfor order in orders:\n    l.append([name[0] for order in orders for name in order])\nl\n", "[['Fries'],\n ['Burger', 'Milkshake', 'Cola'],\n ['Cola', 'Nuggets', 'Onion Rings'],\n ['Fries'],\n ['Big Burger', 'Nuggets']]\n"], [], ["import pandas as pd\n\ndef processAndSaveCSV(filename):\n  # Read the CSV file\n  df = pd.read_csv(filename)\n\n  # Retain only the rows with `ProductOMS` being numeric\n  df = df[df['ProductOMS'].str.contains('^\\d+')]\n\n  # Save CSV File - Rewrites file\n  df.to_csv(filename)\n"], ["./ngrok http 3000\n"], ["df = pd.read_csv(filename)\ndf = df[~df['ProductOMS'].str.contains('^[a-z]+')]\ndf.to_csv(filename)\n"], ["'''\nproductNum,ProductOMS,productPrice,Unnamed: 3\n2463448,1002623072,419.95,\n2463413,1002622872,289.95,\n2463430,1002622974,309.95,\n2463419,1002622908,329.95,\n2463434,search?searchTerm=2463434,,\n2463423,1002622932,469.95,\n'''\n\nimport pandas as pd\n\ndf = pd.read_clipboard()\n", "   productNum                 ProductOMS  productPrice  Unnamed: 3\n0     2463448                 1002623072        419.95         NaN\n1     2463413                 1002622872        289.95         NaN\n2     2463430                 1002622974        309.95         NaN\n3     2463419                 1002622908        329.95         NaN\n4     2463434  search?searchTerm=2463434           NaN         NaN\n5     2463423                 1002622932        469.95         NaN\n", "df1 = df.loc[df['ProductOMS'].str.isdigit()]\n\nprint(df1)\n", "   productNum  ProductOMS  productPrice  Unnamed: 3\n0     2463448  1002623072        419.95         NaN\n1     2463413  1002622872        289.95         NaN\n2     2463430  1002622974        309.95         NaN\n3     2463419  1002622908        329.95         NaN\n5     2463423  1002622932        469.95         NaN\n"], ["title_words = [ word for word in text6 if word.istitle()]\n\nprint(len(title_words))\n"], ["# set up df to match format of question\nmonth = np.arange(1, 13)\nday = np.ones(len(months))\na = np.zeros(len(months))\ndf = pd.DataFrame({'month':month, 'day':day, 'a':a})\ndf = df.set_index(['month', 'day'])\n\n# create personalised mapping to rename index\nmonths = ['Jan', 'Feb', 'Mar', 'Apr', 'May', 'Jun', 'Jul', 'Aug', 'Sep', 'Oct', 'Nov', 'Dec']\nmonth_map = {i+1:month for i, month in enumerate(months)}\n\n# rename the level 0 index\ndf.rename(index=month_map, level=0, inplace=True)\n", "               a\nmonth   day \nJan     1.0   0.0\nFeb     1.0   0.0\nMar     1.0   0.0\nApr     1.0   0.0\nMay     1.0   0.0\nJun     1.0   0.0\nJul     1.0   0.0\nAug     1.0   0.0\nSep     1.0   0.0\nOct     1.0   0.0\nNov     1.0   0.0\nDec     1.0   0.0\n"], ["pd.to_datetime(np.arange(12)+1, format='%m').to_series().dt.month_name().str[:3].values\n", "array(['Jan', 'Feb', 'Mar', 'Apr', 'May', 'Jun', 'Jul', 'Aug', 'Sep',\n       'Oct', 'Nov', 'Dec'], dtype=object)\n", "df['month'] = pd.to_datetime(df.index.levels[0], formatt='%m').to_series().dt.month_name().str[:3]\ndf['day'] = df.index.levels[1]\ndf.set_index(['month', 'day'], inplace=True)\n"], ["5\n1\n2\n3\n4\n5\n", "n = 5\nls = [1, 2, 3, 4, 5]\n", "1\n2\n3\n4\n5\n", "ls = [1, 2, 3, 4, 5]\n"], ["new_list = []\nnumber_of_loop = int(input())\nfor _ in range(number_of_loop):\n    new_list.append(int(input()))\n", "[1, 1, 1, 1, 1]\n"], ["output = []\ntot = int(input())\nfor i in range(tot):\n    num=int(input())\n    output.append(num)\n\nprint(output)\n", "[5, 6, 7, 2]\n"], ["num = input()\nli = []\nfor _ in range(num):\n    data = int(input())\n    li.append(data)\n\nprint(li)\n", "4\n6\n3\n9\n4\n"], ["l = [int(input()) for _ in range(int(input()))]\n", "[1, 2, 3, 4]\n"], ["df.stack().to_frame().to_records().tolist()\n# [('A', 'A', 1), ('A', 'B', 3), ('A', 'C', 0), ('B', 'A', 3),...\n"], ["In [1638]: df.unstack().to_frame().to_records().tolist()\nOut[1638]: \n[('A', 'A', 1),\n ('A', 'B', 3),\n ('A', 'C', 0),\n ('B', 'A', 3),\n ('B', 'B', 2),\n ('B', 'C', 5),\n ('C', 'A', 0),\n ('C', 'B', 5),\n ('C', 'C', 4)]\n"], ["[*df.stack().iteritems()]\n[(('A', 'A'), 1), (('A', 'B'), 3), (('A', 'C'), 0), (('B', 'A'), 3), (('B', 'B'), 2), (('B', 'C'), 5), (('C', 'A'), 0), (('C', 'B'), 5), (('C', 'C'), 4)]\n", "df.reset_index().melt('index').values.tolist()\n"], ["with dataframe as data:\n    for line in data.readlines():\n        parts = line.split(' ') # split line into parts\n        part1 = (parts[0])\n        part2 = (parts[1])\n        part3 = (parts[2])\n"], ["df.stack().reset_index().agg(tuple,1).tolist()\n", "[('A', 'A', 1),\n ('A', 'B', 3),\n ('A', 'C', 0),\n ('B', 'A', 3),\n ('B', 'B', 2),\n ('B', 'C', 5),\n ('C', 'A', 0),\n ('C', 'B', 5),\n ('C', 'C', 4)]\n"], ["import csv\n\nwith open(\"test.csv\", \"r\", newline='') as f:\n    fieldnames = ['Date_of_birth', 'ID', 'First_Name', 'Last_Name']\n    rdr = csv.DictReader(f, fieldnames=fieldnames)\n    for row in rdr:\n       date_of_birth = row['Date_of_birth']\n       print(date_of_birth)\n", "import csv\n\nwith open(\"test.csv\", \"r\", newline='') as f:\n    rdr = csv.DictReader(f)\n    for row in rdr:\n       date_of_birth = row['Date_of_birth']\n       print(date_of_birth)\n"], ["import csv\nwith open('test.csv') as f:\n\n    start_bytes = f.read(8)\n    assert(start_bytes == 'HEADER: ')\n\n    c = csv.reader(f)\n\n    header_row = next(c)\n    column_number = header_row.index('Date_of_birth')\n\n    for row in c:\n        print(row[column_number])\n", "import csv\nwith open('test.csv') as f:\n\n    start_bytes = f.read(8)\n    assert(start_bytes == 'HEADER: ')\n\n    c = csv.DictReader(f)\n    for row in c:\n        print(row['Date_of_birth'])\n"], ["with open(\"test.csv\", \"r\") as f:\n    dates = []\n    while True:\n        line = f.readline()\n        if not line:  # if line is blank, there are no more lines\n            break  # stop the loop\n        dates.append(line.split()[0])\n"], ["dates = []\nwith open(\"test.csv\") as f:\n    for row in f:\n        dates.append(row.split()[0])\n"], ["import csv\nwith open(\"test.csv\", \"r\") as f:\n    reader = csv.DictReader(f)\n    for line in reader:\n        print(line['Date_of_birth'])\n"], ["import pandas as pd\nimport numpy as np\nimport calendar\n\n#Create dummy dataframe\ndateindx = pd.date_range('2019-01-01', '2019-12-31', freq='D')\n\ndf = pd.DataFrame(np.random.randint(0,1000, (len(dateindx), 5)), \n             index=pd.MultiIndex.from_arrays([dateindx.month, dateindx.day]),\n             columns=['High', 'Low','Open', 'Close','Volume'])\n\n#Use calendar library for abbreviations and order\ndd=dict((enumerate(calendar.month_abbr)))\n\n#rename level zero of multiindex\ndf = df.rename(index=dd,level=0)\n\n#Create calendar month data type with order for sorting\ncal_dtype = pd.CategoricalDtype(list(calendar.month_abbr), ordered=True)\n\n#Change the dtype of the level zero index\ndf.index = df1.index.set_levels(df.index.levels[0].astype(cal_dtype), level=0)\ndf\n", "        High  Low  Open  Close  Volume\nJan 1    501  720   671    943     586\n    2    410   67   207    945     284\n    3    473  481   527    415     852\n    4    157  809   484    592     894\n    5    294   38   458     62     945\n...      ...  ...   ...    ...     ...\nDec 27   305  354   347      0     726\n    28   764  987   564    260      72\n    29   730  151   846    137     118\n    30   999  399   634    674      81\n    31   347  980   441    600     676\n\n[365 rows x 5 columns]\n"], ["ordered_pizzas = {\"pizza1\":[\"cheese\", \"pepperoni\", \"onions\", \"pineapple\"]}\n\n### to add new\nnum_pizzas = 2\nlist_name = 'pizza'+str(num_pizzas)\nordered_pizzas[list_name] = [\"cheese\", \"pepperoni\", \"olives\"]\n"], ["df['test'].str.split(n=4).str[-1]\n"], ["num_pizzas = 0\nallPizza = []\norder = input(\"Would you like to order a pizza? y/n\")\nwhile order!=\"n\":\n    pizza = []\n    topping = input(\"What do you want on your pizza?\")\n    pizza.append(topping)\n    moreTopping = input(\"Another topping? y/n\")\n    while moreTopping != \"n\":\n        topping = input(\"What do you want on your pizza?\")\n        pizza.append(topping)\n        moreTopping = input(\"Another topping? y/n\")\n    allPizza.append(pizza)\n    order = input(\"Would you like to order another pizza? y/n\")\nnum = 0\nfor i in allPizza:\n    print(\"Pizza\" + \" \" + str(num) + \" with\", end=' ')\n    print(', '.join(allPizza[num]))\n    print()\n    num+=1\n"], ["list_name = {\"pizza1\":\"cheese\", \"pizza2\":\"pepperoni\", \"pizza3\":\"onions\", \"pizza4\":\"pineapple\"}\n\nfor key in list_name.items():\n  print(key)\n\n('pizza1', 'cheese')\n('pizza2', 'pepperoni')\n('pizza3', 'onions')\n('pizza4', 'pineapple')\n\nfor key, value in list_name.items():\n  print(key, value)\n\npizza1 cheese\npizza2 pepperoni\npizza3 onions\npizza4 pineapple\n"], [], ["def generate_pizza(pizza_num: int, toppings: list) -> dict:\n    pizza_name = \"pizza\" + pizza_num\n    return {pizza_name: toppings}\n", "toppings = [cheese, pepperoni, onions, pineapple]\nlist_name = generate_pizza(4, toppings)\n"], ["import pandas as pd\nfrom datetime import datetime\n\ndf = pd.DataFrame(range(1, 13), columns=['month']) \ndf['month'] = df.apply(\n    lambda row: '{:%b}'.format(datetime.strptime(str(row['month']), '%m')),\n    axis=1\n) \nprint(df)\n", "0    Jan\n1    Feb\n2    Mar\n3    Apr\n4    May\n5    Jun\n6    Jul\n7    Aug\n8    Sep\n9    Oct\n10   Nov\n11   Dec\n", "import pandas as pd\nimport numpy as np\nfrom datetime import datetime\n\ntuples = [(1, 10), (1, 12), (1, 13), (2, 1), (2, 20), (2, 10)]\nindex  = pd.MultiIndex.from_tuples(tuples, names=['month', 'day'])\nserie = pd.Series(np.random.randn(len(tuples)), index=index)\ndf = pd.DataFrame(serie, columns=['data']) \n\nprint(df)\n\n               data\nmonth day          \n1     10  -0.463804\n      12   1.979072\n      13   0.087430\n2     1    0.928077\n      20  -0.697795\n      10  -0.275762\n\nidx = pd.Index(df.index).get_level_values(0)\n# Set new index, but keep the multindex levels\ndf = df.set_index(pd.MultiIndex.from_tuples(((\n        '{:%b}'.format(datetime.strptime(str(k), '%m')), \n        v \n) for k, v in idx), names=['month', 'day']), ['month', 'day']) \nprint(df)\n\n               data\nmonth day          \nJan   10  -0.463804\n      12   1.979072\n      13   0.087430\nFeb   1    0.928077\n      20  -0.697795\n      10  -0.275762\n", "from datetime import datetime\nimport pandas as pd\n\n\nstart = '1/4/2020'\nend = '3/5/2020'\n\ndata = pd.DataFrame()\nfull_dates = pd.date_range(start, end)\ndata = data.reindex(full_dates)\ndata['year'] = data.index.year\ndata['month'] = data.index.month\ndata['week'] = data.index.week\ndata['day'] = data.index.day\ndata.set_index('month', append=True, inplace=True)\ndata.set_index('week', append=True, inplace=True)\ndata.set_index('day', append=True, inplace=True)\ndf = data.groupby(['month', 'day']).mean()\nidx = pd.Index(df.index).get_level_values(0)\ndf = df.set_index(pd.MultiIndex.from_tuples(((\n    '{:%b}'.format(datetime.strptime(str(k), '%m')),\n    v\n) for k, v in idx), names=['month', 'day']), ['month', 'day'])\nprint(df)\n", "           year\nmonth day      \nJan   4    2020\n      5    2020\n      6    2020\n      7    2020\n      8    2020\n...         ...\nMar   1    2020\n      2    2020\n      3    2020\n      4    2020\n      5    2020\n\n[62 rows x 1 columns]\n"], ["result_list = []\nfor x in tuple_list:\n    temp_tuple = []\n    if (len(x[0]) == 1 and x[0][0] == '') or len(x[0]) == 0:\n        continue\n\n    for y in x[0]:\n        if y == '':\n            continue\n        temp_tuple.append(y)\n\n    for y in range(1, len(x)):\n        temp_tuple.append(x[y])\n\n    result_list.append(temp_tuple)\n"], ["result=  [ [e for e in l if e] + list(t) for l, *t in tuple_list if any(l) ]\n"], [">>> [[x, y, z] for [x, *_], y, z in data]\n[['MATH120', 3.665, 0.4737615433949868], ['GER', 3.4566666666666666, 0.3967146329542181], ['FREE', 3.415636363636364, 0.450256863026264], ['', 0.041607963246554365, 0.38832820111766464]]\n", ">>> [ [*filter(None, lst), a, b] for lst, a, b in data if any(lst) ]\n[['MATH120', 3.665, 0.4737615433949868], ['GER', 3.4566666666666666, 0.3967146329542181], ['FREE', 3.415636363636364, 0.450256863026264]]\n>>>\n"], ["for listIndex in range(tuple_list):\n    tuple_list[listIndex] = list(tuple_list[listIndex]) # Converts inner tuples to list\n    for element in inner_tuple:\n        if isinstance(element, list): # checks if element inside tuple is list\n            #do logic on list that you need\n"], ["result = [list(x) for x in tuple_list]\n", "result = list(map(list, tuple_list))\n"], ["string = 'hello'\nnums = ''\n\nfor l in string:\n    nums += str(ord(l)-96)+' '\n\nprint(nums)\n"], ["In [1193]: df = pd.DataFrame({'Num':[1,2,3,4], 'Text':['15 March 2020 - There was','15 March 2020 - There has been','24 April 2018 - Nothing has','07 November 2014 - The Kooks']})\n\nIn [1194]: df\nOut[1194]: \n   Num                            Text\n0    1       15 March 2020 - There was\n1    2  15 March 2020 - There has been\n2    3     24 April 2018 - Nothing has\n3    4    07 November 2014 - The Kooks\n\nIn [1207]: df['Text'].str.split().str[4:].apply(' '.join)                                                                                                                                                \nOut[1207]: \n0         There was\n1    There has been\n2       Nothing has\n3         The Kooks\nName: Text, dtype: object\n"], ["t = pd.DataFrame({'Num':[1,2,3,4], 'Text':['15 March 2020 - There was','15 March 2020 - There has been','24 April 2018 - Nothing has','07 November 2014 - The Kooks']})\n\nt[\"text2\"] = t.apply(lambda x: x['Text'][str(x['Text']).find(\"- \")+2:], axis=1)\n", "Num           Text \n1        15 March 2020 - There was...\n2        15 March 2020 - There has been...\n3        24 April 2018 - Nothing has ...\n4        07 November 2014 - The Kooks....\n", "   Num                            Text           text2\n0    1       15 March 2020 - There was       There was\n1    2  15 March 2020 - There has been  There has been\n2    3     24 April 2018 - Nothing has     Nothing has\n3    4    07 November 2014 - The Kooks       The Kooks\n"], [], [], [], ["letter = 'c'\nprint(ord(letter)-96)\n"], ["import string\nletter_to_number = {l:n+1 for (l,n) in zip(string.ascii_uppercase, range(len(string.ascii_uppercase)))}\n# {'A': 1, 'B': 2, 'C': 3, 'D': 4, 'E': 5, 'F': 6, 'G': 7, 'H': 8, 'I': 9, 'J': 10, 'K': 11, 'L': 12, 'M': 13, 'N': 14, 'O': 15, 'P': 16, 'Q': 17, 'R': 18, 'S': 19, 'T': 20, 'U': 21, 'V': 22, 'W': 23, 'X': 24, 'Y': 25, 'Z': 26}\n"], ["A='lksdfj'\nfor c in A:\n    print(c,':',ord(c))\n", "l : 108\nk : 107\ns : 115\nd : 100\nf : 102\nj : 106\n"], [">>> ord('A')\n65\n", ">>> offset = ord('A') - 1\n>>> ord('A') - offset\n1\n>>> ord('B') - offset\n2\n"], ["import tensorflow as tf\n", "classifier.add(Dense(output_dim = 6, init = 'uniform', activation = 'relu', input_dim = 11))\n", "classifier.add(tf.keras.layers.Dense(output_dim = 6, init = 'uniform', activation = 'relu', input_dim = 11))\n"], ["import numpy as np\nfrom scipy import fftpack as scipy_fftpack\nfrom scipy import fft as scipy\n\n# FFTPACK RFFT 2D\ndef fftpack_rfft2d(matrix):\n    fftRows = scipy_fftpack.fft(matrix, axis=1)\n    fftCols = scipy_fftpack.fft(fftRows, axis=0)\n\n    return fftCols\n\n# FFTPACK IRFFT 2D\ndef fftpack_irfft2d(matrix):\n    ifftRows = scipy_fftpack.ifft(matrix, axis=1)\n    ifftCols = scipy_fftpack.ifft(ifftRows, axis=0)\n\n    return ifftCols.real\n", "import numpy as np\nfrom scipy import fftpack as scipy_fftpack\nfrom scipy import fft as scipy_fft\n\n\n# FFTPACK RFFT 2D\ndef fftpack_rfft2d(matrix):\n    fftRows = scipy_fftpack.fft(matrix, axis=1)\n    fftCols = scipy_fftpack.fft(fftRows, axis=0)\n\n    return fftCols\n\n# FFTPACK IRFFT 2D\ndef fftpack_irfft2d(matrix):\n    ifftRows = scipy_fftpack.ifft(matrix, axis=1)\n    ifftCols = scipy_fftpack.ifft(ifftRows, axis=0)\n\n    return ifftCols.real\n\nprint('\\n####################     INPUT DATA     ###################\\n')\n\n# initialize two 2D arrays with random data for testing\nin1 = np.array([[0,   0,   0,   0], \\\n                [0, 255, 255,   0], \\\n                [0,   0, 255, 255], \\\n                [0,   0,   0,   0]])\n\nprint('\\nin1 shape=', in1.shape, '\\n', in1)\n\nin2 = np.array([[0,   0,   0,   0], \\\n                [0,   0, 255,   0], \\\n                [0, 255, 255,   0], \\\n                [0, 255,   0,   0]])\n\nprint('\\nin2 shape=', in2.shape, '\\n', in2)\n\nprint('\\n###############    SCIPY: 2D RFFT (MULT)    ###############\\n')\n\n# transform both inputs with SciPy RFFT for 2D\nscipy_rfft1 = scipy_fft.fftn(in1)\nscipy_rfft2 = scipy_fft.fftn(in2)\n\nprint('* Output from scipy_fft.rfftn():')\nprint('scipy_fft1 shape=', scipy_rfft1.shape, '\\n', scipy_rfft1)\nprint('\\nscipy_fft2 shape=', scipy_rfft2.shape, '\\n', scipy_rfft2)\n\n# perform multiplication between two 2D arrays from SciPy RFFT\nscipy_rfft_mult = scipy_rfft1 * scipy_rfft2\n\n# perform inverse RFFT for 2D arrays using SciPy\nscipy_data = scipy_fft.irfftn(scipy_rfft_mult, in1.shape) # passing shape guarantees the output will\n                                                          # have the original data size\nprint('\\n* Output from scipy_fft.irfftn():')\nprint('scipy_data shape=', scipy_data.shape, '\\n', scipy_data)\n\nprint('\\n###############   FFTPACK: 2D RFFT (MULT)   ###############\\n')\n\n# transform both inputs with FFTPACK RFFT for 2D\nfftpack_rfft1 = fftpack_rfft2d(in1)\nfftpack_rfft2 = fftpack_rfft2d(in2)\nprint('* Output from fftpack_rfft2d():')\nprint('fftpack_rfft1 shape=', fftpack_rfft1.shape, '\\n', fftpack_rfft1)\nprint('\\nfftpack_rfft2 shape=', fftpack_rfft2.shape, '\\n', fftpack_rfft2)\n\n# TODO: perform multiplication between two 2D arrays from FFTPACK RFFT\nfftpack_rfft_mult = fftpack_rfft1 * fftpack_rfft2 # this doesn't work\n\n# perform inverse RFFT for 2D arrays using FFTPACK\nfftpack_data = fftpack_irfft2d(fftpack_rfft_mult)\nprint('\\n* Output from fftpack_irfft2d():')\nprint('fftpack_data shape=', fftpack_data.shape, '\\n', fftpack_data)\n\nprint('\\n#####################      RESULT     #####################\\n')\n\n# compare FFTPACK result with SCIPY\nprint('\\nIs fftpack_data equivalent to scipy_data?', np.allclose(fftpack_data, scipy_data), '\\n')\n", "####################     INPUT DATA     ###################\n\n\nin1 shape= (4, 4) \n [[  0   0   0   0]\n [  0 255 255   0]\n [  0   0 255 255]\n [  0   0   0   0]]\n\nin2 shape= (4, 4) \n [[  0   0   0   0]\n [  0   0 255   0]\n [  0 255 255   0]\n [  0 255   0   0]]\n\n###############    SCIPY: 2D RFFT (MULT)    ###############\n\n* Output from scipy_fft.rfftn():\nscipy_fft1 shape= (4, 4) \n [[1020.  -0.j -510.  +0.j    0.  -0.j -510.  -0.j]\n [-510.-510.j    0.  +0.j    0.  +0.j  510.+510.j]\n [   0.  -0.j    0.+510.j    0.  -0.j    0.-510.j]\n [-510.+510.j  510.-510.j    0.  -0.j    0.  -0.j]]\n\nscipy_fft2 shape= (4, 4) \n [[1020.  -0.j -510.-510.j    0.  -0.j -510.+510.j]\n [-510.  +0.j  510.+510.j    0.-510.j    0.  -0.j]\n [   0.  -0.j    0.  +0.j    0.  -0.j    0.  -0.j]\n [-510.  -0.j    0.  +0.j    0.+510.j  510.-510.j]]\n\n* Output from scipy_fft.irfftn():\nscipy_data shape= (4, 4) \n [[130050.  65025.  65025. 130050.]\n [ 65025.      0.      0.  65025.]\n [ 65025.      0.      0.  65025.]\n [130050.  65025.  65025. 130050.]]\n\n###############   FFTPACK: 2D RFFT (MULT)   ###############\n\n* Output from fftpack_rfft2d():\nfftpack_rfft1 shape= (4, 4) \n [[1020.  -0.j -510.  +0.j    0.  -0.j -510.  +0.j]\n [-510.-510.j    0.  +0.j    0.  +0.j  510.+510.j]\n [   0.  +0.j    0.+510.j    0.  +0.j    0.-510.j]\n [-510.+510.j  510.-510.j    0.  +0.j    0.  +0.j]]\n\nfftpack_rfft2 shape= (4, 4) \n [[1020.  -0.j -510.-510.j    0.  -0.j -510.+510.j]\n [-510.  +0.j  510.+510.j    0.-510.j    0.  +0.j]\n [   0.  +0.j    0.  +0.j    0.  +0.j    0.  +0.j]\n [-510.  +0.j    0.  +0.j    0.+510.j  510.-510.j]]\n\n* Output from fftpack_irfft2d():\nfftpack_data shape= (4, 4) \n [[130050.+0.j  65025.+0.j  65025.+0.j 130050.+0.j]\n [ 65025.+0.j      0.+0.j      0.+0.j  65025.+0.j]\n [ 65025.+0.j      0.+0.j      0.+0.j  65025.+0.j]\n [130050.+0.j  65025.+0.j  65025.-0.j 130050.+0.j]]\n\n#####################      RESULT     #####################\n\n\nIs fftpack_data equivalent to scipy_data? True \n"], [], ["# test data\nsz =50000\nsz = fftpack.next_fast_len(sz)\nin1 = np.random.randn(sz)\n\nprint(f\"Input (len = {len(in1)}):\", sep='\\n')\n\nrep = 1000\n\ntic = time.perf_counter()\nfor i in range(rep):\n    spec1 = fftpack.fft(in1,axis=0)\ntoc = time.perf_counter()\nprint(\"\", f\"Spectrum FFT (len = {len(spec1)}):\",\n      f\"spec1 takes {10**6*((toc - tic)/rep):0.4f} us\", sep=\"\\n\")\n\nsz2 = sz//2 + 1\nspec2 = np.empty(sz2, dtype=np.complex128)\n\ntic = time.perf_counter()\nfor i in range(rep):\n    tmp = fftpack.rfft(in1)\n\n    assert  tmp.dtype == np.dtype('float64')\n\n    if not sz & 0x1:\n        end = -1 \n        spec2[end] = tmp[end]\n    else:\n        end = None\n\n    spec2[0] = tmp[0]\n    spec2[1:end] = tmp[1:end].view(np.complex128)\n\ntoc = time.perf_counter()\nprint(\"\", f\"Spectrum RFFT (len = {len(spec2)}):\",\n      f\"spec2 takes {10**6*((toc - tic)/rep):0.4f} us\", sep=\"\\n\")\n", "Input (len = 50000):\n\nSpectrum FFT (len = 50000):\nspec1 takes 583.5880 us\n\nSpectrum RFFT (len = 25001):\nspec2 takes 476.0843 us\n", "# test data\nsz = 5000\nin1 = np.random.randn(sz, sz)\n\nprint(f\"Input (len = {len(in1)}):\", sep='\\n')\n\nrep = 1\n\ntic = time.perf_counter()\nfor i in range(rep):\n    spec1 = np.apply_along_axis(fftpack.fft, 0, in1)\n    spec1 = np.apply_along_axis(fftpack.fft, 1, spec1)\ntoc = time.perf_counter()\nprint(\"\", f\"2D Spectrum FFT with np.apply_along_axis (len = {len(spec1)}):\",\n      f\"spec1 takes {10**0*((toc - tic)/rep):0.4f} s\", sep=\"\\n\")\n\n\ntic = time.perf_counter()\nfor i in range(rep):\n    spec2 = fftpack.fft(in1,axis=0)\n    spec2 = fftpack.fft(spec2,axis=1)\ntoc = time.perf_counter()\nprint(\"\", f\"2D Spectrum 2xFFT (len = {len(spec2)}):\",\n      f\"spec2 takes {10**0*((toc - tic)/rep):0.4f} s\", sep=\"\\n\")\n\ntic = time.perf_counter()\nfor i in range(rep):\n    spec3 = fftpack.fft2(in1)\ntoc = time.perf_counter()\nprint(\"\", f\"2D Spectrum FFT2 (len = {len(spec3)}):\",\n      f\"spec3 takes {10**0*((toc - tic)/rep):0.4f} s\", sep=\"\\n\")\n\n# compare\nprint('\\nIs spec1 equivalent to the spec2?', np.allclose(spec1, spec2))\nprint('\\nIs spec2 equivalent to the spec3?', np.allclose(spec2, spec3), '\\n')\n", "Input (len = 5):\n\n2D Spectrum FFT with np.apply_along_axis (len = 5):\nspec1 takes 0.000183 s\n\n2D Spectrum 2xFFT (len = 5):\nspec2 takes 0.000010 s\n\n2D Spectrum FFT2 (len = 5):\nspec3 takes 0.000012 s\n\nIs spec1 equivalent to the spec2? True\n\nIs spec2 equivalent to the spec3? True\n", "Input (len = 500):\n\n2D Spectrum FFT with np.apply_along_axis (len = 500):\nspec1 takes 0.017626 s\n\n2D Spectrum 2xFFT (len = 500):\nspec2 takes 0.005324 s\n\n2D Spectrum FFT2 (len = 500):\nspec3 takes 0.003528 s\n\nIs spec1 equivalent to the spec2? True\n\nIs spec2 equivalent to the spec3? True \n", "Input (len = 5000):\n\n2D Spectrum FFT with np.apply_along_axis (len = 5000):\nspec1 takes 2.538471 s\n\n2D Spectrum 2xFFT (len = 5000):\nspec2 takes 0.846661 s\n\n2D Spectrum FFT2 (len = 5000):\nspec3 takes 0.574397 s\n\nIs spec1 equivalent to the spec2? True\n\nIs spec2 equivalent to the spec3? True\n"], [], ["import random\n\n\nclass Lbom():\n  def __init__(self, **kwargs):\n    for key, value in kwargs.items():\n      if key == 'color':\n        self.print_color(value) \n      if key == 'combo':\n        self.combo(value)\n\n\n  def combo(self, combination):\n    print(combination * random.randint(0,100))\n\n\n  def print_color(self, color):\n    print('color: {}'.format(color))\n", ">>> from lbom import *\n>>> random.seed(1234)\n>>> test = Lbom(color='blue', combo = 3.4)\ncolor: blue\n336.59999999999997\n>>> test.print_color('red')\ncolor: red\n>>> random.seed(1010)\n>>> test.combo(-1)\n-85\n>>>\n", "def test_lbom():\n    '''\n    >>> from lbom import *\n    >>> random.seed(1234)\n    >>> test = Lbom(color='blue', combo = 3.4)\n    color: blue\n    336.59999999999997\n    >>> test.print_color('red')\n    color: red\n    >>> random.seed(1010)\n    >>> test.combo(-1)\n    -85\n    >>>\n    '''\n\n\nif __name__ == '__main__':\n  import doctest\n  doctest.testmod(name='test_lbom', verbose=True)\n", "python -m tests.lbom_test\n"], [], [], ["# this is a parameter you can play with, \n# but if your df1 is in memory, this value should work\nnb_split = int((len(df1)*len(df2))//4e6)+1\n\n# work with arrays of flaot\narr1 = df1[['From','To']].astype('int64').to_numpy().astype(float)\narr2 = df2.astype('int64').to_numpy().astype(float)\n# create result array\narr_out = np.zeros((len(arr1), 2), dtype=float)\ni = 0 #index position\nfor arr1_sp in np.array_split(arr1, nb_split, axis=0):\n    # get length of the chunk\n    lft = len(arr1_sp)\n    # get the min datetime in From and max in To\n    min_from = arr1_sp[:, 0].min()\n    max_to = arr1_sp[:, 1].max()\n\n    # select the rows of arr2 tht are within the min and max date of the split\n    arr2_sp = arr2[(arr2[:,0]>=min_from)&(arr2[:,0]<=max_to), :]\n\n    # create an bool arraywith True when the date in arr2_sp is above from and below to\n    # each row is the reuslt for each row of arr1_sp\n    m = np.less_equal.outer(arr1_sp[:,0], arr2_sp[:, 0])\\\n        &np.greater_equal.outer(arr1_sp[:,1], arr2_sp[:, 0])\n\n    # use this mask to get the values high and low within the range row-wise\n    # and replace where the mask was False by np.nan\n    arr_high = arr2_sp[:,1]*m\n    arr_high[~m] = np.nan\n    arr_low = arr2_sp[:,2]*m\n    arr_low[~m] = np.nan\n\n    # put the result in the result array\n    arr_out[i:i+lft, 0] = np.nanmax(arr_high, axis=1)\n    arr_out[i:i+lft, 1] = np.nanmin(arr_low, axis=1)\n    i += lft #update first idx position for next loop\n\n# create the columns in df1\ndf1['High'] = arr_out[:, 0]\ndf1['Low'] = arr_out[:, 1]\n"], [], ["from itertools import product\nfrom pprint import pprint\n\nd = {\n    \"weather\": [\"windy\", \"calm\"],\n    \"season\": [\"summer\", \"winter\", \"spring\", \"autumn\"],\n    \"lateness\": [\"ontime\", \"delayed\"],\n}\n\nresult = {}\nfor comb in product(*d.values()):\n    current = result\n    for key in comb[:-1]:\n        current = current.setdefault(key, {})\n    current[comb[-1]] = 0\n\npprint(result)\n", "{'calm': {'autumn': {'delayed': 0, 'ontime': 0},\n          'spring': {'delayed': 0, 'ontime': 0},\n          'summer': {'delayed': 0, 'ontime': 0},\n          'winter': {'delayed': 0, 'ontime': 0}},\n 'windy': {'autumn': {'delayed': 0, 'ontime': 0},\n           'spring': {'delayed': 0, 'ontime': 0},\n           'summer': {'delayed': 0, 'ontime': 0},\n           'winter': {'delayed': 0, 'ontime': 0}}}\n", "order = ['weather', 'season', 'lateness']\n\nresult = {}\nfor comb in product(*map(d.get, order)):\n    current = result\n    for key in comb[:-1]:\n        current = current.setdefault(key, {})\n    current[comb[-1]] = 0\n"], ["category_cases = {'weather': ['windy', 'calm'],\n                  'season': ['summer', 'winter', 'spring', 'autumn'],\n                  'lateness': ['ontime', 'delayed']}\norder = ['weather', 'season', 'lateness']\n\ndef gen_tree(category_cases, order):\n    if len(order) == 0:\n        return 0\n    return {x:gen_tree(category_cases, order[1:]) for x in category_cases[order[0]]}\n"], ["import pandas as pd\ndf = pd.DataFrame(\n       index=pd.MultiIndex.from_product([d['weather'], d['season']]),\n       columns=d['lateness'], data=0\n     )\n", "              ontime  delayed\nwindy summer       0        0\n      winter       0        0\n      spring       0        0\n      autumn       0        0\ncalm  summer       0        0\n      winter       0        0\n      spring       0        0\n      autumn       0        0\n", "df.loc[('windy', 'summer'), 'ontime'] = 1\ndf.loc['calm', 'autumn']['delayed'] = 2\n\n# Result:\n              ontime  delayed\nwindy summer       1        0\n      winter       0        0\n      spring       0        0\n      autumn       0        0\ncalm  summer       0        0\n      winter       0        0\n      spring       0        0\n      autumn       0        2\n", "df = pd.DataFrame(\n       index=pd.MultiIndex.from_product(list(d.values())[:-1]), \n       columns=list(d.values())[-1], data=0\n     )\n", "# Gets the sum of 'delayed' items in all of 'calm'\n# Filters all the 'delayed' data in 'calm'    \ndf.loc['calm', 'delayed']\n\n# summer    5\n# winter    0\n# spring    0\n# autumn    2\n# Name: delayed, dtype: int64\n\n# Apply a sum:\ndf.loc['calm', 'delayed'].sum()\n\n# 7\n\n# Gets the mean of all 'summer' (notice the `slice(None)` is required to return all of the 'calm' and 'windy' group)\ndf.loc[(slice(None), 'summer'), :].mean()\n\n# ontime     0.5\n# delayed    2.5\n# dtype: float64\n", "def gen_dict(d, level=0):\n    if level >= len(d):\n        return 0\n    key = tuple(d.keys())[level]\n    return {val: gen_dict(d, level+1) for val in d.get(key)}\n\ngen_dict(d)\n", "{'calm': {'autumn': {'delayed': 0, 'ontime': 0},\n          'spring': {'delayed': 0, 'ontime': 0},\n          'summer': {'delayed': 0, 'ontime': 0},\n          'winter': {'delayed': 0, 'ontime': 0}},\n 'windy': {'autumn': {'delayed': 0, 'ontime': 0},\n           'spring': {'delayed': 0, 'ontime': 0},\n           'summer': {'delayed': 0, 'ontime': 0},\n           'winter': {'delayed': 0, 'ontime': 0}}}\n"], ["def MaxMin(row):\n    dfRange = df2[(df2['Date']>=row['From'])&(df2['Date']<=row['To'])] # df2 rows within a given date range\n    row['High'] = dfRange['High'].max()\n    row['Low'] = dfRange['Low'].min()\n    return row\n\ndf1 = df1.apply(MaxMin, axis =1)\n"], ["def get_output(category, order, i=0):\n         output = {}\n         for key in order[i:i+1]:\n             for value in category[key]:\n                 output[value] = get_output(category, order, i+1)\n         if output == {}:\n            return 0\n         return output\n"], ["(df1.assign(dummy=1)\n   .merge(df2.assign(dummy=1), on='dummy')   # this is cross merge\n   .drop('dummy', axis=1)                    # remove the `dummy` column\n   .query('From<=Date<=To')                  # only choose valid data\n   .groupby(['From','To'])                   # groupby `From` and `To`\n   .agg({'High':'max','Low':'min'})          # aggregation\n   .reset_index()                            \n)\n", "         From         To  High  Low\n0  2020-01-01 2020-01-05    20   -1\n1  2020-01-03 2020-01-07    20   -1\n2  2020-01-05 2020-01-09    20   -1\n3  2020-01-07 2020-01-11    19   -1\n4  2020-01-09 2020-01-13    20    0\n5  2020-01-11 2020-01-15    20    0\n6  2020-01-13 2020-01-17    16    0\n7  2020-01-15 2020-01-19    20    0\n8  2020-01-17 2020-01-21    20    0\n9  2020-01-19 2020-01-23    17    0\n10 2020-01-21 2020-01-25    20    0\n11 2020-01-23 2020-01-27    20    0\n12 2020-01-25 2020-01-29    20    0\n13 2020-01-27 2020-01-31    20    0\n14 2020-01-29 2020-02-02    20    0\n15 2020-01-31 2020-02-04    20    0\n"], ["import copy\n\nstructure = ['weather', 'season', 'lateness']\ndata = {'weather': ['windy', 'calm'], 'season': ['summer', 'winter', 'spring', 'autumn'],\n        'lateness': ['ontime', 'delayed'], }\n\nd_tree = dict()\nn = len(structure)  # length of the structure list\nprev_val = 0  # the innermost value\nwhile n > 0:\n    n -= 1\n    keys = data.get(structure[n]) or list()  # get the list of values from data\n    # Idea here is to start with inner most dict and keep moving outer\n    d_tree.clear()\n    for key in keys:\n        d_tree[key] = copy.copy(prev_val)\n    prev_val = copy.copy(d_tree)  # Copy the d_tree to put as value to outer dict\nprint(d_tree)\n"], ["def getHighLow(row):\n    wrk = df2[df2.Date.between(row.From, row.To)]\n    return pd.Series([wrk.High.max(), wrk.Low.min()], index=['High', 'Low'])\n", "df1.join(df1.apply(getHighLow, axis=1))\n", "df2a = df2.set_index('Date')\n", "def getHighLow2(row):\n    wrk = df2a.loc[row.From : row.To]\n    return pd.Series([wrk.High.max(), wrk.Low.min()], index=['High', 'Low'])\n", "df1.join(df1.apply(getHighLow2, axis=1))\n"], [], ["unique_countries = ['India', 'USA', 'Canada', 'Japan']\n\nvalid = True\nwhile valid:\n    my_country = input('Enter a valid country: ')\n    if my_country in unique_countries:\n        print('Thanks, one moment while we fetch the data')\n        # Some code here\n        valid = False # This will Exit Program\n    elif my_country == \"end\":\n        valid = False\n    else:\n        print(\"Country Name entered is not valid...\")\n"], ["if my_country not in unique_countries:\n   continue\n"], ["else:\n        my_country == \"end\"\n        break \n", "elif my_country == \"end\":\n    break \n"], ["while True:\n    my_country = raw_input('Enter a valid country:')\n    if my_country in unique_countries:\n        print('Thanks, one moment while we fetch the data')\n        break\n    elif  my_country == \"end\":\n        break\n    else:\n        continue\n"], ["while True:\n    my_country = input('Enter a valid country: ')\n    if my_country in unique_countries:\n        print('Thanks, one moment while we fetch the data')\n        # Some code here\n        #Exit Program\n    elif my_country == \"end\":\n        break\n    else:\n        print (\"Try again.\") \n"], ["extract = '''Hi this is my config file.\nPlease dont delete it\n\n[homes]\n  browseable                     = No\n  comment                        = Your Home\n  create mode                    = 0640\n  csc policy                     = disable\n  directory mask                 = 0750\n  public                         = No\n  writeable                      = Yes\n\n[proj]\n  browseable                     = Yes\n  comment                        = Project directories\n  csc policy                     = disable\n  path                           = /proj\n  public                         = No\n  writeable                      = Yes\n\n[]\n\nThis last second line.\nEnd of the line.\n'''.split('\\n[')[0][:-1]\n", "Hi this is my config file.\nPlease dont delete it\n", "with open(\"smb\", \"r\") as f: \n     extract = f.read()\n     tail = extract.split(']\\n')\n     extract = extract.split('\\n[')[0][:-1]+[tail[len(tail)-1]\n", "Hi this is my config file.\nPlease dont delete it\nThis last second line.\nEnd of the line.\n"], ["start=0\ntarg = \"\"\nend=0\nwith open(\"smb\", \"r\") as file:\n    for line in file: \n        try:  \n            if start==0:\n                start = line.index(\"[\")\n        except:\n            start = start\n        try:  \n            end = line.index(\"]\")\n        except:\n            end = end\n        targ = targ+line\n\ntarg = targ[0:start-1]+targ[end+1:]\n"], ["df = pd.read_csv('smb.txt', sep='----', header=None, engine='python',names=[\"text\"])\n\nres = df.loc[~df.text.str.contains(\"=|\\[.*\\]\")]\nprint(res)\ntext\n0   Hi this is my config file.\n1   Please dont delete it\n18  This last second line.\n19  End of the line.\n", "import re\nwith open('smb.txt') as myfile:\n    content = myfile.readlines()\n    pattern = re.compile(\"=|\\[.*\\]\")\n    res = [ent.strip() for ent in content if not pattern.search(ent) ]\n    res = [ent for ent in res if ent != \"\"]\n    print(res)\n['Hi this is my config file.',\n 'Please dont delete it',\n 'This last second line.', \n 'End of the line.']\n"], ["df = pd.read_csv(your_file,sep='\\t',header=None)\n\nidx = df[df[0].str.contains('\\[')].index\n\ndf1 = df.loc[~df.index.isin(range(idx[0],idx[-1] + 1))]\n\n                             0\n0   Hi this is my config file.\n1        Please dont delete it\n18      This last second line.\n19            End of the line.\n"], [], [], ["import re\nfrom pathlib import Path\nres = '\\n'.join(re.findall(r'^\\w.*', Path('smb').read_text(), flags=re.M))\n"], ["import re\n\nwith open(\"smb\", \"r\") as f: \n    txt = f.read()\n    txt = re.sub(r'(\\n\\[)(.*?)(\\[]\\n)', '', txt, flags=re.DOTALL)\n\nprint(txt)\n", "import re\nimport pandas as pd\n\n# read each line in the file (one raw -> one line)\ntxt = pd.read_csv('smb',  sep = '\\n', header=None)\n# join all the line in the file separating them with '\\n'\ntxt = '\\n'.join(txt[0].to_list())\n# apply the regex to clean the text (the same as above)\ntxt = re.sub(r'(\\n\\[)(.*?)(\\[]\\n)', '\\n', txt, flags=re.DOTALL)\n\nprint(txt)\n"], ["[y(0),Re(y(1)),Im(y(1)),...,Re(y(n/2))]              if n is even\n[y(0),Re(y(1)),Im(y(1)),...,Re(y(n/2)),Im(y(n/2))]   if n is odd\n", "[y(0),Re(y(1)) + 1.0j*Im(y(1)),...,Re(y(n/2) + 1.0j*Im(y(n/2)))]\n", "y_fft = np.cat([y_fftpack[0], y_fftpack[1:2:] + 1.0j*y_fftpack[2:2:]])\n"], [], ["^\\s*\\[[^][]*\\](?:\\r?\\n(?![^\\S\\r\\n]*\\[]$).*)*\\r?\\n[^\\S\\r\\n]*\\[]$\\s*\n", "import re\n\nregex = r\"^\\s*\\[[^][]*\\](?:\\r?\\n(?![^\\S\\r\\n]*\\[]$).*)*\\r?\\n[^\\S\\r\\n]*\\[]$\\s*\"\n\nwith open(\"smb\", \"r\") as file:\n    data = file.read()\n    result = re.sub(regex, \"\", data, 0, re.MULTILINE)\n    print(result)\n", "Hi this is my config file.\nPlease dont delete it\nThis last second line.\nEnd of the line.\n"], ["import csv\n\nwith open('product.csv') as csv_produto:\n    with open('subproduct.csv') as csv_subproduct:\n        produto_reader = list(csv.reader(csv_produto, delimiter=','))\n        subproduct_reader = list(csv.reader(csv_subproduct, delimiter=','))\n        for p in produto_reader:\n            for sp in subproduct_reader:\n                if(p[0]==sp[0]):\n                    print('{},{},{},{}'.format(p[0], p[1], sp[1], sp[2]))\n"], [], ["with open('product.csv') as f:\n    r = csv.reader(f)\n    header1 = next(r)\n    dict1 = {row[0]: row[1:] for row in r}\ndict2 = collections.defaultdict(list)\nwith open('subproduct.csv', 'r') as f:\n    r = csv.reader(f)\n    header2 = next(r)\n    for row in r:\n        dict2[row[0]].append(row[1:])\n\nwith open('merged.csv', 'w', newline='') as f:\n    w = csv.writer(f)\n    _ = w.writerow(header1 + header2[1:])\n    empty2 = [[] * (len(header2) - 1)]\n    for k in sorted(dict1.keys()):\n        for row2 in dict2.get(k, empty2):          # accept no subproducts\n            _ = w.writerow([k] + dict1[k] + row2)\n"], ["import pandas as pd\n\n# load data\nproduct = pd.read_csv('product.csv')\nsubproduct = pd.read_csv('subproduct.csv')\n\n# merge data\nmerged = pd.merge(product,subproduct)\n\n# write results to csv\nmerged.to_csv('sales.csv',index=False)\n"], ["data1 = {'product_id': [1, 2], \n         'name': ['Handwash', 'Soap'], \n              }\ndata2  {'product_id': [1, 1, 2], \n'subproduct_name': ['Dettol', 'Lifebuoy', 'Lux'], 'volume' : [20, 50, 100]} \n", "df1 = pd.DataFrame(data1) \ndf2 = pd.DataFrame(data2))\n", "output = pd.merge(df1, df2, how=\"inner\")\n", "df1=pd.read_csv('product.csv')\ndf2=pd.read_csv('subproduct.csv')\n"], ["import pandas as pd\n\nproducts_df = pd.read_csv('product.csv')\nsubproducts_df = pd.read_csv('subproduct.csv')\n\nsales_df = pd.merge(products_df, subproducts_df, on=0)\n"], [], [" df=pd.DataFrame({'Text':['Jan  9 01:04:49 syntax sshd(pam_unix)[21354]: authentication failure; logname= uid=0 euid=0 tty=NODEVssh ruser= rhost=120-123-141-4.hinet-ip.hinet.com','Jul 10 04:17:11 syntax su(pam_unix)[95367]: session opened for user abc by (uid=0)','May  1 14:06:19 syntax su(pam_unix)[95367]: session closed for user ab']})\n", "df2=df.Text.str.split('([A-Za-z]+\\s+\\d+\\s+\\d+:\\d+:\\d+)\\s+|(?<=\\])[:\\s+]+|(?<=[x])\\s+', n=3, expand=True)\n\ndf2.rename(columns=({0:'DROP1',1:'Timestamp', 2:'A1', 3:'DROP', 4:'A2', 5:'DROP2',6:'A3'}),inplace=True)#Rename columns\n\ndf2.drop(columns=['DROP2','DROP1','DROP'],inplace=True)#Drop unwanted columns\n"], ["r'(?P<Timestamp>\\w{3}\\s+\\d{1,2}\\s\\d{1,2}:\\d{2}:\\d{2})\\s(?P<A1>\\w+)\\s(?P<A2>[\\S]+)\\:\\s(?P<A3>.*)'\n", "import pandas as pd\n\ndf = pd.DataFrame(data=[\"Jan  9 01:04:49 syntax sshd(pam_unix)[21354]: authentication failure; logname= uid=0 euid=0 tty=NODEVssh ruser= rhost=120-123-141-4.hinet-ip.hinet.com\",\n\"Jul 10 04:17:11 syntax su(pam_unix)[95367]: session opened for user abc by (uid=0)\",\n\"May  1 14:06:19 syntax su(pam_unix)[95367]: session closed for user abc\"], columns=[\"value\"])\nprint(df)\n", " value\n0  Jan  9 01:04:49 syntax sshd(pam_unix)[21354]: ...\n1  Jul 10 04:17:11 syntax su(pam_unix)[95367]: se...\n2  May  1 14:06:19 syntax su(pam_unix)[95367]: se...\n", "pattern = r'(?P<Timestamp>\\w{3}\\s+\\d{1,2}\\s\\d{1,2}:\\d{2}:\\d{2})\\s(?P<A1>\\w+)\\s(?P<A2>[\\S]+)\\:\\s(?P<A3>.*)'\n\ndf1 = df['value'].str.extract(pattern, expand=True)\nprint(df1)\n", "     Timestamp      A1                     A2                                                 A3\n0  Jan  9 01:04:49  syntax  sshd(pam_unix)[21354]  authentication failure; logname= uid=0 euid=0 ...\n1  Jul 10 04:17:11  syntax    su(pam_unix)[95367]             session opened for user abc by (uid=0)\n2  May  1 14:06:19  syntax    su(pam_unix)[95367]                        session closed for user abc\n"], ["re_log = rf'(?P<date>{re_date}) (?P<device>{re_device}) (?P<source>{re_source}): (?P<message>{re_message})'\n", "re_message = r'.*'\n", "re_device = r'[\\w-]+'\n", "re_date = r'\\w{3} \\d{1,2} \\d{1,2}:\\d{2}:\\d{2}'\n", "re_source = r'[^ ]+'\n", ">>> import re\n>>> eg = \"Oct 23 18:08:26 syntax logrotate: ALERT exited abnormally with [1]\"\n>>> m = re.match(re_log, eg)\n>>> m.groupdict()\n{'date': 'Oct 23 18:08:26',\n 'device': 'syntax',\n 'source': 'logrotate',\n 'message': 'ALERT exited abnormally with [1]'}\n"], [], ["def split_by_idx(items, idx=1):\n    result = {}\n    for item in items:\n        key = item[idx]\n        if key not in result:\n            result[key] = []\n        result[key].append(item)\n    return result\n", "lst = [(\"hello\", \"Blue\"), (\"hi\", \"Red\"), (\"hey\", \"Blue\"), (\"yo\", \"Green\")]\n\n\nd = split_by_idx(lst)\nprint(list(d.values()))\n# [[('hello', 'Blue'), ('hey', 'Blue')], [('hi', 'Red')], [('yo', 'Green')]]\n", "def split_by_idx_sd(items, idx=1):\n    result = {}\n    for item in items:\n        result.setdefault(item[idx], []).append(item)\n    return result\n", "import collections\n\n\ndef split_by_idx_dd(items, idx=1):\n    result = collections.defaultdict(list)\n    for item in items:\n        result[item[idx]].append(item)\n    return result\n"], ["from collections import defaultdict\ncolors = defaultdict(list)\nfor word, color in lst:\n    colors[color].append(word)\n", ">>> colors\ndefaultdict(list, {'Blue': ['hello', 'hey'], 'Green': ['yo'], 'Red': ['hi']})\n", ">>> for key, values in colors.items():\n...     print([[key, value] for value in values])\n...     \n[['Blue', 'hello'], ['Blue', 'hey']]\n[['Red', 'hi']]\n[['Green', 'yo']]\n"], ["with open(\"smb\", \"r\") as f: \n    s = f.read()\n    head = s[:s.find('[')]\n    tail = s[s.rfind(']') + 1:]\n    return head.strip(\"\\n\") + \"\\n\" + tail.strip(\"\\n\") # removing \\n\n"], ["lst = [(\"hello\", \"Blue\"), (\"hi\", \"Red\"), (\"hey\", \"Blue\"), (\"yo\", \"Green\")]\ncolors = {elem[1] for elem in lst}  # make set of colors\ncolors = dict.fromkeys(colors, [])  # turn the set of colors into dict\n\nfor t in lst:\n    colors[t[1]] = [*colors[t[1]], t]\n", "print(list(colors.values()))\n# [[('hello', 'Blue'), ('hey', 'Blue')], [('hi', 'Red')], [('yo', 'Green')]]\n"], ["from itertools import groupby\nfrom operator import itemgetter\n\nindexer = itemgetter(1)\ndesired = [list(gr) for _, gr in groupby(sorted(lst, key=indexer), key=indexer)]\n# [[('hello', 'Blue'), ('hey', 'Blue')], [('yo', 'Green')], [('hi', 'Red')]]\n"], ["from collections import defaultdict\n\nlst = [(\"hello\", \"Blue\"), (\"hi\", \"Red\"), (\"hey\", \"Blue\"), (\"yo\", \"Green\")]\n\ncolours = defaultdict(list)\nfor word, colour in lst:\n    colours[colour].append((word, colour))\n\nprint(colours)\n# defaultdict(<class 'list'>, {'Blue': [('hello', 'Blue'), ('hey', 'Blue')], 'Red': [('hi', 'Red')], 'Green': [('yo', 'Green')]})\n", "colours = {}\nfor word, colour in lst:\n      colours.setdefault(colour, []).append((word, colour))\n\nprint(colours)\n# {'Blue': [('hello', 'Blue'), ('hey', 'Blue')], 'Red': [('hi', 'Red')], 'Green': [('yo', 'Green')]}\n", "print(list(colours.values()))\n# [[('hello', 'Blue'), ('hey', 'Blue')], [('hi', 'Red')], [('yo', 'Green')]]\n"], ["lst = [(\"hello\", \"Blue\"), (\"hi\", \"Red\"), (\"hey\", \"Blue\"), (\"yo\", \"Green\")]\ncolors = {elem[1] for elem in lst}\n\nlsts = []\n\nfor color in colors:\n    color_lst = [elem for elem in lst if elem[1] == color]\n    lsts.append(color_lst)\n"], ["list_of_nums = [1,19,5,17,9]\nsorted_list=[]\nwhile list_of_nums:\n    maxvalue=reduce(lambda x,y: x if x<y else y,list_of_nums)\n    sorted_list.append(maxvalue)\n    list_of_nums.remove(maxvalue)\nprint(sorted_list)\n"], ["df = pd.read_csv('smb', sep='----', header=None)\n\n# mark rows starts with `[`\ns = df[0].str.startswith('[')\n\n# drop the lines between `[`\ndf = df.drop(np.arange(s.idxmax(),s[::-1].idxmax()+1))\n\n# write to file if needed\ndf.to_csv('clean.txt', header=None, index=None)\n", "                             0\n0   Hi this is my config file.\n1        Please dont delete it\n18      This last second line.\n19            End of the line.\n"], [], ["letters = set()\nwith open('demo.txt') as countletter:\n    count = 0\n    text = countletter.read()\n    for character in text:\n        if character.isupper():\n            count += 1\n            letters.add(character)\nprint(count)\n", "with open('demo.txt') as countletter:\n    count = sum(character.isupper() for character in set(countletter.read()))\n    print(count)\n"], ["with open(\"smb\", \"r\") as f:\n    result = []\n    for line in f:\n        if line.startswith(\"[\") and line.endswith(\"]\"):\n            break\n        result.append(line)\n    result = \"\\n\".join(result)\n    print(result)\n"], [], ["lst1 =[0,1,1,1,0]\nlst2 =[0,0,1,1,0]\nassert len(lst1) == len(lst2)\n\nidx = [i for i in range(len(lst1)) if lst1[i] == 1 and lst2[i] == 1]\n\nprint(idx)\n", "import numpy as np\n\nlst1 =[0,1,1,1,0]\nlst2 =[0,0,1,1,0]\nassert len(lst1) == len(lst2)\nlst1_ = np.array(lst1)\nlst2_ = np.array(lst2)\n\nidx_ = np.intersect1d(np.where(lst1_ == 1)[0],np.where(lst2_ == 1)[0])\nprint(list(idx_))\n", "idx_ = np.intersect1d(np.where(lst1_ == 1)[0],np.where(lst2_ == 1)[0])\n", "idx_ = np.where((lst1_==1)&(lst2_==1))[0]\n"], ["lst1 =[0,1,1,1,0]\nlst2 =[0,0,1,1,0]\n\n# as we know length of the both lists, and their length are equal, \n# i'll just write length as 5, but you can have other algorhitm of finding length\n\nlist_len = 5\n\nis_there_any_matches = False\n\nfor index in range(list_len):\n\n    if lst1[index] == lst2[index]:\n\n       is_there_any_matches = True\n       break                           # to exit after first match\n\n"], [">>> lst1 =[0,1,1,1,0]\n>>> lst2 =[0,0,1,1,0]\n>>> x = list(zip(lst1,lst2))\n>>> x\n[(0, 0), (1, 0), (1, 1), (1, 1), (0, 0)]\n>>> x.index((1,1))\n2\n>>> x.index((1,1))\n2\n"], ["l = [i for i, _ in enumerate(lst1 and lst2) if _ == 1]\n"], [], ["for idx, (i, j) in enumerate(zip(lst1, lst2)):\n    if i == j == 1:\n        print(idx)\n"], ["import pandas as pd\nimport string\n\ndf = pd.DataFrame(['Cat', 'DOG', 'bike', 'APPLE', 'foo bar'], columns=['words'])\n\nvowels = 'aeiouAEIOU'\ncons = ''.join(set(string.ascii_letters).difference(set(vowels)))\ntrans = str.maketrans(vowels+cons, 'v'*len(vowels)+'c'*len(cons))\n", "df['translated'] = df['words'].str.translate(trans)\n\n     words translated\n0      Cat        cvc\n1      DOG        cvc\n2     bike       cvcv\n3    APPLE      vcccv\n4  foo bar    cvv cvc\n", "# Supporting code\nimport perfplot\nimport pandas as pd\nimport string\n\ndef with_translate(s):\n    vowels = 'aeiouAEIOU'\n    cons = ''.join(set(string.ascii_letters).difference(set(vowels)))\n    trans = str.maketrans(vowels+cons, 'v'*len(vowels)+'c'*len(cons))\n\n    return s.str.translate(trans)\n\n\ndef with_replace(s):\n    return s.replace({\"[^aeiouAEIOU]\":'c', '[aeiouAEIOU]':'v'}, regex=True)\n\n\nperfplot.show(\n    setup=lambda n: pd.Series(np.random.choice(['foo', 'bAR', 'foobar', 'APPLE', 'ThisIsABigWord'], n)), \n    kernels=[\n        lambda s: with_translate(s),\n        lambda s: with_replace(s),\n    ],\n    labels=['Translate', 'Replace'],\n    n_range=[2 ** k for k in range(19)],\n    equality_check=None,  \n    xlabel='len(s)'\n)\n"], ["df = pd.DataFrame(['Cat', 'DOG', 'bike'], columns=['words'])\n# use string.replace\ndf['new_word'] = df['words'].str.lower().str.replace(r\"[^aeiuo]\", 'c').str.replace(r\"[aeiou]\", 'v')\nprint(df)\n\n  words new_word\n0   Cat      cvc\n1   DOG      cvc\n2  bike     cvcv\n"], ["vowels = set(\"aeiou\")\nword = \"Dog\"\n\nnew_word = \"\"\nfor char in word.lower():\n    new_word += \"v\" if char in vowels else \"c\"\n\nprint(new_word)\n"], ["word = 'yoyo'\n\ndef vocals_consonants_transformation(word):\n    modified_word = \"\"\n    for i in range(0, len(word)):\n        if word[i].isalpha():\n            if word[i] in \"aeiou\":\n                modified_word += 'v'\n            else:\n                modified_word += 'c'\n        else:\n            modified_word += word[i]\n    return modified_word\n\n\nprint(vocals_consonants_transformation(word))\n"], ["words = pd.Series(['This', 'is', 'an', 'Example'])\nwords.str.lower().replace({\"[^aeiou]\":'c', '[aeiou]':'v'}, regex=True)\n", "0       ccvc\n1         vc\n2         vc\n3    vcvcccv\ndtype: object\n"], ["word='yoyo'\nnew_word=''\n\nfor i in word.lower():\n    if i in \"aeiou\":\n        new_word+='v'\n    else:\n        new_word+='c'\n\nprint(new_word)\n"], ["word = 'yoyo'\n\nfor i in word.lower():\n    if i in \"aeiou\":\n       word=word.replace(i ,'v')\n    else:\n        word=word.replace(i ,'c')\nprint(word)\n"], ["word = 'yoyo'\nword = list(word)\n\nfor i in range(len(word)):\n    if word[i] in 'aeiou':\n        word[i] = 'v'\n    else:\n        word[i] = 'c'\n\nprint(''.join(word))\n"], ["def add(a, b):\n    return a + b\n\ndef test_add_function():\n    a = 1\n    b = 2\n    assert add(a, b) == 3  # we KNOW that adding 1 + 2 must equal 3\n", "class MyClass:\n    def __init__(self, a):\n        self.a = a\n\n    def add_one_to_a(self):\n        self.a += 1\n\n\ndef test_method_add_one_to_a():\n    initial_a = 1\n    instance = MyClass(a=1)\n    assert instance.a == initial_a  # we expect this to be 1\n    instance.add_one_to_a()  # instance.a is now 2\n    assert instance.a == initial_a + 1  # we expect this to be 2\n"], [], ["pip install -U pytest\n"], ["pip install --ignore-installed --upgrade keras\n"], [], ["pip install -U keras\n"], ["assert(all(np.all(np.take(x, index, axis=axis) == 0)\n           for axis in range(x.ndim)\n           for index in (0, -1)))\n"], ["def all_borders_zero(array):\n    if not array.ndim:\n        raise ValueError(\"0-dimensional arrays not supported\")\n    for dim in range(array.ndim):\n        view = numpy.moveaxis(array, dim, 0)\n        if not (view[0] == 0).all():\n            return False\n        if not (view[-1] == 0).all():\n            return False\n    return True\n"], [], ["x = np.array(\n        [\n            [\n                [0 , 1, 1, 0],\n                [0 , 2, 3, 0],\n                [0 , 4, 5, 0]\n            ],\n            [\n                [0 , 6, 7, 0],\n                [0 , 7, 8, 0],\n                [0 , 9, 5, 0]\n            ]\n        ])\n\nxx = np.array(\n        [\n            [\n                [0 , 0, 0, 0],\n                [0 , 2, 3, 0],\n                [0 , 0, 0, 0]\n            ],\n            [\n                [0 , 0, 0, 0],\n                [0 , 7, 8, 0],\n                [0 , 0, 0, 0]\n            ]\n        ])\n\ndef check_edges(x):\n\n    idx = x.shape\n    chunk = np.prod(idx[:-2])\n    x = x.reshape((chunk*idx[-2], idx[-1]))\n    for block in range(chunk):\n        z = x[block*idx[-2]:(block+1)*idx[-2], :]\n        if not np.all(z[:, 0] == 0):\n            return False\n        if not np.all(z[:, -1] == 0):\n            return False\n        if not np.all(z[0, :] == 0):\n            return False\n        if not np.all(z[-1, :] == 0):\n            return False\n\n    return True\n", ">>> False\n>>> True\n"], ["import numpy as np\n\n# data\nx = np.random.rand(2, 5, 5)\nx[..., 0:, 0] = 0\nx[..., 0, 0:] = 0\nx[..., 0:, -1] = 0\nx[..., -1, 0:] = 0\n\ntest = np.all(\n    [\n        np.all(x[..., 0:, 0] == 0),\n        np.all(x[..., 0, 0:] == 0),\n        np.all(x[..., 0:, -1] == 0),\n        np.all(x[..., -1, 0:] == 0),\n    ]\n)\n\nprint(test)\n"], [], ["!pip install tensorflow==1.14.0\n"], ["import warnings\nwarnings.filterwarnings(\"ignore\", category=DeprecationWarning) \n"], [], ["> npm install -g localtunnel\n> lt --port 8080\n"], ["rehash\n"], ["(x, y) == (a, b) or (x, y) == (b, a)\n", "{x, y} == {a, b}\n"], [], ["sky=8\ntree=1\nfor i in range(0,5):\n    if i==0:\n        print(sky*'~'+tree*'o'+sky*'~')\n    else:\n        print(sky*'~'+tree*'*'+sky*'~')\n    sky-=1\n    tree+=2\nsky=8\ntree=1\nfor i in range(0,2):\n    print(sky*'~'+tree*'|'+sky*'~')\n"], ["for x in range(1, 30, 2):\n    s = '*' * x\n    print(s.center(30))\n\n              *               \n             ***              \n            *****             \n           *******            \n          *********           \n         ***********          \n        *************         \n       ***************        \n      *****************       \n     *******************      \n    *********************     \n   ***********************    \n  *************************   \n ***************************  \n***************************** \n>>>\n", "limit = 30\n\nfor x in range(1, limit, 2):\n    tildes = '~' * ((limit-x)//2)\n    out = tildes + '*' * x + tildes\n    print(out)\n\n~~~~~~~~~~~~~~*~~~~~~~~~~~~~~\n~~~~~~~~~~~~~***~~~~~~~~~~~~~\n~~~~~~~~~~~~*****~~~~~~~~~~~~\n~~~~~~~~~~~*******~~~~~~~~~~~\n~~~~~~~~~~*********~~~~~~~~~~\n~~~~~~~~~***********~~~~~~~~~\n~~~~~~~~*************~~~~~~~~\n~~~~~~~***************~~~~~~~\n~~~~~~*****************~~~~~~\n~~~~~*******************~~~~~\n~~~~*********************~~~~\n~~~***********************~~~\n~~*************************~~\n~***************************~\n*****************************\n"], ["for i in range(height, 0, -1):\n    print(\"~\" * (i - 1))    // repeating `~` character (i - 1) times\n", "~~~~~~\n~~~~~\n~~~~\n~~~\n~~\n~\n", "for i in range(height, 0, -1):\n    print(\"~\" * (i - 1), end=\"\")\n    print(\"*\" * (((height - i) *2) + 1))\n", "~~~~~~*\n~~~~~***\n~~~~*****\n~~~*******\n~~*********\n~***********\n*************\n", "for i in range(height, 0, -1):\n    print(\"~\" * (i - 1), end=\"\")\n    print(\"*\" * (((height - i) *2) + 1), end=\"\")\n    print(\"~\" * (i - 1))\n", "~~~~~~*~~~~~~\n~~~~~***~~~~~\n~~~~*****~~~~\n~~~*******~~~\n~~*********~~\n~***********~\n*************\n"], ["def values():\n    yield 'o'\n    for i in range(3, 10, 2):\n        yield ' '.join('*' * i)\n    yield from '||'\n\nfor v in values():\n    print('{:~^17}'.format(v))\n", "~~~~~~~~o~~~~~~~~\n~~~~~~* * *~~~~~~\n~~~~* * * * *~~~~\n~~* * * * * * *~~\n* * * * * * * * *\n~~~~~~~~|~~~~~~~~\n~~~~~~~~|~~~~~~~~\n", "for v in ['o'] + [' '.join('*' * i) for i in range(3, 10, 2)] + ['|', '|']:\n    print('{:~^17}'.format(v))\n"], ["height = 7\nz = height - 3\nx = 1\nfor i in range(1, (height + height) - 3):\n    if i % 2 != 0:\n       if(i==1):\n          print('~~' * z + 'o' +'~~' * z)\n       else:\n          print('~~' * z + '* ' * (x-1)+ '*' *1 +'~~' * z)\n       x+=2\n       z-=1\nfor a in range(height + 1):\n    if a % (height + 1) == 1:\n       test = height - 3\n       print(test * '~~' + a * '|' + test * '~~')\n    if a % (height + 1) == 1:\n       test = height - 3\n       print(test * '~~' + a * '|' + test * '~~')\n", "~~~~~~~~o~~~~~~~~\n~~~~~~* * *~~~~~~\n~~~~* * * * *~~~~\n~~* * * * * * *~~\n* * * * * * * * *\n~~~~~~~~|~~~~~~~~\n~~~~~~~~|~~~~~~~~\n"], ["height = 7\nwidth = 17\nfor a in range(1, (height + height) - 3):\n    if a % 2 != 0:\n        if a == 1:\n            sym = 'o'\n            curly = ''.join(['~' for i in range((width-len(sym))//2)])\n            print(curly +  a * sym + curly)\n        else:\n            sym = a * '* '\n            curly = ''.join(['~' for i in range((width - len(sym)) // 2)])\n            print(curly + sym + curly)\nfor a in range(height + 1):\n    if a % (height + 1) == 1:\n        test = height - 3\n        print(test * '~~' + a * '|' + test * '~~')\n    if a % (height + 1) == 1:\n        test = height - 3\n        print(test * '~~' + a * '|' + test * '~~')\n", "~~~~~~~~o~~~~~~~~\n~~~~~* * * ~~~~~\n~~~* * * * * ~~~\n~* * * * * * * ~\n* * * * * * * * * \n~~~~~~~~|~~~~~~~~\n~~~~~~~~|~~~~~~~~\n"], [], [], ["\\#export PATH=$HOME/bin:/usr/local/bin:$PATH\n", "~/.zshrc\n\nexport PATH=$HOME/bin:/usr/local/bin:$PATH\n"], [], [], ["unique_capital_letters = set()\nwith open('demo.txt') as countletter:\n    text = countletter.read()\n    for character in text:\n        if character.isupper():\n            unique_capital_letters.add(character)\n\nnumber_of_unique_occurrences = len(unique_capital_letters)\nprint(number_of_unique_occurrences)\n"], ["with open('demo.txt') as f:\n   text = f.read()\n   count = len(set([character for character in text if character.isupper()]))\n\nprint(count)\n"], ["with open('demo.txt') as countletter:\n    count = sum(map(str.isupper, set(countletter.read())))\n"], ["with open('demo.txt') as countletter:\n  count = sum(character.isupper() for character in set(countletter.read()))\n"], ["from collections import Counter\n\nwith open('demo.txt') as countletter:\n    unique = Counter(countletter.read())\n    unique_capital_letters = {char: count for char, count in unique.items() if char.isupper()}\n"], ["CapitalChar=''\nwith open('demo.txt') as countletter:\n    count = 0\n    text = countletter.read()\n    for character in text:\n        if character.isupper() and not in CapitalChar:\n            CapitalChar=CapitalChar + character\n            count += 1\nprint(count) \n"], [], ["title_words = [word for word in text6 if (len(word)==1 and word[0].isupper()) or (word[0].isupper() and word[1:].islower()) ]\nprint(len(title_words))\n"], ["sudo -H python3 -m pip install --upgrade pip==19.3.0\n", "sudo -H python3 -m pip install --upgrade pip\n"], [], [], ["brew install python3\n"], [], ["(x == a and y == b and z == c) or (x == a and y == c and z == b) or ...\n", "(x, y, z) in itertools.permutations([a, b, c])\n", "(x, y) in itertools.permutations([a, b])\n"], [], [], ["if (a, b) == (x, y) or (a, b) == (y, x)\n", "if (a, b) in {(x, y), (y, x)}\n", "from timeit import timeit\n\nx = 1\ny = 2\na = 3\nb = 4\n\n>>> timeit(lambda: (a, b) in {(x, y), (y, x)}, number=int(5e7))\n32.8357742\n\n>>> timeit(lambda: (a, b) in ((x, y), (y, x)), number=int(5e7))\n31.6169182\n", "x = 1\ny = 2\na = 1\nb = 2\n\n>>> timeit(lambda: (a, b) in {(x, y), (y, x)}, number=int(5e7))\n35.6219458\n\n>>> timeit(lambda: (a, b) in ((x, y), (y, x)), number=int(5e7))\n27.753138700000008\n"], ["sorted((x, y)) == sorted((a, b))\n"], ["{a, b} == {y, x}\n"], [], [], [], ["[^\\/]+   - non-'/' characters(i.e. directory names)\n\\w+\\.\\w+ - word characters then '.' then word characters (i.e. file name)\n"], [">>> from pathlib import PurePath\n>>> file_path0 = 'dir1/dir2/dir3/dir4/file.txt'\n>>> p = PurePath(file_path0)\n>>> p.parts\n('dir1', 'dir2', 'dir3', 'dir4', 'file.txt')\n>>> spam = list(p.parts)\n>>> spam.insert(2, 'new_dir')\n>>> new_path = PurePath('').joinpath(*spam)\n>>> new_path\nPurePosixPath('dir1/dir2/new_dir/dir3/dir4/file.txt')\n"], ["directory_name = '/new_dir'\n\nfile_path0 = 'dir1/dir2/dir3/dir4/file.txt'\n\nbefore_the_newpath = 'dir1/dir2'\n\nposition = file_path0.split(before_the_newpath)\n\nnew_directory = before_the_newpath + directory_name + position[1]\n"], ["from nltk.book import text6\ntitle_words = []\nfor item in set(text6):\n    if item[0].isupper() and item[1:].islower():\n        title_words.append(item)\nprint(len(title_words))\n"], ["def list_of_squares(n):\n    return [i**2 for i in range(1,n+1)]\n", "[1, 4, 9, 16, 25, 36, 49, 64, 81, 100]\n"], ["def squares(n):\n   L = list(range(n+1))\n   L = [num**2 for num in L if num]\n   return L\nprint(squares(16))\n"], ["def squares(n):\n    return list(map(lambda k:k**2, range(1,n+1)))\n"], ["def squares(n):\n       L = []\n       for num in range(1,n+1):\n           val = num*num \n           L.append(val)\n       return L\nprint(squares(16))\n", "[1, 4, 9, 16, 25, 36, 49, 64, 81, 100, 121, 144, 169, 196, 225, 256]\n"], ["l=[x*x for x in range(1,n+1)]\n"], ["def squares(n):\n    L = [i*i for i in range(1,n+1)]\n    return L\n\nprint (squares(16))\n", "[1, 4, 9, 16, 25, 36, 49, 64, 81, 100, 121, 144, 169, 196, 225, 256]\n"], ["a = [1,2,3]\nb = [1,2,3]\n\n\ndef functionb(list):\n    list = list[:-1]\n    return list\ndef withpop(list):\n    return list.pop()\n\nfunctionb(b)\nwithpop(a)\nprint b\nprint a\n", "[1, 2, 3]\n[1, 2]\n"], [">>> a = [1,2,3]\nprint(id(a))\n>>> a.pop()\n3\nprint(id(a))\n>>> a\n[1, 2]\n>>> a = [1,2,3]\n>>> a = a[:-1]\n>>> a\nprint(id(a))\n[1, 2]\n>>>\n", "4470627464\n4470627464\n4474450952\n"], [">>> a = [1,2,3]\n>>> a\n[1, 2, 3]\n>>> a[:-1]\n[1, 2]\n>>> len(a[:-1])\n2\n>>> a.pop()\n3\n>>> a\n[1, 2]\n>>> len(a)\n2\n>>> \n"], [">>> a = [1, 2, 3, 4]\n>>> b = a\n>>> b\n[1, 2, 3, 4]\n>>> a.pop()\n4\n>>> b\n[1, 2, 3]\n>>> a = a[:-1]\n>>> b\n[1, 2, 3]\n>>> a\n[1, 2]\n"], ["a = [1,2,3,4]\nb = a.pop()\nprint(b)  # 4\n"], [], [], ["arr = [17, 2, 3, 6, 1, 3, 1, 9, 5, 3]\nreduce(lambda xs, x: [print(xs, x), xs+[x]][1], arr, [])\n", "[] 17\n[17] 2\n[17, 2] 3\n[17, 2, 3] 6\n[17, 2, 3, 6] 1\n[17, 2, 3, 6, 1] 3\n[17, 2, 3, 6, 1, 3] 1\n[17, 2, 3, 6, 1, 3, 1] 9\n[17, 2, 3, 6, 1, 3, 1, 9] 5\n[17, 2, 3, 6, 1, 3, 1, 9, 5] 3\n", "def insert(xs, n):\n    \"\"\"\n    Finds first element in `xs` greater than `n` and returns an inserted element.\n    `xs` is assumed to be a sorted list.\n    \"\"\"\n    for i, x in enumerate(xs):\n        if x > n:\n            return xs[:i] + [n] + xs[i:]\n\n    return xs + [n]\n\nsorted_arr = reduce(insert, arr, [])\nprint(sorted_arr)\n", "[1, 1, 2, 3, 3, 3, 5, 6, 9, 17]\n"], ["from functools import reduce\narr = [17, 2, 3, 6, 1, 3, 1, 9, 5, 3]\ndef func(acc,x):\n    if not acc:\n        return [x]\n    if acc[-1]<x:\n        return acc+[x]\n    else:\n        return acc[:-1]+[x]+acc[-1:]\n\ndef my_sort(x):\n    moresorted = reduce(func,x,[])\n    print(moresorted)\n    if x==moresorted:\n        return moresorted\n    else:\n        return my_sort(moresorted)\n\nprint('arr:',arr)\narr_sorted = my_sort(arr)\nprint('arr sorted:',arr_sorted)\n", "arr: [17, 2, 3, 6, 1, 3, 1, 9, 5, 3]\n[2, 3, 6, 1, 3, 1, 9, 5, 3, 17]\n[2, 3, 1, 3, 1, 6, 5, 3, 9, 17]\n[2, 1, 3, 1, 3, 5, 3, 6, 9, 17]\n[1, 2, 1, 3, 3, 3, 5, 6, 9, 17]\n[1, 1, 2, 3, 3, 3, 5, 6, 9, 17]\n[1, 1, 2, 3, 3, 3, 5, 6, 9, 17]\narr sorted: [1, 1, 2, 3, 3, 3, 5, 6, 9, 17]\n"], [], ["arr = [17, 2, 3, 6, 1, 3, 1, 9, 5, 3]\nsorted_arr = reduce(\n    lambda a, b: [x for x in a if x <= b] + [b] + [x for x in a if x > b],\n    arr,\n    []\n)\nprint(sorted_arr)\n#[1, 1, 2, 3, 3, 3, 5, 6, 9, 17]\n"], ["import io\n\nclass EncodeIO(io.BufferedIOBase):\n  def __init__(self,s,e='utf-8'):\n    self.stream=s               # not raw, since it isn't\n    self.encoding=e\n    self.buf=b\"\"                # encoded but not yet returned\n  def _read(self,s): return self.stream.read(s).encode(self.encoding)\n  def read(self,size=-1):\n    b=self.buf\n    self.buf=b\"\"\n    if size is None or size<0: return b+self._read(None)\n    ret=[]\n    while True:\n      n=len(b)\n      if size<n:\n        b,self.buf=b[:size],b[size:]\n        n=size\n      ret.append(b)\n      size-=n\n      if not size: break\n      b=self._read(min((size+1024)//2,size))\n      if not b: break\n    return b\"\".join(ret)\n  read1=read\n"], ["In [16]: import codecs, io\n\nIn [17]: bio = io.BytesIO(b'qwe\\nasd\\n')\n\nIn [18]: StreamReader = codecs.getreader('utf-8')  # here you pass the encoding\n\nIn [19]: wrapper_file = StreamReader(bio)\n\nIn [20]: print(repr(wrapper_file.readline()))\n'qwe\\n'\n\nIn [21]: print(repr(wrapper_file.read()))\n'asd\\n'\n\nIn [26]: bio.seek(0)\nOut[26]: 0\n\nIn [27]: for line in wrapper_file:\n    ...:     print(repr(line))\n    ...:\n'qwe\\n'\n'asd\\n'\n"], [], ["class BytesIOWrapper:\n    def __init__(self, string_buffer, encoding='utf-8'):\n        self.string_buffer = string_buffer\n        self.encoding = encoding\n\n    def __getattr__(self, attr):\n        return getattr(self.string_buffer, attr)\n\n    def read(self, size=-1):\n        content = self.string_buffer.read(size)\n        return content.encode(self.encoding)\n\n    def write(self, b):\n        content = b.decode(self.encoding)\n        return self.string_buffer.write(content)\n"], ["sio = io.StringIO('wello horld')\nb = bytes(sio.read(), encoding='utf-8')\nprint(b)\n", "sio = io.StringIO('wello horld')\nb = sio.read().encode()\nprint(b)\n"], ["array_1 = ['one', 'two']\narray_2 = ['one', 'two', 'one', 'three', 'four']\narray_3 = list(array_2)\nfor x in array_1:\n    try:\n        array_3.remove(x)\n    except ValueError:\n        pass\nprint(array_3)\n", "from collections import Counter\n\narray_1 = ['one', 'two']\narray_2 = ['one', 'two', 'one', 'three', 'four']\narray_3 = list((Counter(array_2) - Counter(array_1)).elements())\nprint(array_3)\n"], [], [], ["In [1]: from collections import Counter                                                                                                                                      \n\nIn [2]: array_2 = ['one' , \"two\" , \"one\", \"three\", \"four\"]                                                                                                                   \n\nIn [3]: array_1 = ['one', \"two\"]                                                                                                                                             \n\nIn [4]: a2 = Counter(array_2)                                                                                                                                                \n\nIn [5]: a1 = Counter(array_1)                                                                                                                                                \n\nIn [6]: a2 - a1                                                                                                                                                              \nOut[6]: Counter({'one': 1, 'three': 1, 'four': 1})\n", "In [7]: list((a2-a1).elements())                                                                                                                                             \nOut[7]: ['one', 'three', 'four']\n"], ["from collections import Counter\n\narray_2 = ['one' , \"two\" , \"one\", \"three\", \"four\"]\narray_1 = ['one', \"two\"]\n\nlist((Counter(array_2) - Counter(array_1)).elements())\n", "['one', 'three', 'four']\n"], ["import cx_Oracle as cxo\nconn = cxo.connect(\"user_id\", \"password\", \"host_name:port_no/sid\")\nprint(conn.version)\ncur = conn.cursor()\ncur.execute('SELECT \\'X\\' FROM DUAL')\nfor result in cur:\n    print(result[0])\ncur.close()\nconn.close()\n"], ["'{0} {1} {2}, {3}'.format(a,b,c,d)\n", "a = 0\n[a+=1 for _ in str1]\n"], ["a+' '+b+c+' '+d\n", "counter=0\nfor i in str1:\n    counter+=1\n"], ["for i,c in enumerate( yoursting ):\n    pass\n\nprint(i+1)\n"], ["result = f'{a} {b}, {c} {d}'\n", "length = 0\nfor character in string:\n   length += 1\n", "length = sum(1 for char in string)\n"], [], [], [], [">>> import re\n>>> from nltk.book import text6\n>>>\n>>> text = ' '.join(set(text6))\n>>> title_words = re.findall(r'([A-Z]{1}[a-z]+)', text)\n>>> len(title_words)\n461\n"], [], ["perfect_data['1'] = [i if i else -1 for i in perfect_data['1']]\n"], ["for value in perfect_data.values():\n  for i, e in enumerate(value):\n    if e == 0: \n      value[i] = -1\nprint(perfect_data)\n"], ["for key in perfect_data.keys():\n    perfect_data[key] = [x*2 -1 for x in perfect_data[key]]\n    print(perfect_data[key])\n", "{'1': [1,  1,  -1,  -1,  -1,  1,  1,  1,  1,  1,  -1,  -1,  -1,  1,  1,  1,  1,  1,  1,\n-1,  -1,  1,  1,  1,  1,  1,  1,  -1,  -1,  1,  1, 1,  1,  1,  1,  -1,  -1,  1,  1,  1,\n1,  1,  1,  -1,  -1,  1,  1,  1,  1,  1,  1,  -1,  -1,  1,  1,  1,  1,  1,  1,  -1,  -1,  1,  1,  1]}\n"], ["perfect_data = {\n    \"1\":   [1, 1, 0,  0, 0,  1, 1, 1,\n            1, 1, 0,  0, 0,  1, 1, 1,\n            1, 1, 1,  0, 0,  1, 1, 1,\n            1, 1, 1,  0, 0,  1, 1, 1,\n            1, 1, 1,  0, 0,  1, 1, 1,\n            1, 1, 1,  0, 0,  1, 1, 1,\n            1, 1, 1,  0, 0,  1, 1, 1,\n            1, 1, 1,  0, 0,  1, 1, 1 ], \n}\n\nfor k,v in perfect_data.items():\n    perfect_data[k] = [x or -1 for x in v]\n\nprint(perfect_data)\n", "{'1': [1, 1, -1, -1, -1, 1, 1, 1, 1, 1, -1, -1, -1, 1, 1, 1, 1, 1, 1, -1, -1, 1, 1, 1, 1, 1, 1, -1, -1, 1, 1, 1, 1, 1, 1, -1, -1, 1, 1, 1, 1, 1, 1, -1, -1, 1, 1, 1, 1, 1, 1, -1, -1, 1, 1, 1, 1, 1, 1, -1, -1, 1, 1, 1]}\n"], ["for key,value in perfect_data.items():\n    perfect_data[key]=[2*x-1 for x in value]\n    print(perfect_data[key])\n"], [">>> string = 'aabbaacc'\n>>> for char, freq in groupby('aabbaacc'):\n>>>     print(char, len(list(freq)), sep=':', end='\\n')\n[out]:\n    a:2\n    b:2\n    a:2\n    c:2\n", ">>> df = pd.DataFrame([10, 10, 23, 23, 9, 9, 9, 10, 10, 10, 10, 12], columns=['values'])\n>>> for char, freq in groupby(df['values'].tolist()):\n>>>     print(char, len(list(freq)), sep=':', end='\\n')\n[out]:\n    10:2\n    23:2\n     9:3\n    10:4\n    12:1\n"], ["import pandas as pd\n\ndf = pd.DataFrame([10, 10, 23, 23, 9, 9, 9, 10, 10, 10, 10, 12], columns=['values'])\n\ndict_count = {}\nfor v in df['values'].unique():\n    dict_count[v] = 0\n\ncurr_val = df.iloc[0]['values']\ncount = 1\nfor i in range(1, len(df)):\n    if df.iloc[i]['values'] == curr_val:\n        count += 1\n    else:\n        if count > dict_count[curr_val]:\n            dict_count[curr_val] = count\n        curr_val = df.iloc[i]['values']\n        count = 1\nif count > dict_count[curr_val]:\n    dict_count[curr_val] = count\n\ndf_count = pd.DataFrame(dict_count, index=[0])\nprint(df_count)\n"], ["from itertools import groupby\n\npd.Series(*zip(*[[len([*v]), k] for k, v in groupby(df['values'])]))\n\n10    2\n23    2\n9     3\n10    4\n12    1\ndtype: int64\n", "def f(x):\n  count = 1\n  for this, that in zip(x, x[1:]):\n    if this == that:\n      count += 1\n    else:\n      yield count, this\n      count = 1\n  yield count, [*x][-1]\n\npd.Series(*zip(*f(df['values'])))\n\n10    2\n23    2\n9     3\n10    4\n12    1\ndtype: int64\n"], ["df['key']=df['values'].diff().ne(0).cumsum()\npd.crosstab(df['key'],df['values'])\nOut[353]: \nvalues  9   10  12  23\nkey                   \n1        0   2   0   0\n2        0   0   0   2\n3        3   0   0   0\n4        0   4   0   0\n5        0   0   1   0\n", "pd.crosstab(df['key'],df['values']).stack().loc[lambda x:x.ne(0)]\nOut[355]: \nkey  values\n1    10        2\n2    23        2\n3    9         3\n4    10        4\n5    12        1\ndtype: int64\n", "from itertools import groupby\n\n[ (k,len(list(g))) for k,g in groupby(df['values'].tolist())]\nOut[366]: [(10, 2), (23, 2), (9, 3), (10, 4), (12, 1)]\n"], ["df = df.groupby(df['values'].ne(df['values'].shift()).cumsum())['values'].value_counts()\n", "df = df.groupby([df['values'].ne(df['values'].shift()).cumsum(), 'values']).size()\n", "print (df)\nvalues  values\n1       10        2\n2       23        2\n3       9         3\n4       10        4\n5       12        1\nName: values, dtype: int64\n", "df = df.reset_index(level=0, drop=True)\nprint (df)\nvalues\n10    2\n23    2\n9     3\n10    4\n12    1\ndtype: int64\n", "print (pd.concat([df['values'], a, b, c], \n                 keys=('orig','shifted', 'not_equal', 'cumsum'), axis=1))\n    orig  shifted  not_equal  cumsum\n0     10      NaN       True       1\n1     10     10.0      False       1\n2     23     10.0       True       2\n3     23     23.0      False       2\n4      9     23.0       True       3\n5      9      9.0      False       3\n6      9      9.0      False       3\n7     10      9.0       True       4\n8     10     10.0      False       4\n9     10     10.0      False       4\n10    10     10.0      False       4\n11    12     10.0       True       5\n"]]