[[], ["def minInt(instanceList):\n    sorted_instanceList = sorted(instanceList, key=lambda instance: instance.int)\n    minIndex = instanceList.index(sorted_instanceList[0])\n    return minIndex\n"], [], ["pip install Pyzmq==19.0.2.\n"], ["import keyboard\n\nrunning = True\ndisplay = True\nblock = False\n\nwhile running:\n    if keyboard.is_pressed(\"space\"):\n        if block == False:\n            display = not display\n            block = True\n    else:\n        block = False\n    if display:\n        print(\"hello\")\n    else:\n        input(\"Press Enter to continue...\")\n        if block == False:\n            display = not display\n            block = True\n"], ["#import google driver\nfrom google.colab import drive\ndrive.mount(\"/content/drive/\")\n", "img0 = cv2.imread('/content/MyDrive/image_path/image.jpg')\n"], ["x = int(input(\"Enter the 1st number: \\n\"))\ny = int(input(\"Enter the 2nd number: \\n\"))\nz = int(input(\"Enter the 3rd number: \\n\"))\n\n\nif x < y and x > z or x < z and x > y:\n    print(\"this is second largest number\", str(x))\n\n\nif y < x and y > z or y < z and y > x:\n    print(\"this is second largest number\", str(y))\n\n\nif z < x and z > y or z < y and z > y:\n    print(\"this is second largest number\", str(z))\n"], ["xyz = [x,y,z]\nsorted_xyz = sorted(xyz)\nlargest = sorted_xyz[-1]\nsecond_largest = sorted_xyz[-2]\n", "# check if x is the largest\nif ( x >= y and x >= z ):\n    print(str(x) + \" is the greatest\")\n    # check if y is greater than z, if so then it is the second largest number.\n    if ( y >= z ):\n        print(str(y) + \" is second greatest\")\n    else:\n        print(str(z) + \" is second greatest\")\n\n# check if y is the largest\nif ( y >= x and y >= z ):\n    print(str(y) + \" is the greatest\")\n    # check if x is greater than z, if so then it is the second largest number.\n    if ( x >= z ):\n        print(str(x) + \" is second greatest\")\n    else:\n        print(str(z) + \" is second greatest\")\n\n# check if z is the largest\nif ( z >= x and z >= y ):\n    print(str(z) + \" is the greatest\")\n    # check if x is greater than y, if so then it is the second largest number.\n    if ( x >= y ):\n        print(str(x) + \" is second greatest\")\n    else:\n        print(str(y) + \" is second greatest\")\n"], ["if x <= y <= z or z <= y <= x:\n    print(y)\nelif y <= x <= z or z <= x <= y:\n    print(x)\nelse:\n    print(z)\n"], ["x=int(input(\"Enter the 1st number: \\n\"))\ny=int(input(\"Enter the 2nd number: \\n\"))\nz=int(input(\"Enter the 3rd number: \\n\"))\nprint(f'Second largest number is {sorted([x,y,z])[-2]}')\n"], ["x=int(input(\"Enter the 1st number: \\n\"))\ny=int(input(\"Enter the 2nd number: \\n\"))\nz=int(input(\"Enter the 3rd number: \\n\"))\n\nnumbers_in_ascending_order = sorted([x,y,z])\n\nnumbers_in_descending_order = numbers_in_ascending_order.reverse()\n\nsecond_largest = numbers_in_descending_order[1]\n\nprint(\"second largest:\"+second_largest.__str__())\n", "x=int(input(\"Enter the 1st number: \\n\"))\ny=int(input(\"Enter the 2nd number: \\n\"))\nz=int(input(\"Enter the 3rd number: \\n\"))\nlst = [x,y,z]\nlst.sort(reverse=True)\nsecond_greatest = lst[1]\nprint(\"second greatest:\"+second_greatest.__str__())\n", ">>> python3 test.py\nEnter the 1st number:\n3\nEnter the 2nd number:\n5\nEnter the 3rd number:\n12\nsecond greatest:5\n"], ["5\n"], [], ["withdraw,balance = map(str,input().split())\nwithdraw =int(withdraw)\nbalance = float(balance)\nif withdraw%5==0 and withdraw+0.50<=balance:\n    print(balance-withdraw-0.50)\nelse:\n    print(balance)\n"], [], [], [], [], [], ["from IPython.core.magic import register_line_magic\nimport subprocess\n\n@register_line_magic\ndef run_local_server(line):\n    handle = IPython.display.display(\n            IPython.display.Pretty(\"Launching my server...\"),\n            display_id=True,\n    )\n    subprocess.Popen(['python', '-m', 'http.server'])\n    shell = \"\"\"\n        (async () => {\n            const url = new URL(await google.colab.kernel.proxyPort(8000, {'cache': true}));\n            const iframe = document.createElement('iframe');\n            iframe.src = url;\n            iframe.setAttribute('width', '100%');\n            iframe.setAttribute('height', '400');\n            iframe.setAttribute('frameborder', 0);\n            document.body.appendChild(iframe);\n        })();\n    \"\"\"\n    script = IPython.display.Javascript(shell)\n    handle.update(script)\n", "%run_local_server\n"], [], ["import numpy as np\n\ndef odd(n):\n   return np.arange(1,n*2,2)\n"], [], [], [], [], [], ["{\n\"python.linting.pylintArgs\": [\"--extension-pkg-whitelist=PyQt5\"]\n}\n"], [], ["class Account:\n\n    number_of_accounts = 0  # class attribute, not initialised for every instance\n\n    def __init__(self):\n        # whatever init code\n        Account.number_of_accounts += 1\n\naccount_1 = Account()\naccount_2 = Account()\naccount_3 = Account()\n\nprint(Account.number_of_accounts)\n"], ["class Account:\n    last_code = 0\n    def __init__(self) -> None:\n        self.code = Account.last_code + 1\n        Account.last_code = self.code\n\na = Account()\nb = Account()\nc = Account()\n\nprint(a.code) # 1\nprint(b.code) # 2\nprint(c.code) # 3\n"], ["class Example:\n    code = 0\n\n    def __new__(cls, *args, **kwargs):\n        cls.code += 1\n        return super().__new__(Example, *args, **kwargs)\n\n\nex1 = Example()\nprint(ex1.code) # 1\nex2 = Example()\nprint(ex2.code) # 2\nex3 = Example()\nprint(ex3.code) # 3\n"], [], [], ["!tar -xvf \"cord-19_2021-12-20.tar.gz\"\n"], ["inp_str = input().split(' ')\n\nwtd_amnt = int(inp_str[0])\nbal_amnt = float(inp_str[1])\n\nlst_dgt = float(inp_str[0][len(inp_str[0]) - 1])\n\n\nif lst_dgt in (5, 0) and wtd_amnt != 0:\n    if wtd_amnt + 0.5 <= bal_amnt :\n        print('%.2f' %(bal_amnt - wtd_amnt - 0.5))\n    else: print('%.2f' %(bal_amnt))\nelse: print('%.2f' %(bal_amnt))\n"], ["withdrawal_amount, balance_amount = input().split()              \nwithdrawal_amount = int(withdrawal_amount)                        \nbalance_amount = float(balance_amount)                            \nif (withdrawal_amount % 5 == 0 and balance_amount>(withdrawal_amount+.5)):\n    balance_amount = balance_amount - withdrawal_amount - 0.5     \n    print('%.2f' % balance_amount)\nelse:\n    print('%.2f' % balance_amount)\n"], [], ["python3 -m pip install cytopy\n"], ["[python path] -m pip install package\n"], [], [], [], [], [], ["import plotly.express as px\n"], [">>> pd.Series([m.all() for m in np.isin(df2.values,df.values)])\n\n0     True\n1    False\n2    False\ndtype: bool\n", "# np.isin\n>>> np.isin(df2.values,df.values)\n\nOut[139]: \narray([[ True,  True,  True],\n       [False,  True, False],\n       [False, False,  True]])\n\n# all()\n>>> [m.all() for m in np.isin(df2.values,df.values)]\n\nOut[140]: [True, False, False]\n\n# pd.Series()\n>>> pd.Series([m.all() for m in np.isin(df2.values,df.values)])\n\nOut[141]: \n0     True\n1    False\n2    False\ndtype: bool\n"], ["df.append(df2).duplicated().iloc[df.shape[0]:]\n", "tmp1 = np.arange(0,12).reshape((4,3))\ndf1 = pd.DataFrame(data=tmp1,  columns=[\"a\", \"b\", \"c\"]) \n\ntmp2 = {'a':[3,100,101], 'b':[4,4,100], 'c':[5,100,3]}\ndf2 = pd.DataFrame(data=tmp2)\n\ndf1 = pd.concat([df1] * 10_000).reset_index()\ndf2 = pd.concat([df2] * 10_000).reset_index()\n\n%timeit df1.append(df2).duplicated().iloc[df1.shape[0]:]\n# 100 loops, best of 5: 4.16 ms per loop\n%timeit pd.Series([m.all() for m in np.isin(df2.values,df1.values)])\n# 10 loops, best of 5: 74.9 ms per loop\n%timeit df2.apply(frozenset, axis=1).isin(df1.apply(frozenset, axis=1))\n# 1 loop, best of 5: 443 ms per loop\n"], [], [">>> df2.apply(lambda x: all(np.in1d(x, df)), axis=1)\n0     True\n1    False\n2    False\ndtype: bool\n", ">>> df2.apply(frozenset, axis=1).isin(df1.apply(frozenset, axis=1))\n0     True\n1    False\n2    False\ndtype: bool\n"], ["df[~df.apply(tuple,1).isin(df2.apply(tuple,1))]\n"], [], ["\n# install with `pip install sqlalchemy`\n\nimport sqlalchemy as db\n\nengine = db.create_engine('sqlite:///my-example-db.sqlite')\n\nwith engine.connect() as con:\n\n    rs = con.execute('SELECT * FROM myexampletable')\n\n    for row in rs:\n        print(row)\n"], [], ["import pandas as pd\nfrom scipy.spatial import distance\n\ndata = [(989, 998), (1074, 999), (1159, 1000), (1244, 1001), (1329, 1002),\n        (970, 1042), (1057, 1043), (1143, 1044), (1230, 1045), (1316, 1046),\n        (951, 1088), (1039, 1089), (1127, 1090), (1214, 1091), (1302, 1092),\n        (930, 1137), (1020, 1138), (1109, 1139), (1198, 1140), (1287, 1141),\n        (909, 1188), (1000, 1189), (1091, 1190), (1181, 1191), (1271, 1192)]\ndf = pd.DataFrame(data)\ndf.columns = ['x', 'y']\ndef find_nearest( df, x, y):\n    min_distance = float('inf')\n    index_of_closest = -1\n    for index, pos in enumerate(df.values):\n        x_coord, y_coord = pos\n        current_distance = distance.euclidean((x, y), (x_coord, y_coord))\n        if current_distance < min_distance and current_distance != 0 :\n            min_distance = current_distance\n            index_of_nearest= index\n    return index_of_nearest\n\nprint(\"index=\",find_nearest(df,1080, 1000),\"value=\",data[find_nearest(df,1080, 1000)])\n", "df.iloc[-1]=[1080, 1000]\nz = np.array([[complex(c[0], c[1]) for c in df.values]])\nDistance = abs(z.T - z)\ndistance = Distance\nmasked_a = np.ma.masked_equal(distance, 0.0, copy=False)\nindex=np.argmin(masked_a[:, len(masked_a)-1])\nprint(\"index=\",index,\"value=\",df.loc[index])\n", "import numpy as np\nimport pandas as pd\nfrom scipy.spatial import distance\nimport timeit\n\ndata = [(989, 998), (1074, 999), (1159, 1000), (1244, 1001), (1329, 1002),\n        (970, 1042), (1057, 1043), (1143, 1044), (1230, 1045), (1316, 1046),\n        (951, 1088), (1039, 1089), (1127, 1090), (1214, 1091), (1302, 1092),\n        (930, 1137), (1020, 1138), (1109, 1139), (1198, 1140), (1287, 1141),\n        (909, 1188), (1000, 1189), (1091, 1190), (1181, 1191), (1271, 1192)]\ndf = pd.DataFrame(data)\ndf.columns = ['x', 'y']\ndef find_nearest( df, x, y):\n    min_distance = float('inf')\n    index_of_closest = -1\n    for index, pos in enumerate(df.values):\n        x_coord, y_coord = pos\n        current_distance = distance.euclidean((x, y), (x_coord, y_coord))\n        if current_distance < min_distance and current_distance != 0 :\n            min_distance = current_distance\n            index_of_nearest= index\n    return index_of_nearest\nstarttime = timeit.default_timer()\nprint(data[find_nearest(df,1080, 1000)])\nprint(\"The time difference 1 is :\", timeit.default_timer() - starttime)\n#or\nstarttime = timeit.default_timer()\ndf.iloc[-1]=[1080, 1000]\nz = np.array([[complex(c[0], c[1]) for c in df.values]])\nDistance = abs(z.T - z)\nmasked_a = np.ma.masked_equal(Distance, 0.0, copy=False)\nprint(df.iloc[np.argmin(masked_a[:, len(masked_a)-1])])\nprint(\"The time difference 2 is :\", timeit.default_timer() - starttime)\n\ndata = [[(989, 998), (1074, 999), (1159, 1000), (1244, 1001), (1329, 1002)],\n        [(970, 1042), (1057, 1043), (1143, 1044), (1230, 1045), (1316, 1046)],\n        [(951, 1088), (1039, 1089), (1127, 1090), (1214, 1091), (1302, 1092)],\n        [(930, 1137), (1020, 1138), (1109, 1139), (1198, 1140), (1287, 1141)],\n        [(909, 1188), (1000, 1189), (1091, 1190), (1181, 1191), (1271, 1192)]]\ndf = pd.DataFrame(data)\nstarttime = timeit.default_timer()\nl = (1080, 1000)\nout = min(df.to_numpy().flatten(), key=lambda c: (c[0]- l[0])**2 + (c[1]-l[1])**2)\nprint(out)\nprint(\"The time difference for method 3 is :\", timeit.default_timer() - starttime)\n\nstarttime = timeit.default_timer()\ndist = df.stack().apply(lambda c: (c[0]- l[0])**2 + (c[1]-l[1])**2)\nidx = dist.index[dist.argmin()]\nval = df.loc[idx]\n\nprint(idx)\nprint(val)\nprint(\"The time difference for method 4 is :\", timeit.default_timer() - starttime)\n\nstarttime = timeit.default_timer()\narr = df.to_numpy().astype([('x', int), ('y', int)])\ndist = (arr['x'] - l[0])**2 + (arr['y'] - l[1])**2\nidx = tuple(np.argwhere(dist == np.min(dist))[0])\nval = arr[idx]  # or df.loc[idx]\nprint(val)\nprint(\"The time difference for method 5 is :\", timeit.default_timer() - starttime)\n\nstarttime = timeit.default_timer()\nI = (1080, 1000)\n\ns1 = df.stack()\ns = pd.DataFrame(s1.to_list(), index=s1.index).sub(I).pow(2).sum(axis=1)\nout = s[s.idxmin()]\nprint (out)\n(1074, 999)\n\nprint(s.idxmin())\n(0, '1')\nprint(\"The time difference for method 6 is :\", timeit.default_timer() - starttime)\n"], ["# Setup\ndata = [[(989, 998), (1074, 999), (1159, 1000), (1244, 1001), (1329, 1002)],\n        [(970, 1042), (1057, 1043), (1143, 1044), (1230, 1045), (1316, 1046)],\n        [(951, 1088), (1039, 1089), (1127, 1090), (1214, 1091), (1302, 1092)],\n        [(930, 1137), (1020, 1138), (1109, 1139), (1198, 1140), (1287, 1141)],\n        [(909, 1188), (1000, 1189), (1091, 1190), (1181, 1191), (1271, 1192)]]\ndf = pd.DataFrame(data)\n\nl = (1080, 1000)\n\nout = min(df.to_numpy().flatten(), key=lambda c: (c[0]- l[0])**2 + (c[1]-l[1])**2)\nprint(out)\n\n# Output:\n(1074, 999)\n", "dist = df.stack().apply(lambda c: (c[0]- l[0])**2 + (c[1]-l[1])**2)\nidx = dist.index[dist.argmin()]\nval = df.loc[idx]\n\nprint(idx)\nprint(val)\n\n# Output:\n(0, 1)\n(1074, 999)\n", "arr = df.to_numpy().astype([('x', int), ('y', int)])\ndist = (arr['x'] - l[0])**2 + (arr['y'] - l[1])**2\nidx = tuple(np.argwhere(dist == np.min(dist))[0])\nval = arr[idx]  # or df.loc[idx]\n"], ["I = (1080, 1000)\n\nmin_ = 1000\ns1 = df.stack()\ns = pd.DataFrame(s1.to_list(), index=s1.index).sub(I).pow(2).sum(axis=1)\ns = s[s < min_]\n\nout = (0, 0) if s.empty else s[s.idxmin()]\nprint (out)\n", "idx = 'no match' if s.empty else s.idxmin()\nprint (idx)\n(0, '1')\n", "I = (1080, 1000)\n\ns1 = df.stack()\ns = pd.DataFrame(s1.to_list(), index=s1.index).sub(I).pow(2).sum(axis=1)\nout = s[s.idxmin()]\nprint (out)\n(1074, 999)\n\nprint(s.idxmin())\n(0, '1')\n"], [], ["data = pd.Series(df.to_numpy().flatten()).str.strip().str.strip('()').str.split(',', expand=True).astype(int)\nsample = (1080, 1000)\n", "distances = data.apply(lambda x: (x[0]-sample[0])**2+(x[1]-sample[1])**2, axis=1)\nout = tuple(data[distances == distances.min()].to_numpy()[0])\n", "(1074, 999)\n"], ["I = (1080, 1000)\n\ndiff = df.swifter.applymap(lambda item: abs(item[0]-I[0])+abs(item[1]-I[1]))\n\ncol_index = diff.min(axis=0)[diff.min(axis=0) == diff.min(axis=0).min()].index[0]\nrow_index = diff.min(axis=1)[diff.min(axis=1) == diff.min(axis=1).min()].index[0]\n\ndf.loc[row_index, col_index]\n"], ["# cordinates: np.ndarray(n, 2)\ndef find_nearest(cordinates, x, y):\n    x_d = np.abs(cordinate[:, 0] - x)\n    y_d = np.abs(cordinate[:, 1] - y)\n    nearest_idx = np.argmin(x_d  + y_d)\n    return cordinate[nearest_idx]\n"], ["b = [1,2,3,4,5,6,7,8,9,10,11]\nind = [6, 4, 3, 9, 10, 8, 1, 5, 2, 7, 0]\nc=np.array(b)[ind].tolist()\n"], [">>> ohenc.get_feature_names()\n>>> x_cat_df.columns = ohenc.get_feature_names()\n"], ["import pandas as pd\nfrom category_encoders.one_hot import OneHotEncoder\n\nohenc = OneHotEncoder(sparse=False)\nx_cat_df = pd.DataFrame(ohenc.fit_transform(xtrain_lbl))\nx_cat_df.columns = ohenc.get_feature_names_out(input_features=xtrain_lbl.columns)\n"], ["import collections\nstatuses = {\n    \"Alice\": \"online\",\n    \"Bob\": \"offline\",\n    \"Eve\": \"online\",\n    \"Adam\" : \"1mn rest\"\n}\na = statuses.values()\ncounter= collections.Counter(a)\nprint(counter)\n"], [], ["count + 1\n", "count = count + 1\n", "count += 1\n"], ["count += 1\n"], [], ["image/png\nJupyter Notebook Renderer (ms-toolsai.jupyter-renderers)\n", "image/svg+xml\nJupyter Notebook Renderer (ms-toolsai.jupyter-renderers)\n"], ["list(map(float, word))\n"], ["mylist=[int(x) for x in range(1,21)]\nmylist.sort()\nnewlist=[]\nfor i in range(len(mylist)//10): #just index through the 10% elements with this\n    newlist.append(mylist[i])\nprint(newlist)\n        \n"], ["import numpy as np\n\nl = np.array(range(1, 21))\nthreshold = np.percentile(l, 10) # calculate the 10th percentile\nprint(l[l < threshold]) # Filter the list.\n", "import numpy as np\n\nl = np.array([1]*20)\nthreshold = np.percentile(l, 10)\nprint(l[l < np.percentile(l, 10)]) # Gives you empty list\nprint(l[l <= np.percentile(l, 10)]) # Gives you full list\n"], ["s1 = df.groupby('Type').Number.agg(['count', 'sum'])\ns2 = df.groupby(['Type', 'Status']).Number.agg(['count', 'sum']).unstack(fill_value=0).sort_index(level=1, axis=1)\ns2.columns = s2.columns.map('_Status='.join)\ns1 = s1.add_prefix('Total_')\ns = pd.concat([s1, s2], axis=1)\ns\n      Total_count  Total_sum  count_Status=N  sum_Status=N  count_Status=Y  \\\nType                                                                         \nA               2        400               0             0               2   \nB               3        800               2           600               1   \n      sum_Status=Y  \nType                \nA              400  \nB              200  \n"], [], [], [], ["from turtle import Turtle\nimport random\n\njosh = Turtle()\njosh.color('DarkRed')\n\ndef random_color()->tuple:\n    r = random.randint(0,255)\n    g = random.randint(0,255)\n    b = random.randint(0,255)\n    return (r,g,b)\n\njosh.speed('fastest')\njosh.pensize(2)\nfor i in range(72):\n    josh.circle(100)\n    josh.right(5)\n    colormode(255)\n    josh.pencolor(random_color())\n        \nscreen = Screen()\nscreen.setup(800,800)\nscreen.exitonclick()\n"], ["import random\nimport turtle\n\nfrom turtle import Turtle, Screen\n\ntim = Turtle()\n\ntim.shape('arrow')\n\nturtle.colormode(255)\n\ndef random_colour( ):\n    r = random.randint(0, 255)\n    g = random.randint(0, 255)\n    b = random.randint(0, 255)\n    return (r, g, b)\n\ntim.speed('fastest')\n\ndef draw_spirograph(size_of_gap):\n    for _ in range(int(360/size_of_gap)):\n        tim.color(random_colour())\n        tim.circle(100)\n        tim.setheading(tim.heading()+size_of_gap)\n\ndraw_spirograph(5)\n\nscreen = Screen()\nscreen.exitonclick()\n"], ["[idx for idx, val in enumerate(['a', 'b'])]\n", "[0, 1]\n"], ["cd /usr/lib/python3/dist-packages/gi\n", "sudo update-alternatives --install /usr/bin/python3 python3 /usr/bin/python3.8 2\n"], [], ["a = iter(range(10))\n\ntry:\n    next(a)\n    while True:\n        print(next(a))\nexcept StopIteration:\n    print(\"Stop iteration\")\n"], [], [], ["pd.Series(d).to_frame().T\n", "pd.DataFrame.from_dict(d, orient='index').T\n", "   angry  disgust  fear  happy   sad  surprise  neutral\n0   0.08      0.0  0.16   0.05  0.02      0.68     0.02\n", "d = {'angry': 0.08,\n    'disgust': 0.0,\n    'fear': 0.16,\n    'happy': 0.05,\n    'sad': 0.02,\n    'surprise': 0.68,\n    'neutral': 0.02}\n"], ["import pandas as pd\ndata = {'angry': [0.08],\n        'disgust': [0.0],\n        'fear': [0.16],\n        'happy': [0.05],\n        'sad': [0.02],\n        'surprise': [0.68],\n        'neutral': [0.02]}\ndf = pd.DataFrame(data)\ndf.head()\n", "data = {k: [v] for k, v in data.items()}\n"], ["{'angry': [0.08],'disgust': [0.0],'fear': [0.16],'happy': [0.05],'sad': [0.02],'surprise': [0.68],'neutral': [0.02]}\n", "import pandas as pd\ndict = {'angry': [0.08],'disgust': [0.0],'fear': [0.16],'happy': [0.05],'sad': [0.02],'surprise': [0.68],'neutral': [0.02]}\ndf = pd.DataFrame(dict)\nprint(df)\n>>    angry  disgust  fear  happy   sad  surprise  neutral\n0      0.08   0.0      0.16 0.05    0.0   0.68      0.02\n"], ["d = {\n 'angry': 0.08,\n 'disgust': 0.0,\n 'fear': 0.16,\n 'happy': 0.05,\n 'sad': 0.02,\n 'surprise': 0.68,\n 'neutral': 0.02\n}\npd.DataFrame(data=[d.values()], columns=d.keys())\n", "   angry  disgust  fear  happy   sad  surprise  neutral\n0   0.08      0.0  0.16   0.05  0.02      0.68     0.02\n"], [], ["C:\\Program Files\\Python-3.7.6-x64> python.exe -m pip install --user tensorflow\n"], [], ["pip install sqlalchemy==1.3.24\n"], ["Fatal Python error: initfsencoding: unable to load the file system codec\nModuleNotFoundError: No module named 'encodings'\n"], [], ["conda info --envs\n", "conda activate testEnv\n\nconda list scikit-learn\n"], ["# from your project interpreter run\n# your_project_python --version\n$ python3 --version\nPython 3.7.8\n", "sudo apt install python3.7-distutils\n# sudo apt install python3-distutils  # would just update default python intrpreter\n", "$ which python\n/usr/bin/python\n$ ls -lach /usr/bin/python\nlrwxrwxrwx 1 root root 9 Jun  8  2018 /usr/bin/python -> python2.7\n"], ["!pip install tensorflow==2.7.0\n"], ["len([x for x in xls3[' Vesturland'] if x == ' '])\n"], ["word = user_list.split(\":\")\n", "print(', '.join(f'{float(w):.1f}' for w in word))\n"], ["list(map(float, word.split(':')))\n"], ["input = \"5:2:4\"\nuser_list = input.split(\":\")\n\nfloat_list = [float(x) for x in user_list]\nprint(float_list)\n"], ["user_list = input(\"Enter values:\")\nword = user_list.split(\":\")\nnewlist = []\nfor num in word:\n    newlist.append(round(float(num), 1))\nprint(newlist)\n"], ["$ vim ~/.config/coc/extensions/node_modules/coc-python/package.json\n\"python.jediEnabled\": false,\n", "\"python\", {\n\\   'jediEnabled': v:false,\n\\   'pythonPath': split(execute('!which python'), '\\n')[-1]\n\\ }\n"], [" regex = r\"(\"+ \")|(\".join(replacers)+ \")\"\n", "re.sub(regex, \"\", a)\n"], ["str1=\"HellXXo WoYYrld\"\nreplacers = [\"YY\", \"XX\"]\nfor s in replacers:\n  str1 = str1.replace(s, \"\")\nprint(str1)\n", "import re\nstr1=\"HellXXo WoYYrld\"\nreplacers = [\"YY\", \"XX\"]\nre.sub('|'.join(replacers), '', str1)\n"], ["str1=\"HellXXo WoYYrld\"\nreplacers = [\"YY\", \"XX\"]\n\nimport re\nre.sub('|'.join(replacers), '', str1)\n"], ["str1=\"HellXXo WoYYrld\"\nreplacers = [\"YY\", \"XX\"]\nfor elem in replacers:\n  str1=str1.replace(elem, \"\")\n  \nprint(str1)\n", "Hello World\n"], ["str1=\"HellXXo WoYYrld\"\nreplacers = [\"YY\", \"XX\"]\nfor rep in replacers:\n    str1 = str1.replace(rep, \"\")\nprint(str1)\n", "Hello World\n"], ["def is_dir_empty(path:str)->bool:\n    import ctypes\n    shlwapi = ctypes.OleDLL('shlwapi')\n    return shlwapi.PathIsDirectoryEmptyA(path.encode('utf-8'))\n"], [], [], ["import pandas as pd\n\ndf_melted = pd.DataFrame(df.apps.tolist()).T.melt().dropna()\ndf_tmp = pd.DataFrame(df_melted.value.tolist(), \n             columns = ['app_name', 'app_version'],\n             index = df_melted.variable)\n\ndf = df_prices.join(df_tmp)\ndf.drop(columns=['prices'], inplace = True)\n"], ["df['col4'] = df['col4'].mask(df.isnull().all(axis=1), 100)\n", "       col1      col2      col3      col4\n0    3.0000    4.0000   33.0000       NaN\n1       NaN       NaN       NaN  100.0000\n2       NaN   12.0000   55.0000       NaN\n3   21.0000       NaN       NaN       NaN\n4       NaN       NaN       NaN  100.0000\n"], [" df.loc[:,~df.notna().any()]=100\n", "col1  col2  col3   col4\n0   3.0   4.0  33.0  100.0\n1   NaN   NaN   NaN  100.0\n2   NaN  12.0  55.0  100.0\n3  21.0   NaN   NaN  100.0\n4   NaN   NaN   NaN  100.0\n"], ["In [717]: cols = df.columns[df.isna().all()]\nIn [718]: cols\nOut[718]: Index(['col4'], dtype='object')\n", "In [720]: df[cols] = 100\n\nIn [721]: df\nOut[721]: \n   col1  col2  col3   col4\n0   3.0   4.0  33.0  100.0\n1   NaN   NaN   NaN  100.0\n2   NaN  12.0  55.0  100.0\n3  21.0   NaN   NaN  100.0\n4   NaN   NaN   NaN  100.0\n"], ["df.loc[:, df.isnull().all(axis=0)] = 100\n", "    col1    col2    col3    col4\n0   3.0     4.0     33.0    100.0\n1   NaN     NaN     NaN     100.0\n2   NaN     12.0    55.0    100.0\n3   21.0    NaN     NaN     100.0\n4   NaN     NaN     NaN     100.0\n"], ["df.loc[:, df.isna().all()] = 100\nprint(df)\n\n# Output:\n   col1  col2  col3   col4\n0   3.0   4.0  33.0  100.0\n1   NaN   NaN   NaN  100.0\n2   NaN  12.0  55.0  100.0\n3  21.0   NaN   NaN  100.0\n4   NaN   NaN   NaN  100.0\n"], ["grouped_df.apply(lambda x: list(x[[LON, LAT]].values))\n", "grouped_df.apply(lambda x: list(x[[LON, LAT]].values.tolist()))\n"], [], ["import numpy as np\na = np.array([1,2,3,4,5,6,7])\nb = np.array([2,4,7])\nc = np.intersect1d(a, b, return_indices=True)[1]\n# array([1, 3, 6], dtype=int64)\n"], ["pip install matplotlib\n", "cycler = 0.10 \nkiwisolver = 1.0.1\nnumpy = 1.16 \npillow = 6.2.0 \npyparsing = 2.2.1\nsix = 1.5 \npython-dateutil = 2.7\n", " python -m pip install -U pip\n python -m pip install -U matplotlib\n"], ["if save_format == 'h5':\n    with h5py.File(filepath, 'w') as f:\n        hdf5_format.save_weights_to_hdf5_group(f, self.layers)\n", "import io\nfrom tensorflow.python.keras.saving import hdf5_format\n\nbytes_file = io.BytesIO()\nwith h5py.File(bytes_file, 'w') as f:\n    hdf5_format.save_weights_to_hdf5_group(f, self.layers)\nweight_bytes = bytes_file.getvalue()\n"], ["def finder(s, x, y):\n    if len(x) == 0:\n        return True\n    elif len(s) < len(x):\n        return False\n    elif s[0] == x[0]:\n        return finder(s[1:], x[1:], y)\n    else:\n        return finder(s[1:], y, y)\nprint(finder(\"1011101110\", \"111\", \"111\"))\n"], [], [], [">>> df.stack().reset_index().to_numpy()\narray([['store1', 'January', 2],\n       ['store1', 'February', 3],\n       ['store1', 'March', 4],\n       ['store2', 'January', 5],\n       ['store2', 'February', 6],\n       ['store2', 'March', 7],\n       ['store3', 'January', 8],\n       ['store3', 'February', 9],\n       ['store3', 'March', 10]], dtype=object)\n>>> \n", ">>> df.melt(ignore_index=False).reset_index().to_numpy()\narray([['store1', 'January', 2],\n       ['store2', 'January', 5],\n       ['store3', 'January', 8],\n       ['store1', 'February', 3],\n       ['store2', 'February', 6],\n       ['store3', 'February', 9],\n       ['store1', 'March', 4],\n       ['store2', 'March', 7],\n       ['store3', 'March', 10]], dtype=object)\n>>> \n"], ["df.unstack().swaplevel().reset_index().values.tolist()\n#OR\ndf.reset_index().melt(id_vars=\"index\").values.tolist()\n# [['store1', 'January', 2],\n#  ['store2', 'January', 5],\n#  ['store3', 'January', 8],\n#  ['store1', 'February', 3],\n#  ['store2', 'February', 6],\n#  ['store3', 'February', 9],\n#  ['store1', 'March', 4],\n#  ['store2', 'March', 7],\n#  ['store3', 'March', 10]]\n", "df.transpose().unstack().reset_index().values.tolist()\n# [['store1', 'January', 2],\n#  ['store1', 'February', 3],\n#  ['store1', 'March', 4],\n#  ['store2', 'January', 5],\n#  ['store2', 'February', 6],\n#  ['store2', 'March', 7],\n#  ['store3', 'January', 8],\n#  ['store3', 'February', 9],\n#  ['store3', 'March', 10]]\n"], [], [], ["data = []\n\nfor col, row in df.items():\n    for ind, val in row.reset_index().values:\n        data.append([ind, col, val])\n\ndata\n"], ["# Results\nres = []\n\n# Nested loop: first for length of index col, then next for cols\nfor i in range(len(index_col)):\n    for j in range(len(cols)):\n        # Format of data\n        res.append([index_col[i], cols[j], values[i][j]])\n\n# Return results\nprint(res)\nreturn res\n"], ["from functools import reduce\n\ndef getVowelsLength(word, k):\n    chunks = [word[i:i+k] for i in range(len(word)-(k-1))]\n    return reduce(lambda x, y: x if x[1] > y[1] else y, list(zip(chunks, [sum(1 for l in w if l in 'aeiou') for w in chunks])))\n"], ["//  Function that checks that the given character is a vowel or not\n\n int isVowel(char c)\n{\n\n if ((c == 'a') || (c == 'e') || (c == 'i') || (c == 'o') || (c == 'u'))\n\n{\n\n\nreturn 1;\n\n}\n\nreturn 0;\n\n}\n\n\nint countVowelSubstrings(string word)\n\n{\n\n   int counter = 0; // initalize the counter with 0\n\n   for (int i = 0; i < word.size(); i++)\n\n   {\n\nset<char> temp;// set initalized outside the for loop so as to avoid \n                // the persitance of the pervious iteration values in \n               //the set\n\nfor (int j = i; j < word.size(); j++)\n\n{\n\n    //  if the jth charcter is not a vowel then break the loop\n\n    if (isVowel(word[j]) == 0)\n\n    {\n\n        break;\n\n    }\n\n    // else insert the char value in the SET\n\n    temp.insert(word[j]);\n\n    //  if size == 5 (as there are 5 vowels in English alphabet)  then \n    //  increase the counter by 1\n\nif (temp.size() == 5)\n\n    {\n\n        counter++;\n\n    }\n\n}\n\n    }\n\n  return counter;\n\n       }\n     // Code By Ambuj Kumar\n"], ["numpy.arange(1, length+1) * value\n", "import timeit\n\ntestcode_numpy = ''' \nimport numpy\ndef multiples_numpy(value, length):\n    return numpy.arange(1, length+1) * value\nmultiples_numpy(5, 1000)\n'''\n\ntestcode = ''' \ndef multiples(value, length):\n    return [*range(value, length*value+1, value)]\nmultiples(5, 1000)\n'''\n\nprint(timeit.timeit(testcode_numpy))\nprint(timeit.timeit(testcode))\n\n# Result:\n# without numpy: 9.7 s\n# with numpy: 2.4 s\n"], ["def multiples(value, length):\n    l = []\n    for i in range(1, length+1):\n        l.append(value*i)\n    return l\n"], [], ["def multiples(value, length):\n    return [value * i for i in range(1, length + 1)]\n\n\nprint(multiples(7, 5))\n# [7, 14, 21, 28, 35]\nprint(multiples(12, 10))\n# [12, 24, 36, 48, 60, 72, 84, 96, 108, 120]\nprint(multiples(17, 6))\n# [17, 34, 51, 68, 85, 102]\n"], [], ["- git clone https://gerrit.googlesource.com/git-repo\n- cd git-repo\n- git reset --hard v1.13.11\n- mkdir -p ~/.bin\n- PATH=\"${HOME}/.bin:${PATH}\"\n- cp repo ~/.bin/repo\n- chmod a+rx ~/.bin/repo\n"], ["celsius = float(input(\"Enter temperature in celsius: \"))\nfahrenheit = (celsius * 9/5) + 32\nprint(str(celsius) + \" Celsius is: \" + str(fahrenheit) + \" Fahrenheit\")\n"], ["from functools import reduce\n\ndef double_letters(string):\n    return bool(reduce(lambda x, y: not(x is y) and x and y, string))\n"], ["def doubles(S):\n    return any(set(enumerate(S))&set(enumerate(S,1)))\n\nprint(doubles(\"akdgjg\"))     # False\nprint(doubles(\"dkjhfkddhk\")) # True\n", "def doubles(S):\n    return any(a==b for a,b in zip(S,S[1:]))\n"], ["m = re.search(r\"(.)\\1{1,}\", 'error')\nm.group(0)\n"], ["def double_letters(word):\n    for i in range (len(word)-1):\n        if word[i] == word[i+1]:\n            return True\n    return False\n\nprint(double_letters(\"Error\"))\n"], ["if word1 != word2:\n"], ["fruitlist = sys.argv[2:]\ninp_arg = sys.argv[1]\nmask = [f==inp_arg for f in fruitlist]\n\nif_exists = True in mask\n"], [], ["b = [1,3,2,5,4,7,6]\nNode=5\nindex=b.index(Node)# fetching index of node\nfor i in b[index+1::]: #iterating through list after the node\n     print(i)\n"], ["b = [1, 3, 2, 5, 4, 7, 6]\nNode = 5\nprint(b[b.index(Node)+1::])  # [4, 7, 6]\n"], ["def main():\n    b = [1, 3, 2, 5, 4, 7, 6]\n    node = 5\n    for i in range(-1, -len(b), -1):\n        if b[i] == node:\n            for j in b[i+1:]:\n                print(j)\n            return 0\n    for i in b:\n        print(i)\n\n\nif __name__ == \"__main__\":\n    main()\n"], ["b = [1,3,2,5,4,7,6]\nNode = 5\nindex = b.index(Node)\nfor i in b[index+1:]:\n    print(i)\n"], [], ["function isValidWalk(walk) {\nif (!(walk.length === 10)){ return  false }\n const reducer = (pv, cv) =>{\n   (cv === 's' || cv === 'e') ? pv -= 1 : pv += 1 \n   return pv\n   }\nconst answer =  walk.reduce(reducer, 0) \n  if (answer == 0){\n   return  true} \n  else  return false} \n"], ["import sys\n\nterm = sys.argv[1].strip().upper()\nfruitlist = list(map(str.upper, sys.argv[2:]))\n\n\ndef search(term, lst):\n    for item in lst:\n        if item == term:\n            return True\n\n\nprint(search(term, fruitlist))\n", "python3 var.py foo bar baz foobar                                                                                                                                                       \n>>> None\n\npython3 var.py foo bar baz foo                                                                                                                                                           \n>>> True\n"], ["import sys\nfruitlist = [item.upper() for item in sys.argv[2:]]\nif sys.argv[1].strip() in fruitlist:\n        print(sys.argv[1], 'exact match found in list')\n"], ["fruitlist = [x.upper() for x in sys.argv[2:]]\n", "import sys\nfruitlist = [x.upper() for x in sys.argv[2:]]\nprint(sys.argv[1])\nprint(fruitlist)\nif sys.argv[1].strip() in fruitlist:\n        print(sys.argv[1], 'exact match found in list')\n"], [], [], ["df = pd.DataFrame({'a': [-1,2,3], 'b': [-2,3,4], 'c':[-3,4,5]})\n\ncolumn_names = list(df.columns)\ndf['neg_sum']= df[df[column_names]<0].sum(axis=1)\n"], ["def find_substring_length_k_most_vowels(s: str, k: int) -> str:\n    '''Returns first substring of length k that has the max number of vowels.'''\n    vowels = set('aeiou')\n    max_vowel_count = curr_vowel_count = 0\n    max_window_start, max_window_end = 0, -1\n    window_start = 0\n    for window_end, ch in enumerate(s):\n        if ch in vowels:\n            curr_vowel_count += 1\n        if window_end - window_start + 1 == k:\n            if curr_vowel_count > max_vowel_count:\n                max_vowel_count = curr_vowel_count\n                max_window_start, max_window_end = window_start, window_end\n            curr_vowel_count -= 1 if s[window_start] in vowels else 0\n            window_start += 1\n    return s[max_window_start:max_window_end + 1]\n\n\ndef main() -> None:\n    s = 'azerdii'\n    k = 5\n    print(find_substring_length_k_most_vowels(s, k))\n\n\nif __name__ == '__main__':\n    main()\n", "erdii\n"], ["withdrawal_amount, balance_amount = input().split()              \nwithdrawal_amount = int(withdrawal_amount)                        \nbalance_amount = float(balance_amount)                            \nif (withdrawal_amount % 5 == 0 and balance_amount>=(withdrawal_amount+0.5)):\n    balance_amount = balance_amount - withdrawal_amount - 0.5     \n    print(round(balance_amount,2))\nelse:\n    print(round(balance_amount,2))\n"], [], [], ["def findSubstring(s, k):\n    i = 0\n    lst = []\n    count = 0\n    tempL = []\n    \n    while(i != len(s)):\n        a = i+k\n        temp = s[i:a]\n        lst.append(temp)\n        if a != len(s):\n            i+=1\n        else:\n            break\n    \n    for word in lst:\n        count = 0\n        for alphabet in word:\n            if alphabet in 'aeiou':\n                count += 1\n        tempL.append(count)\n    print(lst)\n    print(tempL)\n    return \n\ns = 'azerdii'\nk = 5\nprint(findSubstring(s, k))\n"], ["def spy_game(nums):\n    a=[]\n    for i in nums:\n        if i == 0:\n            a.append(i)\n        if i == 7:\n            a.append(i)\n    if a ==  [0,0,7]:\n        return True\n    else:\n        return False\n"], ["^foo(?![^a]*a[^a]*a)(?![^b]*b[^b]*b)(?![^c]*c[^c]*c)( +[abc])* *$\n"], ["products_a = [{'color': \"White\", 'size': \"2' 3\\\"\"}, {'color': \"Blue\", 'size': \"5' 8\\\"\"} ]\nproducts_b = [{'color': \"Black\", 'size': \"2' 3\\\"\"}, {'color': \"Sky blue\", 'size': \"5' 8\\\"\"} ]\n\nproducts_a_colors = {product['color'].lower() for product in products_a}\nproducts_b_colors = {product['color'].lower() for product in products_b}\nunique_colors = products_a_colors.union(products_b_colors)\nprint(unique_colors)\n", "{'black', 'white', 'sky blue', 'blue'}\n", "colormap = {color: '' for color in unique_colors}\nimport pprint\npp = pprint.PrettyPrinter(indent=4, width=10, sort_dicts=True)\npp.pprint(colormap)\n", "{\n    'sky blue': '',\n    'white': '',\n    'black': '',\n    'blue': ''\n}\n", "colormap = {\n    'sky blue': 'blue',\n    'dark blue': 'blue',\n    'bright red': 'red',\n    'dark red': 'red',\n    'burgundy': 'red'\n}\n", "def color(product_color):\n    return colormap.get(product_color.lower(), product_color).lower()\n", ">>> color('Burgundy')\n'red'\n>>> color('Sky blue')\n'blue'\n>>> color('Blue')\n'blue'\n", ">>> color('Red')\n'red'\n>>> color('Turquoise')\n'turquoise'\n", "from itertools import product as cartesian_product\nproduct_pairs = {\n    pair_id: product_pair for pair_id, product_pair\n    in enumerate(cartesian_product(products_a, products_b))\n}\nprint(product_pairs)\n", "{0: ({'color': 'White', 'size': '2\\' 3\"'}, {'color': 'Black', 'size': '2\\' 3\"'}),\n 1: ({'color': 'White', 'size': '2\\' 3\"'}, {'color': 'Sky blue', 'size': '5\\' 8\"'}),\n 2: ({'color': 'Blue', 'size': '5\\' 8\"'}, {'color': 'Black', 'size': '2\\' 3\"'}),\n 3: ({'color': 'Blue', 'size': '5\\' 8\"'}, {'color': 'Sky blue', 'size': '5\\' 8\"'})\n}\n", "color_scores = [(pair_id, 0.8) for pair_id, (product_a, product_b)\n                in product_pairs.items()\n                if color(product_a['color']) == color(product_b['color'])]\nprint(color_scores)\n", "[(3, 0.8)]\n", "size_scores = [(pair_id, 0.5) for pair_id, (product_a, product_b)\n               in product_pairs.items()\n               if product_a['size'] == product_b['size']]\nprint(size_scores)\n\n", "[(0, 0.5), (3, 0.5)]\n", "print()\nprint(\"Totals\")\nscore_sources = [color_scores, size_scores]  # add more scores to this list\nall_scores = sorted(itertools.chain(*score_sources))\npair_scores = itertools.groupby(all_scores, lambda x: x[0])\nfor pair_id, pairs in pair_scores:\n    scores = [score for _, score in pairs]\n    average = sum(scores) / len(scores)\n    print(f\"Pair {pair_id}: score {average}\")\n    for n, product in enumerate(product_pairs[pair_id]):\n        print(f\"  --> Item {n+1}: {product}\")\n", "Totals\nPair 0: score 0.5\n  --> Item 1: {'color': 'White', 'size': '2\\' 3\"'}\n  --> Item 2: {'color': 'Black', 'size': '2\\' 3\"'}\nPair 3: score 0.65\n  --> Item 1: {'color': 'Blue', 'size': '5\\' 8\"'}\n  --> Item 2: {'color': 'Sky blue', 'size': '5\\' 8\"'}\n"], ["def tri(n):\n   r = [(s:=(' '*(((2*n-1)-(2*i-1))//2)))+('*'*(2*i-1))+s for i in range(1, n+1)]\n   return r\n\ndef triangle(n):\n   v = [''.join(j) for i in range(n+1) for j in zip(*[tri(n) for _ in range(2*i-1)])]\n   return '\\n'.join((s:=' '*((len(v[-1]) - len(i))//2))+i+s for i in v) \n", "for i in range(1, 4):\n   print(triangle(i))\n   print('-'*25)\n", "*\n-------------------------\n    *    \n   ***   \n *  *  * \n*********\n-------------------------\n            *            \n           ***           \n          *****          \n       *    *    *       \n      ***  ***  ***      \n     ***************     \n  *    *    *    *    *  \n ***  ***  ***  ***  *** \n*************************\n-------------------------\n"], [], [], ["from ma import ma\nfrom models.model import Company\n\nfrom marshmallow import fields, validate\n\n\nclass CompanySchema(ma.ModelSchema):\n\n    name = fields.Str(required=True, validate=[validate.Length(min=4, max=250)])\n    addressLine1 = fields.Str(required=True, validate=[validate.Length(min=5, max=250)])\n    addressLine2 = fields.Str(required=False, validate=[validate.Length(max=250)])\n    city = fields.Str(required=True, validate=[validate.Length(min=5, max=100)])\n    state = fields.Str(required=True, validate=[validate.Length(min=2, max=10)])\n    zipCode = fields.Str(required=True, validate=[validate.Length(min=5, max=250)])\n    logo = fields.Str(required=False, validate=[validate.Length(max=250)])\n    website = fields.Str(required=True, validate=[validate.Length(min=5, max=250)])\n    recognition = fields.Str(required=False, validate=[validate.Length(max=250)])\n    vision = fields.Str(required=False, validate=[validate.Length(max=250)])\n    history = fields.Str(required=False, validate=[validate.Length(max=250)])\n    mission = fields.Str(required=False, validate=[validate.Length(max=250)])\n\n    class Meta:\n        model = Company\n", "class Company(db.Model):\n\n    __tablename__ = \"company\"\n\n    id = db.Column(db.Integer, primary_key=True)\n    name = db.Column(db.String(250), nullable=False)\n    addressLine1 = db.Column(db.String(250), nullable=False)\n    addressLine2 = db.Column(db.String(250), nullable=True)\n    city = db.Column(db.String(250), nullable=False)\n    state = db.Column(db.String(250), nullable=False)\n    zipCode = db.Column(db.String(10), nullable=False)\n    logo = db.Column(db.String(250), nullable=True)\n    website = db.Column(db.String(250), nullable=False)\n    recognition = db.Column(db.String(250), nullable=True)\n    vision = db.Column(db.String(250), nullable=True)\n    history = db.Column(db.String(250), nullable=True)\n    mission = db.Column(db.String(250), nullable=True)\n    jobs = relationship(\"Job\", cascade=\"all, delete-orphan\")\n\n    def save_to_db(self):\n        print(\"=====inside save_to_db=======\")\n        db.session.add(self)\n        db.session.commit()\n", "@api.route('/company')\nclass Company(Resource):\n\n    def post(self, *args, **kwargs):\n        \"\"\" Creating a new Company \"\"\"\n        data = request.get_json(force=True)\n        schema = CompanySchema()\n        if data:\n            logger.info(\"Data got by /api/test/testId method %s\" % data)\n\n            # Validation with schema.load() OPTION_2\n            company, errors = schema.load(data)\n            print(company)\n\n            if errors:\n                return {\"errors\": errors}, 422\n\n            company.save_to_db()\n            return {\"message\": COMPANY_CREATED_SUCCESSFULLY}, 201\n", "{\n    \"errors\": {\n        \"name\": [\n            \"Length must be between 4 and 250.\"\n        ]\n    }\n}\n"], [], ["rows = int(input())\np = 2 * rows *(rows - 1)  # Variable to print the left most spaces\nx = \" \"\nfor i in range(rows):  # For every row\n    space = 2 * (rows - 1)  # Space variable to print spaces after an asterisk when needed\n    for j in range(rows):  # For every row inside the row\n        print(p * x, end=\"\")  # print the left most spaces\n        for k in range(2*(i + 1) - 1): \n            print((2*(j + 1) - 1) * \"*\", end = \"\")  # Print the asterisk(s) based on the row number\n            print(space * x, end = \"\")  # Print spaces(s) after the asterisk(s)\n        space -= 2  # Decrement the number of spaces to be printed after an asterisk for every row\n        p -= 1  # Every row has one lesser space on the left\n        print()  # Print a new line after every row\n    p -= (rows - 1)  # Update the number of spaces to be printed on the left most side for every outer row\n", "                        *      \n                       ***    \n                      *****  \n                     *******\n                 *      *      *      \n                ***    ***    ***    \n               *****  *****  *****  \n              *********************\n          *      *      *      *      *      \n         ***    ***    ***    ***    ***    \n        *****  *****  *****  *****  *****  \n       ***********************************\n   *      *      *      *      *      *      *      \n  ***    ***    ***    ***    ***    ***    ***    \n *****  *****  *****  *****  *****  *****  *****  \n*************************************************\n", "                                        *        \n                                       ***      \n                                      *****    \n                                     *******  \n                                    *********\n                               *        *        *        \n                              ***      ***      ***      \n                             *****    *****    *****    \n                            *******  *******  *******  \n                           ***************************\n                      *        *        *        *        *        \n                     ***      ***      ***      ***      ***\n                    *****    *****    *****    *****    *****\n                   *******  *******  *******  *******  *******\n                  *********************************************\n             *        *        *        *        *        *        *\n            ***      ***      ***      ***      ***      ***      ***\n           *****    *****    *****    *****    *****    *****    *****\n          *******  *******  *******  *******  *******  *******  *******\n         ***************************************************************\n    *        *        *        *        *        *        *        *        *\n   ***      ***      ***      ***      ***      ***      ***      ***      ***\n  *****    *****    *****    *****    *****    *****    *****    *****    *****\n *******  *******  *******  *******  *******  *******  *******  *******  *******\n*********************************************************************************\n"], ["import sys\n\nn = int(sys.argv[1])\n\ndef drawtriangle(num_lines):\n    # prepares the inner triagle in a list and return it together with its width (size).\n    size = (2*num_lines)-1\n    triangle = []\n    for i in range(num_lines):\n        white_side = num_lines - i - 1\n        asterisks = 2*i + 1\n        triangle.append(\" \"*white_side + \"*\"*asterisks + \" \"*white_side)\n    return triangle, size\n\ndef main(num_lines):\n    tr, tr_size = drawtriangle(num_lines)\n\n    for j in range(num_lines):\n        for line in tr:\n            white_triangles = n - j - 1\n            white_size = tr_size * white_triangles\n            line_repeat = (2*j) + 1\n            print(\" \"*white_size + line*line_repeat + \" \"*white_size)\n\nmain(n)\n", "*\n", "    *\n   ***\n *  *  *\n*********\n", "            *\n           ***\n          *****\n       *    *    *\n      ***  ***  ***\n     ***************\n  *    *    *    *    *\n ***  ***  ***  ***  ***\n*************************\n", "                        *\n                       ***\n                      *****\n                     *******\n                 *      *      *\n                ***    ***    ***\n               *****  *****  *****\n              *********************\n          *      *      *      *      *\n         ***    ***    ***    ***    ***\n        *****  *****  *****  *****  *****\n       ***********************************\n   *      *      *      *      *      *      *\n  ***    ***    ***    ***    ***    ***    ***\n *****  *****  *****  *****  *****  *****  *****\n*************************************************\n"], [], ["list1=[[2, 1, 2, 3, 4],\n       [0, 4, 5],\n       [1, 8, 9]]\nlist2= []\n\nfor nested_list in list1:\n    for i in range(nested_list[0]):\n        list2.append(nested_list[i+1])\n"], ["sum([x[1:x[0] + 1] for x in arr], [])\n# [1, 2, 8]\n"], ["[val for idx, *rem in lst for val in rem[:idx]] \n# [1, 2, 8]\n"], [], [], [], ["from collections.abc import Sequence\n\ndef foo(bar: Sequence[int] = []) -> list[int]:\n    return sorted(bar)\n", "def foo(bar: Sequence[int] = []) -> list[int]:\n    if isinstance(bar, list):\n        # reveal_type(bar)  # => Revealed type is \"builtins.list[Any]\"\n        bar.append(0)\n    return sorted(bar)\n"], ["def even_sum(n):\n    if n%2==0:\n        if n==2:\n            return 2\n        else:\n            return(n+even_sum(n-2))\nn=10\nn*=2\nprint(even_sum(n))\n"], ["def sum_of_even(n):\n    return (n // 2) * (n // 2 + 1)\n", "def sum_of_even(n):\n    return 0 if n<2 else sum_of_even(n-1) if n%2 else n + sum_of_even(n-2)\n"], ["import gym\n\nenv = gym.make('ALE/Breakout-v5',\n    obs_type='rgb',                   # ram | rgb | grayscale\n    frameskip=5,                     # frame skip\n    mode=0,                           # game mode, see Machado et al. 2018\n    difficulty=0,                     # game difficulty, see Machado et al. 2018\n    repeat_action_probability=0.25,   # Sticky action probability\n    full_action_space=True,           # Use all actions\n    render_mode=None                  # None | human | rgb_array\n)\n"], ["i = iter(range(10))\nwhile (x := next(i, None)) is not None and x < 5:\n    print(x)\n", "from itertools import takewhile\n\ni = iter(range(10))\nfor x in takewhile({some logic}, i):\n    # do stuff\n", "for x in takewhile(lambda e: 5 > e, i):\n    print(x)\n0\n1\n2\n3\n4\n"], [], ["def duplicate_last(l):\n    l.append(l[-1])\n\nl = [1, 2, 3]\nduplicate_last(l)\n"], ["!pip install spicy\n"], [">>> compareRGB(hexFromColorName('dark green'),hexFromColorName('green'))\n0.9366046763242764\n>>> compareRGB(hexFromColorName('Light Blue'),hexFromColorName('Black'))\n0.18527897735531407\n"], ["from gensim.models import Word2Vec\nmodel = Word2Vec.load(path/to/your/model)\nmodel.wv.similarity('Chennai', 'London')\n"], [], ["from difflib import SequenceMatcher\n#https://towardsdatascience.com/sequencematcher-in-python-6b1e6f3915fc\n\ns1 = \"blue\"\ns2 = \"sky blue\"\nsim = SequenceMatcher(None, s1, s2).ratio()\nprint(\"Similarity between two strings is: \" + str(sim) )\n"], ["^foo(?:( [abc])(?!.*\\1))+$\n"], ["foo(?!(?: [abc])*( [abc])(?: [abc])*\\1)(?: [abc])*\n", "^foo ([abc])(?: (?!\\1)((?1))(?: (?!\\1|\\2)(?1))?)?$\n"], [], ["^(?:(?!.*\\bfoo\\b)|(?=(?:(?!\\bfoo\\b).)*\\bfoo\\b(?!(.*\\bfoo\\b))))(?:(?!.*\\ba\\b)|(?=(?:(?!\\ba\\b).)*\\ba\\b(?!(.*\\ba\\b))))\n", "(?:(?!.*\\bc\\b)|(?=(?:(?!\\bc\\b).)*\\bc\\b(?!(.*\\bc\\b))))\n", "(?:(?!.*\\ba\\b)|(?=(?:(?!\\ba\\b).)*\\ba\\b(?!(.*\\ba\\b))))\n", "(?!\\bfoo\\b).\n", "(?:(?!\\bfoo\\b).)*\n"], [], ["my_lst = ['a', 'a', 'b', 'c']\nmy_set = set(lst)\n\nprint(my_set)\n# {'a', 'c', 'b'}\n"], [], [], [], [], [], [], [], ["os.system(\"brownie run scripts/simple_collectible/create_collectible.py  --network rinkeby\")\n"], ["$ poetry export -f requirements.txt --output requirements.txt --without-hashes\n", "$ pip install -r requirements.txt\n"], [], [], [], ["Celsius = (5/9*Fahrenheit - 32)\n", "Celsius = 5/9 * (Fahrenheit - 32)\n", "Fahrenheit = (9/5 * Celsius) + 32\n"], ["Celsius = (Fahrenheit - 32) * 5 / 9\n"], ["def Fahrenheit_toCelsius(Fahrenheit):\n    Celsius = (Fahrenheit - 32) * 5/9\n    return Celsius\n    \ndef Celsius_toFahrenheit(Celsius):\n    Fahrenheit = (Celsius * 9/5) + 32\n    return Fahrenheit\n", "if __name__ == '__main__':\n    print(Fahrenheit_toCelsius(10))\n    print(Celsius_toFahrenheit(10))\n"], ["Fahrenheit = 77\nCelsius = (Fahrenheit - 32) * 5.0/9.0\nprint(Celsius)\n"], ["for num_chars in range(0,58): \nprint(original_str.count)\n"], [], ["python get_pip.py\n"], [], [], [], ["pip install typing\n"], ["$ pipenv --rm #To remove the old environment\n$ rm Pipfile* #Remove both Pipfiles\n$ pipenv install --python 3.6\n"], ["pip install atari_py-0.2.9-cp39-cp39-win_amd64.whl\n"], ["pip3 install --force-reinstall --upgrade jupyter\n"], ["X,Y=map(float,input().split())\nif X%5!=0:\n    print(\"Incorrect Withdrawal Amount (not multiple of 5)\")\nelif (X%5==0) and (X>Y-0.5):\n    print(\"Insufficient Funds\")\nelse :\n    print(\"Successful Transaction\\n\")\n    print(round((Y-X-0.50),2))\n"], ["#!/bin/python3\n\nimport math\nimport os\nimport random\nimport re\nimport sys    \nimport calendar\nimport datetime\nfrom collections import Counter\n\ndef usingcalendar(datetuple):\n    # Write your code here\n    year = datetuple[0]\n    temp = list(datetuple)\n    if (year%4==0):\n        temp[1] = 2\n        datetuple = tuple(temp)\n    print(calendar.month(datetuple[0],datetuple[1]))\n\n    obj = calendar.Calendar()\n    l = []\n    dt=list(datetuple)\n    obj = calendar.Calendar()\n    for day in obj.itermonthdates(dt[0], dt[1]):\n        l.append(day)\n    rev = l[:-8:-1]\n    rev.reverse()\n    print(rev)\n\n    try:\n        print(datetime.date(datetuple[0],datetuple[1],29).strftime('%A'))\n    except ValueError:\n        print(\"Monday\")\n\nif __name__ == '__main__':\n    qw1 = []\n\n    for _ in range(3):\n        qw1_item = int(input().strip())\n        qw1.append(qw1_item)\n        \n    tup=tuple(qw1)\n\n    usingcalendar(tup)\n"], ["df.filter(~df.ID.rlike('\\D+')).show()\n"], ["conda install -c conda-forge atari_py\n"], [], ["conda install -c conda-forge rtree=0.9.3\n"], [], ["input_list = [['Ankur', 'Avik', 'Kiran', 'Nitin'], ['Narang', 'Sarkar', 'R', 'Sareen']]\nfirst_name = input_list[0]\nlast_name = input_list[1]\n\nname = list(map(lambda x,y: x + \" \" + y, first_name, last_name))\n\nprint(names)\n"], [], ["input_list = [ ['Ankur', 'Avik', 'Kiran', 'Nitin'], ['Narang', 'Sarkar', 'R', 'Sareen']]\nfirst_name = input_list[0]\nlast_name = input_list[1]\n\nF = lambda first_name,last_name: first_name+\" \"+last_name # lambda function\nname = list(map(F,first_name,last_name)) # Map\nprint(name)\n", "['Ankur Narang', 'Avik Sarkar', 'Kiran R', 'Nitin Sareen']\n"], [], [], [], [], ["name = list(map(lambda x,y: x+ \" \" + y, first_name,last_name))\n"], ["spy_game([1,2,4,0,0,7,5])\n", "True\n", "[0, 0, 7, 'x']\n[0, 7, 'x']\n[0, 7, 'x']\n[0, 7, 'x']\n[0, 7, 'x']\n[7, 'x']\n[7, 'x']\n[7, 'x']\n[7, 'x']\n[7, 'x']\n['x']\n\nTrue\n"], ["mkdir -p ~/.bin\nPATH=\"${HOME}/.bin:${PATH}\"\ncurl https://storage.googleapis.com/git-repo-downloads/repo > ~/.bin/repo\nchmod a+rx ~/.bin/repo\n"], ["pip3 install pygame\n"], ["from typing import *\n\na: Optional[int]\nassert a is not None\nreveal_type(a)  # builtins.int\n\nb: Union[int, float, str]\nif isinstance(b, int):\n    reveal_type(b)  # builtins.int\nelse:\n    reveal_type(b)  # Union[builtins.float, builtins.str]\n"], ["def myFun(*args):\n\n    if len(args) == 0:  \n        return(0)       \n                    \n    product = 1\n    for arg in args:\n        product *= arg\n    return(product)\n\n\nprint(myFun())\nprint(myFun(8, 5))\nprint(myFun(8, 5, 2))\nprint(myFun(8, 5, 2, 3))\n\n# Output: \n0\n40\n80 \n240\n"], [], ["services.AddSingleton<GremlinClient>(\n            (serviceProvider) =>\n            {\n                var gremlinServer = new GremlinServer(\n                    hostname: \"<account>.gremlin.cosmosdb.azure.com\",\n                    port: <port>,\n                    enableSsl: true,\n                    username: \"/dbs/<db>/colls/<collection>\",\n                    password: \"\"\n                    );\n                var connectionPoolSettings = new ConnectionPoolSettings\n                {\n                    MaxInProcessPerConnection = 32,\n                    PoolSize = 4,\n                    ReconnectionAttempts = 3,\n                    ReconnectionBaseDelay = TimeSpan.FromSeconds(1),\n                };\n                var mimeType = \"application/vnd.gremlin-v2.0+json\";\n                return new GremlinClient\n                (\n                    gremlinServer: gremlinServer,\n                    graphSONReader: new GraphSON2Reader(),\n                    graphSONWriter: new GraphSON2Writer(),\n                    mimeType: mimeType,\n                    connectionPoolSettings: connectionPoolSettings\n                );\n            }\n        );\n", "var mimeType = \"application/vnd.gremlin-v2.0+json\";\nvar client = new GremlinClient\n(\n      gremlinServer: <your server>,\n      graphSONReader: new GraphSON2Reader(),\n      graphSONWriter: new GraphSON2Writer(),\n      mimeType: mimeType,\n      connectionPoolSettings: <your connection pool>\n );\n"], [], ["jupyter labextension install jupyterlab-plotly\n", "ValueError: Please install nodejs and npm before continuing installation. nodejs may be installed using conda or directly from the nodejs website.\n"], ["_sentinel = []\n\ndef foo(bar: List[int]=_sentinel):\n    bar = [] if bar is _sentinel else bar\n    return sorted(bar)\n"], ["def foo(bar=None):\n    bar = [] if bar is None else bar\n    return sorted(bar)\n", "def foo(bar: List[int]):\n    bar = [] if bar is None else bar\n    return sorted(bar)\n", "def foo(bar: List[int]=None):\n   bar = [] if bar is None else bar\n   return sorted(bar)\n"], ["def foo(bar: Optional[List[int]]=None):\n    bar : List[int] = [] if bar is None else bar\n    return sorted(bar)\n"], ["import calendar\nfrom collections import Counter\n\ncal = calendar.Calendar()\nyear = 2020\nmonth = 1\ncount = Counter(d.strftime('%A') for d in cal.itermonthdates(year, month) if d.month==month)\n", ">>> count\nCounter({'Wednesday': 5, 'Thursday': 5, 'Friday': 5, 'Saturday': 4, 'Sunday': 4, 'Monday': 4, 'Tuesday': 4})\n>>> count.most_common(1)\n[('Wednesday', 5)]\n"], ["pip install scipy==1.6.3 --user \n"], ["sudo python3.6 /usr/bin/apt-add-repository ppa:mosquitto-dev/mosquitto-ppa\n"], [], [], ["#define PY_SSIZE_T_CLEAN\n#include <Python.h>\n\n\nint main(int argc char **argv)\n{\n        Py_SetPath(L\"C:\\\\path-to\\\\python-3.8.5-embed-amd64\\\\python38.zip;C:\\\\path-to\\\\python-3.8.5-embed-amd64\");\n        Py_Initialize();\n        // ...\n}\n\n"], ["python3 -m venv venv\nsource ./venv/bin/activate\npip install --upgrade pip\n"], ["C:\\python>python -m pip install --upgrade --force-reinstall pip\nCollecting pip\n  Using cached pip-21.1-py3-none-any.whl (1.5 MB)\nInstalling collected packages: pip\n  Attempting uninstall: pip\n    Found existing installation: pip 21.1\n    Uninstalling pip-21.1:\n      Successfully uninstalled pip-21.1\nWARNING: Value for scheme.headers does not match. Please report this to <https://github.com/pypa/pip/issues/9617>\ndistutils: C:\\python\\Include\\UNKNOWN\nsysconfig: C:\\python\\Include\nWARNING: Additional context:\nuser = False\nhome = None\nroot = None\nprefix = None\nSuccessfully installed pip-21.1\n"], [" def appendFlag(target, value):\n        target += value\n        target += \" \"\n        return target\n  m=''\n  m=appendFlag(m,'ok')\n"], [], ["pip install typing\n"], [], [], ["from sqlalchemy.orm.query import _ColumnEntity\n", "from sqlalchemy.orm.context import _ColumnEntity\n"], [], [], ["pip install --upgrade flask-sqlalchemy\n"], [], ["def dir_empty(dir_path):\n    return not any((True for _ in os.scandir(dir_path)))\n", "def dir_empty(dir_path):\n    return not next(os.scandir(dir_path), None)\n"], [], [], [], ["pip freeze > requirements.txt\n", "SQLAlchemy<1.4.0\n", "pip install -r requirements.txt\n"], ["pip freeze\n", "pip install SQLAlchemy==1.3.23\n", "pip freeze > requirements.txt\n"], ["class MySQLAlchemy(SQLAlchemy):\n    def apply_driver_hacks(self, app, sa_url, options):\n        ...\n"], [], ["sqlalchemy < 1.4.0\n", "pip -r requirements.txt\n"], ["conda install Flask-SQLAlchemy\n"], [], ["import turtle\nimport math\n\ndef circle2(radius,extent=360,steps=360):\n    if extent<360 and steps==360:\n        steps=extent\n    \n    theta=extent/steps\n    step_size=2*radius*math.sin(math.radians(theta/2))\n    turtle.left(theta/2)\n    turtle.forward(step_size)\n    for i in range(1,steps):\n        turtle.left(theta)\n        turtle.forward(step_size)\n    \n    turtle.left(theta/2)\n    \n\nturtle.hideturtle()\nturtle.speed(0)\nturtle.getscreen().tracer(False)\n\ncircle2(50)\ncircle2(100,180)\nturtle.up()\nturtle.home()\nturtle.down()\ncircle2(130)\ncircle2(130,360,10)\n\nturtle.update()\nturtle.mainloop()\n"], [], ["git clone git://github.com/matplotlib/matplotlib.git\n", "cd matplotlib\npython -mpip install .\n", "python -mpip install -e .\n"], ["conda create --name spy42py38 python==3.8\nconda install spyder=4.2.1 -c conda-forge\n"], ["from pyspark.sql import functions as F\n\ndf.select(\"col_a\",F.regexp_replace(col(\"col_a\"), \"[^0-9]\", \"\").alias(\"numeric\"))\\\n    .filter(col(\"col_a\")!=col(\"numeric\"))\\\n    .distinct()\\\n    .show()\n"], [], [], ["#!/usr/bin/python\n", "#!/usr/bin/python3\n"], ["from sklearn.base import BaseEstimator, TransformerMixin\nimport pandas as pd\n\nclass CustomOneHotEncoder(BaseEstimator, TransformerMixin):\n\n    def __init__(self, **kwargs):\n        self.feature_names = []\n\n    def fit(self, X, y=None):\n        return self\n\n    def transform(self, X):\n\n        result = pd.get_dummies(X)\n        self.feature_names = result.columns\n\n        return result\n\n", "a = model.best_estimator_.named_steps[\"clf\"].feature_importances_\nb = model.best_estimator_.named_steps[\"ohc\"].feature_names\n\ndf = pd.DataFrame(a,b)\ndf.sort_values(by=[0], ascending=False).head(20)\n\n"], [], [], ["def spy_game(nums):\n    for index, n in enumerate(nums):\n        if n==0:\n            for index1,n1 in enumerate(nums[index+1::]):\n                if n1 == 0:\n                    for index2,n2 in enumerate(nums[index1+1::]):\n                        if n2 == 7:\n                            return True\n                        \n                    else:\n                        return False\n"], ["def spy_game(nums):\n    phrase = ''.join(str(nums))\n    if '007' in phrase:\n        return True\n    else:\n        return False\n"], ["jupyter labextension install jupyterlab-plotly@4.14.3\n"], [], [], ["import numpy as np\nimport tensorflow as tf\n\nclass cb_hold_best_weights(tf.keras.callbacks.Callback):\n    best_weights = []\n    def __init__(self):\n        super(cb_hold_best_weights, self).__init__()\n        self.best = np.Inf\n    def on_epoch_end(self, epoch, logs=None):\n        current_loss = logs.get('val_loss')\n        if np.less(current_loss, self.best):\n            self.best = current_loss\n            cb_hold_best_weights.best_weights = self.model.get_weights()\n            print('\\nSaving weights validation loss= {0:6.4f}\\n'.format(current_loss))\n", "callbacks=[topmodelbox.cb_hold_best_weights()]\n", "model.set_weights(topmodelbox.cb_hold_best_weights.best_weights) \n"], [], [], [], [], ["indexes = [index for index,element in enumerate(your_list)]\n", "length = len(your_list)\nindexes = list(range(length))\n"], ["pip3 install jedi\n"], ["repo init -u https://github.com/STMicroelectronics/oe-manifest.git -b refs/tags/openstlinux-5.4-dunfell-mp1-20-11-12\n", "Get https://gerrit.googlesource.com/git-repo/clone.bundle\nGet https://gerrit.googlesource.com/git-repo\nremote: Counting objects: 2, done\nremote: Finding sources: 100% (117/117)\nremote: Total 117 (delta 63), reused 117 (delta 63)\nReceiving objects: 100% (117/117), 142.25 KiB | 11.85 MiB/s, done.\nResolving deltas: 100% (63/63), completed with 32 local objects.\nFrom https://gerrit.googlesource.com/git-repo\n   1469c28..0588f3d  main       -> origin/main\n * [new tag]         v2.11      -> v2.11\n * [new tag]         v2.11.1    -> v2.11.1\nTraceback (most recent call last):\n  File \"/home/xxx/Distribution-Package/openstlinux-5.4-dunfell-mp1-20-11-12/.repo/repo/main.py\", line 56, in <module>\n    from subcmds.version import Version\n  File \"/home/xxx/Distribution-Package/openstlinux-5.4-dunfell-mp1-20-11-12/.repo/repo/subcmds/__init__.py\", line 38, in <module>\n    ['%s' % name])\n  File \"/home/xxx/Distribution-Package/openstlinux-5.4-dunfell-mp1-20-11-12/.repo/repo/subcmds/upload.py\", line 27, in <module>\n    from hooks import RepoHook\n  File \"/home/xxx/Distribution-Package/openstlinux-5.4-dunfell-mp1-20-11-12/.repo/repo/hooks.py\", line 472\n    file=sys.stderr)\n", "sudo rm /usr/bin/python\nsudo ln -s /usr/bin/python3 /usr/bin/python\n"], [], ["from pathlib import Path    \nimport os\n\npath = 'jav/av'\nlen(os.listdir(path))\n\n>>> 101204\n"], [], ["var client = new GremlinClient(gremlinServer:gremlinServer,mimeType:GremlinClient.GraphSON2MimeType)\n"], [], [], [], [], ["def main():\n    print(\"Enter two numbers and I will tell you the sum of the numbers.\")\n    print(\"Press 'q' at anytime to exit.\")\n    val = []\n    while True:\n\n        check_value = lambda x: 'quit' if x.lower() == 'q' or x.lower() == 'quit' else int(x)\n        if not val:\n            value = input(\"First number: \")\n        elif len(val) == 2:\n            answer = sum(val)\n            print(f\"\\nThe answer is: {answer}\")\n            print('==='*15 + ' < ' + f'PROGRAM RESTARTING' + ' > ' + '==='*15)\n\n            val[:] = []\n            continue\n        else:\n            value = input(\"Second number: \")\n\n\n        try:\n            check_ = check_value(value)\n            val.append(check_)\n        except ValueError:\n            print(\"Please enter a number!\")\n            continue\n        finally:\n            if check_ == 'quit':\n                print('Program is stopping....')\n                break\n            else:\n                pass\n\n\nif __name__ == '__main__':\n    main()\n"], ["Please enter a number!\n"], [], ["print(\"Enter two numbers and I will tell you the sum of the numbers.\")\nprint(\"Press 'q' at anytime to exit.\")\n\n\ndef input_number(prompt: str) -> int:\n    \"\"\"Ask the user to input a number, re-prompting on invalid input.\n    Exception: raise EOFError if the user enters 'q'.\"\"\"\n    while True:\n        try:\n            number = input(f\"{prompt} number: \")\n            if number == 'q':\n                raise EOFError\n            return int(number)\n        except ValueError:\n            print(\"Please enter a number!\")\n\n\nwhile True:\n    try:\n        numbers = (input_number(n) for n in (\"First\", \"Second\"))\n        print(f\"The answer is: {sum(numbers)}\")\n    except EOFError:\n        break\n"], ["if first_number == 'q':\n    keep_going = False\n    break\n# Prompt for user to input second number and store it in a variable.\nsecond_number = input(\"Second number: \")\n# Create a break when entering the second number.\nif second_number == 'q':\n    keep_going = False\n    break\n", "first_number = input(\"First number: \")\n# Create a break when entering the first number.\nif first_number == 'q':\n    keep_going = False\n    break\n# Prompt for user to input second number and store it in a variable.\n# Create a break when entering the second number.\nelse:\n    second_number = input(\"Second number: \")\n    if second_number =='q':\n        keep_going = False\n        break\n"], [], [], [], [], ["await ctx.send('I just replied to you')\n"], ["@bot.listen('on_message') \nasync def stuff(message):\n\n    if message.content.startswith(\"buttlerprefix\"): # this tells the bot what to listen for. If a user types `buttlerprefix` in any text channel, it will respond with what's below\n        msg = await message.channel.send(\"my prefix is `>`\") # set the sending message equal to a variable so that you can manipulate it later like I did with the timer, and delete function below\n        await asyncio.sleep(10) # tells the bot to wait 10 seconds before continuing below\n        await msg.delete() # deletes the send message after 10 seconds\n"], ["sudo apt-get install python3-dev\n"], ["pip install -f https://github.com/Kojoley/atari-py/releases atari_py \n"], [], [], [], ["def sum_of_even(upperlim, lowerlim = 2):\n    if upperlim <= lowerlim:\n        if upperlim == lowerlim:\n            return upperlim\n        else:\n            return 0\n    midpoint = lowerlim + (upperlim - lowerlim) // 2\n    if midpoint % 2 == 0:\n        return sum_of_even(upperlim, midpoint + 2) + sum_of_even(midpoint, lowerlim)\n    else:\n        return sum_of_even(upperlim, midpoint + 1) + sum_of_even(midpoint - 1, lowerlim)\n\ndef cross_check(n):\n    half_n = n // 2\n    return half_n * (half_n + 1)\n\nn = 1000000\nprint(sum_of_even(n))   # => 250000500000\nprint(cross_check(n))   # => 250000500000\n"], ["def sum_of_even(n):\n    if n==0:\n        return 0\n    if not n % 2 == 0:\n        return sum_of_even(n-1)\n    else:\n        return n + sum_of_even(n-1)\n\n\nprint(sum_of_even(10))\n", "if n==0:\n    return 0\n", "def sum_of_even(n):\n    if n<=0:\n        return 0\n    if not n % 2 == 0:\n        return sum_of_even(n-1)\n    else:\n        return n + sum_of_even(n-2)\n"], ["curl https://storage.googleapis.com/git-repo-downloads/repo-1 > ~/bin/repo\nchmod a+x ~/bin/repo\npython3 ~/bin/repo init -u git@....\n"], ["!pip install CherryPy #webserver package\n\n#bind the port 8888 and get a weblink to access\nfrom google.colab.output import eval_js\nprint(eval_js(\"google.colab.kernel.proxyPort(8888)\"))\n\n#run the script/API in the background\nimport subprocess\nsubprocess.Popen([\"python\", \"/content/test.py\", \"8888\"]) \n", "import cherrypy\nimport sys\n\nclass HelloWorld:\n    def index(self):\n        return \"Hello World!\"\n    index.exposed = True\nif __name__ == '__main__':\n   config = {'server.socket_host': '0.0.0.0','server.socket_port' : int(sys.argv[1])}\n   cherrypy.config.update(config)\n   cherrypy.quickstart(HelloWorld())\n"], [], [], ["import calendar \nfrom collections import Counter\n\n\nobj = calendar.Calendar()\n\nmy_list1 = []\nfor i in obj.itermonthdays2(year, month):\n    if i[0] == 0:\n        pass\n    else:\n        my_list1.append(str(i[1]))\n\nint_values = []\nfor i in my_list1:\n    int_values.append(int(i))\n\nnum = Counter(int_values)\nnum = num.most_common(1)[0][0]\nif num == 0:\n    print(\"Monday\")\nif num == 1:\n    print(\"Tuesday\")\nif num == 2:\n    print(\"Wednesday\")\nif num == 3:\n    print(\"Thursday\")\nif num == 4:\n    print(\"Friday\")\nif num == 5:\n    print(\"Saturday\")\nif num == 6:\n    print(\"Sunday\")\n"], ["def sum_even_numbers(number):\n    if number == 0:\n        return 0\n\n    if number % 2 == 0:\n        return number + sum_even_numbers(number - 1)  # (number - 2) is also ok\n    else:\n        return sum_even_numbers(number - 1)\n"], ["def sum_of_even(n):\n    sum1 = 0\n    if n == 0:\n        return sum1\n\n    elif n % 2 == 0:\n        sum1 += n\n    \n    return sum1 + sum_of_even(n - 1)\n\n"], [], ["labels: [{% for item in families %}\n         \"{{ item }}\",\n         {% endfor %}]\n"], ["PySide2==5.15.1\nshiboken2==5.15.1\n", "pytest==6.1.2\n"], ["$ cd /usr/lib/python3/dist-packages/gi\n$ sudo ln -s _gi.cpython-{36m,37m}-x86_64-linux-gnu.so\n"], ["df2.filter(F.col(\"id\").cast(\"int\").isNotNull()).show()\n", "display(df2.filter(f\"CAST({'id'} as INT) IS NOT NULL\")\n"], [], [], [], [], [], ["def is_power_of_two(n):\n  # Check if the number can be divided by two without a remainder\n  while n % 2 == 0 and n!=0:\n    n = n / 2\n  # If after dividing by two the number is 1, it's a power of two\n  if n == 1:\n    return True\n  return False\n  \n\nprint(is_power_of_two(0)) # Should be False\nprint(is_power_of_two(1)) # Should be True\nprint(is_power_of_two(8)) # Should be True\nprint(is_power_of_two(9)) # Should be False\n"], [], [], ["{'Date': 'object', 'Karlar': 'float64', 'Konur': 'float64', ' Vesturland': 'object', ...}\n", "{'Date': 'object', 'Karlar': 'float64', 'Konur': 'float64', ' Vesturland': 'object', ...}\n", "col_dtypes = {\n    'Date': 'object', 'Karlar': 'float64', 'Konur': 'float64', \n    ' Vesturland': 'float64', ...\n}\n"], ["import pandas as pd\n\na=pd.DataFrame([['a','b','c'],['2.42','','3.285']]).T\na.columns=['names', 'nums']\n\na['nums']=a['nums'][a['nums']!=''].astype(float)\n"], ["def is_power_of_two(n):\n\n #Check Number for Zero\n  if n==0:\n    return False\n  else:\n    # Check if the number can be divided by two without a remainder\n    while n % 2 == 0:\n      n = n / 2 \n    # If after dividing by two the number is 1, it's a power of two\n    if n == 1:\n      return True\n    return False\n"], ["data:JSON.parse('{{data}}')\n"], [], ["sudo apt install python3-distutils\n", "sudo apt install python3.9-distutils\n"], [], ["pip install https://storage.googleapis.com/tensorflow/mac/cpu/tensorflow-1.8.0-py3-none-any.whl\n"], ["find . -type d -name __pycache__\n", "find . -type d -name __pycache__ -exec rm -fr {} \\;\n"], ["import calendar\nimport collections.defaultdict as dd\n\ndays_count = dd(int)\n\nobj = calendar.Calendar()\n\ndays = [x for x in obj.itermonthdays2(year,month)]\n\n\nfor day in days:\n    if day[0] != 0:  #these are empty days in a monthly calendar\n        days_count[day[1]] += 1\n\nmax_day = max(days_count, key=days_count.get)\n"], ["import shutil\nimport os\n\ndef clearCache():\n    \"\"\"\n    Removes generic `__pycache__` .\n\n    The `__pycache__` files are automatically created by python during the simulation.\n    This function removes the genric files on simulation start and simulation end.\n    \"\"\"\n    path = 'C:/Users/Yours/Desktop/LPG'\n    try:\n       for all in os.listdir(path):\n        if os.path.isdir(path + all):\n            if all == '__pycache__':\n                shutil.rmtree(path + all, ignore_errors=False) \n    except:\n        pass\nclearCache()\n", "import shutil\nimport os\n\npath = 'C:/Users/Yours/Desktop/LPG'\nfor directories, subfolder, files in os.walk(path):\n    if os.path.isdir(directories):\n        if directories[::-1][:11][::-1] == '__pycache__':\n                        shutil.rmtree(directories)\n\n"], ["import os, glob\n\nin_dir = \"/path/to/your/folder\"\n\npattern = ['__pycache__']\n\nfor p in pattern:\n    [os.remove(x) for x in glob.iglob(os.path.join(in_dir, \"**\", p), recursive=True)]\n"], [], ["#                 Mo Tu Wd Th Fr Sa Sn\n# [2019-52w] DEC/ 23 24 25 26 27 28 29\n# [2019-53w] DEC/ 30 31\n# [2020-1w]  JAN/        1  2  3  4  5\n# [2020-2w]  JAN/  6  7  8  9 10 11 12\n\n# [2018-53w] DEC/ 31  \n# [2019-1w]  JAN/     1  2  3  4  5  6\n", "#                 Fr Sa Sn. Mo Tu Wd Th \n# [2019-53w] DEC/ 27 28 29. 30 31\n# [2020-1w]  JAN/                  1  2\n# [2020-2w]  JAN/  3  4  5.  6  7  8  9\n\n# [2018-53w] DEC/ 28 29 30. 31  \n# [2019-1w]  JAN/               1  2  3\n# [2019-2w]  JAN/  4  5  6.  7  8  9 10\n", "from datetime import datetime, timedelta\nfrom enum import IntEnum\n\nWEEKDAY = IntEnum('WEEKDAY', 'MON TUE WED THU FRI SAT SUN', start=1)\n\ndef get_week_number(start, date):\n    year_start = datetime(date.year, 1, 1) - timedelta(days=(datetime(date.year, 1, 1).isoweekday() - start) % 7)\n    return date.year, (date-year_start).days // 7 + 1, (date-year_start).days % 7 + 1\n\nif __name__ == '__main__':\n    # usage:\n    print(get_week_number(WEEKDAY.FRI, datetime(2018, 12, 19)))\n"], [">>> datetime(2020, 1, 1).isocalendar()\n(2020, 1, 3)  # The 3rd day of the 1st week in 2020\n>>> datetime(2019, 12, 31).isocalendar()\n(2020, 1, 2)  # The 2nd day of the 1st week in 2020\n>>> datetime(2019, 1, 1).isocalendar()\n(2019, 1, 2)\n>>> datetime(2017, 1, 1).isocalendar()\n(2016, 52, 7)\n>>> datetime(2016, 12, 26).isocalendar()\n(2016, 52, 1)\n>>> datetime(2015, 12, 31).isocalendar()\n(2015, 53, 4)\n>>> datetime(2016, 1, 1).isocalendar()\n(2015, 53, 5)\n", "#                 Mo Tu Wd Th Fr Sa Sn\n# [2019-52w] DEC/ 23 24 25 26 27 28 29 /DEC\n# [2020-1w]  DEC/ 30 31  1  2  3  4  5 /JAN\n\n# [2019-1w]  DEC/ 31  1  2  3  4  5  6 /JAN\n\n# [2016-52w] DEC/ 26 27 28 29 30 31  1 /JAN\n\n# [2015-53w] DEC/ 28 29 30 31  1  2  3 /JAN\n# [2016-1w]  JAN/  4  5  6  7  8  9 10 /JAN \n", "#                 Fr Sa Sn. Mo Tu Wd Th \n# [2019-51w] DEC/ 20 21 22. 23 24 25 26  /DEC\n# [2019-52w] DEC/ 27 28 29. 30 31  1  2  /JAN\n# [2020-1w]  JAN/  3  4  5.  6  7  8  9  /JAN\n\n# [2018-53w] DEC/ 28 29 30. 31  1  2  3  /JAN\n# [2019-1w]  JAN/  4  5  6.  7  8  9 10  /JAN\n\n# [2016-52w] DEC/ 23 24 25. 26 27 28 29  /DEC\n# [2017-1w]  DEC/ 30 31  1.  2  3  4  5  /JAN\n\n# [2015-52w] DEC/ 25 26 27. 28 29 30 31  /DEC\n# [2016-1w]  JAN/  1  2  3.  4  5  6  7  /JAN \n", "from datetime import datetime, timedelta\nfrom enum import IntEnum\n\nWEEKDAY = IntEnum('WEEKDAY', 'MON TUE WED THU FRI SAT SUN', start=1)\n\nclass CustomizedCalendar:\n\n    def __init__(self, start_weekday, indicator_weekday=None):\n        self.start_weekday = start_weekday\n        self.indicator_delta = 3 if not (indicator_weekday) else (indicator_weekday - start_weekday) % 7\n\n    def get_week_start(self, date):\n        delta = date.isoweekday() - self.start_weekday\n        return date - timedelta(days=delta % 7)\n\n    def get_week_indicator(self, date):\n        week_start = self.get_week_start(date)\n        return week_start + timedelta(days=self.indicator_delta)\n\n    def get_first_week(self, year):\n        indicator_date = self.get_week_indicator(datetime(year, 1, 1))\n        if indicator_date.year == year:  # The date \"year.1.1\" is on 1st week.\n            return self.get_week_start(datetime(year, 1, 1))\n        else:  # The date \"year.1.1\" is on the last week of \"year-1\".\n            return self.get_week_start(datetime(year, 1, 8))\n    \n    def calculate(self, date):\n        year = self.get_week_indicator(date).year\n        first_date_of_first_week = self.get_first_week(year)\n        diff_days = (date - first_date_of_first_week).days\n        return year, (diff_days // 7 + 1), (diff_days % 7 + 1)\n\nif __name__ == '__main__':\n    # Use like this:\n    my_calendar = CustomizedCalendar(start_weekday=WEEKDAY.FRI, indicator_weekday=WEEKDAY.MON)\n    print(my_calendar.calculate(datetime(2020, 1, 2)))\n", "my_calendar = CustomizedCalendar(start_weekday=WEEKDAY.MON)\ns = datetime(2019, 12, 19)\nfor delta in range(20):\n    print my_calendar.calculate(s) == s.isocalendar()\n    s += timedelta(days=1)\n"], ["from datetime import datetime, timedelta\n\nx = datetime(2020, 1, 2) # this is Thursday and week 1 in ISO calendar; should be 1 in custom calendar w/ week starting Thu\ny = datetime(2020, 1, 3) # this is Friday and week 1 in ISO calendar; should be 2 in custom calendar\nprint(x)\nprint(y)\n\ndef weeknum(dt):\n    return dt.isocalendar()[1]\n\ndef myweeknum(dt):\n    offsetdt = dt + timedelta(days=3);  # you add 3 days to Mon to get to Thu \n    return weeknum(offsetdt);\n\nprint(weeknum(x));\nprint(myweeknum(x));\n\nprint(weeknum(y));\nprint(myweeknum(y));\n", "2020-01-02 00:00:00\n2020-01-03 00:00:00\n1\n1\n1\n2\n"], ["def f(n):\n    return[i for i in range(1,n*2,2)]\n", "def E(n):\n    list=[]\n    list.extend(i for i in range(1,2*n,2))\n    return(list)\n"], ["import datetime\n\ndef get_most_common_days(year, month):\n    days = []\n    for daynum in range(29, 32):\n        try:\n            days.append(datetime.date(year, month, daynum).strftime('%A'))\n        except ValueError:\n            break\n    return days\n\nprint(get_most_common_days(2020, 8))\n", "['Saturday', 'Sunday', 'Monday']\n"], ["import pandas as pd \nList = [2, 1, 2, 2, 1, 3, 1] \n  \n# Create a panda DataFrame using the list \ndf=pd.DataFrame({'Number': List}) \n  \n# Creating a new dataframe to store the values with appropriate column name \n# value_counts() returns the count based on the grouped column values  \ndf1 = pd.DataFrame(data=df['Number'].value_counts(), columns=[['Number','Count']]) \n  \n# The values in the List become the index of the new dataframe.Setting these index as a column \ndf1['Count']=df1['Number'].index \n  \n# Fetch the list of frequently repeated columns  \nlist(df1[df1['Number']==df1.Number.max()]['Count']) \n"], ["  print('Your message has been sent!!')\n"], ["!/usr/bin/python3.6\n"], ["# necessary imports\nfrom datetime import date, timedelta\nimport time\n", "def weeknum(dayname):\n    if dayname == 'Monday':   return 0\n    if dayname == 'Tuesday':  return 1\n    if dayname == 'Wednesday':return 2\n    if dayname == 'Thursday': return 3\n    if dayname == 'Friday':   return 4\n    if dayname == 'Saturday': return 5\n    if dayname == 'Sunday':   return 6\n", "def weeknum(dayname):\n    return time.strptime('Sunday', \"%A\").tm_wday\n", "def alldays(year, whichDayYouWant):\n    d = date(year, 1, 1)\n    d += timedelta(days = (weeknum(whichDayYouWant) - d.weekday()) % 7)\n    while d.year == year:\n        yield d\n        d += timedelta(days = 7)\n", "def weeknumber(year, month, day, weekstartsonthisday):\n    specificdays = [d for d in alldays(year, weekstartsonthisday)]\n    return len([specificday for specificday in specificdays if specificday <= datetime.date(year,month,day)])\n", "[datetime.date(2020, 1, 7),\n datetime.date(2020, 1, 14),\n datetime.date(2020, 1, 21),\n datetime.date(2020, 1, 28),\n datetime.date(2020, 2, 4),\n...\n"], ["\nimport time\nimport subprocess\nimport sys\nimport msvcrt\n\nprinting = True\nwhile (1):\n    # Try to flush the buffer\n    while not msvcrt.kbhit() and printing:\n        print(\"hello\")\n\n    doit = msvcrt.getch().decode('utf-8')\n    if doit==\"k\":\n        printing = not printing\n        print(\"stop/start\")\n    if doit == 'q':\n        break\n", "    import keyboard\n\n    running = True\n    display = True\n    block = False\n\n    while running:\n        if keyboard.is_pressed(\"k\"):\n            print(\"stop/start\")\n            if block == False:\n                display = not display\n                block = True\n        else:\n            block = False\n        if display:\n            print(\"hello\")\n        else:\n            pass\n"], ["from threading import Event\nfrom time import sleep\nimport keyboard\n\nhotkey = 'k'\n\nrunning = Event()\nrunning.set()  # at the start, it is running\n\ndef handle_key_event(event):\n    if event.event_type == 'down':\n        # toggle value of 'running'\n        if running.is_set():\n            running.clear()\n        else:\n            running.set()\n\n# make it so that handle_key_event is called when k is pressed; this will \n# be in a separate thread from the main execution\nkeyboard.hook_key(hotkey, handle_key_event)\n\nwhile True:\n    if not running.is_set():\n        running.wait()  # wait until running is set\n    sleep(0.1)        \n    print('hello')\n"], ["import keyboard\n\nrunning = True\ndisplay = True\nblock = False\n\nwhile running:\n    if keyboard.is_pressed(\"k\"):\n        if block == False:\n            display = not display\n            block = True\n    else:\n        block = False\n    if display:\n        print(\"hello\")\n    else:\n        print(\"not\")\n"], [], [], ["import sys\nimport keyboard\nfrom time import sleep\n\nrunning = True\n\nwhile running:\n    if keyboard.is_pressed(\"k\"):\n        sleep(1)\n    elif keyboard.is_presed('Esc'):\n        sys.exit()\n    else:\n        print(\"hello\")\n"], ["from gremlin_python.driver import client, serializer\n\nclient.Client(\n    message_serializer=serializer.GraphSONSerializersV2d0(),\n    password=\"...\",\n    traversal_source='g',\n    url='wss://...:443/',\n    username=\"/dbs/.../colls/...\",\n)\n"], [], [], [], ["df=spark.read.option(\"header\", \"true\").csv(\"source_table.csv\")\ndf=df.withColumn(\"is_valid\",lit(\"true\"))\ndf.withColumn(\"is_valid\",when(col(\"age\").cast(\"int\").isNotNull(),col(\"is_valid\")).otherwise(\"false\")).show()  # this will work \n#if you want to use rlike this will work\npattern=\"^[0-9]*$\"\nsource_df=df.withColumn(\"is_valid\",\n               when(col(\"age\").rlike(pattern), col(\"is_valid\")).otherwise(\"false\"))\n"], ["input_list = [ ['Ankur', 'Avik', 'Kiran', 'Nitin'], ['Narang', 'Sarkar', 'R', 'Sareen']]\nfirst_name = input_list[0]\nlast_name = input_list[1]\n\nname = list(map(' '.join, zip(first_name,last_name)))\n\nprint(name)\n"], ["from io import BytesIO\nimport dill,base64,tempfile\n\n#Saving Model as base64\nmodel_json = Keras_model.to_json()\n\ndef Base64Converter(ObjectFile):\n    bytes_container = BytesIO()\n    dill.dump(ObjectFile, bytes_container)\n    bytes_container.seek(0)\n    bytes_file = bytes_container.read()\n    base64File = base64.b64encode(bytes_file)\n    return base64File\n\nbase64KModelJson = Base64Converter(model_json)  \nbase64KModelJsonWeights = Base64Converter(Keras_model.get_weights())  \n\n", "#Loading Back\nfrom joblib import load\nfrom keras.models import model_from_json\ndef ObjectConverter(base64_File):\n    loaded_binary = base64.b64decode(base64_File)\n    loaded_object = tempfile.TemporaryFile()\n    loaded_object.write(loaded_binary)\n    loaded_object.seek(0)\n    ObjectFile = load(loaded_object)\n    loaded_object.close()\n    return ObjectFile\n\nmodeljson = ObjectConverter(base64KModelJson)\nmodelweights = ObjectConverter(base64KModelJsonWeights)\nloaded_model = model_from_json(modeljson)\nloaded_model.set_weights(modelweights)\n"], ["sudo ln -s /usr/lib/python3/dist-packages/gi/_gi.cpython-{36m,37m}-x86_64-linux-gnu.so\n"], [], ["elements=driver.find_elements_by_xpath('.//span[@class = \"_32mo\"]')\n\nfor element in elements:\n    print(element.text)\n"], ["# Import sqlalchemy's create_engine() function\nfrom sqlalchemy import create_engine\nimport pandas as pd\n\n# Create the database engine\nengine = create_engine(\"mssql+pyodbc://user:pass@dsn\")\n\n# Create a SQL query to load the entire table\nquery = \"\"\"\nSELECT * \n  FROM XXX;\n\"\"\"\n\n# Load with the SQL query\nload = pd.read_sql(query, engine)\n"], ["app.config['SQLALCHEMY_DATABASE_URI'] = 'mysql://root:@localhost/yourdatabasename'\n"], [], [], [], ["def isValidWalk(walk):\nif (walk.count('n') == walk.count('s') and \n    walk.count('e') == walk.count('w') and\n    len(walk) == 10):\n        return True\nreturn False\n", "def isValidWalk(walk):\nreturn len(walk) == 10 and walk.count('n') == walk.count('s') and walk.count('e') == walk.count('w')\n"], ["sudo add-apt-repository ppa:deadsnakes/ppa\nsudo apt-get update\nsudo apt install python3.7\n"], [], [">>> data = [['Ankur', 'Avik', 'Kiran', 'Nitin'], ['Narang', 'Sarkar', 'R', 'Sareen']]\n>>> list(map(' '.join, zip(*data)))\n['Ankur Narang', 'Avik Sarkar', 'Kiran R', 'Nitin Sareen']\n"], ["a = [['Ankur', 'Avik', 'Kiran', 'Nitin'], ['Narang', 'Sarkar', 'R', 'Sareen']]\nres = [i + ' ' + j for i, j in zip(a[0], a[1])]\nprint(res)\n", "['Ankur Narang', 'Avik Sarkar', 'Kiran R', 'Nitin Sareen']\n"], ["from matplotlib import pyplot as plt\nfrom sklearn.datasets import load_iris\nfrom sklearn import tree\nclf = tree.DecisionTreeClassifier(random_state=0)\niris = load_iris()\nclf = clf.fit(iris.data, iris.target)\nfig, ax = plt.subplots(figsize=(10,10))\nout = tree.plot_tree(clf)\nfor o in out:\n    arrow = o.arrow_patch\n    if arrow is not None:\n        arrow.set_edgecolor('red')\n        arrow.set_linewidth(3)\n"], ["pip install prompt-toolkit==3.0.5\n"], ["original_str = \"The quick brown rhino jumped over the extremely lazy fox.\"\n\nnum_chars=0\nfor i in original_str:\n    if i!=\" \":\n        num_chars+=1\nprint(num_chars)\n"], [], ["!python -m http.server 8000\n", "get_ipython().system_raw('python3 -m http.server 8888 &') \nshow_port(8888)\n"], ["\"/content/gdrive/'My Drive'/path_to_image/1.png\"\n", "\"/content/gdrive/\"+\"My Drive\"+\"/path_to_image/1.png\"\n", "from google.colab import drive\ndrive.mount(\"/content/drive/\")\n", "import os\nos.getcwd()\n!mkdir MyDrive   # make a directory called MyDrive\n", "!mount --bind /content/drive/My\\ Drive /content/MyDrive\n"], ["img = load_img('/content/gdrive/My Drive/path_to_image/1.png')\n", "arr = img_to_array(img)\n", "from keras.preprocessing.image import load_img,img_to_array,array_to_img,save_img\n"], ["img = cv2.imread('/content/gdrive/My Drive/path_to_image/1.png').  \n", "img = cv2.imread('/content/gdrive/My Drive/path_to_image/1.png')\n", "img = cv2.imread('/content/gdrive/My Drive/Data/cat.png')\nprint(type(img))\n\n#output\n<class 'numpy.ndarray'>\n"], ["drive.mount('/content/drive')\n"], ["from itertools import takewhile\ni = iter(range(10))\nr = 0\nfor x in takewhile(lambda x: r < 10, i):\n    print(\"using\", x)\n    r += x\nprint(\"result\", r)\n", "using 0\n...\nusing 4\nresult 10\n"], [], [], [], [], [], ["# Check if the number can be divided by two without a remainder\n  while n % 2 == 0 and n >1:\n    n = n / 2\n"], [], ["import math    \nmath.log2(number).is_integer()\n"], [], [], [], ["import shutil\nshutil.unpack_archive(\"filename\", \"path_to_extract\")\n"], [], [], ["# macOS Mojave 10.14.5\n# python 3.7.4 (via pyenv)\n\nError: Command \"python setup.py egg_info\" failed with error code 1 in /var/folders/r7/2sx1wsvx0gj5x43wkmymg61w0000gq/T/tmpn09357tzbuild/rtree/\n", "brew install spatialindex\n"], ["a=np.array([1,2,3,4,5,6,7])\nb=np.array([2,4,7])\nc=np.nonzero(np.isin(a,b))[0]\n# array([1, 3, 6], dtype=int64)\n"], [], ["c = [A.index(i) for i in B]\n", "c = [A.index(i) for i in B if i in A]\n"], ["A = [1,2,3,4,5,6,7]\nB = [2,4,7]\nC = [a.index(b) for b in B]\nC = list(map(lambda b: a.index(b),B)\n"], ["class save_best_weights(tf.keras.callbacks.Callback):\nbest_weights=model.get_weights()    \ndef __init__(self):\n    super(save_best_weights, self).__init__()\n    self.best = np.Inf\ndef on_epoch_end(self, epoch, logs=None):\n    current_loss = logs.get('val_loss')\n    accuracy=logs.get('val_accuracy')* 100\n    if np.less(current_loss, self.best):\n        self.best = current_loss            \n        save_best_weights.best_weights=model.get_weights()\n        print('\\nSaving weights validation loss= {0:6.4f}  validation accuracy= {1:6.3f} %\\n'.format(current_loss, accuracy))   \n\n"], ["class CNN:\n   ...\n   def predict():\n       self.do_special_validation()\n       self.model.predict()\n", "import pickle\n\ndef serialize(cnn):\n    return pickle.dumps({\n        \"weights\": cnn.model.get_weights(),\n        \"cnnclass\": cnn.__class__\n    })\n\ndef deserialize(cnn_bytes):\n    loaded = pickle.loads(cnn_bytes)\n    weights, cnnclass = loaded['weights'], loaded['cnnclass']\n    cnninstance = cnnclass()\n    cnninstance.model.set_weights(weights)\n    return cnninstance\n"], [], [">>>\n     Sex     AgeGroup\n0    male         0\n1  female        15\n2    male        30\n3  female        45\n4    male        60\n5  female        75\n", ">>>\n    AgeGroup  Sex_female  Sex_male\n0         0         0.0       1.0\n1        15         1.0       0.0\n2        30         0.0       1.0\n3        45         1.0       0.0\n4        60         0.0       1.0\n5        75         1.0       0.0`\n"], ["conda uninstall plotly\npip uninstall plotly\n", "jupyter labextension uninstall @jupyterlab/plotly-extension\njupyter labextension uninstall jupyterlab-plotly \njupyter labextension uninstall plotlywidget\n"], ["def appendFlag(target, value):\n   target += value\n   target += \" \"\n   return target\n", "m = appendFlag(m,\"ok\")\n", "def f(a,b):\n   a += 1\n   b += 1\n   return a,b\n", "a,b = f(4,5)\n"], ["[a + b for a, b in zip([0] + numbers, numbers)]\n", "list(map(sum, zip([0] + numbers, numbers)))\n", "[5, 15, 25, 35, 45, 55, 60]\n"], ["print ([a+numbers[index] for index,a in enumerate([0]+numbers[:-1])])\n", "[5, 15, 25, 35, 45, 55, 60]\n", ">>> print ([(a,numbers[index]) for index,a in enumerate([0]+numbers[:-1])])\n[(0, 5), (5, 10), (10, 15), (15, 20), (20, 25), (25, 30), (30, 30)]\n"], [], [], [], ["5\n15\n25\n35\n45\n55\n60\n"], [], [], ["myString1 = \"Love Is War\"\nmyString2 = \"LoveIsWar\"\n\nprint(\"War\" in myString1)\n\nprint(\"War\" in myString2)\n\n"], [], ["\"python.linting.pylintArgs\": [\"--extension-pkg-whitelist=PyQt5\"]\n", "\"python.linting.pylintArgs\": [\"--extension-pkg-whitelist=PyQt5,otherPkg\"]\n"], ["from __future__ import absolute_import, division, print_function, unicode_literals\nimport tensorflow as tf\nimport os\nimport tensorflow_datasets as tfds\n\n# Distribution strategies\nresolver = tf.distribute.cluster_resolver.TPUClusterResolver(tpu='grpc://' + os.environ['COLAB_TPU_ADDR'])\ntf.config.experimental_connect_to_cluster(resolver)\ntf.tpu.experimental.initialize_tpu_system(resolver)\n\n# MNIST model\ndef create_model():\n  return tf.keras.Sequential(\n      [tf.keras.layers.Conv2D(32, 3, activation='relu', input_shape=(28, 28, 1)),\n       tf.keras.layers.Flatten(),\n       tf.keras.layers.Dense(128, activation='relu'),\n       tf.keras.layers.Dense(10)])\n\n# Input datasets\ndef get_dataset(batch_size=200):\n  datasets, info = tfds.load(name='mnist', with_info=True, as_supervised=True,\n                             try_gcs=True)\n  mnist_train, mnist_test = datasets['train'], datasets['test']\n\n  def scale(image, label):\n    image = tf.cast(image, tf.float32)\n    image /= 255.0\n\n    return image, label\n\n  train_dataset = mnist_train.map(scale).shuffle(10000).batch(batch_size)\n  test_dataset = mnist_test.map(scale).batch(batch_size)\n\n  return train_dataset, test_dataset\n\n# Create and train a model\nstrategy = tf.distribute.experimental.TPUStrategy(resolver)\nwith strategy.scope():\n  model = create_model()\n  model.compile(optimizer='adam',\n                loss=tf.keras.losses.SparseCategoricalCrossentropy(from_logits=True),\n                metrics=['sparse_categorical_accuracy'])\n\ntrain_dataset, test_dataset = get_dataset()\n\nmodel.fit(train_dataset,\n          epochs=5,\n          validation_data=test_dataset,steps_per_epoch=50)\n"], ["### Install ngrok\n!wget https://bin.equinox.io/c/4VmDzA7iaHb/ngrok-stable-linux-amd64.zip\n!unzip ngrok-stable-linux-amd64.zip\n\n### Run ngrok to tunnel Dash app port 8050 to the outside world. \n### This command runs in the background.\nget_ipython().system_raw('./ngrok http 8050 &')\n\n### Get the public URL where you can access the Dash app. Copy this URL.\n! curl -s http://localhost:4040/api/tunnels | python3 -c \\\n    \"import sys, json; print(json.load(sys.stdin)['tunnels'][0]['public_url'])\"\n"], [], ["ModuleNotFoundError: No module named 'crispy_forms'\n"], ["conda create -n testenv python=3.7 -y\n\nconda activate testenv\n\nconda install scikit-learn\nconda install ipython\nconda install notebook\n\npython -m ipykernel install --user --name testenv\n", "conda activate testenv\nconda install scipy numpy matplotlib\n", "conda activate testenv\njupyter notebook\n"], ["import sys\nprint(sys.path)\n"], ["conda install -c conda-forge scikit-learn\n"], ["python -m ipykernel install --user --name my_env --display-name \"Python (my_env)\"\n"], [], ["sudo update-alternatives --config python3\n", "sudo apt install python3-gi\n"], [], [], ["jupyter notebook --generate-config\n"], ["%%bash\nmkdir foldername\ntar -xvf '/content/foldername.tar' -C '/content/'\n"], ["    a = iter(range(10))\n\n    try:\n        a.next()\n        while True and {True or False logic}:\n            print(\"Bonjour\")\n            a.next()\n    except StopIteration:\n        print(\"a.next() Stop iteration\")\n"], [">>> i = iter(range(5, -1, -1))\n>>> while val := next(i):\n...     print('doing something here with value', val)\n...\n", "doing something here with value 5\ndoing something here with value 4\ndoing something here with value 3\ndoing something here with value 2\ndoing something here with value 1\n"], [], ["df_out = df.iloc[:,2:].groupby(df.Gender, sort=False).count()\n\nOut[175]:\n                   Python  Bash  R  JavaScript  C++\nGender\nMale                    1     0  0           1    0\nFemale                  0     0  1           1    1\nPrefer not to say       1     1  0           0    0\n"], ["df.drop('ID',1).melt('Gender').\\\n    query('variable==value').\\\n      groupby(['Gender','variable']).size().unstack(fill_value=0)\nOut[120]: \nvariable        Bash  C++  JavaScript  Python  R\nGender                                          \nFemale             0    1           1       0  1\nMale               0    0           1       1  0\nPrefernottosay     1    0           0       1  0\n"], ["df1 = pd.melt(df,id_vars=['ID','Gender'],var_name='Language',value_name='Choice')\ndf1['Choice'] = np.where(df1['Choice'] == df1['Language'],1,0)\nfinal= pd.crosstab(df1['Gender'],df1['Language'],values=df1['Choice'],aggfunc='sum')\n\nprint(final)\nLanguage              Bash  C++  JavaScript  Python  R\nGender                                              \nFemale                  0    1           1       0  1\nMale                    0    0           1       1  0\nPrefer not to say       1    0           0       1  0\n"], ["(df.loc[:, 'Python':]\n .apply(lambda x: '|'.join(x.dropna()), axis=1)\n .str.get_dummies('|')\n .groupby(df['Gender']).sum())\n", "                   Bash  C++  JavaScript  Python  R\nGender                                             \nFemale                0    1           1       0  1\nMale                  0    0           1       1  0\nPrefer not to say     1    0           0       1  0\n"], ["s = df.set_index('Gender').iloc[:, 1:]\ns.eq(s.columns).astype(int).sum(level=0)\n", "                   Python  Bash  R  JavaScript  C++\nGender                                             \nMale                    1     0  0           1    0\nFemale                  0     0  1           1    1\nPrefer not to say       1     1  0           0    0\n"], [], ["s = [\"reddit\",\"google\"]\nl = [\"a\",\"b\",\"c\",\"d\"]\nfor str in s:\n    if all(x not in str for x in l):\n       print(str)\n"], ["extension-pkg-whitelist=PyQt5\n"], ["if all(x not in mystr for x in mylist):\n    print mystr\n", "if not any(x in mystr for x in mylist):\n    print mystr\n", "mystring = [\"reddit\", \"google\"]\nmylist = [\"a\", \"b\", \"c\", \"d\"]\nprint [s for s in mystring if not any(x in s for x in mylist)]\n"], ["words = [\"reddit\", \"google\"]\nchars = [\"a\", \"b\", \"c\", \"d\"]\nfor word in words:\n    print(word,\":\",[char not in word for char in chars]) #explanation help\n    if all(char not in word for char in chars):\n        print(\"none of the characters is contained in\",word)\n", "reddit : [True, True, True, False]\ngoogle : [True, True, True, True]\nnone of the characters is contained in google\n"], ["...\nif not any(x in mystr for x in mylist):\n"], ["all(x not in mystr for x in mylist)\n", "mystring = [\"reddit\", \"google\"]\nmylist = [\"a\", \"b\", \"c\", \"d\"]\nfor mystr in mystring:\n  if all(x not in mystr for x in mylist):\n    print mystr\n", "google\n"], ["import sys\nprint(sys.executable) #prints \"path_to_python\"\n"], ["import struct\nprint struct.calcsize(\"P\") * 8\n", "pip install tensorflow==1.14.0\n", "python3 -m pip install --upgrade https://storage.googleapis.com/tensorflow/windows/cpu/tensorflow-2.0.0-cp36-cp36m-win_amd64.whl\n"], [], ["def multiply1(*args):    \n    # Multiply elements one by one \n    result = 1\n    for x in args: \n         result = result * x  \n    return result  \nprint(multiply1(1,2,4))\n", "import numpy    \n# using numpy.prod() to get the multiplications  \ndef multiply2(*args):      \n    return numpy.prod(args)  \nprint(multiply2(1,2,4))\n", "from functools import reduce\n# Python3 program to multiply all values in the \n# list using lambda function and reduce()  \ndef multiply3(*args):      \n    return reduce((lambda x, y: x * y), args)  \nprint(multiply3(1,2,4))\n"], ["from functools import reduce\ndef multiply(*args):\n    return reduce((lambda x, y: x * y), args)\n", "multiply(1,2,3,4)\n"], [">>> def func(*args):\n...     print len(args)\n...\n>>> func(5, 6, 7)\n3\n", ">>> def multiply(*args):\n...     return reduce(lambda x, y: x*y, args)\n...\n>>> multiply(1, 2, 3, 4)\n24\n"], ["def mult(*args):\n    result = 1\n    for num in args:\n        result *= num\n    print(result)\n"], ["def multiply(*args):\n    product = 1\n    for a in args:\n        product *= a\n\n    return product\n"], ["Edit --> Notebook Settings\n", "Hardware Accelerator --> TPU\n"], ["my_app = QtWidgets.QApplication(sys.argv)\n"], ["!tar -xvf  'test.tar' -C 'content/cell_images'\n"], [], [], [], ["import hotel_helper as hh\nhh.demo1()\n", "from hote_helpers import demo1\ndemo1()\n"], [" from hotel.helpers import demo1\n\n\n    demo1()\n"], [">>> from pathlib import Path\n>>>\n>>> def dir_empty(dir_path):\n...     path = Path(dir_path)\n...     has_next = next(path.iterdir(), None)\n...     if has_next is None:\n...             return True\n...     return False\n"], ["def dir_empty(dir_path):\n    try:\n        next(os.scandir(dir_path))\n        return False\n    except StopIteration:\n        return True\n"], ["spark.udf.register(\"IsNumeric\", (inpColumn: Int) => BigInt(inpColumn).isInstanceOf[BigInt])\nspark.sql(s\"\"\" select \"ABCD\", IsNumeric(1234) as IsNumeric_1  \"\"\").show(false)\n"], ["from flask import request\nimport datetime as dt\nfrom marshmallow import (\n    Schema,RAISE,fields,pprint,validate,ValidationError,post_load)\nfrom flask_restplus import Api,Resource\n\napp = Flask(__name__)\napi = Api(app, prefix=\"/api/v1\")\n\nclass User:\n    def __init__(self, name,email,age,permission):\n        self.name = name\n        self.email = email\n        self.age = age\n        self.permission = permission\n        self.created_at = dt.datetime.utcnow()\n\n    def __repr__(self):\n        return \"User(name={})\".format(self.name)\n\nclass Userschema(Schema):\n    name = fields.Str(required=True,validate=[validate.Length(min=1)])\n    email = fields.Email(required=True,validate=[validate.Length(min=1)])\n    permission = fields.Str(validate=[validate.OneOf([\"read\",\"write\",\"admin\"])])\n    age = fields.Int(validate=[validate.Range(min=10,max=30)])\n\n    @post_load\n    def make_user(self,data,**kwargs):\n        return User(**data)\n\nusers = [] \n\n\nclass UserCollection(Resource):\n    def get(self):\n        return {\"subscriberList\":users}\n\n    def post(self,*args,**kwargs):\n        schema = Userschema()\n        data = request.get_json(force=True)\n        errors = schema.validate(api.payload)\n        if errors:\n            return errors, 422       \n        user=schema.load(data)\n        result = schema.dump(user)\n        users.append(result)\n\n        return {\"msg\": \"Subscriber added\"},201\n\n\napi.add_resource(UserCollection,'/subscribers')\n\n\nif __name__ == \"__main__\":\n    app.run(debug=True)\n"], [], [], ["import mysql.connector as sql\n\ndb_connection = sql.connect(host='****', database='****', user='****', password='****', use_pure=True)\n"], ["myDF.coalesce(1).write\\\n    .option(\"emptyValue\", None)\\\n    .option(\"nullValue\", None)\\\n    .csv(outFile)\n"], [], ["git clone https://github.com/lthiery/SPI-Py.git\ncd SPI Py\nsudo python setup.py install\n", " sudo python3 setup.py install\n"], ["import numpy as np  # Importing numpy module\nodd = lambda num: np.arange(1,num*2+1,2)   \nodd(10)\n"], ["def odd(n):\n    return [num for num in range(1, n*2+1,2)]\nodd(10)\n", "[1, 3, 5, 7, 9, 11, 13, 15, 17, 19]\n"], ["def odd(n):\n    nums = []\n    for i in range(1, n*2+1):\n        if i%2==0:\n            pass\n        else:\n            nums.append(i)\n    return nums\nodd(10)\n", "[1, 3, 5, 7, 9, 11, 13, 15, 17, 19]\n"], ["def odd(n):\n    nums = []\n    for i in range(1, 2*n, 2):\n        nums.append(i)\n    return nums\n"], ["import numpy as np\ndef odd(n):\n   return np.arange(1, 2*n, 2)\n\n\nodd(10) -> array([ 1,  3,  5,  7,  9, 11, 13, 15, 17, 19])\nodd(12) -> array([ 1,  3,  5,  7,  9, 11, 13, 15, 17, 19, 21, 23])\n"], ["def odd(n):\n    return list(range(1, 2*n, 2))\n\nprint(odd(10))\nprint(odd(12))\n", "[1, 3, 5, 7, 9, 11, 13, 15, 17, 19]                                                                                                                           \n[1, 3, 5, 7, 9, 11, 13, 15, 17, 19, 21, 23]    \n"], ["def odd(n):\n    return list(range(1, n * 2, 2))\n"], ["def odd(n):\n    return list(range(1, 2*n, 2))\n"], [], [], ["from PyQt5 import QtWidgets\n\napp = QtWidgets.QApplication([])\nwindow = QtWidgets.QWidget()\nwindow.setWindowTitle(\"Test\")\nwindow.show()\napp.exec_()\n"], [], ["original_str = \"The quick brown rhino jumped over the extremely lazy fox.\"\n\nnum_chars = original_str.count('') - 1\n\nprint (num_chars)\n"], [], ["url = 'mysql+mysqlconnector://user:password@mysql_server/database?use_pure=True'\n"], ["import numpy as np\n\nList = [1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20]\n\npercent = 10\nvalues = list(sorted(np.asarray(List, dtype=np.int))[:int(len(List)/(100/percent))])\n", "[1, 2]\n"], ["import numpy\n\nl = numpy.array([1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20])\n\nprint(l[l < numpy.percentile(l,10)])\n"], [" # list of values\nlstValues = [1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20]\n\n# get maximum value out of list values\nmax = max(lstValues)\n\n# calculate 10 percent out of max value\nmax /= 10\n\n# print all the elements which are under the 10% mark\nprint([i for i in lstValues if i <= max])\n"], ["sorted(lis)[:int((0.1 * len(lis)))]\n"], [], [], [], ["def expand_row(row):\n    return pd.DataFrame({\n        'name': row['name'], # row.name is the name of the series\n        'id': row['id'],\n        'app_name': [app[0] for app in row.apps],\n        'app_version': [app[1] for app in row.apps]\n    })\n\ntemp_dfs = df.apply(expand_row, axis=1).tolist()\nexpanded = pd.concat(temp_dfs)\nexpanded = expanded.reset_index() # put index in the correct order\n\nprint(expanded)\n\n#     name  id app_name app_version\n# 0   john   1     app1          v1\n# 1   john   1     app2          v2\n# 2   john   1     app3          v3\n# 3  smith   2     app1          v1\n# 4  smith   2     app4          v4\n", "rows = df.values.tolist()\nexpanded = [[row[0], row[1], app[0], app[1]]\n            for row in rows\n            for app in row[2]]\ndf = pd.DataFrame(\n    expanded, columns=['name', 'id', 'app_name', 'app_version'])\n\n#     name  id app_name app_version\n# 0   john   1     app1          v1\n# 1   john   1     app2          v2\n# 2   john   1     app3          v3\n# 3  smith   2     app1          v1\n# 4  smith   2     app4          v4\n"], ["df.set_index(['name','id']).apps.apply(pd.Series).\\\n         stack().apply(pd.Series).\\\n            reset_index(level=[0,1]).\\\n                rename(columns={0:'app_name',1:'app_version'})\nOut[541]: \n    name  id app_name app_version\n0   john   1     app1          v1\n1   john   1     app2          v2\n2   john   1     app3          v3\n0  smith   2     app1          v1\n1  smith   2     app4          v4\n", "def unnesting(df, explode):\n    idx = df.index.repeat(df[explode[0]].str.len())\n    df1 = pd.concat([\n        pd.DataFrame({x: sum(df[x].tolist(),[])}) for x in explode], axis=1)\n    df1.index = idx\n    return df1.join(df.drop(explode, 1), how='left')\n", "yourdf=unnesting(df,['apps'])\n\nyourdf['app_name'],yourdf['app_version']=yourdf.apps.str[0],yourdf.apps.str[1]\nyourdf\nOut[548]: \n         apps  id   name app_name app_version\n0  [app1, v1]   1   john     app1          v1\n0  [app2, v2]   1   john     app2          v2\n0  [app3, v3]   1   john     app3          v3\n1  [app1, v1]   2  smith     app1          v1\n1  [app4, v4]   2  smith     app4          v4\n", "yourdf=unnesting(df,['apps']).reindex(columns=df.columns.tolist()+['app_name','app_version'])\nyourdf[['app_name','app_version']]=yourdf.apps.tolist()\nyourdf\nOut[567]: \n         apps  id   name app_name app_version\n0  [app1, v1]   1   john     app1          v1\n0  [app2, v2]   1   john     app2          v2\n0  [app3, v3]   1   john     app3          v3\n1  [app1, v1]   2  smith     app1          v1\n1  [app4, v4]   2  smith     app4          v4\n"], ["#Repeat the columns without the list by the str length of the list\nm=df.drop('apps',1).loc[df.index.repeat(df.apps.str.len())].reset_index(drop=True)\n#creating a df exploding the list to 2 columns\nn=pd.DataFrame(np.concatenate(df.apps.values),columns=['app_name','app_version'])\n#concat them together\ndf_new=pd.concat([m,n],axis=1)\n", "    name id app_name app_version\n0   john  1     app1          v1\n1   john  1     app2          v2\n2   john  1     app3          v3\n3  smith  2     app1          v1\n4  smith  2     app4          v4\n"], ["name, id, app_name, app_version = [], [], [], []\nfor i in range(len(df)):\n    for v in df.loc[i,'apps']:\n        app_name.append(v[0])\n        app_version.append(v[1])\n        name.append(df.loc[i, 'name'])\n        id.append(df.loc[i, 'id'])\ndf = pd.DataFrame({'name': name, 'id': id, 'app_name': app_name, 'app_version': app_version})\n"], ["import pandas as pd\n\ndf = pd.DataFrame({\n    'name': ['john', 'smith'],\n    'id': [1, 2],\n    'apps': [[['app1', 'v1'], ['app2', 'v2'], ['app3','v3']], \n             [['app1', 'v1'], ['app4', 'v4']]]\n})\n\ndftmp = df.apps.apply(pd.Series).T.melt().dropna()\ndfapp = (dftmp.value\n              .apply(pd.Series)\n              .set_index(dftmp.variable)\n              .rename(columns={0:'app_name', 1:'app_version'})\n        )\n\ndf[['name', 'id']].merge(dfapp, left_index=True, right_index=True)\n# returns:\n    name  id app_name app_version\n0   john   1     app1          v1\n0   john   1     app2          v2\n0   john   1     app3          v3\n1  smith   2     app1          v1\n1  smith   2     app4          v4\n"], [], [">>> m = []\n>>> def appendFlag(target, value):\n...     target.append(value)\n...     target.append(\" \")\n...\n>>> appendFlag(m, \"ok\")\n>>> m\n['ok', ' ']\n"], ["def appendFlag(target, value):\n   ...\n   return target\n\nm = appendFlag(m, \"ok\")\n"], [], ["$ pip install -U jupyter\n", "$ pipenv update jupyter\n"], ["> pip install notebook --upgrade\n", "> pip --version\n"], ["git clone https://github.com/lthiery/SPI-Py.git\ngit checkout 8cce26b9ee6e69eb041e9d5665944b88688fca68\nsudo python setup.py install\n"], ["sudo pip3 uninstall tornado\nsudo pip3 install tornado==5.1.1\n"], [], ["df['neg_sum'] = df.where(df != df.abs()).sum(1)\n"], ["df['Sum']=df.apply(lambda x: x[x<0].sum(),axis=1)\n"], ["df.iloc[:,1:].where(df.iloc[:,1:]<0).sum(axis=1)\n"], ["pi@raspberrypi:~/MFRC522-python $ sudo python Write.py\n/home/pi/MFRC522-python/MFRC522.py:115: RuntimeWarning: This channel is already in use, continuing anyway.  Use GPIO.setwarnings(False) to disable warnings.\n  GPIO.setup(25, GPIO.OUT)\nTraceback (most recent call last):\n  File \"Write.py\", line 6, in <module>\n    reader = SimpleMFRC522.SimpleMFRC522()\n  File \"/home/pi/MFRC522-python/SimpleMFRC522.py\", line 14, in __init__\n    self.READER = MFRC522.MFRC522()\n  File \"/home/pi/MFRC522-python/MFRC522.py\", line 117, in __init__\n    self.MFRC522_Init()\n  File \"/home/pi/MFRC522-python/MFRC522.py\", line 390, in MFRC522_Init\n    self.MFRC522_Reset();\n  File \"/home/pi/MFRC522-python/MFRC522.py\", line 120, in MFRC522_Reset\n    self.Write_MFRC522(self.CommandReg, self.PCD_RESETPHASE)\n  File \"/home/pi/MFRC522-python/MFRC522.py\", line 123, in Write_MFRC522\n    spi.transfer(((addr<<1)&0x7E,val))\nTypeError: function takes exactly 2 arguments (1 given)\n", "pi@raspberrypi:~ $ sudo python rfidreader2.py \n/usr/local/lib/python2.7/dist-packages/pi_rc522-2.2.1-py2.7.egg/pirc522/rfid.py:78: RuntimeWarning: This channel is already in use, continuing anyway.  Use GPIO.setwarnings(False) to disable warnings.\nclean up\nTag detected\nUID: [169, 112, 111, 72, 254]\nReading block 10: (False, [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0])\n"], [], ["df.replace('', None)              # replace empty string with null\n  .write.save(\n    path('out'), \n    format='csv', \n    delimiter='|', \n    header=True, \n    nullValue=None                # write null value as None\n  )\n", "id|first_name|last_name|zip_code\n1||Elsner|57315\n2|Noelle||\n3|James|Moser|48256\n"], [], ["# First we login into Facebook using:\n\nfrom selenium.webdriver.common.keys import Keys\n\ndriver = webdriver.Chrome()\ndriver.get('https://www.facebook.com/')\ndriver.implicitly_wait(10)\nemail = driver.find_element_by_id(\"email\")\nemail.send_keys(\"email@domain.tld\")\npasswd = driver.find_element_by_id(\"pass\")\npasswd.send_keys(\"MyP@$$w0rd\");\npasswd.send_keys(Keys.ENTER)\n\n# Then We can search and retrieve the name list:\n\ndriver.get('https://www.facebook.com/search/283544874786/likers?ref=about')\nx = driver.find_elements_by_xpath(\".//a[contains(@class, '_32mo')]\")\nfor y in x:\n    print(y.text)\n", "Goutham Pullela\nAvvaru Srinivasa Rao\nSanjay Bhushan\nAyurveda\nRachit Raj Ias\nAnindita Sarkar (Rimi)\nSheela Arora\nPadmapriya Rajesh\nManavi Singh\nSanaya Joshi\nKritika Singh\nNikhita Singh\nRevathi\nSejal Budholiya\nDevi Priya\nRashi Bhatia\n"], ["import numpy as np \nmin_ind = np.argmin([school.students_per_class() for school in schools])\nprint(schools[min_ind])\n"], ["class Item:\n    def __init__(self, value):\n        self.value = value\n\n    def __lt__(self, other):\n        return self.value < other.value\n\n    def __eq__(self, other):\n        return self.value == other.value\n", "A = Item(1)\nB = Item(2)\n\nprint(A < B) # Prints True\n", "items = [A, B]\n", "min_item = min(items)\n", "min_item_index = items.index(min(items))\n"], ["index = min(range(len(schools)), key=lambda i: schools[i].students_per_class())\nprint(schools[index])\n"], ["min(((i, school.students_per_class()) for i, school in enumerate(schools)), key=lambda x: x[1])\n"], ["def num_characters(string):\n  total = 0\n  for character in string:\n    total += 1\n  return total\n\noriginal_string = \"The quick brown rhino jumped over the extremely lazy fox.\"\nprint(f\"The numbers of characters in the original string using `len` is {len(original_string)}.\")\nprint(f\"The numbers of characters in the original string using `num_characters` is {num_characters(original_string)}.\")\n", "The numbers of characters in the original string using `len` is 57.\nThe numbers of characters in the original string using `num_characters` is 57.\n"], [], ["ssl-ca=/data/dir/cacert.pem\n\nssl-cert=/data/dir/server-cert.pem\n\nssl-key=/data/dir/server-key.pem\n"], ["def json_loader(schema, json):\n    try:\n        assert json is not None, \"request body is required\"\n    except AssertionError as assertionError:\n        raise InvalidUsage(40001, assertionError.args[0], 400)\n    result = schema.load(json)\n    if result.errors:\n        raise InvalidUsage(40001, result.errors, 400)\n    else:\n        return result.data\n", "from marshmallow import ValidationError\n\ntry:\n    result = UserSchema().load({'name': 'John', 'email': 'foo'})\nexcept ValidationError as err:\n    err.messages  # => {'email': ['\"foo\" is not a valid email address.']}\n    valid_data = err.valid_data  # => {'name': 'John'}\n"], ["def f(name):\n    print(name or 'Hello Guest')\n\ndef A(name=None):    \n    f(name)\n\nA()\nOut: \"Hello Guest\"\n\nA(\"Hello World\")\nOut: \"Hello World\"\n"], ["def f(name='Hello Guest'):\n    print(name or inspect.signature(f).parameters['name'].default)\n\n\ndef A(name=None):    \n    f(name)\n\nA()\n# Hello Guest\n", "def f(name='Hello Guest'):\n    print(name or f.__default__[0])\n\n\ndef A(name=None):    \n    f(name)\n\nA()\n# Hello Guest\n"], ["DEFAULT_NAME = \"Hello Guest\"\n\ndef f(name=DEFAULT_NAME):\n    print(name)\n\ndef A(name=DEFAULT_NAME):\n    f(name)\n"], ["def f(name):\n    print(name)\n\n\ndef A(name = 'Hello Guest'):\n    f(name)\n\nA()\n"], ["import sys\nsys.path\n"], [], [">>> [t[1] for t in sorted(zip(ind,b))]\n[11, 7, 9, 3, 2, 8, 1, 10, 6, 4, 5]\n", ">>> b[:]=[t[1] for t in sorted(zip(ind,b))]\n>>> b\n[11, 7, 9, 3, 2, 8, 1, 10, 6, 4, 5]\n", "mod_b=[None]*len(b)\nfor i,x in enumerate(ind):\n    mod_b[x]=b[i]\n\n>>> mod_b\n[11, 7, 9, 3, 2, 8, 1, 10, 6, 4, 5]\n"], ["b = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11]\nind = [6, 4, 3, 9, 10, 8, 1, 5, 2, 7, 0]\n\nres = [0] * len(b)\nfor val, idx in zip(b, ind):\n    res[idx] = val\n\n# [11, 7, 9, 3, 2, 8, 1, 10, 6, 4, 5]\n", "import numpy as np\n\nb = np.array([1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11])\nind = np.array([6, 4, 3, 9, 10, 8, 1, 5, 2, 7, 0])\n\nres = np.empty(b.shape)\nres[ind] = b\n\n# array([11.,  7.,  9.,  3.,  2.,  8.,  1., 10.,  6.,  4.,  5.])\n"], ["sorted(b, key=lambda x: ind[x-1])\n", "b.sort(key=lambda x: ind[x-1])\n"], ["b = [1,2,3,4,5,6,7,8,9,10,11]\nind = [6, 4, 3, 9, 10, 8, 1, 5, 2, 7, 0]\n\nb_modified = [0] * len(b)\n\nfor i in range(len(ind)):\n    b_modified[ind[i]] = b[i]\n\nprint(b_modified)\n\n>>> [11,7,9,3,2,8,1,10,6,4,5]\n"], [], ["import pandas as pd\n\ndf1 = df.pivot_table(index='Type', columns='Status', values='Number', \n                     aggfunc=['sum', 'count'], \n                     margins=True, \n                     margins_name='Total').fillna(0).drop('Total')\n#          sum              count           \n#Status      N      Y Total     N    Y Total\n#Type                                       \n#A         0.0  400.0   400   0.0  2.0     2\n#B       600.0  200.0   800   2.0  1.0     3\n", "d = {'Y': 'Status=Y', 'N': 'Status=N', 'Total': 'Total'}\ndf1.columns = [f'{x}_{d.get(y)}' for x,y in df1.columns]\n", "      sum_Status=N  sum_Status=Y  sum_Total  count_Status=N  count_Status=Y  count_Total\nType                                                                                    \nA              0.0         400.0        400             0.0             2.0            2\nB            600.0         200.0        800             2.0             1.0            3\n"], ["def my_agg(x):\n    names = {\n        'Total_Count': x['Type'].count(),\n        'Total_Number': x['Number'].sum(),\n        'Count_Status=Y': x[x['Status']=='Y']['Type'].count(),\n        'Number_Status=Y': x[x['Status']=='Y']['Number'].sum(),\n        'Count_Status=N': x[x['Status']=='N']['Type'].count(),\n        'Number_Status=N': x[x['Status']=='N']['Number'].sum()}\n\n    return pd.Series(names)\n\ndf.groupby('Type').apply(my_agg)\n\n    Total_Count   Total_Number  Count_Status=Y  Number_Status=Y Count_Status=N  Number_Status=N\nType                        \nA      2           400                2                400            0             0\nB      3           800                1                200            2            600\n"], ["def compute_metrics(x):\n    result = {'Total_Number': x['Number'].sum(), 'Count_Status=Y': len(x['Status'] == \"Y\")}\n    return pd.Series(result)\n", "Type  Total Number Count_Status=Y\nA     400          2             \nB     800          3\n"], ["pv = (df.pivot_table(index='Type', \n                     columns='Status', \n                     values='Number', \n                     aggfunc='sum')\n        .add_prefix('Number_Status='))\n\nprint(pv)\nStatus  Number_Status=N  Number_Status=Y\nType                                    \nA                   NaN            400.0\nB                 600.0            200.0\n", "totals = df.groupby('Type').Number.agg([\n    ('Total_Count', 'count'),  ('Total_Number', 'sum')])\n\nprint(totals)\n      Total_Count  Total_Number\nType                           \nA               2           400\nB               3           800\n", "cnts = (df.set_index('Type').Status\n          .str.get_dummies()\n          .sum(level=0)\n          .add_prefix('Count_Status='))\n\n      Count_Status=N  Count_Status=Y\nType                                \nA                  0               2\nB                  2               1\n", "pd.concat([pv, totals, cnts], axis=1).sort_index(axis=1)\n\n      Count_Status=N  Count_Status=Y  Number_Status=N  Number_Status=Y  \\\nType                                                                                             \nA                  0               2              NaN            400.0            \nB                  2               1            600.0            200.0            \n\nTotal_Count  Total_Number\n          2           400\n          3           800\n"], ["    <!DOCTYPE html>\n    <html>\n      <head>\n        <title>New</title>\n      <script src=\"https://cdnjs.cloudflare.com/ajax/libs/Chart.js/2.3.0/Chart.min.js\"></script>\n\n      </head>\n      <body>\n      <h1>Test</h1>\n        <div class=\"wrapper\">\n        <canvas id=\"bar-chart\" width=\"800\" height=\"450\"></canvas>\n        </div>\n\n        <!-- <script src=\"{{ url_for('static', filename='script1.js') }}\"></script> -->\n        <script type = \"text/javascript\">\n            var labelsVar={{labels|tojson}};\n            var dataVar={{data|tojson}};\n        </script>\n        <script type = \"text/javascript\"  src=\"{{ url_for('static', filename = 'script1.js') }}\"></script>\n      </body>\n      </html>\n", "  console.log(labelsVar);\n  console.log(dataVar);\n  new Chart(document.getElementById(\"bar-chart\"), {\n      type: 'bar',\n      data: {\n        labels: labelsVar,\n        datasets: [\n          {\n            label: \"Population (millions)\",\n            backgroundColor: [\"#3e95cd\", \"#8e5ea2\",\"#3cba9f\",\"#e8c3b9\",\"#c45850\"],\n            data: dataVar\n          }\n        ]\n      },\n      options: {\n        legend: { display: false },\n        title: {\n          display: true,\n          text: 'Predicted world population (millions) in 2050'\n        }\n      }\n      });\n"], ["  <!DOCTYPE html>\n  <html>\n    <head>\n      <title>New</title>\n    <script src=\"https://cdnjs.cloudflare.com/ajax/libs/Chart.js/2.3.0/Chart.min.js\"></script>\n\n    </head>\n    <body>\n    <h1>Test</h1>\n      <div class=\"wrapper\">\n      <canvas id=\"bar-chart\" width=\"800\" height=\"450\"></canvas>\n      </div>\n\n      <!-- <script src=\"{{ url_for('static', filename='script1.js') }}\"></script> -->\n      <script>\n          //console.log({{labels|tojson}});\n          //console.log({{data|tojson}});\n          new Chart(document.getElementById(\"bar-chart\"), {\n              type: 'bar',\n              data: {\n                labels: {{labels|tojson}},\n                datasets: [\n                  {\n                    label: \"Population (millions)\",\n                    backgroundColor: [\"#3e95cd\", \"#8e5ea2\",\"#3cba9f\",\"#e8c3b9\",\"#c45850\"],\n                    data: {{data|tojson}}\n                  }\n                ]\n              },\n              options: {\n                legend: { display: false },\n                title: {\n                  display: true,\n                  text: 'Predicted world population (millions) in 2050'\n                }\n              }\n              });\n      </script>\n\n    </body>\n    </html>\n"], ["from pyspark.sql.types import BooleanType\nfrom pyspark.sql import functions as F\n\ndef is_digit(val):\n    if val:\n        return val.isdigit()\n    else:\n        return False\n\nis_digit_udf = udf(is_digit, BooleanType())\n\ndf = df.withColumn('Value', F.when(is_digit_udf(F.col('ID')), F.lit(True)).otherwise(F.lit(False)))\n"], ["import json\n@app.route(\"/\")\ndef result():\n  return render_template(\"result.html\")\n\n@app.route('/get_data')\ndef get_data():\n  labels = [\"Africa\", \"Asia\", \"Europe\", \"Latin America\", \"North America\"]\n  data = [5578,5267,734,784,433]\n  return flask.jsonify({'payload':json.dumps({'data':data, 'labels':labels})})\n", "<head> \n  <title>New</title>\n  <script src=\"https://ajax.googleapis.com/ajax/libs/jquery/3.2.1/jquery.min.js\"></script>\n  <script src=\"https://cdnjs.cloudflare.com/ajax/libs/Chart.js/2.3.0/Chart.min.js\"> \n</head>\n", "$(document).ready(function(){\n   var _data;\n   var _labels;\n  $.ajax({\n   url: \"/get_data\",\n   type: \"get\",\n   data: {vals: ''},\n   success: function(response) {\n     full_data = JSON.parse(response.payload);\n     _data = full_data['data'];\n     _labels = full_data['labels'];\n   },\n\n });\n new Chart(document.getElementById(\"bar-chart\"), {\n  type: 'bar',\n data: {\n   labels: _labels,\n   datasets: [\n   {\n    label: \"Population (millions)\",\n    backgroundColor: [\"#3e95cd\", \"#8e5ea2\",\"#3cba9f\",\"#e8c3b9\",\"#c45850\"],\n   data: _data\n   }\n   ]\n   },\n    options: {\n    legend: { display: false },\n     title: {\n      display: true,\n     text: 'Predicted world population (millions) in 2050'\n   }\n  }\n });\n});\n"], ["from pyspark.sql import functions as F\n\nmy_df.select(\n  \"ID\",\n  F.col(\"ID\").cast(\"int\").isNotNull().alias(\"Value \")\n).show()\n\n+-----+------+\n|   ID|Value |\n+-----+------+\n|25q36| false|\n|75647|  true|\n|13864|  true|\n|8758K| false|\n|07645|  true|\n+-----+------+\n"], ["contacts = browser.find_elements_by_xpath(\"//a[@class='_32mo')]/span\")\n\nfor contact in contacts:\nname=contact.text\nprint(name)\n"], ["contacts = browser.find_elements_by_css_selector('._32mo span')\nfor contact in contacts:\n    print(contact.text)\n"], []]