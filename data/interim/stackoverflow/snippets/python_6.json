[["import cv2\nimport numpy as np\nimport matplotlib.pyplot as plt\n\nfn = '3DIMG_30MAR2018_0000_L1B_STD.h5' #filename (the \".h5\" file) \nhf = h5py.File(fn, 'r')\nhf.keys()\ndata = hf.get('IMG_TIR1')\ndata = data[0,:,:]\ndata=np.where(data>1022, np.nan, data)\n\nLat= hf.get('Latitude')\nLat = Lat[:,:]\nLat=Lat*0.0099999998\nLat=np.where(Lat>312, np.nan, Lat)\n\nLong= hf.get('Longitude')\nLong = Long[:,:]\nLong=Long*0.0099999998\nLong=np.where(Long>312, np.nan, Long)\n\nX=Long[427:1421,804:1902]\nY=Lat[427:1421,804:1902]\nZ=data[427:1421,804:1902]\nfig = plt.figure(figsize=(10,10))\nplt.pcolor(X, Y, Z)\nplt.xlim(60, 100)\nplt.ylim(0, 40)\n\nfig = plt.figure(figsize=(10,10))\nplt.pcolor(X, Y, Z)\nplt.colorbar(label=\"Radiance\", orientation=\"vertical\")\nplt.xlim(60, 100)\nplt.ylim(0, 40)\n\n#Threshold\nZn=np.where(Z>810, 1, 0)\nfig = plt.figure(figsize=(10,10))\nplt.pcolor(X, Y, Zn, cmap='jet', vmin=0, vmax=1)\nplt.colorbar(label=\"Radiance\", orientation=\"vertical\")\nplt.xlim(60, 100)\nplt.ylim(0, 40)\n\n"], [], [">>> x=3.0\n>>> x*1e17 - int(x)*1e17 == 0\nTrue\n>>> x=3.333\n>>> x*1e17 - int(x)*1e17 == 0\nFalse\n"], ["test_list = [['abc', '2'], ['cds', '333'], ['efg']]\ntest_list[2][1:] = ['444']\nprint(test_list)\n"], [], [], ["{4: 3, 2: 1, 3: 1}\n"], ["conda install numpy==1.19.2 \n"], ["ops = ['add ', 'subtract ', 'multiply ', 'divide ']\nnums = [3, 2, 3, 2]\n\nlist3 = list(map('{}{}'.format, ops, nums))\n"], [">>> # Calculate my own age\n>>> age(datetime.date(1982, 12, 21))\n39\n>>> # My age increases on my birthday.\n>>> age(datetime.date(1982, 12, 21), datetime.date(2022, 12, 21))\n40\n"], [], [], ["from subprocess import Popen, CREATE_NEW_PROCESS_GROUP, DETACHED_PROCESS\n\nproc = Popen([r\"C:\\Program Files\\Slack\\slack.exe\", \"--startup\"],\n             creationflags=CREATE_NEW_PROCESS_GROUP|DETACHED_PROCESS)\n"], [], [], ["DROP PROCEDURE IF EXISTS CopyTable;\nDELIMITER $$\nCREATE PROCEDURE CopyTable(IN _mytable VARCHAR(64), _table_name VARCHAR(64))\nBEGIN\n    SET FOREIGN_KEY_CHECKS=0;\n    SET @stmt = CONCAT('DROP TABLE IF EXISTS ',_table_name);\n    PREPARE stmt1 FROM @stmt;\n    EXECUTE stmt1;\n    SET FOREIGN_KEY_CHECKS=1;\n    SET @stmt = CONCAT('CREATE TABLE ',_table_name,' as select * from ', _mytable);\n    PREPARE stmt1 FROM @stmt;\n    EXECUTE stmt1;\n    DEALLOCATE PREPARE stmt1;\nEND$$\nDELIMITER ;\n", "args = ['mytable', 'table_name']\ncursor.callproc('CopyTable', args)\n"], [], ["import h5py\nimport matplotlib.pyplot as plt\n\nfn = '3DIMG_30MAR2018_0000_L1B_STD.h5' #filename (the \".h5\" file)\nwith h5py.File(fn) as f:  \n    img_arr = f['IMG_TIR1'][0,:,:] \n    \nfig = plt.subplots(figsize=(10,10)) \nplt.title('plot raw IMG_TIR1 image data (only)')\nim = plt.imshow(img_arr) \nplt.colorbar(im)\n", "import h5py\nimport matplotlib.pyplot as plt\nimport cartopy.crs as ccrs\n\nfn = '3DIMG_30MAR2018_0000_L1B_STD.h5' #filename (the \".h5\" file)\nwith h5py.File(fn) as f:  \n    img_arr = f['IMG_TIR1'][0,:,:] \n    \nmap_proj = ccrs.Geostationary(central_longitude=82.0)\n\nfig = plt.figure(figsize=(10,10))\nax = plt.axes(projection=map_proj)\nax.coastlines(color='white')\n\n# Image extent in Geostationary coordinates:\nimg_extent_sat = ax.get_extent(crs=map_proj)    \nimg_extent_sat = [1.04*x for x in img_extent_sat]\n\nim = plt.imshow(img_arr, extent=img_extent_sat) \nplt.colorbar(im)\nplt.title('plot raw IMG_TIR1 data + Geostationary coastlines')\n", "import h5py\nimport numpy as np\nimport matplotlib.pyplot as plt\nimport cartopy.crs as ccrs\nimport cartopy.feature as cfeature\n    \nfn = '3DIMG_30MAR2018_0000_L1B_STD.h5' #filename (the \".h5\" file)\nwith h5py.File(fn) as f:      \n    # retrieve image data:\n    image = 'IMG_TIR1'\n    img_arr = f[image][0,:,:] \n    # get _FillValue for data masking\n    img_arr_fill = f[image].attrs['_FillValue'][0]   \n\n# retrieve extent of plot from file attributes:\n    left_lon = f.attrs['left_longitude'][0]\n    right_lon = f.attrs['right_longitude'][0]\n    lower_lat = f.attrs['lower_latitude'][0]\n    upper_lat = f.attrs['upper_latitude'][0]\n    sat_long = f.attrs['Nominal_Central_Point_Coordinates(degrees)_Latitude_Longitude'][1]\n    sat_hght = f.attrs['Observed_Altitude(km)'][0] * 1000.0 # (for meters)\n\n# retrieve attributes to calculate radiance from count:    \n    Sensor_Name = f.attrs['Sensor_Name'].decode('utf-8') \n    img_fill = f[image].attrs['_FillValue'][0]   \n    img_inv  = f[image].attrs['invert'].decode('utf-8')\n    img_lrquad = f[image].attrs['lab_radiance_quad'][0]\n    img_lrscale = f[image].attrs['lab_radiance_scale_factor'][0]\n    img_lroff = f[image].attrs['lab_radiance_add_offset'][0]\nprint('Done reading HDF5 file')  \n\n## Use np.ma.masked_equal with integer values to  \n## mask '_FillValue' data in corners:\nimg_arr_m = np.ma.masked_equal(img_arr, img_arr_fill, copy=True)\n", "# Plot 1 uses Mercator projection\nprint('Start on Plot1')\n\nmap_proj = ccrs.Mercator(central_longitude=sat_long,\n                      min_latitude=lower_lat, max_latitude=upper_lat)\ndata_crs = ccrs.Geostationary(central_longitude=sat_long,\n                              satellite_height=sat_hght)\n\nplt.figure(figsize=(10,10))\nax1 = plt.axes(projection=map_proj)\nax1.coastlines()\n#ax1.add_feature(cfeature.BORDERS, edgecolor='white', linewidth=0.5)\nax1.gridlines(color='black', alpha=0.5, linestyle='--', linewidth=0.75, draw_labels=True)\n\nmap_proj_text = f'{str(type(map_proj)).split(\".\")[-1][:-2]}'\ndata_crs_text = f'{str(type(data_crs)).split(\".\")[-1][:-2]}'\nplt.title(f'Plot1: Projection: {map_proj_text}\\n' + \\\n          f'Data Transform: {data_crs_text}\\n' + \\\n          f'\\nRaster Data: {image} (masked)')\nprint('plotting data for Plot1 image')\nim1 = ax1.imshow(img_arr_m, origin='upper', transform=data_crs)\nplt.colorbar(im1)\n\nprint('done with Plot1')\n", "# Plot 2 on Mercator projection\nprint('Start on Plot2')\n\nmap_proj = ccrs.Mercator(central_longitude=sat_long,\n                      min_latitude=lower_lat, max_latitude=upper_lat)\ndata_crs = ccrs.Geostationary(central_longitude=sat_long,\n                              satellite_height=sat_hght)\n\nplt.figure(figsize=(10,10))\nax2 = plt.axes(projection=map_proj)\nax2.coastlines()\nax2.add_feature(cfeature.BORDERS, edgecolor='white', linewidth=0.5)\nax2.gridlines(color='black', alpha=0.5, linestyle='--', linewidth=0.75, draw_labels=True)\n\n# Focus map on Indian subcontinent:\ndeg_crs = ccrs.PlateCarree()\nmap_extent_deg = (15., 150., -67., 67.) # lon/lat focused on image\n#map_extent_deg = (60.0, 97.0, -10.0, 37.5) # India\nmap_extent_merc = transform_extent_pts(map_extent_deg, map_proj, deg_crs)\n\nax2.set_extent(map_extent_merc, map_proj)\n\nmap_proj_text = f'{str(type(map_proj)).split(\".\")[-1][:-2]}'\ndata_crs_text = f'{str(type(data_crs)).split(\".\")[-1][:-2]}'\nplt.title(f'Plot2: Projection: {map_proj_text}\\n' + \\\n          f'Data Transform: {data_crs_text}\\n' + \\\n          f\"\\nRaster Data: {image} (masked) \")\nprint('plotting data for Plot2 image')\nim2 = plt.imshow(img_arr_m, origin='upper', transform=data_crs)\nplt.colorbar(im2)\n\nprint('done with Plot2')\n", "def transform_extent_pts(extent_pts, map_proj, pt_crs):\n    \n    xul, yul = map_proj.transform_point(\n        x = extent_pts[0],\n        y = extent_pts[3],\n        src_crs = pt_crs)\n    \n    xlr, ylr = map_proj.transform_point(\n        x = extent_pts[1],\n        y = extent_pts[2],\n        src_crs = pt_crs)\n\n    return [xul, xlr, ylr, yul]\n", "def transform_extent_pts(extent_pts, map_proj, pt_crs):\n    \n    xul, yul = map_proj.transform_point(\n        x = extent_pts[0],\n        y = extent_pts[3],\n        src_crs = pt_crs)\n    \n    xlr, ylr = map_proj.transform_point(\n        x = extent_pts[1],\n        y = extent_pts[2],\n        src_crs = pt_crs)\n\n    return [xul, xlr, ylr, yul]\n", "# Plot 3: Plot radiance on Mercator projection\nprint('Calculate radiance for Plot3')\nradiance = calc_radiance(img_arr_m, img_lrquad, img_lrscale, img_lroff,\n                         invert=img_inv, Sensor_Name=Sensor_Name)\n", "plt.title(f'Plot3: Projection: {map_proj_text}\\n' + \\\n          f'Data Transform: {map_proj_text}\\n' + \\\n          f'\\nRadiance from: {image} (masked)')\nprint('plot image for Plot3')\nim3 = ax3.imshow(radiance, origin='upper', transform=data_crs)\nplt.colorbar(im3)\nprint('done with Plot3')\n", "# Plot 4: Plot cloud thresholds on Mercator projection\nprint('Calculate cloud mask for Plot4')\n# Left Plot: set values <=700 to 0\ncloud1 = np.where(img_arr_m <= 700, 0, img_arr_m)\n# Right Plot: set values <=700 to 0, >700 to 1\ncloud2 = np.where(img_arr_m <= 700, 0, 1)\n.....\n.....\nprint('plot image for Plot4')\n# to create plot on left:\nim4 = ax4.imshow(cloud1, vmin=0, vmax=1000, origin='upper', transform=data_crs)\n# to create plot on right:\nim4 = ax4.imshow(cloud2, vmin=0, vmax=1, origin='upper', transform=data_crs)\nplt.colorbar(im4)\n"], [], ["ops = ['add ', 'subtract ', 'multiply ', 'divide ']\nnums = [3, 2, 3, 2]\nlist3 = [op+str(n) for op, n in zip(ops, nums)]\n# or using an fstring to remove \"+\" entirely\nlist3 = [f\"{op}{n}\" for op, n in zip(ops, nums)]\n"], ["a = ['add ', 'subtract ', 'multiply ', 'divide ']\nb = [3, 2, 3, 2]\n\n# Here:\n# zip(a, b) iterates through a and b in parallel\n# for x,y assigns corressponding values from a and b\n# f'{x} {y}' combines the values with a separating space.\n# [...] is a \"list comprehension\"\nc = [ f'{x} {y}' for x,y in zip(a, b) ]\nprint(c)\n", "['add  3', 'subtract  2', 'multiply  3', 'divide  2']\n"], ["l1 = [1,2,3,4]\nl2 = ['a','b','c','d']\nresult = [str(la)+lb for la,lb in zip(l1,l2)]\n", "result = ['1a', '2b', '3c', '4d']\n", "result = [f\"{la} {lb}\" for la,lb in zip(l1,l2)]\n"], ["list1 = ['add ', 'subtract ', 'multiply ', 'divide ']\nlist2 = [3, 2, 3, 2]\nresult = [f'{x} {y}' for x, y in zip(list1, list2)]\n"], ["list1 = ['add ', 'subtract ', 'multiply ', 'divide ']\nlist2 = [3, 2, 3, 2]\n\nresult = []\nfor i,j in zip(list1,list2):\n    result.append(str(i)+str(j))\n        \nprint(result)\n", "['add 3', 'subtract 2', 'multiply 3', 'divide 2']\n"], ["list1 = ['add ', 'subtract ', 'multiply ', 'divide ']\nlist2 = [3, 2, 3, 2]\nlist3 = []\nfor y,x in enumerate(list1):\n    list3.append(\"%s%d\" % (x,list2[y]))\n"], ["for _ in range(len(a)):\n    for _ in range(len(a)):\n        do_something\n", "F(n) = 1*n +2*n +3*n +4*n +..........+(n-1)*n+n*n (if n starts from 1)\nF(n) = n(1+2++3+4+....+(n-1)+n)\nF(n) = n*(n+(n+1)/2)  (Sum of n Natural Numbers)\nF(n) = n^2 + 2*n + n/2 (After Solving the Equation)\nF(n) = O(n^2)\n", "i = 0\nwhile i < len(a) * len(a):\n    do_something\n    i += 1\n", "len(a)*len(a) = n*n=O(n^2)\n"], ["# Your data\nimport numpy as np\nimport pandas as pd\ndf = pd.DataFrame({\"Left\":[20,15,10,0], \"Right\":[25,18,35,5]})\n\n# Masking columns to ravel\ndf2 = pd.DataFrame({\"New Name\":np.ravel(df[[\"Left\",\"Right\"]])})\n\ndf2\n\n   New Name\n0        20\n1        25\n2        15\n3        18\n4        10\n5        35\n6         0\n7         5\n"], ["df1 = dfTest[['Left']].copy()\ndf2 = dfTest[['Right']].copy()\ndf2.columns=['Left']\ndf3 = pd.concat([df1, df2],ignore_index=True)\n"], ["df2 = df.unstack()\n# recreate index\ndf2.index = np.arange(len(df2))\n"], ["import numpy as np\n\nout = pd.DataFrame(np.ravel(df.values.T), columns=['New name'])\nprint(out)\n\n# Output\n   New name\n0        20\n1        15\n2        10\n3         0\n4        25\n5        18\n6        35\n7         5\n", "out = pd.concat([df['Left'], df['Right']], ignore_index=True).to_frame('New name')\nprint(out)\n\n# Output\n   New name\n0        20\n1        15\n2        10\n3         0\n4        25\n5        18\n6        35\n7         5\n"], [">>> df.melt(value_name='New Name').drop('variable', 1)\n   New Name\n0        20\n1        15\n2        10\n3         0\n4        25\n5        18\n6        35\n7         5\n"], ["cols = [df[col].squeeze() for col in df]\npd.concat(cols, ignore_index=True)\n"], [], [], ["teststring = 'hello world     this is just a   test. don\\'t mind me 123.'\n\n# replace multiple spaces with one space\nwhile '  ' in teststring:\n    teststring = teststring.replace('  ', ' ')\n\n# replace space with underscore (_)\nteststring = teststring.replace(' ', '_')\n\nprint(teststring)\nassert teststring == \"hello_world_this_is_just_a_test._don't_mind_me_123.\"  # True\n", "fname = 'mah_file.txt'\nwith open(fname) as in_file:\n    contents = in_file.read()\n    while '  ' in contents:\n        contents = contents.replace('  ', ' ')\n# write updated contents back to file\nwith open(fname, 'w') as out_file:\n    out_file.write(contents.replace(' ', '_'))\n"], ["f = open(\"test.txt\", \"r\") \ntext=f.read() \nf.close() \nf=open(\"testfile.txt\", \"w+\") \ntext2='' \nif ' ' in text: \n    text2 = text.replace(' ' , '_') \n    print(text2) \n    f.write(text2) \nf.close()\n"], ["with open('nog_rename_update.txt') as f:\n\n    new_list = []\n\n    for line in f:\n        # split the line\n        split = line.split()\n        new_list.append(split[0]+\"_\"+split[1])\n\n# print the list to see results\nprint(new_list)\n\n#\n# add code to loop through the new list and to write to a file\n#\n"], ["fileHandler = open('nog_rename_update.txt').read()\nnew_name = fileHandler.replace(\" \", \"_\")\nprint(new_name)\n"], ["import h5py\nimport matplotlib.pyplot as plt    \nimport cartopy.crs as ccrs\n\n# First get data from HDF5 file with h5py:\nfn = '3DIMG_30MAR2018_0000_L1B_STD.h5' #filename (the \".h5\" file)\nwith h5py.File(fn) as data: \n    tir1 = data['IMG_TIR1'][:].reshape(lats.shape)\n# retrieve extent of plot from file attributes:\n    left_lon = data.attrs['left_longitude'][0]\n    right_lon = data.attrs['right_longitude'][0]\n    lower_lat = data.attrs['lower_latitude'][0]\n    upper_lat = data.attrs['upper_latitude'][0]  \n    sat_long = data.attrs['Nominal_Central_Point_Coordinates(degrees)_Latitude_Longitude'][1]\n\n# Define extent of plot (in degrees) as:\n# extent=[longitude_top_left,longitude_top_right,\n#         latitude_bottom_left,latitude_top_left]\n# coordinates must be transformed to map coordinate system before using\nimg_extent_deg = (left_lon, right_lon, lower_lat, upper_lat)\n\n# Create Geostationary plot with cartopy and matplotlib    \nmap_proj = ccrs.Geostationary(central_longitude=sat_long)\nax = plt.axes(projection=map_proj)\nax.coastlines(color='white')\nmap_extend_geos = ax.get_extent(crs=map_proj)\nplt.imshow(tir1, extent=map_extend_geos)\nplt.colorbar(im1)\n"], [], [], [], ["class runSingle:\ndef __init__(self, fileName) -> None:\n    self.f = open(fileName, \"w\")\n    self.f.close()\n    try:\n        os.remove(fileName)\n        self.f = open(fileName, \"w\")\n    except WindowsError:\n        sys.exit()\n\na = runSingle(\"A\")\n"], [], ["import logging\ntargets = [\"a\", \"b\", \"c\"]\nlogger = logging.getLogger(__name__)\nlogger.setLevel(logging.INFO)\nlog_format = \"|%(levelname)s| : [%(filename)s]--[%(funcName)s] : %(message)s\"\nformatter = logging.Formatter(log_format)\n\nfor target in targets:\n    log_file = f\"{target}.log\"\n    \n    # create file handler and set the formatter\n    file_handler = logging.FileHandler(log_file)\n    file_handler.setFormatter(formatter)\n\n    # add handler to the logger\n    logger.addHandler(file_handler)\n\n    # sample message\n    logger.info(f\"Log file: {target}\")\n    # close the log file\n    file_handler.close()\n    # remove the handler from the logger. The default behavior is to pop out      \n    # the last added one, which is the file_handler we just added in the \n    # beginning of this iteration.\n    logger.handlers.pop() \n"], [], ["a = \"L!ve l@ugh l%ve\"\nspe = \"+=/_(*&^%$#@!-.?)\"\nfor i in a:\n    if i in spe:\n        b = i.replace(i,\"*\")\n    else:\n        b = i\n    print(b,end=\"\")\n", "a = \"L!ve l@ugh l%ve\"\nspe = \"+=/_(*&^%$#@!-.?)\"\nfor i in a:\n    if i in spe:\n        b = a.replace(i,\"*\")\n    else:\n        b = a\nprint(b)\n", "import re\na = \"L!ve l@ugh l%ve\"                     \nprint(re.sub(\"[+\\=\\/_\\(*&^%\\$#@\\!-\\.\\?\\)]\",\"*\",a))\n"], [], ["import re\nprint(re.sub('[^a-zA-Z\\d\\s]', '*', \"L!ve l@ugh l%ve\"))\nprint(re.sub(\"[$&+,:;=?@#|'<>.^*()%!-]\", '*', \"L!ve l@ugh l%ve\"))\n# L*ve l*ugh l*ve\n"], [], ["if str(a).split(\".\")[1]==\"0\":\n"], ["import string\n\nall_chars = string.ascii_letters\n\na = 'L!ve l@ugh l%ve'\n\nfor item in a:\n    if item ==' ':\n        pass\n    elif item not in all_chars:\n        item='*'\n        \n    print(item, end=\"\")\n"], ["a = 17.3678\n\nif a.is_integer():\n   print(\"the value after the decimal point is zero\")\nelse:\n   print(\"the value after the decimal point is not zero\")\n"], ["\nif num%1 == 0:\n    print(\"Value after the decimal point is zero\")\nelse:\n    print(\"Value after the decimal point is not zero\")\n"], [">>> a = 17.3678\n\n>>>if a/float( int(a) ) == 1:\n          print(\"the value after the decimal point is zero\")\n   else:\n          print(\"the value after the decimal point is not zero\")\n\n"], [">>> a = 17.3678\n>>> print(int((a - int(a)) * 10))\n3\n>>> a = 17.03678\n>>> print(int((a - int(a)) * 10))\n0\n"], ["a = 17.3678\na = str(a)\nvalueAfterPoint = a.split('.')[1]\nvalueAfterPoint = int(valueAfterPoint)\n\nif valueAfterPoint == 0:\n  print(\"the value after the decimal point is zero\")\nelse:\n  print(\"the value after the decimal point is not zero\")\n"], ["a = input()\nspe = \"+=/_(*&^%$#@!-.?)\"\nfor i in a:\n    if i in spe:\n        b = \"*\"\n        print(b)\n    else:\n        b = i\n        print(b,end=\"\")\n", "a = input()\nnew_string = \"\"\nspe = \"+=/_(*&^%$#@!-.?)\"\nfor i in a:\n    if i in spe:\n        new_string += \"*\"\n    else:\n        new_string += i\nprint(new_string)\n"], ["a = '(L!ve l@ugh l%ve)'\nspe = set(\"+=/_(*&^%$#@!-.?)\") # using a set for efficiency\n\nfor char in a:\n    if char in spe:\n        print('*', end='')\n    else:\n        print(char, end='')\n", "spe = set(\"+=/_(*&^%$#@!-.?)\")\nprint(''.join(['*' if c in spe else c  for c in a]))\n"], ["print(\"hello\", end=\"\")\n", "for i in range(20):\n    print(\"current number is\\t\", I)\n\n# current number is    0\n# current number is    1\n# current number is    2\n# current number is    3\n# current number is    4\n# current number is    5\n# current number is    6\n# current number is    7\n# current number is    8\n# current number is    9\n# current number is    10\n# current number is    11\n# current number is    12\n# current number is    13\n# current number is    14\n# current number is    15\n# current number is    16\n# current number is    17\n# current number is    18\n# current number is    19\n"], [], ["def processImage2(path):\n'''\nIterate the animated image extracting each frame.\n'''\nimages = []\nmode = analyseImage(path)['mode']\n\nim = Image.open(path)\n\ni = 0\np = im.getpalette()\nlast_frame = im.convert('RGBA')\n\ntry:\n    while True:\n        print(\"saving %s (%s) frame %d, %s %s\" % (path, mode, i, im.size, im.tile))\n\n        '''\n        If the GIF uses local colour tables, each frame will have its own palette.\n        If not, we need to apply the global palette to the new frame.\n        '''\n        if '.gif' in path:\n            if not im.getpalette():\n                im.putpalette(p)\n\n        new_frame = Image.new('RGBA', im.size)\n\n        '''\n        Is this file a \"partial\"-mode GIF where frames update a region of a different size to the entire image?\n        If so, we need to construct the new frame by pasting it on top of the preceding frames.\n        '''\n        if mode == 'partial':\n            new_frame.paste(last_frame)\n\n        new_frame.paste(im, (0, 0), im.convert('RGBA'))\n        nameoffile = path.split('/')[-1]\n        output_folder = path.replace(nameoffile, '')\n\n        name = '%s%s-%d.png' % (output_folder, ''.join(os.path.basename(path).split('.')[:-1]), i)\n        print(name)\n        os.remove(name)\n        i += 1\n        last_frame = new_frame\n        im.seek(im.tell() + 1)\nexcept EOFError:\n    pass\n", "def webp_mp4(filename, outfile):\nimages = processImage(\"%s\" % filename)\nfps = 30\nclip = moviepy.video.io.ImageSequenceClip.ImageSequenceClip(images, fps=fps)\nclip.write_videofile(outfile)\n\nprocessImage2(\"%s\" % filename)\nreturn [outfile]\n"], ["# output produced by the last layer of NN\nnn_output_before_softmax = [3.2, 1.3, 0.2, 0.8]\n\n# converting output of last layer of NN into probabilities by applying softmax\nnn_output_after_softmax = tf.nn.softmax(nn_output_before_softmax)\n\n# output converted into softmax after appling softmax\nprint(nn_output_after_softmax.numpy())\n[0.77514964 0.11593805 0.03859243 0.07031998]\n\ny_true = [1.0, 0.0, 0.0, 0.0]\n", "# By default from_logits=False\nloss_taking_prob = tf.keras.losses.CategoricalCrossentropy(from_logits=False) \n\nloss_1 = loss_taking_prob(y_true, nn_output_after_softmax)\nprint(loss_1)\ntf.Tensor(0.25469932, shape=(), dtype=float32)\n", "loss_taking_logits = tf.keras.losses.CategoricalCrossentropy(from_logits=True)\n\nloss_2 = loss_taking_logits(y_true, nn_output_before_softmax)\nprint(loss_2)\ntf.Tensor(0.2546992, shape=(), dtype=float32)\n"], [], ["def comma_num(n,f=''):\n    return ('{'+f+'}').format(n).replace('.',',')\n\nn = 1.23\n\nf'Whatever {comma_num(n)}'\n'Whatever {}'.format(comma_num(n))\n>>>'Whatever 1,23'\n\nf'Whatever {comma_num(n,\":6.4f\")}'\n'Whatever {}'.format(comma_num(n,':6.4f'))\n>>>'Whatever 1,2300'\n"], [], [], [], [], ["for _ in range(len(a)):\n    for _ in range(len(a)):\n        do_something\n", "i = 0\nwhile i < len(a) * len(a):\n    do_something\n    i += 1\n"], [], ["lst =  \"text  \\n\\n  more text (1)  \\n\\n  even more text\"\n\nx=lst.split(\"\\n\\n\")\n\nprint(\"list=\",x)\n"], ["import re\ndef check_time(text):\n  pattern = r'([1-9]|1[012]):([0-5][0-9])\\s?(am|pm)'\n  result = re.search(pattern, text, flags=re.I)\n  return result != None\n\nprint(check_time(\"12:45pm\")) # True\nprint(check_time(\"9:59 AM\")) # True\nprint(check_time(\"6:60am\")) # False\nprint(check_time(\"five o'clock\")) # False\n"], [], [], ["pip3 uninstall PyQt5\nsudo apt-get install python3-pyqt5\n"], ["import csv\n\nwith open('txt_file.txt', 'r') as txt_file:\n    # Strip out whitespace from line\n    stripped_lines = [line.strip() for line in txt_file] \n    # Break up each line based on delimiter\n    enlisted_lines = [line.split(' ') for line in stripped_lines if line]\n\n    # Write lines to a CSV file using the csv package\n    with open('output.csv', 'w') as csv_output:\n        csv_writer = csv.writer(csv_output)\n        csv_writer.writerows(enlisted_lines)\n"], ["# Create NewCol4 by adding increments to col2 for those groups that have more than one element\ndf2 = (df.assign(NewCol4 = df['Col2'] + '_' + (df.groupby('Col2').cumcount()+1).astype(str))\n         .groupby('Col2').filter(lambda g:len(g)>1)\n)\n\n# Join to the original. This will leave NaNs in NewCol4 for single-element groups\ndf3 = df.join(df2['NewCol4'])\n\n# Fill NaNa from Col2\ndf3['NewCol4'] = df3['NewCol4'].fillna(df['Col2'])\n", "    Col1    Col2      Col3  NewCol4\n--  ------  ------  ------  ---------\n 0  A       ABC        100  ABC\n 1  B       BCD        200  BCD\n 2  C       CDA        300  CDA_1\n 3  D       CDA        400  CDA_2\n 4  E       CDA        500  CDA_3\n 5  F       EFG        600  EFG\n 6  G       XYZ        700  XYZ_1\n 7  H       XYZ        800  XYZ_2\n 8  I       PQR        900  PQR\n"], ["data=\"\"\"Col1    Col2    Col3   NewCol4\nA       ABC     100    ABC\nB       BCD     200    BCD\nC       CDA     300    CDA_1\nD       CDA     400    CDA_2\nE       CDA     500    CDA_3\nF       EFG     600    EFG\nG       XYZ     700    XYZ_1\nH       XYZ     800    XYZ_2\nI       PQR     900    PQR\"\"\"\n\ndf = pd.read_csv(StringIO(data), sep=\"\\s+\")\n\ngrouped=df.groupby('Col2')['Col3']\n\nindex=[]\nvalues=[]\ndef count_consecutive(df):\n    index.append(df.index)\n    values.append(df.values)\n\ngrouped.apply(count_consecutive)        \n#[print(x) for x in index]\n#[print(x) for x in values]\n\nfor x in index:\n    count=0\n    old_value=0\n    for i in x:\n        field=df.loc[i,'Col2']\n        value=df.loc[i,'Col3']\n        #print(value)\n        if value>old_value:\n            count+=1\n        df.loc[i,'NewCol4']=field+\"_\"+str(count)\n        old_value=value\n    \nprint(df)\n", "Col1 Col2  Col3 NewCol4\n0    A  ABC   100   ABC_1\n1    B  BCD   200   BCD_1\n2    C  CDA   300   CDA_1\n3    D  CDA   400   CDA_2\n4    E  CDA   500   CDA_3\n5    F  EFG   600   EFG_1\n6    G  XYZ   700   XYZ_1\n7    H  XYZ   800   XYZ_2\n8    I  PQR   900   PQR_1\n"], [], [], ["# Assign a number to each consecutive group of equal \"Col2\" values\ndf[\"g_rank\"] = (df[\"Col2\"] != df[\"Col2\"].shift()).cumsum()\n\n# Add a column with the size of each group\ndf = df.join(df.groupby(\"g_rank\")[\"Col2\"].size().rename(\"size\"), on=\"g_rank\")\n\n# Now add a different number to each member of a group\ndf[\"l_rank\"] = df.groupby(\"g_rank\")[\"size\"].rank(\"first\")\n\n# Finally, calculate all the \"NewCol4\" and remove the unnecesary ones\ndf[\"NewCol4\"] = df[\"Col2\"] + \"_\" + df[\"l_rank\"].astype(int).astype(str)\ndf.loc[df[\"size\"] <= 1, \"NewCol4\"] = None\n", "  Col1 Col2  Col3  g_rank  size  l_rank NewCol4\n0    A  ABC   100       1     1     1.0    None\n1    B  BCD   200       2     1     1.0    None\n2    C  CDA   300       3     3     1.0   CDA_1\n3    D  CDA   400       3     3     2.0   CDA_2\n4    E  CDA   500       3     3     3.0   CDA_3\n5    F  EFG   600       4     1     1.0    None\n6    G  XYZ   700       5     2     1.0   XYZ_1\n7    H  XYZ   800       5     2     2.0   XYZ_2\n8    I  PQR   900       6     1     1.0    None\n"], [], ["list =  ['text  \\n\\n  more text (1)  \\n\\n  even more text  \\n\\n']\naux = lista[0].split('\\n\\n')\nlist_final = [e.strip() for e in aux]\nlist_final.remove('')\n"], ["list1 =  ['text  \\n\\n  more text (1)  \\n\\n  even more text  \\n\\n']\nprint(list1)\nlist1\njoined = \"\".join(list1)\njoined = joined.replace('\\n\\n',',')\nwords = [x.strip() for x in joined.split(',')]\nprint(words)\nwhile(\"\" in words) :\n    words.remove(\"\")\nprint(words)\n"], ["import re\nlist =  ['text  \\n\\n  more text (1)  \\n\\n  even more text  \\n\\n']\nlist[0] = list[0].replace('  \\n\\n  ', '#').replace('  \\n\\n', '#')\nlist = re.split('#',list[0])\n\nif list[len(list) - 1] == '':\n  list.pop(len(list) - 1)\n\nprint(list)\n", "['text', 'more text (1)', 'even more text']\n"], [], [], ["from nameparser import HumanName\n\nname = \"John Wayne Smith\"\nname_parts = HumanName(name)\nname_parts.title\nname_parts.first\nname_parts.middle\nname_parts.last\nname_parts.suffix\nname_parts.nickname\nname_parts.surnames  # (middle + last)\nname_parts.initials  # (first initial of each name part)\n"], [], [], ["import json\nfo = open(r\"C:\\Users\\Downloads\\test.txt\", \"r\")\nfor each_line in fo.readlines():\n    print(json.loads(json.loads(each_line)['message'])['first_name'])\n    print(json.loads(json.loads(each_line)['message'])['last_name'])\n    print(json.loads(json.loads(each_line)['message'])['id'])\n    print(json.loads(json.loads(each_line)['message'])['phone'])\n"], [], ["import json\nmessage = mydict[\"message\"]\nmessage_dict = json.loads(message)\nmessage_dict['id']\n", "with open(filepath) as file:\n    mydict = json.load(file)\nmessage_dict = mydict[\"message\"]\nmessage_dict['id']\n"], ["def expanding(L):\n    \n    x=list()\n    for i in range(len(L)-2):\n        if abs(L[i+1]-L[i+2]) > abs(L[i]-L[i+1]):\n            x.append(True)\n        else:\n            x.append(False)\n    return all(x)\nprint(expanding([1,3,7,2,9]))\n", "True\n", "Print(expanding([1,3,7,2,-3]))\n", "False\n"], ["RUN apk update \\\n    && apk add --virtual build-deps gcc python3-dev musl-dev \\\n    && apk add postgresql \\\n    && apk add postgresql-dev \\\n    && pip install psycopg2 \\\n    && apk add jpeg-dev zlib-dev libjpeg \\\n    && pip install Pillow \\\n    && apk del build-deps\n"], [], [" import datetime,time\n\n\n while True:\n  current_time = datetime.datetime.now()\n  print(current_time)\n  time.sleep(1)\n", "2022-02-18 04:39:56.781569\n2022-02-18 04:39:57.782559\n2022-02-18 04:39:58.783791\n2022-02-18 04:39:59.785152\n2022-02-18 04:40:00.785640\n2022-02-18 04:40:01.786961\n2022-02-18 04:40:02.788185\n2022-02-18 04:40:03.788571\n2022-02-18 04:40:04.789626\n2022-02-18 04:40:05.790575\n2022-02-18 04:40:06.791805\n2022-02-18 04:40:07.793075\n2022-02-18 04:40:08.794314\n2022-02-18 04:40:09.795562\n"], [], [], ["DF['Timestamp']:\n0      2022-01-01 00:00:00\n1      2022-01-01 01:00:00\n2      2022-01-01 02:00:00\n3      2022-01-01 03:00:00\n4      2022-01-01 04:00:00\n...       \n8755   2022-12-31 19:00:00\n8756   2022-12-31 20:00:00\n8757   2022-12-31 21:00:00\n8758   2022-12-31 22:00:00\n8759   2022-12-31 23:00:00\nName: Timestamp, Length: 8760, dtype: datetime64[ns]\n", "DF['Year']       = DF['Timestamp'].astype('M8[Y]')\nDF['DayOfYear']  = (DF['Timestamp'] - DF['Year']).astype('timedelta64[D]')\nDF['Hour']       = DF['Timestamp'].dt.hour + 1 \nDF['HourOfYear'] = DF['DayOfYear'] * 24 + DF['Hour']\n", "DF:\n               Timestamp  ...  HourOfYear\n0    2022-01-01 00:00:00  ...  1.0\n1    2022-01-01 01:00:00  ...  2.0\n2    2022-01-01 02:00:00  ...  3.0\n3    2022-01-01 03:00:00  ...  4.0\n4    2022-01-01 04:00:00  ...  5.0\n...      \n8755 2022-12-31 19:00:00  ...  8756.0\n8756 2022-12-31 20:00:00  ...  8757.0\n8757 2022-12-31 21:00:00  ...  8758.0\n8758 2022-12-31 22:00:00  ...  8759.0\n8759 2022-12-31 23:00:00  ...  8760.0\n[8760 rows x 6columns]\n"], [], ["    threads\n      Number of threads to use for ffmpeg. Can speed up the writing of\n      the video on multicore computers.\n\n* clip.write_videofile(outfile, threads=4)\n"], ["FROM python:3.9.7-alpine\n\nENV PYTHONDONTWRITEBYTECODE 1\nENV PYTHONUNBUFFERED 1\n\n\nRUN mkdir /backend\nADD ./app /backend\n\nWORKDIR /backend\n\n\nRUN apk update && \\\n    apk add --virtual .tmp gcc python3-dev jpeg-dev zlib-dev musl-dev libjpeg py3-setuptools \\\n    tiff-dev openjpeg-dev freetype-dev lcms2-dev \\\n    libwebp-dev tcl-dev tk-dev harfbuzz-dev fribidi-dev libimagequant-dev \\\n    libxcb-dev libpng-dev alpine-sdk build-base openssl-dev dateutil tzdata py3-tz && \\\n    \n    pip install --upgrade pip && \\\n    pip install -r requirements.txt && \\\n    echo 'requirements Installed' && \\\n    pip install uvicorn gunicorn  && \\\n\n    apk del .tmp\n\n\n\nENV DB_NAME  ******\nENV DB_USER ******\nENV DB_PASSWORD ******\n\nENV DJANGO_SUPERUSER_PASSWORD ******\n\nCMD gunicorn myproject.asgi:application -k uvicorn.workers.UvicornWorker\n\n\n"], [], [], ["jsonObject = jsonpickle.encode(obj)\n"], ["\n    driver.get(\"https://www.google.com\")\n    driver.maximize_window()\n    time.sleep(2)\n    #finds+clicks language dropdown, interaction unhides the rest of the popup html\n    driver.find_element_by_class_name('tHlp8d').click()\n    time.sleep(2)\n    #finds+clicks the agree button now that it has become visible\n    driver.find_element_by_id('L2AGLb').click()\n\n"], [], [" sudo yum -y install libsndfile\n", "pip install SoundFile\npip install librosa\n"], ["import json\ndates = [\n[\n    [\n        \"April\",\n        9\n    ],\n    [\n        \"August\",\n        5\n    ],\n    [\n        \"February\",\n        3\n    ],\n    [\n        \"July\",\n        6\n    ],\n    [\n        \"June\",\n        3\n    ],\n    [\n        \"March\",\n        1\n    ],\n    [\n        \"May\",\n        8\n    ],\n    [\n        \"November\",\n        1\n    ],\n    [\n        \"October\",\n        2\n    ],\n    [\n        \"September\",\n        4\n    ]\n]\n]\n\n dates_json = json.dumps(dates)\n\n print(type(dates_json)) # prints <class 'str'>\n"], [" def group_list(group, users):\n members = \"\"\n for user in users:\n   members += user + \", \"\n return \"{}: \".format(group) + members\n"], ["thisdict = {\n  \"brand\": \"Ford\",\n  \"model\": \"Mustang\",\n  \"year\": 1964\n}\n", "ipv4_list = [\"192.168.1.2\", \"192.168.1.3\", \"192.168.1.4\"]\nipv4_dic = {}\nipv4_len = len(ipv4_list)\ni = 1\n\nfor key in range(len(ipv4_list)):\n    auxStr = \"IP\" + str(i)  #convert i to string, and merging IP\n     ipv4_dic[auxStr] = ipv4_list[key]\n    i+=1\n\nprint(ipv4_dic)\n"], [], ["ipv4_list = [\"192.168.1.2\", \"192.168.1.3\", \"192.168.1.4\"]\nipv4_dic  = {f'IP{n}':ip for n,ip in enumerate(ipv4_list,1)}\n\nprint(ipv4_dic)\n{'IP1': '192.168.1.2', 'IP2': '192.168.1.3', 'IP3': '192.168.1.4'}\n"], ["di = { f\"IP{i+1}\":v for i,v in enumerate( [\" 192.168.1.2\", \"192.168.1.3\", \"192.168.1.4\"])}\nprint(di)\n"], ["ipv4_dic[\"IP\"+i] = ipv4_list[val]\n", "ipv4_dic[\"IP\"+str(i)] = ipv4_list[val]\n", "ipv4_list = [\"192.168.1.2\", \"192.168.1.3\", \"192.168.1.4\"]\nipv4_dic = {f\"IP{i+1}\": ipv4_list[i] for i in range(len(ipv4_list))}\n", "l = ['A', 'B', 'C']\n\nd = {i : l[i] for i in range(len(l))}\n"], [], [], ["chunksize = 4  # Number of rows\nlast_row = pd.DataFrame()  # Last row of the previous chunk\n\nwith open('data.csv') as reader, open('output.csv', 'w') as writer:\n\n    # Write headers\n    writer.write(reader.readline())\n    reader.seek(0)\n\n    for chunk in pd.read_csv(reader, chunksize=chunksize):\n        df = pd.concat([last_row, chunk])\n        df = df.groupby(['ID', 'Location', 'Date'], as_index=False)['Value'].sum()\n        df, last_row = df.iloc[:-1], df.iloc[-1:]\n        df.to_csv(writer, header=False, index=False)\n\n    # Don't forget the last row!\n    last_row.to_csv(writer, header=False, index=False)\n", "ID,Location,Date,Value\n1,Loc1,2022-01-27,9\n1,Loc1,2022-01-28,7\n1,Loc2,2022-01-29,8\n2,Loc1,2022-01-27,11\n2,Loc2,2022-01-28,4\n2,Loc2,2022-01-29,6\n3,Loc1,2022-01-28,18\n3,Loc2,2022-01-29,1\n"], [], ["from collections import Counter\nimport csv\n\ndata = Counter()\n\nwith open('input.csv') as f_input:\n    csv_input = csv.reader(f_input)\n    header = next(csv_input)\n    \n    for row in csv_input:\n        data[tuple(row[:3])] += int(row[3])\n\nwith open('output.csv', 'w', newline='') as f_output:\n    csv_output = csv.writer(f_output)\n    csv_output.writerow(header)\n\n    for key, value in data.items():\n        csv_output.writerow([*key, value])\n", "from collections import Counter\nimport csv\n\ndef write_id(csv_output, data):\n    for key, value in data.items():\n        csv_output.writerow([*key, value])\n    data.clear()\n\n\ndata = Counter()\ncurrent_id = None\n\nwith open('input.csv') as f_input, open('output.csv', 'w', newline='') as f_output:\n    csv_input = csv.reader(f_input)\n    csv_output = csv.writer(f_output)\n    \n    header = next(csv_input)\n    csv_output.writerow(header)\n    \n    for row in csv_input:\n        if current_id and row[0] != current_id:\n            write_id(csv_output, data)\n            \n        data[tuple(row[:3])] += int(row[3])\n        current_id = row[0]\n        \n    write_id(csv_output, data)        \n"], ["import json\n\nprint(json.dumps(the_list_of_lists))\n"], ["import json\n\nprint(json.dumps(l))\n\n# Output\n[[[\"April\", 9], [\"August\", 5], [\"February\", 3], [\"July\", 6], [\"June\", 3], [\"March\", 1], [\"May\", 8], [\"November\", 1], [\"October\", 2], [\"September\", 4]]]\n"], ["import json\n    data = [\n    [\n        [\n            \"April\",\n            9\n        ],\n        [\n            \"August\",\n            5\n        ],\n        [\n            \"February\",\n            3\n        ],\n        [\n            \"July\",\n            6\n        ],\n        [\n            \"June\",\n            3\n        ],\n        [\n            \"March\",\n            1\n        ],\n        [\n            \"May\",\n            8\n        ],\n        [\n            \"November\",\n            1\n        ],\n        [\n            \"October\",\n            2\n        ],\n        [\n            \"September\",\n            4\n        ]\n    ]\n]\n\n\n   new_data = [{i[0]:i[1]} for i in data[0]]\n\n   print(json.dumps(new_data))\n"], ["num = int(input(\"Enter a positive integer: \"))\nodd = 1\n\nwhile num > 0:\nnum -= odd\nodd += 2\nif num == 0:\nprint('It is a pefect square')\nelse:\nprint('It is not a pefect square')\n"], [], ["output = []\nfor key, group in df.groupby([columns]):\n    output.append((key, group['a'].sum()))\n\npd.DataFrame(output).to_csv(\"....csv\")\n"], ["with open('input.csv') as fd, open('output.csv', 'w', newline='') as fdout:\n    rd, wr = csv.reader(fd), csv.writer(fdout)\n    _ = wr.writerow(next(rd))      # header line\n    old = [None]*4\n    for row in rd:\n        row[3] = int(row[3])       # convert value field to integer\n        if row[:3] == old[:3]:\n            old[3] += row[3]       # concatenate values of similar rows     \n        else:\n            if old[0]:             # and write the concatenated row\n                _ = wr.writerow(old)\n            old = row\n    if old[0]:                     # do not forget the last row...\n        _ = wr.writerow(old)\n", "ID,Location,Date,Value\n1,Loc1,2022-01-27,9\n1,Loc1,2022-01-28,7\n1,Loc2,2022-01-29,8\n2,Loc1,2022-01-27,11\n2,Loc2,2022-01-28,4\n2,Loc2,2022-01-29,6\n3,Loc1,2022-01-28,18\n3,Loc2,2022-01-29,1\n"], [], ["# transform in IntervalArray\n\ndf['my_col_bin']=pd.arrays.IntervalArray(df['my_col_bin'])\n\n# # simply filter based in pd.Interval\n\ndf[df['my_col_bin'].array.overlaps(pd.Interval(3, 12, \n closed='left'))] \n"], ["replace_dict = {\n        \"&\": \"&amp;\",\n        \"\\\"\": \"&quot;\",\n        \"<\": \"&lt;\",\n        \">\": \"&gt;\",\n        \"\\u0000\": \"\",\n        \"\\u0007\": \"\",\n        \"\\u0008\": \"\",\n        \"\\u001a\": \"\",\n        \"\\u001b\": \"\",\n    }\n"], [], ["import sqlite3\nimport discord\n\nbot = commands.Bot(command_prefix=\"!\")\n\n@client.event\nasync def on_member_join(member): ###add a row in the db for the new member when they join\n   user = member.id\n   conn = sqlite3.connect('your_db_here.db')\n   cur = conn.cursor()\n   cur.execute('INSERT INTO table_name_here(\"userid\", \"xp\", \"level\")VALUES(user, 0, 0)')\n   conn.commit()\n   conn.close()\n   await member.send(\"Your welcome message here\")\n\n@client.event\nasync def on_message(message):\n    user = message.author.id\n    conn = sqlite3.connect('your_db_here.db')\n    cur = conn.cursor()\n    cur.execute('SELECT xp, level FROM table_name_here WHERE userid = ?')\n    results = cur.fetchone()\n    row = results[0] ### results will be a list and since you're only fetching one record in this instance, you only need the first index\n    old_xp = row[0] ##the first item in the index, in this case, xp\n    old_level = row[1] ## the second item in the index, in this case, level\n    new_xp = old_xp + 1\n    if new_xp == 25: #this is where you set the threshold for leveling up to the first level\n        new_level = 1\n    else:\n        new_level = old_level\n    ###add more logic here for successive level-ups\n    cur.execute('UPDATE table_name_here SET xp = ?, level = ? WHERE userid = ?', (new_xp, new_level, user)\n    conn.commit()\n    conn.close()\n    ### here is where you'd put any sort of messaging if a person levels up or however you'd like to set it.\n    \n    \n"], ["a = np.array(a)\narr = a[a[:, 0].argsort()]\n", "def _custom_return(unique_id, a, split_idx, return_groups):\n    '''Choose if you want to also return unique ids'''\n    if return_groups:\n        return unique_id, np.split(a[:,1], split_idx)\n    else: \n        return np.split(a[:,1], split_idx)\n    \ndef numpy_groupby_index(a, return_groups=True):\n    '''Code refactor of method of Vincent J'''\n    u, idx = np.unique(a[:,0], return_index=True) \n    return _custom_return(u, a, idx[1:], return_groups)\n\ndef numpy_groupby_bins(a, return_groups=True):  \n    '''Significant boost of np.unique by np.bincount'''\n    bins = np.bincount(a[:,0])\n    nonzero_bins_idx = bins != 0\n    nonzero_bins = bins[nonzero_bins_idx]\n    idx = np.cumsum(nonzero_bins[:-1])\n    return _custom_return(np.flatnonzero(nonzero_bins_idx), a, idx, return_groups)\n\nnumpy_groupby_bins(arr, return_groups=True)\n>>> (array([0, 1, 2]),\n[array([ 1,  2, 26, 74]), array([77, 80, 81]), array([117, 118, 119, 120])])\nnumpy_groupby_bins(arr, return_groups=False)\n>>> [array([ 1,  2, 26, 74]), array([77, 80, 81]), array([117, 118, 119, 120])]\nnumpy_groupby_index(arr, return_groups=True)\n>>> (array([0, 1, 2]),\n[array([ 1,  2, 26, 74]), array([77, 80, 81]), array([117, 118, 119, 120])])\nnumpy_groupby_index(arr, return_groups=False)\n>>> [array([ 1,  2, 26, 74]), array([77, 80, 81]), array([117, 118, 119, 120])]\n", "groups = numpy_groupby_index(arr, return_groups=True)\nout = [np.r_[key, group] for key, group in zip(*groups)]\nout\n>>> [array([ 0,  1,  2, 26, 74]),\n array([ 1, 77, 80, 81]),\n array([  2, 117, 118, 119, 120])]\n"], ["a = [[0, 1], [0, 2], [0, 26], [0, 74], [1, 77], [1, 80], [1, 81], [2, 117], [2, 118], [2, 119], [2, 120]]\noutput_dict = {}\nfor key, *values in a:\n    if key not in output_dict:\n        output_dict[key] = [key]\n    output_dict[key].extend(values)\n"], ["d = {}\nfor key, value in a:\n   if key not in d.keys():\n      d[key] = [key]\n   d[key].append(value)\nresult = list(d.values())\n"], [], ["from timbral_models import timbral_extractor\nfrom pathlib import Path\nfrom operator import itemgetter\n\npath = Path(\"sort-sounds-by-similarity-from-sound-file/assets/transients_1/\")\ntimbres = [\n    {\"file\": file, \"timbre\": timbral_extractor(str(file))} for file in path.glob(\"*wav\")\n]\n\nitemgetters = {key: itemgetter(key) for key in timbres[0][\"timbre\"]}\n\nfor timbre, get_timbre in itemgetters.items():\n    print(f\"Sorting by {timbre}\")\n    for item in sorted(timbres, key=lambda d: get_timbre(d[\"timbre\"])):\n        print(item[\"file\"].name)\n    print()\n", "Sorting by hardness\n1.wav\n2.wav\n6.wav\n3.wav\n4.wav\n13.wav\n7.wav\n9.wav\n8.wav\n10.wav\n5.wav\n11.wav\n12.wav\n\nSorting by depth\n4.wav\n12.wav\n5.wav\n6.wav\n9.wav\n8.wav\n7.wav\n3.wav\n10.wav\n11.wav\n2.wav\n1.wav\n13.wav\n\nSorting by brightness\n1.wav\n2.wav\n3.wav\n9.wav\n10.wav\n6.wav\n5.wav\n8.wav\n7.wav\n4.wav\n13.wav\n11.wav\n12.wav\n\nSorting by roughness\n3.wav\n1.wav\n2.wav\n7.wav\n8.wav\n9.wav\n5.wav\n6.wav\n4.wav\n10.wav\n13.wav\n11.wav\n12.wav\n\nSorting by warmth\n7.wav\n6.wav\n8.wav\n12.wav\n9.wav\n11.wav\n4.wav\n5.wav\n10.wav\n13.wav\n2.wav\n3.wav\n1.wav\n\nSorting by sharpness\n1.wav\n3.wav\n2.wav\n10.wav\n9.wav\n5.wav\n7.wav\n6.wav\n8.wav\n13.wav\n4.wav\n11.wav\n12.wav\n\nSorting by boominess\n8.wav\n9.wav\n6.wav\n5.wav\n4.wav\n7.wav\n12.wav\n2.wav\n3.wav\n10.wav\n1.wav\n11.wav\n13.wav\n\nSorting by reverb\n12.wav\n11.wav\n9.wav\n13.wav\n6.wav\n8.wav\n7.wav\n10.wav\n4.wav\n3.wav\n2.wav\n1.wav\n5.wav\n"], ["class MFCC(Spec):\n\n    mfcc: np.ndarray  # Mel-frequency cepstral coefficient\n    delta_mfcc: np.ndarray  # delta Mel-frequency cepstral coefficient\n    delta2_mfcc: np.ndarray  # delta2 Mel-frequency cepstral coefficient\n    n_mfcc: int = 13\n\n    def __init__(self, soundFile: str):\n        self.name = path.basename(soundFile)\n        self.y, sr = librosa.load(soundFile, sr=self.sr) # <--- This line is changed\n        self.mfcc = librosa.feature.mfcc(self.y, n_mfcc=self.n_mfcc, sr=sr)\n        self.delta_mfcc = librosa.feature.delta(self.mfcc, mode=\"nearest\")\n        self.delta2_mfcc = librosa.feature.delta(self.mfcc, mode=\"nearest\", order=2)\n", "def spectra_of_spectra(mfcc):\n    # first calculate the psd\n    fft = np.fft.fft(mfcc.y)\n    fft = fft[:len(fft)//2+1]\n    psd1 = np.real(fft * np.conj(fft))\n    # then calculate the psd of the psd\n    fft = np.fft.fft(psd1/sum(psd1))\n    fft = fft[:len(fft)//2+1]\n    psd = np.real(fft * np.conj(fft))\n    return(np.sum(psd)/len(psd))\n", "def sort_mfccs(mfccs):\n    values = [spectra_of_spectra(mfcc) for mfcc in mfccs]\n    sorted_order = [i[0] for i in sorted(enumerate(values), key=lambda x:x[1], reverse = True)]\n    return([i for i in sorted_order], [values[i] for i in sorted_order])\n", "mfccs_1 = get_mfccs(sound_files_1)\nsort_mfccs(mfccs_1)\n", "1.wav\n2.wav\n3.wav\n4.wav\n5.wav\n6.wav\n7.wav\n8.wav\n9.wav\n10.wav\n12.wav\n11.wav\n13.wav\n", "mfccs_2 = get_mfccs(sorted_sound_files_2)\nsort_mfccs(mfccs_2)\n", "12.wav\n22.wav\n26.wav\n31.wav\n4.wav\n13.wav\n34.wav\n30.wav\n21.wav\n23.wav\n7.wav\n38.wav\n11.wav\n3.wav\n9.wav\n36.wav\n16.wav\n17.wav\n33.wav\n37.wav\n8.wav\n28.wav\n5.wav\n25.wav\n20.wav\n1.wav\n39.wav\n29.wav\n18.wav\n0.wav\n27.wav\n14.wav\n35.wav\n15.wav\n24.wav\n10.wav\n19.wav\n32.wav\n2.wav\n6.wav\n", "def diff_matrix(L, V, mfccs):\n    plt.figure()\n    plt.semilogy(V, '.')\n    for i in range(len(V)):\n        plt.text(i, V[i], mfccs[L[i]].name.split('.')[0], fontsize = 8)\n    plt.xticks([])\n    plt.ylim([0.001, 1])\n    plt.ylabel('Value')\n"], [], [], ["exchange = ccxt.binanceusdm({\n    'apiKey': ...,\n    'secret': ...,\n})\n", "exchange = ccxt.binance({\n    'apiKey': ...,\n    'secret': ...,\n    'options': {\n        'defaultType': 'future',\n    },\n})\n"], [], ["import datetime\n\ndt = datetime.time(0, 10, 0)\n\ndt.strftime('%H:%M:%S')\n"], ["django-admin startproject 'your project name'\n", "django-admin startproject 'your project name' .\n"], ["class User(object):\n    def __new__(cls, *args, **kwargs):\n        # do some logic with the initial parameters\n\n        return super().__new__(cls)\n"], ["rows = 5\ncols = 5\n\narr = [[0 for x in range(cols)] for x in range(rows)]\n", "[[0, 0, 0, 0, 0],\n [0, 0, 0, 0, 0],\n [0, 0, 0, 0, 0],\n [0, 0, 0, 0, 0],\n [0, 0, 0, 0, 0]]\n"], [], ["./audiocompare -f file1 -f file2\n./audiocompare -f file1 -d dir1\n./audiocompare -d dir1 -f file1\n./audiocompare -d dir1 -d dir2\n"], ["##**Simple program using map function to create dict**##\n    list1 = [\"hello\", \"goodbye\", \"hi\", \"how are you\", \"hi\"]\n    leng = (list(range(len(list1))))\n    integ_map = map(lambda key,val:(key,val) ,list1,leng)\n    print(dict(integ_map))\n"], ["def sms_encoding(data):\n\n    vowels = set(\"aeiouAEIOU\")\n    \n    words = data.split()\n    \n    encoded_words = []\n    \n    for i in range(0,len(words)):\n        vow_count = 0\n        cons_word = []\n        for x in words[i]:\n            if x in vowels:\n                vow_count =vow_count+1\n            elif x not in vowels:\n                cons_word.append(x)\n        if vow_count == len(words[i]):\n            encoded_words.append(words[i])\n        elif vow_count != len(words[i]):\n            encoded_words.append(\"\".join(cons_word))\n\n \n    encoded_msg = \" \".join(encoded_words)\n    \n    return encoded_msg\n\ndata=input(\"Kindly enter your message for sms encoding : \")\n\nprint(sms_encoding(data))\n"], ["import pandas as pd\n\npoints = pd.read_csv(\"test.csv\", delimiter=\" \", \n    skipinitialspace=True, skiprows=1, index_col=None, \n    parse_dates=[[0, 1]], names=[\"Date\", \"Time\", \"Latitude\", \"Longitude\"])\n\nprint(points)\n", "            Date_Time  Latitude  Longitude\n0 2021-09-12 23:13:00     44.63     -63.56\n1 2021-09-14 23:13:00     43.78     -62.00\n2 2021-09-16 23:14:00     44.83     -54.60\n"], [], ["public static void makeTower(List<Person> list, List<Person> tower, int index)\n{\n    //Base case\n    if(index==-1)\n    {\n        printTower(tower);\n        return;\n    }\n    if(tower.get(tower.size()-1).height > list.get(index).height && tower.get(tower.size()-1).weight > list.get(index).weight) {\n        tower.add(list.get(index));\n        //if it is possible to add this person to the tower, add him\n        makeTower(list, new ArrayList<>(tower), index - 1);\n    }\n        //OR, choose to exclude the person\n        tower.remove(list.get(index));\n        makeTower(list, new ArrayList<>(tower), index-1);\n\n}\n", "public class Person {\nint height;\nint weight;\npublic Person(int _h, int _w)\n{\n    this.height = _h;\n    this.weight = _w;\n}\n}\n", "public static void printTower(List<Person> t)\n{\n    for(Person p : t)\n        System.out.println(p.height+\" , \"+p.weight);\n    System.out.println(\"-----END-----\");\n}\n", "public static void main(String args[])\n{\n    List<Person> people = new ArrayList();\n    people.add(new Person(20,80));\n    people.add(new Person(10, 40));\n    people.add(new Person(80, 40));\n    Collections.sort(people, new Comparator<Person>()\n    {\n        @Override\n        public int compare(Person one, Person two)\n        {\n            return (one.height-two.height);\n        }\n    });\n  \n    List<Person> t = new ArrayList<>();\n    t.add(new Person(1000,1000));\n    makeTower(people, t, people.size()-1);\n}\n"], ["remote: -----> Installing requirements with pip\nremote:        Collecting click==8.0.3\nremote:          Downloading click-8.0.3-py3-none-any.whl (97 kB)\nremote:        Collecting Flask==2.0.2\nremote:          Downloading Flask-2.0.2-py3-none-any.whl (95 kB)\nremote:        Collecting gunicorn==20.1.0\nremote:          Downloading gunicorn-20.1.0-py3-none-any.whl (79 kB)\nremote:        Collecting itsdangerous==2.0.1\nremote:          Downloading itsdangerous-2.0.1-py3-none-any.whl (18 kB)\nremote:        Collecting Jinja2==3.0.3\nremote:          Downloading Jinja2-3.0.3-py3-none-any.whl (133 kB)\nremote:        Collecting MarkupSafe==2.0.1\nremote:          Downloading MarkupSafe-2.0.1-cp39-cp39-manylinux_2_5_x86_64.manylinux1_x86_64.manylinux_2_12_x86_64.manylinux2010_x86_64.whl (30 kB)\nremote:        Collecting Werkzeug==2.0.2\nremote:          Downloading Werkzeug-2.0.2-py3-none-any.whl (288 kB)\nremote:        Installing collected packages: MarkupSafe, Werkzeug, Jinja2, itsdangerous, click, gunicorn, Flask\nremote:        Successfully installed Flask-2.0.2 Jinja2-3.0.3 MarkupSafe-2.0.1 Werkzeug-2.0.2 click-8.0.3 gunicorn-20.1.0 itsdangerous-2.0.1\nremote: -----> Skipping Django collectstatic since the env var DISABLE_COLLECTSTATIC is set.\nremote: -----> Discovering process types\nremote:        Procfile declares types -> web\nremote: \nremote: -----> Compressing...\nremote:        Done: 62.3M\nremote: -----> Launching...\nremote:        Released v4\nremote:        https://flask-heru.herokuapp.com/ deployed to Heroku\nremote: \nremote: Verifying deploy... done.\nTo https://git.heroku.com/flask-heru.git\n * [new branch]      master -> master\n"], ["df.describe().applymap('{:,.2f}'.format)\n"], [], [], ["pd.read_fwf(file_name, [(0,16), (16,26), (26, 40)])\n", "               Time  Latitude  Longitude\n0  2021-09-12 23:13     44.63     -63.56\n1  2021-09-14 23:13     43.78     -62.00\n2  2021-09-16 23:14     44.83     -54.60\n", "with open('test.csv') as fdin, open('test2.csv', 'w') as fdout):\n    fdout.write(next(fdin)    # do not process the header line\n    for line in fdin:\n        fdout.write(line.replace(' ', '_', 1)\n\ndf = pd.read_csv('test2.csv', delim_whitespace=True,\n                 converters = {'Time': lambda x: x.replace('_', ' ')})\n", "               Time  Latitude  Longitude\n0  2021-09-12 23:13     44.63     -63.56\n1  2021-09-14 23:13     43.78     -62.00\n2  2021-09-16 23:14     44.83     -54.60\n"], ["with open(\"test.csv\",\"w\") as f:\n    f.write(\"\"\"Time              Latitude Longitude\n2021-09-12 23:13    44.63     -63.56\n2021-09-14 23:13    43.78     -62\n2021-09-16 23:14    44.83     -54.6\"\"\")\n", "import pandas as pd\n\n# ignore files headers, supply own, use multiple spaces as seperator\ndf = pd.read_csv(\"test.csv\", delimiter = \"   \", \n                 header=0, names = [\"Time\",\"Latitude\",\"Longitude\"])\n\nprint (df)\n", "               Time  Latitude  Longitude\n0  2021-09-12 23:13     44.63     -63.56\n1  2021-09-14 23:13     43.78     -62.00\n2  2021-09-16 23:14     44.83     -54.60\n"], ["import pandas as pd\n\npoints = pd.read_csv('test.csv', delim_whitespace=True)\n\npoints = points.assign(Time=pd.to_datetime(df.index + ' ' + df['Time'])) \\\n               .reset_index(drop=True)\n", ">>> points\n                 Time  Latitude  Longitude\n0 2021-09-12 23:13:00     44.63     -63.56\n1 2021-09-14 23:13:00     43.78     -62.00\n2 2021-09-16 23:14:00     44.83     -54.60\n"], [], ["def batch_generator(...):\n    ...\n    yield(...)\n", "generator_instance = batch_generator(...)\nmodel.fit(generator_instance, ...)\n"], ["import json\n\n#Load your json or manually declare your json here \nwith open('yourfile.json') as f:\n  Data= json.load(f) \n\n#This the main code for accesing the value and get the result \nTemp_Data=Data['data']\nresult_list=[]\nlistOfNumbers =[266,166,123,283]\nfor data,data_info in Temp_Data.items():\n    key_value=int(Temp_Data[data]['key'])\n    if key_value in listOfNumbers:\n        result_list.append(data)\nprint(result_list)\n"], ["['Aatrox', 'Akshan']\n"], ["from flatten_json import flatten\nimport pandas as pd\n\n\ndef flatten_nested_json_df(df):\n    df = df.reset_index()\n    s = (df.applymap(type) == list).all()\n    list_columns = s[s].index.tolist()\n    \n    s = (df.applymap(type) == dict).all()\n    dict_columns = s[s].index.tolist()\n\n    \n    while len(list_columns) > 0 or len(dict_columns) > 0:\n        new_columns = []\n\n        for col in dict_columns:\n            horiz_exploded = pd.json_normalize(df[col]).add_prefix(f'{col}.')\n            horiz_exploded.index = df.index\n            df = pd.concat([df, horiz_exploded], axis=1).drop(columns=[col])\n            new_columns.extend(horiz_exploded.columns) # inplace\n\n        for col in list_columns:\n            #print(f\"exploding: {col}\")\n            df = df.drop(columns=[col]).join(df[col].explode().to_frame())\n            new_columns.append(col)\n\n        s = (df[new_columns].applymap(type) == list).all()\n        list_columns = s[s].index.tolist()\n\n        s = (df[new_columns].applymap(type) == dict).all()\n        dict_columns = s[s].index.tolist()\n    return df\n\n", "json = json.dumps(data) \ndf = pd.json_normalize(data)\nflatten_nested_json_df(df)\n\n", " index      type             format version data.Aatrox.version  \\\n0       0  champion  standAloneComplex  12.2.1              12.2.1   \n0       0  champion  standAloneComplex  12.2.1              12.2.1   \n0       0  champion  standAloneComplex  12.2.1              12.2.1   \n0       0  champion  standAloneComplex  12.2.1              12.2.1   \n0       0  champion  standAloneComplex  12.2.1              12.2.1   \n..    ...       ...                ...     ...                 ...   \n0       0  champion  standAloneComplex  12.2.1              12.2.1   \n0       0  champion  standAloneComplex  12.2.1              12.2.1   \n0       0  champion  standAloneComplex  12.2.1              12.2.1   \n0       0  champion  standAloneComplex  12.2.1              12.2.1   \n0       0  champion  standAloneComplex  12.2.1              12.2.1   \n\n   data.Aatrox.id data.Aatrox.key data.Aatrox.name data.Aatrox.title  \\\n0          Aatrox             266           Aatrox  the Darkin Blade   \n0          Aatrox             266           Aatrox  the Darkin Blade   \n0          Aatrox             266           Aatrox  the Darkin Blade   \n0          Aatrox             266           Aatrox  the Darkin Blade   \n0          Aatrox             266           Aatrox  the Darkin Blade   \n..            ...             ...              ...               ...   \n0          Aatrox             266           Aatrox  the Darkin Blade   \n0          Aatrox             266           Aatrox  the Darkin Blade   \n0          Aatrox             266           Aatrox  the Darkin Blade   \n0          Aatrox             266           Aatrox  the Darkin Blade   \n0          Aatrox             266           Aatrox  the Darkin Blade   \n\n                                    data.Aatrox.blurb  ...  \\\n0   Once honored defenders of Shurima against the ...  ...   \n0   Once honored defenders of Shurima against the ...  ...   \n0   Once honored defenders of Shurima against the ...  ...   \n0   Once honored defenders of Shurima against the ...  ...   \n0   Once honored defenders of Shurima against the ...  ...   \n..                                                ...  ...   \n0   Once honored defenders of Shurima against the ...  ...   \n0   Once honored defenders of Shurima against the ...  ...   \n0   Once honored defenders of Shurima against the ...  ...   \n0   Once honored defenders of Shurima against the ...  ...   \n0   Once honored defenders of Shurima against the ...  ...   \n\n    data.Akshan.stats.crit  data.Akshan.stats.critperlevel  \\\n0                        0                               0   \n0                        0                               0   \n0                        0                               0   \n0                        0                               0   \n0                        0                               0   \n..                     ...                             ...   \n0                        0                               0   \n0                        0                               0   \n0                        0                               0   \n0                        0                               0   \n0                        0                               0   \n\n    data.Akshan.stats.attackdamage  data.Akshan.stats.attackdamageperlevel  \\\n0                               52                                     3.5   \n0                               52                                     3.5   \n0                               52                                     3.5   \n0                               52                                     3.5   \n0                               52                                     3.5   \n..                             ...                                     ...   \n0                               52                                     3.5   \n0                               52                                     3.5   \n0                               52                                     3.5   \n0                               52                                     3.5   \n0                               52                                     3.5   \n\n   data.Akshan.stats.attackspeedperlevel data.Akshan.stats.attackspeed  \\\n0                                      4                         0.638   \n0                                      4                         0.638   \n0                                      4                         0.638   \n0                                      4                         0.638   \n0                                      4                         0.638   \n..                                   ...                           ...   \n0                                      4                         0.638   \n0                                      4                         0.638   \n0                                      4                         0.638   \n0                                      4                         0.638   \n0                                      4                         0.638   \n\n   data.Aatrox.tags  data.Ahri.tags  data.Akali.tags  data.Akshan.tags  \n0           Fighter            Mage         Assassin          Marksman  \n0           Fighter            Mage         Assassin          Assassin  \n0           Fighter            Mage         Assassin          Marksman  \n0           Fighter            Mage         Assassin          Assassin  \n0           Fighter            Mage         Assassin          Marksman  \n..              ...             ...              ...               ...  \n0              Tank        Assassin         Assassin          Assassin  \n0              Tank        Assassin         Assassin          Marksman  \n0              Tank        Assassin         Assassin          Assassin  \n0              Tank        Assassin         Assassin          Marksman  \n0              Tank        Assassin         Assassin          Assassin  \n\n[8192 rows x 160 columns]\n", "listOfNumbers = ['266', '166', '123', '283']\ndf_sub = df[df['data.Aatrox.key'].isin(listOfNumbers)]\n"], ["import json\n\nkeys = [266, 166, 123, 283]\n\n# First, we need to parse the JSON string into a Python dictionary\n# Skip this if you already have a dictionary.\ndata = json.loads(raw_json)\n\n# Then map keys to names\nkey_to_id = {int(obj[\"key\"]): obj[\"id\"] for obj in data[\"data\"].values()}\n\n# Lastly, extract the names we want\nids = [key_to_id[key] for key in keys]\n"], [], ["listOfNumbers = [266, 166, 123, 283]\nnames = []\nfor value in jsonObj['data'].values():\n    if value['key'] in listOfNumbers:\n        names.append(value['name'])\n"], [], ["    from google.colab import drive\n    drive.mount('/content/drive')\n", "    !ls PATH OF YOUR DRIVE FOLDER\n"], [], ["import numpy as np\n\np = df['Price'].str\ndf['Price'] = np.where(p.startswith('.'),p.replace('.','',regex=True),\n                         np.where(p.endswith('.T'),p.replace('.T','',regex=True),p))\n", "            Brand  Price\n0     Honda Civic  22000\n1  Toyota Corolla  25000\n2      Ford Focus  27000\n3         Audi A4    TPX\n4          Suzuki   NKM1\n"], [], ["def sms_encoding(new_s):\n    encrypt_string = []\n    consonant_list = []\n    vowel_set = set(\"aeiouAEIOU\")\n\n    for word in range(0, len(new_s)):\n        v_letter = new_s[word]\n        if  v_letter in vowel_set:\n            encrypt_string.append(v_letter)\n\n        for letter in v_letter:\n            if letter not in vowel_set:\n                consonant = \" \".join(letter)\n                encrypt_string.append(consonant)\n        encrypt_string.append(\" \")     \n       \n    encrypt_string = \"\".join(encrypt_string)\n    print(encrypt_string)\n\ns = input(\"Enter a string \")\nnew_s = s.split()           \nsms_encoding(new_s)\n"], ["# method #2\nstart=time.time()\nw=np.arange(0, n+1, dtype=np.object)\nresult2 = (w**2*np.cumsum(w)).sum()\nprint('Fast method:', time.time()-start)\n", "start=time.time()\nfor i in range(100):\n    result1 = summation(0, n, mysum)\nprint('Slow method:', time.time()-start)\n\n# method #2\nstart=time.time()\nfor i in range(100):\n    w=np.arange(0, n+1, dtype=np.object)\n    result2 = (w**2*np.cumsum(w)).sum()\nprint('Fast method:', time.time()-start)\n", "Slow method: 0.06906533241271973\nFast method: 0.008007287979125977\n", "# method #3\nimport itertools\nstart=time.time()\nfor i in range(100):\n    result3 = sum(x*x * ysum for x, ysum in enumerate(itertools.accumulate(range(n+1))))\nprint('Faster, pure python:', (time.time()-start))\n", "Faster, pure python: 0.0009944438934326172\n", "# method #4\nstart=time.time()\nfor i in range(100):\n    w = np.arange(0, n+1, dtype=np.object)\n    result2 = (w*w*np.cumsum(w)).sum()\nprint('Fast method x*x:', time.time()-start)\n"], ["def counter(start, stop):\n    x = start\n    if x> stop:\n        return_string = \"Counting down: \"\n        while x >= stop:\n            return_string += str(x)\n            if x >= stop:\n                return_string += \",\"\n            x-=1\n   else:\n        return_string = \"Counting up: \"\n        while x <= stop:\n           return_string += str(x)\n        \n            if x <= stop:\n                return_string += \",\"\n            x+=1\n    return return_string\n"], ["pip install --upgrade pip\n"], ["condition = 0\nif (expression)==(expression):\n    condition = 1\nelif (expression)==(expression):\n    condition = 2\nelif (expression)==(expression):\n    condition = 3\n\nif condition:\n   # perform common actions here\n   if condition == 1:\n       print(f\"Condition met was condition ONE!\")\n", "if (expression)==(expression):\n    # case 1 code here\n    common_code()\nelif (expression)==(expression):\n    # case 2 code here\n    common_code()\nelif (expression)==(expression):\n    # case 3 code here\n    # Maybe this one does not need to call common_code()? This solution is fairly flexible.\n"], ["if K.image_data_format() == 'th':\n"], ["class Test:\n    my_string: str\n\n    def__init__(self, target_string):\n        self.my_string = target_string\n    \n    def get_string(self):\n        return self.my_string\n", "my_class = Test('Hello World')\nthe_string = my_class.get_string()\nprint(the_string) # Prints 'Hello World'\n# Or like this \nprint(my_class.my_string) # Prints 'Hello World' as well\n", "class Test:\n    my_string: str\n    \n    # You could use a dunder init method like this\n    def __init__(self, target_string):\n        \"\"\" This is the function that is ran upon Invoking the \n            class as an instance \"\"\"\n        self.my_string = target_string\n\n    # Or you could not use the dunder init method and just have a class method like this. \n    # This way of doing so is not recommended though\n    def set_string(self, target_string):\n        \"\"\" Sets class instance variable 'mystring' to that of the 'target_string' parameter \"\"\"\n        self.my_string = target_string\n\n# Then to set and retrieve the string from the class instance\n\n# If using the __init__ method\ntester_cls = Test('I am the target string')\n\nprint(tester_cls.my_string) # Prints 'I am the target string'\n\n# or if using the set_string method\ntester_cls = Test()\ntester_cls.set_string('I am the target string')\n\nprint(tester_cls.my_string) # Prints 'I am the target string'\n\n"], ["fig = ...\nfig.data[0].colorbar.title = \"Title Here\"\n"], ["class Test:\n    def __init__(self, target_string):\n        self.string = target_string\n    \n    def getStr(self):\n        return self.target_string\n", "from Moduletest import Test\n\nx = Test(\"Hello\")\nprint(x.getStr) #output: Hello\n"], ["1:  first\n2:  first\n3:  second\n4:  second\n5:  second\n"], [" `class Test:`\n\n      `def __init__(self,arg1)`\n\n          `self.var1 = arg1`\n"], ["class Test:\n    zeta = None\n    def __init__(self):\n        self.string = None\n\n    def set_string(self, target_string):\n        self.string = target_string\n        print(self.string)\n        Test.zeta = self.string\n\nt = Test()\nt.set_string('abc')\n"], ["print(str(datetime.timedelta(minutes=10)).zfill(8))\n\n\"00:10:00\"\n", "print(str(datetime.timedelta(minutes=1445)).zfill(8))\n\n\"1 day, 0:05:00\"\n"], ["def human_format(num):\n    magnitude = 0\n    while abs(num) >= 1000:\n        magnitude += 1\n        num /= 1000.0\n    # add more suffixes if you need them\n    return '%.2f%s' % (num, ['', 'K', 'Million', 'Trillion', 'G', 'P'][magnitude])\n", "df.describe()\n           sales        profile\ncount   3.504600e+04    35046.000000\nmean    1.132153e+07    613.877191\nstd     2.622250e+08    3862.190022\nmin    -3.702949e+09    -16202.130000\n25%     5.221783e+03    7.000000\n50%     3.110371e+04    33.000000\n75%     2.131200e+05    135.000000\nmax     2.621423e+10    92930.370000\n\n", "df2 = df.describe() #creating a diff. dataframe\nfor x in df2:\n  df2[x] =df2[x].apply(human_format)\n\ndf2\n        total_amounts   volume_mt\ncount   35.05K           35.05K\nmean    11.32Million     613.88\nstd     262.22Million    3.86K\nmin     -3.70Trillion    -16.20K\n25%     5.22K            7.00\n50%     31.10K           33.00\n75%     213.12K          135.00\nmax     26.21Trillion    92.93K\n"], [], ["from operator import itemgetter\nfrom itertools import groupby\n\nvtkey = itemgetter('VehicleType')\ncdkey = itemgetter('CreationDate')\n\nlatest = [\n    # Get latest from each group.\n    max(vs, key = cdkey)\n    # Sort and group by VehicleType.\n    for g, vs in groupby(sorted(vehicles, key = vtkey), vtkey)\n]\n"], ["VehicleLatest = [\n    max(\n        filter(lambda _: _[\"VehicleType\"] == t, VehicleList), \n        key=lambda _: _[\"CreationDate\"]\n    ) for t in {_[\"VehicleType\"] for _ in VehicleList}\n]\n", "print(VehicleLatest)\n# [{'id': '2', 'VehicleType': 'Bike', 'CreationDate': datetime.datetime(2021, 12, 15, 11, 8, 21, 612000)}, {'id': '3', 'VehicleType': 'Truck', 'CreationDate': datetime.datetime(2021, 9, 13, 10, 1, 50, 350095)}, {'id': '5', 'VehicleType': 'Car', 'CreationDate': datetime.datetime(2021, 12, 21, 10, 1, 50, 600095)}]\n"], [], ["import pandas as pd\n\ndf = pd.DataFrame(VehicleList)\ndf.sort_values('CreationDate', ascending=False).head(3).to_dict(orient='records')\n"], ["VehicleList.sort(key=lambda x: (x.get('VehicleType'), x.get('CreationDate')))\nout = list(dict(zip([item.get('VehicleType') for item in VehicleList], VehicleList)).values())\n", "[{'id': '2',\n  'VehicleType': 'Bike',\n  'CreationDate': datetime.datetime(2021, 12, 15, 11, 8, 21, 612000)},\n {'id': '5',\n  'VehicleType': 'Car',\n  'CreationDate': datetime.datetime(2021, 12, 21, 10, 1, 50, 600095)},\n {'id': '3',\n  'VehicleType': 'Truck',\n  'CreationDate': datetime.datetime(2021, 9, 13, 10, 1, 50, 350095)}]\n"], ["latest_dict = {}\n\nfor vehicle in VehicleList:\n    t = vehicle['VehicleType']\n    if t not in latest_dict or vehicle['CreationDate'] > latest_dict[t]['CreationDate']:\n        latest_dict[t] = vehicle\n\nlatestVehicles = list(latest_dict.values())\n"], ["from itertools import groupby\n\n# entries sorted according to the key we wish to groupby: 'VehicleType'\nVehicleList = sorted(VehicleList, key=lambda x: x[\"VehicleType\"])\n\nlatestVehicles = []\n\n# Then the elements are grouped.\nfor k, v in groupby(VehicleList, lambda x: x[\"VehicleType\"]):\n    # We then append to latestVehicles the 0th entry of the\n    # grouped elements after sorting according to the 'CreationDate'\n    latestVehicles.append(sorted(list(v), key=lambda x: x[\"CreationDate\"], reverse=True)[0])\n"], ["def combine_lists(list1, list2):\n    Jamies_list.reverse()\n    final_list = Drews_list + Jamies_list\n    return final_list\nJamies_list = [\"Alice\", \"Cindy\", \"Bobby\", \"Jan\", \"Peter\"]\nDrews_list = [\"Mike\", \"Carol\", \"Greg\", \"Marcia\"]\nprint(combine_lists(Jamies_list, Drews_list))\n"], ["from keras.optimizers import SGD\n", "from keras.optimizers import gradient_descent_v2\n", "sgd = gradient_descent_v2.SGD(...)\n", "from tensorflow.keras.optimizers import SGD\n"], [], [], ["`# First, get the folder ID by querying by mimeType and name\nfolderId = drive.files().list(q = \"mimeType = 'application/vnd.google-apps.folder' and name = 'thumbnails'\", pageSize=10, fields=\"nextPageToken, files(id, name)\").execute()\n# this gives us a list of all folders with that name\nfolderIdResult = folderId.get('files', [])\n# however, we know there is only 1 folder with that name, so we just get the id of the 1st item in the list\nid = folderIdResult[0].get('id')\n\n# Now, using the folder ID gotten above, we get all the files from\n# that particular folder\nresults = drive.files().list(q = \"'\" + id + \"' in parents\", pageSize=10, fields=\"nextPageToken, files(id, name)\").execute()\nitems = results.get('files', [])\n\n# Now we can loop through each file in that folder, and do whatever (in this case, download them and open them as images in OpenCV)\nfor f in range(0, len(items)):\n    fId = items[f].get('id')\n    fileRequest = drive.files().get_media(fileId=fId)\n            fh = io.BytesIO()\n            downloader = MediaIoBaseDownload(fh, fileRequest)\n            done = False\n            while done is False:\n                status, done = downloader.next_chunk()\n    fh.seek(0)\n    fhContents = fh.read()\n    \n    baseImage = cv2.imdecode(np.fromstring(fhContents, dtype=np.uint8), cv2.IMREAD_COLOR)\n"], ["import re\ndef check_time(text):\n    pattern = r'[1-9][0-2]?:[0-5][0-9] ?[apAP][mM]'\n    result = re.search(pattern, text)\n    return result != None\n\nprint(check_time(\"12:45pm\")) # True\nprint(check_time(\"9:59 AM\")) # True\nprint(check_time(\"6:60am\")) # False\nprint(check_time(\"five o'clock\")) # False\n"], [], ["from cryptography.hazmat.primitives.serialization import load_pem_public_key\nfrom cryptography.hazmat.backends import default_backend\n\npem_key = load_pem_private_key(key_data, backend=default_backend())\njwt.encode({...}, key = pem_key, algorithm = 'RS512')\n"], ["def function5():\n    inner_sum = float()\n    result = float()\n\n    for x in range(0, n + 1):\n        inner_sum += x\n        result += x ** 2 * inner_sum\n        \n    return result\n", "from numba import jit\nfunction5 = jit(nopython=True)(function5)\n"], [], [], [], [], ["df[[\"A\"]].describe().applymap(lambda x: f\"{x:0.3f}\")\n"], [], ["result = ((((12 * n + 45) * n + 50) * n + 15) * n - 2) * n // 120\n", "from fractions import Fraction\nimport math\nfrom functools import reduce\n\ndef naive(n):\n    return sum(x**2 * sum(range(x+1)) for x in range(n+1))\n\ndef lcm(ints):\n    return reduce(lambda r, i: r * i // math.gcd(r, i), ints)\n\ndef polynomial(xys):\n    xs, ys = zip(*xys)\n    n = len(xs)\n    A = [[Fraction(x**i) for i in range(n)] for x in xs]\n    b = list(ys)\n    for _ in range(2):\n        for i0 in range(n):\n            for i in range(i0 + 1, n):\n                f = A[i][i0] / A[i0][i0]\n                for j in range(i0, n):\n                    A[i][j] -= f * A[i0][j]\n                b[i] -= f * b[i0]\n        A = [row[::-1] for row in A[::-1]]\n        b.reverse()\n    coeffs = [b[i] / A[i][i] for i in range(n)]\n    denominator = lcm(c.denominator for c in coeffs)\n    coeffs = [int(c * denominator) for c in coeffs]\n    horner = str(coeffs[-1])\n    for c in coeffs[-2::-1]:\n        horner += ' * n'\n        if c:\n            horner = f\"({horner} {'+' if c > 0 else '-'} {abs(c)})\"\n    return f'{horner} // {denominator}'\n\nprint(polynomial((x, naive(x)) for x in range(6)))\n", "((((12 * n + 45) * n + 50) * n + 15) * n - 2) * n // 120\n"], ["$ python3 -m pip install --upgrade pyjwt[crypto]\n...\nNote: you may need to restart the kernel to use updated packages.\n"], [], ["conda create create --name tf\nconda activate tf\nconda install numpy ~=1.18.5\npip install tensorflow-macos\n"], [], ["import re\ndef check_time(text):\n  pattern = r'^1[0-2]|[1-9]:[0-5][0-9](\\s?[APap][Mm])$'\n  result = re.search(pattern, text)\n  return result != None\n\nprint(check_time(\"12:45pm\")) # True\nprint(check_time(\"9:59 AM\")) # True\nprint(check_time(\"6:60am\")) # False\nprint(check_time(\"five o'clock\")) # False\n"], [" MIDDLEWARE_CLASSES = [\n    'django.middleware.security.SecurityMiddleware',\n    'django.contrib.sessions.middleware.SessionMiddleware',\n    'django.middleware.common.CommonMiddleware',\n    'django.middleware.csrf.CsrfViewMiddleware',\n    'django.contrib.auth.middleware.AuthenticationMiddleware',\n    # 'django.contrib.auth.middleware.SessionAuthenticationMiddleware',\n    'django.contrib.messages.middleware.MessageMiddleware',\n    'django.middleware.clickjacking.XFrameOptionsMiddleware',\n]\n", "MIDDLEWARE = [\n    'django.contrib.sessions.middleware.SessionMiddleware',\n    'django.contrib.messages.middleware.MessageMiddleware',\n    'django.contrib.auth.middleware.AuthenticationMiddleware',  \n]\n"], ["import datetime\nfrom datetime import date\n\ndef Calc(): \nborn_date = \"02-08-1999\"\nborn = datetime.strptime(born_date, '%d-%m-%Y')\ntoday = date.today()\ncurr_month = today.month\nborn_month = born.month\n\ncurr_day   = today.day\nborn_day   = born.day\n\nif born_month > curr_month:\n    month_diff = born_month - curr_month\nelse :\n    month_diff = curr_month - born_month\n    \n\nif born_day > curr_day:\n    day_diff = born_day - curr_day\nelse :\n    day_diff = curr_day - born_day\n\n    \nage = today.year - born.year\nprint(str(age))\nprint(month_diff)\nprint(str(day_diff))\nreturn \" Your Age  : \" + str(age) +\"  Years   \" + str(month_diff) +  \"  Months  and \" + str(day_diff) + \"  Days\"\n"], [], ["!pip install pandas_profiling  # Run this from Jupytor notebook Ignore the warnings if any \nfrom pandas_profiling import ProfileReport #restart the kernel if throws error\nProfileReport(df)  \n"], ["sudo apt install libssl-dev\nsudo apt install libncurses5-dev\nsudo apt install libsqlite3-dev\nsudo apt install libreadline-dev\nsudo apt install libtk8.6\nsudo apt install libgdm-dev\nsudo apt install libdb4o-cil-dev\nsudo apt install libpcap-dev\n"], [], ["df[[\"A\"]].describe().format('{:.3f}')\n"], [], [], ["charstodelete = 'azertyuiopqsdfghjklmwxcvbn'\nfilename = '/content/drive/MyDrive/Colab Notebooks/ArabicKidsStories.txt'\nfile = open(filename,'r')\ntext = file.read()\nfile.close()\noutput_text = ''\n\n# It's all about this\nfor char in text:\n    if char in charstodelete or char in chartodelete.upper():\n        continue\n    else:\n        output_text += char\n\n\noutputfile = open('/content/drive/MyDrive/Colab Notebooks/output.txt','w')\noutputfile.write(output_text)\noutputfile.close()\n"], ["text = re.sub('[a-zA-Z0-9_]|#|http\\S+', '', text)\n"], ["from keras.optimizers import gradient_descent_v2 \n", "from keras.optimizers import SGD\n"], ["#---- data\nfrom pycaret.datasets import get_data\ndataset = get_data('diamond')\n\n#---- model pycaret\nfrom pycaret.regression import *\nexp_reg101 = setup(data = dataset, target = 'Price', session_id=123, \n                   remove_multicollinearity = True, multicollinearity_threshold = 0.95) \n\nlightgbm = create_model('lightgbm')\n\n#---- plot\nfrom yellowbrick.regressor import ResidualsPlot\n\nX_train, X_test, y_train, y_test = get_config('X_train'), get_config('X_test'), get_config('y_train'), get_config('y_test')\n\nvisualizer = ResidualsPlot(lightgbm) # regression model\nvisualizer.fit(X_train, y_train) # Fit the training data to the visualizer\nvisualizer.score(X_test, y_test) # Evaluate the model on the test data\nvisualizer.poof(outpath=\"ResidualsPlot.pdf\") # VECTOR .pdf .eps .svg, RASTER .png .jpg .tif\n#visualizer.poof()  # Finalize and render the figure\n\n#---- file extensions supported\nimport matplotlib.pyplot as plt\nplt.figure().canvas.get_supported_filetypes()\n"], [], ["def combine_lists(list1, list2):\n    for n in range(1, len(list1)+1):\n        list2.append(list1[-n])\n    return list2\n\nJamies_list = [\"Alice\", \"Cindy\", \"Bobby\", \"Jan\", \"Peter\"]\nDrews_list = [\"Mike\", \"Carol\", \"Greg\", \"Marcia\"]\nprint(combine_lists(Jamies_list, Drews_list))\n"], ["from inspect import signature\n\nprint(signature(object.__new__))\nprint('------------------------------')\nprint(signature(object.__init__))\nprint('------------------------------')\nobject(42)\n", "(*args, **kwargs)\n------------------------------\n(self, /, *args, **kwargs)\n------------------------------\nTraceback (most recent call last):\n  File \"<>\", line 7, in <module>\n    object(42)\nTypeError: object() takes no arguments\n"], ["python -m pip install pyqt5\npip3 install pyqt5\npython -m pip.py install pyqt5\n"], ["class Foo:\n    def __new__(cls, a, b):\n        print(\"Creating Instance\")\n        instance = super(Foo, cls).__new__(cls)\n        return instance\n\n\n    def __init__(self, a, b):\n        self.a = a\n        self.b = b\n\nfoo_1 = Foo(a=1, b=2)\nfoo_2 = Foo(a=1, b=3)\n", "class FooSingleton:\n    _instances = {}\n\n    def __new__(cls, a, b):\n        if cls not in cls._instances:\n            print('creating new FooSingleton instance')\n            cls._instances[cls] = super(FooSingleton, cls).__new__(cls)\n        else:\n            print('using FooSingleton instance')\n        return cls._instances[cls]\n\n    def __init__(self, a, b):\n        self.a = a\n        self.b = b\n\nfoo_s1 = FooSingleton(a=1, b=2)\nfoo_s2 = FooSingleton(a=1, b=3)\n"], ["git add .\ngit commit -am \"make it better\"\ngit push heroku master\n"], [">>> res = ((element1 in lst[2] and 1) or\n...        (element2 in lst[2] and 2) or\n...        (3 in lst[2] and 3))\n>>> if res:\n...     print('condition', res, 'succeeded')\n...\ncondition 2 succeeded\n", "if (res := (element1 in lst[2] and 1) or\n           (element2 in lst[2] and 2) or\n           (3 in lst[2] and 3)):\n    print('condition', res, 'succeeded')\n"], ["a = element1 in list[2]\nb = element2 in list[2]\nc = 3 in list[2]\nif a or b or c:\n    print(f\"{element1} {'in' if a else 'not in'} list[2]\")\n    print(f\"{element2} {'in' if b else 'not in'} list[2]\")\n    print(f\"3 {'in' if c else 'not in'} list[2]\")\n", "if (a := (element1 in list[2])) or \\\n   (b := (element2 in list[2])) or \\\n   (c := (3 in list[2])):\n    try:\n        print(f\"{element1} {'in' if a else 'not in'} list[2]\")\n        print(f\"{element2} {'in' if b else 'not in'} list[2]\")\n        print(f\"3 {'in' if c else 'not in'} list[2]\")\n    except NameError:\n        pass\n", "test = [element1, element2, 3]\nx = [t in list[2] for t in test]\nif any(x):\n    for t, r in zip(test, x):\n        print(f\"{t} {'in' if r else 'not in'} list[2]\")\n", "test = {element1, element2, 3}\ns2 = set(list[2])\nx = test & s2\nif x:\n    print('{x!r} in list[2]')\n    if y := test - x:\n        print('{y} not in list[2]')\n"], ["import logging\n\ndef elem_in_list(elem, list):\n    if elem in list[2]:\n        logging.info(f\"{elem} is in list\")\n        return True\n    logging.info(f\"{elem} is not in list\")\n    return False\n\nif elem_in_list(element1, list) or elem_in_list(element2, list) or elem_in_list(element3, list):\n    # do more if statements\nelse:\n    print(something)\n"], ["list1=[list2,list2,list2]\nlist2=[3,4,6]\nlist3=[4,6,7]\nelement1=0\nelement2=0\n\nif element1 in list1[2] or element2 in list1[2] or 3 in list1[2]:\n  dict_conditions={\"Condition 1\":str(element1 in list1[2]),\"Condition 2\":str(element2 in list1[2]) ,\"Condition 3\":str(3 in list1[2])}\n  print(dict_conditions)\n", "{'Condition 1': 'False', 'Condition 2': 'False', 'Condition 3': 'True'}\n"], ["if element1 in list[2] or element2 in list[2] or 3 in list[2]:\n    if element1 in list[2]:\n        print('element1 found in list[2]')\n    if element2 in list[2]:\n        print('element1 found in list[2]')\n    if element3 in list[2]:\n        print('element1 found in list[2]')\n    #=== do some more if-statements...\nelse:\n   #== print something...\n"], ["\"layers\": [\"arn:aws:lambda:<region>:<account_id>:layer:<layer_name>:<layer_version>\"]\n"], ["RUN apk add --update --no-cache --virtual .tmp gcc libc-dev linux-headers\nRUN apk add --no-cache jpeg-dev zlib-dev\nRUN apk del .tmp\n", "COPY ./requirements.txt /requirements.txt\nRUN apk add --update --no-cache --virtual .tmp gcc libc-dev linux-headers\nRUN apk add --no-cache jpeg-dev zlib-dev\nRUN pip install -r /requirements.txt\nRUN apk del .tmp\n"], ["heroku config:set DISABLE_COLLECTSTATIC=1\n"], [], [], ["import plotly.graph_objects as go\nfig = go.Figure(\n    data=[go.Bar(y=[2, 1, 3])],\n    layout_title_text=\"A Figure Displayed with the 'colab' Renderer\"\n)\nfig.show(renderer=\"colab\")\n"], [], ["def counter(start, stop):\n    x = start\n    if start > stop:\n        return_string = \"Counting down: \"\n        while x >= stop:\n            return_string += str(x)\n            if x != stop:\n                return_string += \",\"\n            x = x - 1\n\n    else:\n        return_string = \"Counting up: \"\n    while x <= stop:\n        return_string += str(x)\n        if x != stop:\n            return_string += \",\"\n        x = x + 1\n\n    return return_string\n"], ["def counter(start, stop):\n    x = start\n    if start > stop:\n        return_string = \"Counting down: \"\n        while x >= stop:\n            return_string += str(x)\n                if x != stop :\n                    return_string += \",\"\n                x = x - 1\n        \n    else:\n         return_string = \"Counting up: \"\n         while x <= stop:\n             return_string += str(x)\n             if x != stop:\n                   return_string += \",\"\n             x = x + 1\n        \n    return return_string\n"], [], [], [], ["app.py\nProcfile\nrequirements.txt\nruntime.txt\n"], [], [], [], ["from tendo import singleton\ncurrent_instance = singleton.SingleInstance()\n"], ["import java.util.*;\npublic class CircusTower {\nprivate class HeightWeight implements Comparable<HeightWeight>{\n    int height;\n    int weight;\n    HeightWeight(int height, int weight) {\n        this.height = height;\n        this.weight = weight;\n    }\n    @Override\n    public int compareTo(HeightWeight other) {\n        if(this.height == other.height){\n            return this.weight - other.weight;\n        }else{\n            return this.height - other.height;\n        }\n    }\n}\npublic static void main(String[] args) {\n    int[][] arr = {{1,1},{1,7},{1,9},{2,2},{2,6},{3,3},{3,5},{4,4}};\n    CircusTower ct = new CircusTower();\n   System.out.println(ct.getMaxHeightTower(arr));\n}\n\npublic int getMaxHeightTower(int[][] arr){\n    List<HeightWeight> list = new ArrayList<>();\n    int i =0;\n    for(i =0; i<arr.length; i++){\n        list.add(new HeightWeight(arr[i][0], arr[i][1]));\n    }\n    Collections.sort(list);\n    Map<Integer, Integer> map = new HashMap<>();\n    for(i =0; i<list.size(); i++){\n        HeightWeight current = list.get(i);\n        if(!map.containsKey(current.height)){\n            map.put(current.height, current.weight);\n        }\n    }\n    int[] nums = map.values().stream().mapToInt(Integer::intValue).toArray();\n    return getLIS(nums);\n}\n\npublic int getLIS(int[] nums){\n\n    int _l = nums.length;\n    int[] out = new int[_l];\n    int mx = Integer.MIN_VALUE;\n\n    /*\n    we initialize the array with ones because\n    a single character has a subsequence of length one\n    */\n    Arrays.fill(out, 1);\n\n    for(int i = 0; i < _l; i++)\n\n        for(int j = i + 1; j < _l; j++){\n            /*\n            every iteration, all we're doing is checking what is the longest\n            increasing subsequence so far, till this point\n            */\n            if(nums[j] > nums[i])\n                out[j] = Math.max(out[j], out[i] + 1);\n\n            /*\n            we keep checking for a max value because the longest\n            subsequence could exist before the end of the string\n            */\n            mx = Math.max(out[j], mx);\n        }\n\n    return mx == Integer.MIN_VALUE ? 1 : mx;\n}\n"], ["def group_list(group, users):\n  members = \", \".join(users)\n  return f\"{group}: {members}\"\n"], ["# Import PyDrive and associated libraries.\n# This only needs to be done once per notebook.\nfrom pydrive.auth import GoogleAuth\nfrom pydrive.drive import GoogleDrive\nfrom google.colab import auth\nfrom oauth2client.client import GoogleCredentials\n\n# Authenticate and create the PyDrive client.\n# This only needs to be done once per notebook.\nauth.authenticate_user()\ngauth = GoogleAuth()\ngauth.credentials = GoogleCredentials.get_application_default()\ndrive = GoogleDrive(gauth)\n\n# List .txt files in the root.\n#\n# Search query reference:\n# https://developers.google.com/drive/v2/web/search-parameters\nlisted = drive.ListFile({'q': \"title contains 'CV'\"}).GetList()\nfor file in listed:\n    print('title {}, id {}'.format(file['title'], file['id']))\n\n\n"], [], ["FROM amazonlinux:2.0.20200207.1\n\nRUN cd /opt && \\\n    yum install -y gcc openssl-devel bzip2-devel libffi-devel wget tar gzip make && \\\n    wget https://www.python.org/ftp/python/3.8.2/Python-3.8.2.tgz && \\\n    tar xzf Python-3.8.2.tgz && \\\n    cd Python-3.8.2 && \\\n    ./configure --enable-optimizations && \\\n    make altinstall && \\\n    rm -f /opt/Python-3.8.2.tgz && \\\n    echo \"alias python3=python3.8\" > ~/.bashrc\n"], [], [], [], [], ["curl https://bootstrap.pypa.io/get-pip.py | sudo python3.7\n"], ["import ccxt\nimport pandas as pd\n\nbinance = ccxt.binance()\nbinance.options = {'defaultType': 'delivery', 'adjustForTimeDifference': True}\n\nsecurities = pd.DataFrame(binance.load_markets()).transpose()\nsecurities\n", "import ccxt\nimport pandas as pd\n\nbinance = ccxt.binance({'option': {'defaultType': 'delivery', 'adjustForTimeDifference': True}})\n\nsecurities = pd.DataFrame(binance.load_markets()).transpose()\nsecurities\n"], [], ["\\A\\.|\\.T\\Z\n", "import pandas as pd\n\ncars = {'Brand': ['Honda Civic','Toyota Corolla','Ford Focus','Audi A4','Suzuki'],\n        'Price': ['22000.T','25000.T','27000','.TPX','.NKM1']\n        }\n\ndf = pd.DataFrame(cars, columns = ['Brand', 'Price'])\ndf['Price'] = df['Price'].replace(r\"\\A\\.|\\.T\\Z\", \"\", regex=True)\nprint(df)\n", "            Brand  Price\n0     Honda Civic  22000\n1  Toyota Corolla  25000\n2      Ford Focus  27000\n3         Audi A4    TPX\n4          Suzuki   NKM1\n"], ["df['Price'] = df['Price'].str.replace(r'^(?:\\.)?(.*?)(?:\\.T)?$', r'\\g<1>')\n", "df['Price'] = df['Price'].str.extract(r'^(?:\\.)?(.*?)(?:\\.T)?$', expand=False)\n", "            Brand  Price\n0     Honda Civic  22000\n1  Toyota Corolla  25000\n2      Ford Focus  27000\n3         Audi A4    TPX\n4          Suzuki   NKM1\n"], ["In [178]: import numpy as np\n\nIn [179]: conds = [df.Price.str.endswith('.T'), df.Price.str.startswith('.')]\nIn [182]: choices = [df.Price.str.replace('.T', '', regex=True), df.Price.str.replace('.', '', regex=True)]\n\nIn [189]: df.Price = np.select(conds, choices, default=df.Price)\n\nIn [190]: df\nOut[190]: \n            Brand  Price\n0     Honda Civic  22000\n1  Toyota Corolla  25000\n2      Ford Focus  27000\n3         Audi A4    TPX\n4          Suzuki   NKM1\n"], [], ["df = pd.DataFrame({\"col1\":[\"3.45\"]})\ndf[\"unescaped\"] = df.col1.replace(r'.','X',regex=True)\ndf[\"escaped\"] = df.col1.replace(r'\\.','X',regex=True)\nprint(df)\n", "   col1 unescaped escaped\n0  3.45      XXXX    3X45\n"], ["import time\nfrom selenium import webdriver\nbrowser = webdriver.Chrome(\"/usr/lib/chromium-browser/chromedriver\")\nbrowser.get(\"https://www.instagram.com/accounts/login/\")\ntime.sleep(4) #so you let the webpage load\nbrowser.find_element_by_name(\"username\").send_keys(\"blablabla\")\n"], ["def combine_lists(list1, list2):\n  # Generate a new list containing the elements of list2\n  # Followed by the elements of list1 in reverse order\n  list1.reverse()\n  return(list2 + list1)\n\nJamies_list = [\"Alice\", \"Cindy\", \"Bobby\", \"Jan\", \"Peter\"]\nDrews_list = [\"Mike\", \"Carol\", \"Greg\", \"Marcia\"]\n\nprint(combine_lists(Drews_list, Jamies_list))\n"], [], [], ["pip install -U numpy==1.18.5\n"], ["import keras \n", "import tensorflow.keras as keras\n"], [], [], [], [], ["celery -A main worker\n", "docker run --name flower -p 5555:5555 mher/flower:0.9.5 flower --broker=redis://redis-address\n"], ["def order_fillers(order,k):\n    if len(order)==0 or k==0:\n        return 0\n    order.sort()\n    max_orders=0\n    for item in order:\n        if k<=0:\n            return max_orders\n        if item<=k:\n            max_orders+=1\n            k-=item\n    return max_orders\n"], [], [], [], ["import google.auth\n\n_, project_id = google.auth.default()\nprint(project_id)\n"], ["$ heroku config:set DISABLE_COLLECTSTATIC=1\n", "$ git push heroku main\n"], [], [], ["cd pyshop\n", "python manage.py runserver\n"], ["django-admin startproject pyshop .\n"], [], ["array1 = numpy.array([1.1, 2.2, 3.3])\narray2 = numpy.array([1, 2, 3])\ndiffs = array1 - array2 # array([ 0.1,  0.2,  0.3])\nsimilarity_coefficient = np.sum(diffs)\n"], ["function filledOrders(order, k) {\n    // Write your code here\n let count = 0; let total=0;\n  const ordersLength = order.length;\n  const sortedOrders = order.sort(function(a,b) {\n  return (+a) - (+b);\n});\n\n  for (let i = 0; i < ordersLength; i++) {\n    if (total + sortedOrders[i] <= k) {\n        // if all orders able to be filled\n      if (total <= k && i === ordersLength - 1) return ordersLength;\n\n      total += sortedOrders[i];\n      count++;\n    } else {\n      return count;\n    }\n  }\n}\n"], ["import os, sys\n\ndef max_fulfilled_orders(order_arr, k):\n    \n    # track the max no.of orders in the arr.\n    max_num = 0\n    # order count, can be fulfilled.\n    order_count = 0\n    \n    # iter over order array\n    for i in range(0, len(order_arr)):\n        # if remain value < 0 then\n        if k - order_arr[i] < 0:\n            # add the max no.of orders to total\n            k += max_num\n            if order_count > 0:\n                # decrease order_count\n                order_count -= 1\n                \n        # if the remain value >= 0\n        if(k - order_arr[i] >= 0):\n            # subtract the current no.of orders from total.\n            k -= order_arr[i]\n            # increase the order count.\n            order_count += 1\n            # track the max no.of orders till the point.\n            if order_arr[i] > max_num:\n                max_num = order_arr[i]\n\n    return order_count\n\n\nprint(max_fulfilled_orders([3, 2, 1], 0))  # Out: 0\nprint(max_fulfilled_orders([3, 2, 1], 1))  # Out: 1\nprint(max_fulfilled_orders([3, 1, 1], 2))  # Out: 2\nprint(max_fulfilled_orders([3, 2, 4], 9)) # Out: 3\nprint(max_fulfilled_orders([3, 2, 1, 4], 10)) # Out: 4\n"], ["from selenium import webdriver\nfrom selenium.webdriver.common.keys import Keys\nfrom selenium.webdriver.support.ui import WebDriverWait\nfrom selenium.webdriver.common.by import By\nfrom selenium.webdriver.support import expected_conditions as EC\n\ndriver = webdriver.Chrome('C:\\\\Users\\\\gassp\\\\OneDrive\\\\Namizje\\\\Python.projects\\\\chromedriver.exe')\nurl = 'https://www.google.com/maps/'\n\ndriver.get(url)\n\nWebDriverWait(driver, 10).until(EC.frame_to_be_available_and_switch_to_it((By.XPATH, '//*[@id=\"consent-bump\"]/div/div[1]/iframe')))\nagree = WebDriverWait(driver, 10).until(EC.element_to_be_clickable((By.XPATH, '//*[@id=\"introAgreeButton\"]/span/span'))) \nagree.click()\n\n#back to the main page\ndriver.switch_to_default_content()\n\n\nWebDriverWait(driver, 10).until(EC.element_to_be_clickable((By.XPATH, '//*[@id=\"searchboxinput\"]'))).send_keys('gostilne')\ndriver.submit()\n"], ["resultfile.write(f\"Position\\t{position:.7n}\")\n"], ["conda install python=3.6.0\n"], [], ["import time\nfrom selenium import webdriver\nfrom selenium.webdriver.common.keys import Keys\nfrom selenium.webdriver.common.by import By\nfrom selenium.webdriver.support.ui import WebDriverWait\nfrom selenium.webdriver.support import expected_conditions as EC\n\nsearch_question = input(\"Ask a question: \")\n\ndriver = webdriver.Chrome(\".\\chromedriver.exe\")\ndriver.wait = WebDriverWait(driver, 5)\n\ndriver.get(\"https://google.com\")\n\ntime.sleep(3)\n# agree = driver.wait.until(EC.presence_of_element_located((By.XPATH, '//*[@id=\"introAgreeButton\"]/span/span')))\n# agree.click()\n# time.sleep(0.2)\n\nsearch = driver.find_element_by_class_name(\"gLFyf\")\nsearch.send_keys(search_question)\nsearch.send_keys(Keys.ENTER)\n\n"], ["agree = driver.find_element_by_xpath('//*[@id=\"introAgreeButton\"]/span/span')\ndriver.execute_script(\"arguments[0].click();\", agree)\n"], ["from math import *\nnum = eval(input('Enter a number: '))\nsq = sqrt(num)\nsq1 = sq%1 #here we find the decimal value and then..\nif sq1 == 0.0: #if the value = 0 it is a perfect square else it is not, only perfect \nsquares will be whole numbers.\n    print(f'{num} is a perfect square')\nelse:\n    print(f'{num} is not a perfect square')\n"], ["num=int(input(\"Enter a positive integer: \"\nbase=1\nwhile num/base>base:\n    base=base+1\n    if (num/base)%1==0:\n        print(num,\"is a square\")\n    else:\n        print(num,\"is not a square\")\n"], ["@client.event\nasync def on_message(message):\n    if not message.author.bot:\n        print('function load')\n        with open('level.json','r') as f:\n            users = json.load(f)\n            print('file load')\n        await update_data(users, message.author,message.guild)\n        await add_experience(users, message.author, 4, message.guild)\n        await level_up(users, message.author,message.channel, message.guild)\n\n        with open('level.json','w') as f:\n            json.dump(users, f)\n    await client.process_commands(message)\n\n\n\n\nasync def update_data(users, user,server):\n    if not str(server.id) in users:\n        users[str(server.id)] = {}\n        if not str(user.id) in users[str(server.id)]:\n            users[str(server.id)][str(user.id)] = {}\n            users[str(server.id)][str(user.id)]['experience'] = 0\n            users[str(server.id)][str(user.id)]['level'] = 1\n    elif not str(user.id) in users[str(server.id)]:\n            users[str(server.id)][str(user.id)] = {}\n            users[str(server.id)][str(user.id)]['experience'] = 0\n            users[str(server.id)][str(user.id)]['level'] = 1\n\nasync def add_experience(users, user, exp, server):\n  users[str(user.guild.id)][str(user.id)]['experience'] += exp\n\nasync def level_up(users, user, channel, server):\n  experience = users[str(user.guild.id)][str(user.id)]['experience']\n  lvl_start = users[str(user.guild.id)][str(user.id)]['level']\n  lvl_end = int(experience ** (1/4))\n  if str(user.guild.id) != '757383943116030074':\n    if lvl_start < lvl_end:\n      await channel.send('{} has leveled up to Level {}'.format(user.mention, lvl_end))\n      users[str(user.guild.id)][str(user.id)]['level'] = lvl_end\n\n\n@client.command(aliases = ['rank','lvl'])\nasync def level(ctx,member: discord.Member = None):\n\n    if not member:\n        user = ctx.message.author\n        with open('level.json','r') as f:\n            users = json.load(f)\n        lvl = users[str(ctx.guild.id)][str(user.id)]['level']\n        exp = users[str(ctx.guild.id)][str(user.id)]['experience']\n\n        embed = discord.Embed(title = 'Level {}'.format(lvl), description = f\"{exp} XP \" ,color = discord.Color.green())\n        embed.set_author(name = ctx.author, icon_url = ctx.author.avatar_url)\n        await ctx.send(embed = embed)\n    else:\n      with open('level.json','r') as f:\n          users = json.load(f)\n      lvl = users[str(ctx.guild.id)][str(member.id)]['level']\n      exp = users[str(ctx.guild.id)][str(member.id)]['experience']\n      embed = discord.Embed(title = 'Level {}'.format(lvl), description = f\"{exp} XP\" ,color = discord.Color.green())\n      embed.set_author(name = member, icon_url = member.avatar_url)\n\n      await ctx.send(embed = embed)\n"], ["{\n    \"floatx\": \"float32\",\n    \"epsilon\": 1e-07,\n    \"backend\": \"tensorflow\",\n    \"image_data_format\": \"channels_last\"\n}\n", "if K.image_data_format() == 'channels_last':\n    input_tensor = Input(shape=(3, 299, 299))\n", "{\n    \"image_dim_ordering\": \"tf\",\n    \"epsilon\": 1e-07,\n    \"floatx\": \"float32\",\n    \"backend\": \"tensorflow\"\n}\n", "if(K.image_dim_ordering() == 'th'):\n  input_tensor = Input(shape=(3, 299, 299))\n"], [], [], ["if(K.image_dim_ordering() == 'th'): \n  input_tensor = Input(shape=(3, 299, 299))\n", "if K.image_data_format() == 'th':\n  input_tensor = Input(shape=(3, 299, 299))\n"], [], ["add-apt-repository ppa:deadsnakes/ppa\napt-get update\napt-get install python3.7-dev\nalias pip3.7=\"python3.7 -m pip\"\n", "pip3.7\n"], [], [], [], [], ["sudo apt update\nsudo apt install build-essential zlib1g-dev libncurses5-dev libgdbm-dev libnss3-dev libssl-dev libreadline-dev libffi-dev wget\n", "sudo add-apt-repository ppa:deadsnakes/ppa\nsudo apt update\nsudo apt install python3.7\n", "sudo apt install python3-pip\npython3.7 -m pip install pip\n", "sudo update-alternatives --install /usr/local/bin/python python /usr/bin/python3.7 10\nsudo update-alternatives --install /usr/local/bin/pip pip /home/your_username/.local/bin/pip3.7 10\n", "source ~/.bashrc\npython --version\npip --version\n"], ["def combine_lists(list1, list2):\n    list1.reverse()\n    for list in list1:\n        list2.append(list)\n    return list2\nJamies_list = [\"Alice\", \"Cindy\", \"Bobby\", \"Jan\", \"Peter\"]\nDrews_list = [\"Mike\", \"Carol\", \"Greg\", \"Marcia\"]\n\nprint(combine_lists(Jamies_list, Drews_list))\n"], [], ["names =Name.split()\nif len(names) ==2 :\n print(\"there is no middle name\")\n first_name = names[0]\n last_name = names[1]\n print(f\" first name - {first_name}\\n  middle name -  last name - {last_name}\")\nelif len(names) == 3:\n print(\"there is  middle name\")\n first_name = names[0]\n middle_name = names[1]\n last_name = names[2]\n print(f\" first name - {first_name}\\n middle name - {middle_name} \\nlast name - {last_name}\")\n\n"], ["(?P<First>\\S+)\\s(?:(?P<Middle>\\S*)\\s)?(?P<Last>\\S+)$\n", "import re\n\ns = \"John Wayne Smith\"\ns2 = \"John Smith\"\n\np = re.compile(r\"(?P<First>\\S+)\\s(?:(?P<Middle>\\S*)\\s)?(?P<Last>\\S+)$\")\n", "p.match(s).groupdict()\n# {'First': 'John', 'Middle': 'Wayne', 'Last': 'Smith'}\n\np.match(s2).groupdict()\n# {'First': 'John', 'Middle': None, 'Last': 'Smith'}\n"], ["[first, middle, last] = 'John Wayne Smith'.split(' ')\n"], [], ["validating_set = complete_dataset.take(18)\ntraining_set   = complete_dataset.skip(18)\n# Notice that 30000 / 256 = 118 = 18 + 100\n"], ["def counter(start, stop):\nx = start\nif start > stop:\n    return_string = \"Counting down: \"\n    while x >= stop:\n        return_string += str(x)\n        x = x-1\n        if x >= stop:\n            return_string += \",\"\nelse:\n    return_string = \"Counting up: \"\n    while x <= stop:\n        return_string += str(x)\n        x = x + 1\n        if x <= stop:\n            return_string += \",\"\nreturn return_string\n"], [], [], ["import tensorflow as tf\n\na = tf.Variable(1, name=\"a\")\nb = tf.Variable(2, name=\"b\")\nf = a + b\n\ntf.print(\"The sum of a and b is\", f)\n"], [], ["def sms_encoding(data):\n\n    data=data.lower()\n    a=data.split()\n    v1=\"\"\n    for i in range(0,len(a)):\n        z=a[i]\n        v=\"\"\n        c1=0\n        for j in z:\n            if j not in ('a','e','i','o','u'):\n                v=v+j\n            elif j in ('a','e','i','o','u'):\n                c1=c1+1\n        if(c1!=len(z)):    \n            v1=v1+v+\" \"\n        elif(c1==len(z)):\n            v1=v1+z+\" \"\n    \n    word=v1[0:len(v1)-1]\n    return word\n\ndata=\"I love Python\"\nprint(sms_encoding(data))\n"], [], ["def counter(start, stop):\nx = start\nif start > stop:\n    return_string = \"Counting down: \"\n    while x >= stop:\n        return_string += str(x)\n        if x != stop :\n            return_string += \",\"\n        x -= 1\nelse:\n    return_string = \"Counting up: \"\n    while x <= stop:\n        return_string += str(x)\n        if x != stop:\n            return_string += \",\"\n        x += 1\nreturn return_string\n\nprint(counter(1, 10)) # Should be \"Counting up: 1,2,3,4,5,6,7,8,9,10\"\nprint(counter(2, 1)) # Should be \"Counting down: 2,1\"\nprint(counter(5, 5)) # Should be \"Counting up: 5\"\n"], [], ["import re\ndef check_time(text):\n  pattern = r\"^(?:1[0-2]|[1-9]):(?:[0-5][0-9])(?:\\s?[APap][Mm])?$\"\n  result = re.search(pattern, text)\n  return result != None\n\nprint(check_time(\"12:45pm\")) # True\nprint(check_time(\"9:59 AM\")) # True\nprint(check_time(\"6:60am\")) # False\nprint(check_time(\"five o'clock\")) # False\n"], ["plot_model(model, plot = 'AUC', save=True)\n"], ["import datetime\n\ndef minutes_of_year(dt):\n    return seconds_of_year(dt) // 60\n\ndef hours_of_year(dt):\n    return minutes_of_year(dt) // 60\n\ndef seconds_of_year(dt):\n    dt0 = datetime.datetime(dt.year, 1, 1, tzinfo=dt.tzinfo)\n    delta = dt-dt0\n    return int(delta.total_seconds())\n", "import datetime\n\nclass MyDateTime(datetime.datetime):\n    def __new__(cls, *args, **kwargs):\n        return datetime.datetime.__new__(cls, *args, **kwargs)\n\n    def minutes_of_year(self):\n        return self.seconds_of_year() // 60\n\n    def hours_of_year(self):\n        return self.minutes_of_year() // 60\n\n    def seconds_of_year(self):\n        dt0 = datetime.datetime(self.year, 1, 1, tzinfo=self.tzinfo)\n        delta = self-dt0\n        return int(delta.total_seconds())\n\n# create and use like a normal datetime object\ndt = MyDateTime.now()\n# properties and functions of datetime still available, of course.\nprint(dt.day)\n# ... and new methods:\nprint(dt.hours_of_year())\n"], ["def hour_of_year(dt): \n    beginning_of_year = datetime.datetime(dt.year, 1, 1, tzinfo=dt.tzinfo)\n    return (dt - beginning_of_year).total_seconds() // 3600\n"], ["def get_time_of_year(dt, type = 'hours_of_year'):\n  intitial_date = datetime(dt.year, 1,1, 00, 00, 00) \n  duration = dt - intitial_date\n\n  days, seconds = duration.days, duration.seconds\n  hours = days * 24 + seconds // 3600\n  minutes = (seconds % 3600) // 60\n\n  if type == 'hours_of_year':\n    return hours\n  if type == 'days_of_year':\n    return days\n  if type == 'seconds_of_year':\n    return seconds\n  if type == 'minuts_of_year':\n    return minutes\n", "get_time_of_year(dt, 'hours_of_year')\n#>>48\n"], ["import datetime\ndt = datetime.datetime(2019, 1, 3, 00, 00, 00)\ndt2 = datetime.datetime(2019, 1, 1, 00, 00, 00)\nprint((dt-dt2).days*24)\n", "48\n"], ["def counter(start, stop):\nx = start\nif x > stop:\n    return_string = \"Counting down: \"\n    while x >= stop:\n        return_string += str(x)\n        x = x-1\n        if start != stop:\n            return_string += \",\"\n            return_string.rstrip(',')\nelse:\n    return_string = \"Counting up: \"\n    while x <= stop:\n        return_string += str(x)\n        x = x + 1\n        if start != stop:\n            return_string += \",\"\nreturn return_string.rstrip(',')\n"], [], ["kill -SIGINT `pgrep -f filename.py`\n"], ["import socket\nimport threading\nimport time\n\nclass OtherInstanceError(Exception):\n    pass\n\nclass ProgramInstanceManager:\n    _server_running = False\n    _server_closed = False\n    \n    def __init__(self, port=35217, ip=\"127.0.0.1\"):\n        self.ip, self.port = ip, port\n        is_first = self.check_instance()\n        if not is_first:\n            raise OtherInstanceError()\n\n        self.setup_server()\n\n    def check_instance(self):\n        # setup a TCP socket with 2 sec timeout\n        sock = socket.socket(socket.AF_INET, socket.SOCK_STREAM)\n        sock.settimeout(2)\n        try:\n            sock.connect((self.ip, self.port))\n        except socket.timeout:\n            # no connection was made in time\n            # so we can assume that we are the\n            # only one\n            return True\n        sock.close()\n        return False\n\n    def setup_server(self):\n        # setup a TCP server socket with 2 sec timeout\n        self.serversock = socket.socket(socket.AF_INET, socket.SOCK_STREAM)\n        self.serversock.settimeout(2)\n        self.serversock.bind((self.ip, self.port))\n\n        self.server_thread = threading.Thread(target=self._server_run)\n        self.server_thread.start()\n\n    def _server_run(self):\n        self._server_running = True\n        self.serversock.listen(5)\n\n        while self._server_running:\n            try:\n                conn, addr = self.serversock.accept()\n                conn.close()\n            except socket.timeout:\n                pass\n\n        self.serversock.close()\n        self._server_closed = True\n\n    def shutdown(self):\n        self._server_running = False\n        while not self._server_closed:\n            time.sleep(0.1)\n\nif __name__ == '__main__':\n    p1 = ProgramInstanceManager()\n    print(\"Started process 1\")\n\n    try:\n        p2 = ProgramInstanceManager() # OtherInstanceError\n        print(\"Started process 2\")\n    except OtherInstanceError:\n        print(\"Failed to start process 2\")\n\n    # simulate closing the program\n    p1.shutdown()\n    print(\"Stopped process 1\")\n\n    p3 = ProgramInstanceManager()\n    print(\"Started process 3\")\n", "from instance_manager import ProgramInstanceManager, OtherInstanceError\nimport sys\n\ntry:\n    pim = ProgramInstanceManager()\nexcept OtherInstanceError:\n    print(\"Already got one instance running\")\n    sys.exit(1)\n", "pim.shutdown()\n"], [], ["import socket               # Import socket module\n\ns = socket.socket()         # Create a socket object\nhost = socket.gethostname() # Get local machine name\nport = 12345                # Reserve a port for your service.\ns.bind((host, port))        # Bind to the port\n"], ["return group + \": \" + (\", \".join(users))\n"], [], ["import os\nos.environ.get('GCP_PROJECT')\n"], [], [], ["using System.CodeDom.Compiler;\nusing System.Collections.Generic;\nusing System.Collections;\nusing System.ComponentModel;\nusing System.Diagnostics.CodeAnalysis;\nusing System.Globalization;\nusing System.IO;\nusing System.Linq;\nusing System.Reflection;\nusing System.Runtime.Serialization;\nusing System.Text.RegularExpressions;\nusing System.Text;\nusing System;\nusing System.Reflection.Metadata.Ecma335;\n\nclass Result\n{\n\n    /*\n     * Complete the 'filledOrders' function below.\n     *\n     * The function is expected to return an INTEGER.\n     * The function accepts following parameters:\n     *  1. INTEGER_ARRAY order\n     *  2. INTEGER k\n     */\n\n    public static int filledOrders(List<int> order, int k)\n    {\n\n        if (order.Sum() <= k)\n        {\n            return order.Count();\n        }\n        else\n        {\n            int counter = 0;\n            foreach (int element in order)\n            {\n\n                if (element <= k)\n                {\n                    counter++;\n                    k = k - element;\n\n\n                }\n            }\n            return counter;\n        }\n\n\n    }\n\n}\n\nclass Solution\n{\n    public static void Main(string[] args)\n    {\n        \n\n        int orderCount = Convert.ToInt32(Console.ReadLine().Trim());\n\n        List<int> order = new List<int>();\n\n        for (int i = 0; i < orderCount; i++)\n        {\n            int orderItem = Convert.ToInt32(Console.ReadLine().Trim());\n            order.Add(orderItem);\n        }\n\n        int k = Convert.ToInt32(Console.ReadLine().Trim());\n        var orderedList = order.OrderBy(a=>a).ToList();\n        int result = Result.filledOrders(orderedList, k);\n\n        Console.WriteLine(result);\n\n        \n    }\n    \n}\n"], ["fig.update_layout(\n    coloraxis_colorbar=dict(\n        title=\"Your Title\",\n    ),\n)\n"], ["Javascript solution\n\n    Option1:\n    \n    function filledOrders(order, k) {\n    \n        let count=0;\n        let arr= [];\n        arr = order.sort().filter((item, index) => {\n            if (item<=k) {\n                k = k - item;\n                return item\n            }\n        })\n        return arr.length\n    }\n    \n    Option2:\n    \n    function filledOrders(order, k) {\n        let count=0;\n        for(var i=0; i<order.sort().length; i++) {\n            if(order[i]<=k) {\n                count++;\n                k = k - order[i]\n            } \n        }\n        return count;\n    }\n"], ["def group_list(group, users):\n    members = \", \".join(users)\n    return \"{}: {}\".format(group,members)\n"], ["conda create -n mygreatenvironment python=3.6 <add other packages here>\n", "conda activate mygreatenvironment\n"], ["table_name = 'test'\nquries = [\n          'SET FOREIGN_KEY_CHECKS=0;',\n          'DROP TABLE IF EXISTS {};'.format(table_name),\n          'SET FOREIGN_KEY_CHECKS=1;',\n          'CREATE TABLE {} select * from mytable;'.format(table_name),\n         ]\nfor query in quries:\n    result = self.cursor.execute(query)\n    # Do operation with result\n", "quries = [\n          {'DROP TABLE IF EXISTS %(table_name);':{'table_name': 'student'}},\n          {'CREATE TABLE %(table_name) select * from mytable;': \n           {'table_name':'teacher'}},\n          {'SET FOREIGN_KEY_CHECKS=0;': ''}\n         ]\nfor data in quries:\n    for query, parameter in data.iteritems():\n        if parameter == '':\n            result = self.cursor.execute(query)\n            # Do something with result\n        else:\n            result = self.cursor.execute(query, parameter)\n            # Do something with result\n\n", "with connection.cursor() as cursor:\n    for statement in script.split(';'):\n        if len(statement) > 0:\n             cursor.execute(statement + ';')\n"], ["from contextlib import closing\nfrom typing import List\n\nimport mysql.connector\nimport logging\n\nlogger = logging.getLogger(__name__)\n\n\ndef execute(stmts: List[str]) -> None:\n    logger.info(\"Starting daily execution\")\n\n    with closing(mysql.connector.connect()) as connection:\n        try:\n            with closing(connection.cursor()) as cursor:\n                cursor.execute(' ; '.join(stmts), multi=True)\n        except Exception:\n            logger.exception(\"Rollbacking changes\")\n            connection.rollback()\n            raise\n        else:\n            logger.info(\"Finished successfully\")\n"], ["self.cursor.execute('SET FOREIGN_KEY_CHECKS=0;')\nself.cursor.execute('DROP TABLE IF EXISTS %s;' % (table_name,))\nself.cursor.execute('SET FOREIGN_KEY_CHECKS=1;')\nself.cursor.execute('CREATE TABLE %s select * from mytable;' % (table_name,))\n", "self.cursor.execute(\n    'SET FOREIGN_KEY_CHECKS=0;'\n    'DROP TABLE IF EXISTS %s;' % (table_name,)\n    'SET FOREIGN_KEY_CHECKS=1;'\n    'CREATE TABLE %s select * from mytable;' % (table_name,)\n)\n"], ["def execute_multiple(conn, statements, rollback_on_error=True):\n    \"\"\"\n    Execute multiple SQL statements and returns the cursor from the last executed statement.\n\n    :param conn: The connection to the database\n    :type conn: Database connection\n\n    :param statements: The statements to be executed\n    :type statements: A list of strings\n\n    :param: rollback_on_error: Flag to indicate action to be taken on an exception\n    :type rollback_on_error: bool\n\n    :returns cursor from the last statement executed\n    :rtype cursor\n    \"\"\"\n\n    try:\n        cursor = conn.cursor()\n        for statement in statements:\n            cursor.execute(statement)\n            if not rollback_on_error:\n                conn.commit() # commit on each statement\n    except Exception as e:\n        if rollback_on_error:\n            conn.rollback()\n        raise\n    else:\n        if rollback_on_error:\n            conn.commit() # then commit only after all statements have completed successfully\n", "def execute_multiple_prepared(conn, statements_and_values, rollback_on_error=True):\n    \"\"\"\n    Execute multiple SQL statements and returns the cursor from the last executed statement.\n\n    :param conn: The connection to the database\n    :type conn: Database connection\n\n    :param statements_and_values: The statements and values to be executed\n    :type statements_and_values: A list of lists. Each sublist consists of a string, the SQL prepared statement with %s placeholders, and a list or tuple of its parameters\n\n    :param: rollback_on_error: Flag to indicate action to be taken on an exception\n    :type rollback_on_error: bool\n\n    :returns cursor from the last statement executed\n    :rtype cursor\n    \"\"\"\n\n    try:\n        cursor = conn.cursor()\n        for s_v in statements_and_values:\n            cursor.execute(s_v[0], s_v[1])\n            if not rollback_on_error:\n                conn.commit() # commit on each statement\n    except Exception as e:\n        if rollback_on_error:\n            conn.rollback()\n        raise\n    else:\n        if rollback_on_error:\n            conn.commit() # then commit only after all statements have completed successfully\n        return cursor # return the cursor in case there are results to be processed\n", "cursor = execute_multiple_prepared(conn, [('select * from test_table where count = %s', (2000,))], False)\n"], ["import sqlite3 \n\n# Connection with the DataBase \n# 'library.db' \nconnection = sqlite3.connect(\"library.db\") \ncursor = connection.cursor() \n\n# SQL piece of code Executed \n# SQL piece of code Executed \ncursor.executescript(\"\"\" \n    CREATE TABLE people( \n        firstname, \n        lastname, \n        age \n    ); \n\n    CREATE TABLE book( \n        title, \n        author, \n        published \n    ); \n\n    INSERT INTO \n    book(title, author, published) \n    VALUES ( \n        'Dan Clarke''s GFG Detective Agency', \n        'Sean Simpsons', \n        1987 \n    ); \n    \"\"\") \n\nsql = \"\"\" \nSELECT COUNT(*) FROM book;\"\"\"\n\ncursor.execute(sql) \n\n# The output in fetched and returned \n# as a List by fetchall() \nresult = cursor.fetchall() \nprint(result) \n\nsql = \"\"\" \nSELECT * FROM book;\"\"\"\n\ncursor.execute(sql) \n\nresult = cursor.fetchall() \nprint(result) \n\n# Changes saved into database \nconnection.commit() \n\n# Connection closed(broken) \n# with DataBase \nconnection.close() \n"], ["tablename= \"t1\"\n mycursor.execute(\"SET FOREIGN_KEY_CHECKS=0; DROP TABLE IF EXISTS {}; SET FOREIGN_KEY_CHECKS=1;CREATE TABLE {} select * from episodes;\".format(tablename, tablename),multi=True)\n"], ["operation = 'SELECT 1; INSERT INTO t1 VALUES (); SELECT 2'\nfor result in cursor.execute(operation, multi=True):\n"], ["batch_size = 2\n"], [], ["def group_list(group, users):\n    members = \" \" \n    for i in users:`\n        members+=\",\".join(users)\n        break\n    return \"{}:{}\".format(group,members)**\nprint(group_list(\"Marketing\", [\"Mike\", \"Karen\", \"Jake\", \"Tasha\"])) # Should be \"Marketing: Mike, Karen, Jake, Tasha\"\nprint(group_list(\"Engineering\", [\"Kim\", \"Jay\", \"Tom\"])) # Should be \"Engineering: Kim, Jay, Tom\"\nprint(group_list(\"Users\", \"\")) # Should be \"Users:\"\n"], ["    def filledOrders(order, k):\n      orderfulfilled=0\n      for i in range(1,len(order)):\n        m=k-order[i]\n        if(m>=0):\n           orderfulfilled+=1\n           k-=order[i]\n      return(orderfulfilled)\n"], ["from random import randrange\n\ndef partial_shuffle(l, factor=5):\n    n = len(l)\n    for _ in range(factor):\n        a, b = randrange(n), randrange(n)\n        l[b], l[a] = l[a], l[b]\n", "import numpy as np\n\nn = 8\norig = list(range(n))\noccur = np.zeros((n, n), int)\n\nfor _ in range(100000):\n    x = orig[:]\n    partial_shuffle(x,1)\n    occur[orig,x] += 1\n", "from random import gauss\n\norderliness = 2\n\noccur = np.zeros((n, n), int)\n\nfor _ in range(100000):\n    x = sorted(orig, key=lambda i: gauss(i * orderliness, 1))\n    occur[orig,x] += 1\n"], ["import random\n\norderliness = 0.75\n\ndef tuplify(x, y):\n    return (orderliness * y + random.gauss(0,1), x)\n\nvalues = [i+1 for i in range(20)]\nprint(values)\npairs = list(map(tuplify, values, range(len(values))))\npairs.sort()\npartially_ordered_values = [p[1] for p in pairs]\nprint(partially_ordered_values)\n", "[1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20]  # initial ordering\n[2, 1, 3, 4, 5, 6, 7, 8, 9, 10, 12, 13, 11, 14, 17, 16, 15, 18, 19, 20]  # weakly shuffled\n"], [], ["from random import randint\n\ndef partial_shuffle(l, factor=5):\n    for _ in range(factor):\n        a, b = randint(0, len(l)), randint(0, len(l)) # pick two random indexes\n        l[b], l[a] = l[a], l[b] # swap the values at those indexes\n    return l\n", "''.join(partial_shuffle(list('abcdefghijklmnopqrstuvwxyz'), 2))\n"], [], ["print(\"this will use 2 lines \\n\")\nprint(\"this will use 1 line\")\nprint(\"this will use 1 line \\n\", end=\"\")\n"], [], [], ["print(\" \",end = \"\")\n", "print(\"\\t\", end=\".\\n\")\nprint(\"A\\t\", end=\".\\n\")\nprint(\"ABC\\t\", end=\".\\n\")\nprint(\"ABCD\\t\", end=\".\\n\")\n"], [], [], ["sudo apt-get install libsndfile1-dev\n"], ["python3.7 -m pip install pip\n", "python3.7 -m pip install <module>\n", "python3.7 -m pip install -r requirements.txt\n"], ["print(X.shape, X.dtype)\nprint(y.shape, y.dtype)\n", "train_x = pd.DataFrame(train_x)\ntrain_y = pd.DataFrame(train_y)\n"], ["def counter(start, stop):\n    x = start\n    if start>stop:\n\n        return_string = \"\\\"Counting down: \"\n        while x >= stop:\n            return_string += str(x)\n            x=x-1\n            if x>=stop:\n                return_string += \",\"\n        return_string += '\"'\n    else:\n        return_string = \"\\\"Counting up: \"\n        while x <= stop:\n            return_string += str(x)\n            x=x+1\n            if x<=stop:\n                return_string += \",\"\n        return_string += '\"'\n    return return_string\n"], [], ["@client.event\nasync def on_member_join(member):\n    with open('users.json', 'r') as f:\n        users = json.load(f)\n\n    await update_data(users, member)\n\n    with open('users.json', 'w') as f:\n        json.dump(users, f)\n\n\n@client.event\nasync def on_message(message):\n    if message.author.bot == False:\n        with open('users.json', 'r') as f:\n            users = json.load(f)\n\n        await update_data(users, message.author)\n        await add_experience(users, message.author, 5)\n        await level_up(users, message.author, message)\n\n        with open('users.json', 'w') as f:\n            json.dump(users, f)\n\n    await client.process_commands(message)\n\n\nasync def update_data(users, user):\n    if not f'{user.id}' in users:\n        users[f'{user.id}'] = {}\n        users[f'{user.id}']['experience'] = 0\n        users[f'{user.id}']['level'] = 1\n\n\nasync def add_experience(users, user, exp):\n    users[f'{user.id}']['experience'] += exp\n\n\nasync def level_up(users, user, message):\n    with open('levels.json', 'r') as g:\n        levels = json.load(g)\n    experience = users[f'{user.id}']['experience']\n    lvl_start = users[f'{user.id}']['level']\n    lvl_end = int(experience ** (1 / 4))\n    if lvl_start < lvl_end:\n        await message.channel.send(f'{user.mention} has leveled up to level {lvl_end}')\n        users[f'{user.id}']['level'] = lvl_end\n\n@client.command()\nasync def level(ctx, member: discord.Member = None):\n    if not member:\n        id = ctx.message.author.id\n        with open('users.json', 'r') as f:\n            users = json.load(f)\n        lvl = users[str(id)]['level']\n        await ctx.send(f'You are at level {lvl}!')\n    else:\n        id = member.id\n        with open('users.json', 'r') as f:\n            users = json.load(f)\n        lvl = users[str(id)]['level']\n        await ctx.send(f'{member} is at level {lvl}!')\n"], [], ["conda install -c conda-forge hdf5=1.10.5\n"], ["int count = 0;\n        Collections.sort(order);\n        for(int i=0; i<order.size(); i++) {\n            if(order.get(i)<=k) {\n                count++;\n                k = k - order.get(i);\n            } \n        }\n        return count;\n"], [], ["def group_list(group, users):\n  members =\", \".join(users) \n  return(\" {}: {}\".format(group, members)) \n\nprint(group_list(\"Marketing\", [\"Mike\", \"Karen\", \"Jake\", \"Tasha\"])) # Should be \"Marketing: Mike, Karen, Jake, Tasha\"\nprint(group_list(\"Engineering\", [\"Kim\", \"Jay\", \"Tom\"])) # Should be \"Engineering: Kim, Jay, Tom\"\nprint(group_list(\"Users\", \"\")) # Should be \"Users:\"\n"], ["def counter(start, stop):\n    x = start \n    if x>stop:\n        return_string = \"Counting down: \"\n        while x >= stop:\n            return_string += str(x) \n        if x>stop:\n            return_string += \",\" \n            x = x - 1\n        else:\n            return_string = \"Counting up: \" \n            while x <= stop: \n                return_string += str(x) \n                if x<stop:\n                    return_string += \",\" \n                    x = x + 1\n        return return_string\n"], [], ["members = ', '.join(users)\nreturn \"{}: {}\".format(group, members)\n"], [], [], ["sudo apt install python3-pip\n", "sudo apt install python3.7\n", "python3.7 -m pip install pip\n", "python3.7 -m pip install <module>\n"], [], [], ["def filledOrders(order, k):\n  total = 0\n  for i, v in enumerate(sorted(order)):\n    if total + v <= k:\n      total += v       # total stays <= k\n    else:\n      return i         # provides the count\n  else:\n    return len(order)  # was able to place all orders\n\nprint(filledOrders([3, 2, 1], 3))  # Out: 2\nprint(filledOrders([3, 2, 1], 1))  # Out: 1\nprint(filledOrders([3, 2, 1], 10)) # Out: 3\nprint(filledOrders([3, 2, 1], 0))  # Out: 0\n"], [], ["keras.backend.set_image_data_format('channels_first')\nuse this to check your format:\n keras.backend.image_data_format()\n"], ["train_x = np.asarray(train_x)\ntrain_y = np.asarray(train_y)\nvalidation_x = np.asarray(validation_x)\nvalidation_y = np.asarray(validation_y)\n"], ["def check_time(text):\n  pattern = r\"^(?:1[0-2]|0?[1-9]):(?:[0-5]?[0-9])(?:\\s?[AP]M)?$\"\n  return bool(re.search(pattern, text, flags=re.I))\n"], ["    'django.contrib.sessions.middleware.SessionMiddleware', \n    'django.contrib.messages.middleware.MessageMiddleware', \n    'django.contrib.auth.middleware.AuthenticationMiddleware',\n", "MIDDLEWARE = [\n    'django.contrib.sessions.middleware.SessionMiddleware',\n    'django.contrib.messages.middleware.MessageMiddleware',\n    'django.contrib.auth.middleware.AuthenticationMiddleware',\n]\n"], [], ["pattern = \"1\"\nstring = \"abc\"\n\nif re.search(pattern, string) is None:\n    print('do this because nothing was found')\n", "do this because nothing was found\n", "pattern = '[A-Za-z]'\nstring = \"abc\"\n\nif re.search(pattern, string) is not None:\n    for thing in re.finditer(pattern, string):\n        print('Found this thing: ' + thing[0])\n", "Found this thing: a\nFound this thing: b\nFound this thing: c\n", "pattern = \"1\"\nstring = \"abc\"\n\nif re.search(pattern, string) is not None:\n    for thing in re.finditer(pattern, string):\n        print('Found this thing: ' + thing[0])\nelse:\n    print('do this because nothing was found')\n", "do this because nothing was found\n", "my_string = 'hello world'\npat = '(he)'\nregex = re.finditer(pat,my_string)\n\nfor a in regex:\n    b = str(a.groups()[0])\nprint(b)\n\n# returns 'he'\n", "my_string = 'hello world'\npat = '(ab)'\nregex = re.finditer(pat,my_string)\n\nfor a in regex:\n    b = str(a.groups()[0])\nprint(b)\n\n# no return\n", "my_string = 'hello world'\npat = '(ab)'\nregex = re.finditer(pat,my_string)\n\nb = 'CAKE' # sets the variable prior to the for loop\nfor a in regex:\n    b = str(a.groups()[0])\nprint(b) # calls the variable after (and outside) the loop\n\n# returns 'CAKE'\n", "pattern = '(ab)' # use this\npattern = 'ab' # avoid using this\n"], [], [], [], ["apt-get install libsndfile1\nReading package lists... Done\nBuilding dependency tree       \nReading state information... Done\nE: Unable to locate package libsndfile1\n"], ["grid2 = []\nfor i in range(rows):\n    inner = []\n    for j in range(cols):\n        inner.append(0)\n    grid2.append(inner)\n"], [], ["grid2 = []\nfor i in range(rows):\n    grid2.append([])\n    for j in range(cols):\n        grid2[i].append(0)\nprint(grid2)\n", "grid2 = [[0]*cols] * rows\n"], ["rows = 5\ncols = 5\n\ngrid2 = []\nfor _ in range(rows):\n    grid2.append([])\n    for _ in range(cols):\n        grid2[-1].append(0)\nprint(grid2)\n", "grid2 = []\nfor _ in range(rows):\n    grid2.append([0] * cols)\n"], ["grid2 = []\nfor i in range(rows):\n    tmp = []\n    for j in range(cols):\n        tmp.append(0)\n    grid2.append(tmp)\n", "grid2 = []\nfor i in range(rows):\n    grid2.append([0 for j in range(cols)])\n"], ["brew uninstall --force octave\nbrew uninstall hdf5\n", "conda install h5py\n"], ["In[1]: intervals = {interval for interval in df.my_col_bin \n                       if interval.left >= 3 and interval.right <= 12}\nIn[2]: intervals\n", "{Interval(3, 6, closed='left'),\n Interval(6, 9, closed='left'),\n Interval(9, 12, closed='left')}\n", "In[1]: intervals = [pd.Interval(i, i + 3, closed=\"left\") for i in range(3, 10, 3)]\nIn[2]: intervals\n", "[Interval(3, 6, closed='left'),\n Interval(6, 9, closed='left'),\n Interval(9, 12, closed='left')]\n", "In[3]: df[df.my_col_bin.isin(intervals)]\n", "    my_col my_col_bin\n2        3     [3, 6)\n3        4     [3, 6)\n4        5     [3, 6)\n5        6     [6, 9)\n6        7     [6, 9)\n7        8     [6, 9)\n8        9    [9, 12)\n9       10    [9, 12)\n10      11    [9, 12)\n"], ["closed_left\nclosed_right\nis_empty\nleft\nlength\nmid\nopen_left\nopen_right\noverlaps()\nright\n"], ["m = df['my_col_bin'].apply(lambda x: x.overlaps(pd.Interval(3, 12, closed='left')))\n\ndf[m]\n    my_col my_col_bin\n2        3     [3, 6)\n3        4     [3, 6)\n4        5     [3, 6)\n5        6     [6, 9)\n6        7     [6, 9)\n7        8     [6, 9)\n8        9    [9, 12)\n9       10    [9, 12)\n10      11    [9, 12)\n"], ["df[(df['my_col'] >= 3) & (df['my_col'] < 12)]\n"], [], [], [], ["def combine_lists(list1, list2):\n  # Generate a new list containing the elements of list2\n  # Followed by the elements of list1 in reverse order\n  list3 = list1[:]\n  list4 = list2[:]\n\n  list3.reverse()\n  list4.extend(list3)\n  return list4\n\n\nJamies_list = [\"Alice\", \"Cindy\", \"Bobby\", \"Jan\", \"Peter\"]                     \nDrews_list = [\"Mike\", \"Carol\", \"Greg\", \"Marcia\"]\n\nprint(combine_lists(Jamies_list, Drews_list))\n", "list1.reverse()\nlist2.extend(list1)\nreturn list2\n"], [">>> Jamies_list = [\"Alice\", \"Cindy\", \"Bobby\", \"Jan\", \"Peter\"]\n>>> Drews_list = [\"Mike\", \"Carol\", \"Greg\", \"Marcia\"]\n>>>\n>>> Drews_list + Jamies_list[::-1]\n['Mike', 'Carol', 'Greg', 'Marcia', 'Peter', 'Jan', 'Bobby', 'Cindy', 'Alice']\n"], ["def combine_lists(list1, list2):\n  # Generate a new list containing the elements of list2\n  # Followed by the elements of list1 in reverse order\n  return list1+list2[::-1]\n"], ["def combine_lists(list1, list2):\n  # Generate a new list containing the elements of list2\n  # Followed by the elements of list1 in reverse order\n  buf = list2[:] # or list2.copy()\n  buf.extend(reversed(list1))\n  return buf\n\n\nJamies_list = [\"Alice\", \"Cindy\", \"Bobby\", \"Jan\", \"Peter\"]                     \nDrews_list = [\"Mike\", \"Carol\", \"Greg\", \"Marcia\"]\n\nprint(combine_lists(Jamies_list, Drews_list))\n"], ["conda create -n ai python==3.7.6\nconda activate ai\nconda install pandas matplotlib scikit-learn scrapy seaborn\nconda install -c anaconda tensorflow\n"], ["import ccxt\n\nexchange_id = 'binance'\nexchange_class = getattr(ccxt, exchange_id)\nexchange = exchange_class({\n    'apiKey': 'your-public-api-key',\n    'secret': 'your-api-secret',\n    'timeout': 30000,\n    'enableRateLimit': True,\n})\n\nexchange.options = {'defaultType': 'future'}\nmarkets = exchange.load_markets()  # Load the futures markets\n\nfor market in markets: \n    print(market)                # check for the symbol you want to trade here\n\n# The rest of your code goes here\n"], ["conda install -c anaconda tensorflow\n"], ["while cont and self.socket is not None:\n            try:\n                buf = self.socket.recv(4096)\n                allbuf += buf\n                logger.debug(\"len %d raw:%s|\", len(buf), buf)\n\n                if len(buf) < 4096:\n                    cont = False\n            except OSError:\n                pass\n"], ["for mail in folder.Items:\n    if 'whatever' in mail.Subject: # just a condition (optional)\n        mail.Delete()\n", "for mail in reversed(folder.Items): # just tried deleting Items in reverse order\n    if 'whatever' in mail.Subject: # just a condition (optional)\n        mail.Delete()\n"], ["    \"terminal.integrated.inheritEnv\": false,\n"], ["def counter(start, stop):\n    x = start\n    if start > stop:\n        return_string = \"Counting down: \"\n        while x >= stop:\n            return_string += str(x)\n            x = x-1\n            if start != stop:\n                return_string += \",\"\n        print(return_string)\n    else:\n        return_string = \"Counting up: \"\n        while x <= stop:\n            return_string += str(x)\n            x = x + 1\n            if start != stop:\n                return_string += \",\"\n        print(return_string)\n    return return_string\n"], ["pow(base, exp) =  base**exp\npow(12,2) = 144 = 12**2\n"], [], [], [], ["pip uninstall h5py\npip install h5py\n"], ["import numpy as np\nimport numba as nb\nimport numexpr as ne\n\ndef method2(X,Y,cx,cy,r):\n    \"\"\"Numexpr method\"\"\"\n    res = ne.evaluate('((X-cx)**2 + (Y-cy)**2) < r**2')\n    return res\n\n@nb.njit(fastmath=True,parallel=True)\ndef method3(X,Y,cx,cy,r):\n    acc=0\n    for i in nb.prange(X.shape[0]):\n        if ((X[i]-cx)**2 + (Y[i]-cy)**2) < r**2:\n            acc+=1\n    return acc\n"], ["#!/usr/bin/env python3\n\nimport numpy as np\nimport numexpr as ne\n\n# Ensure repeatable, deterministic randomness!\nnp.random.seed(42)\n\n# Generate test arrays\nN = 1000000\nX = np.random.rand(N)\nY = np.random.rand(N)\n\n# Define centre and radius\ncx = cy = r = 0.5\n\ndef method1(X,Y,cx,cy,r):\n    \"\"\"Straight Numpy determination of points in circle\"\"\"\n    d = (X-cx)**2 + (Y-cy)**2\n    res = d < r**2\n    return res\n\ndef method2(X,Y,cx,cy,r):\n    \"\"\"Numexpr determination of points in circle\"\"\"\n    res = ne.evaluate('((X-cx)**2 + (Y-cy)**2)<r**2')\n    return res\n\ndef method3(data,a,b,r): \n    \"\"\"List based determination of points in circle, with pre-filtering using a square\"\"\"\n    in_square_points = [(x,y) for (x,y) in data if a-r < x < a+r and b-r < y < b+r] \n    in_circle_points = [(x,y) for (x,y) in in_square_points if (x-a)**2 + (y-b)**2 < r**2] \n    return in_circle_points\n\n# Timing\n%timeit method1(X,Y,cx,cy,r)\n\n%timeit method2(X,Y,cx,cy,r)\n\n# Massage input data (before timing) to match agorithm\ndata=[(x,y) for x,y in zip(X,Y)]\n%timeit method3(data,cx,cy,r)\n", "method1(X,Y,cx,cy,r).sum()                                                                                                                       \n784973\n\nmethod2(X,Y,cx,cy,r).sum()                                                                                                                       \n784973\n\nlen(method3(data,cx,cy,r))                                                                                                                       \n784973\n\n4 * 784973 / N\n3.139\n", "# Split calculations across 6 threads\nne.set_num_threads(6) \n"], ["in_square_points = [(x,y) for (x,y) in data if a-r < x < a+r and b-r < y < b+r]\n", "in_circle_points = [(x,y) for (x,y) in in_square_points if (x-a)**2 + (y-b)**2 < r**2]\n", "data = [\n    [13, 45],\n    [-1, 2],\n    ...\n    [60, -4]\n]\n", "in_square_points = []\nfor i in range(len(data)):\n    x = data[i][0]\n    y = data[i][1]\n    if a-r < x < a+r and b-r < y < b+r:\n        in_square_points.append([x, y])\nprint(in_square_points)\n"], [], ["l = [2, 4, 1, 3, 5]\nl[1:] = sorted(l[1:])\nprint(l)\n", "[2, 1, 3, 4, 5]\n", "l[1:] = \n", "l = [1, 2, 3, 4, 5]\n", "print(l[1:])\n", "[2, 3, 4, 5]\n", "print(l[1:3])\n", "[2, 3]\n", "l[1:] = [100, 200, 300, 400]\nprint(l)\n", "[1, 100, 200, 300, 400]\n", "l = [3, 2, 1, 4]\n", "print(sorted(l))\n", "[1, 2, 3, 4]\n"], [], [], [], [">>> tmp = l[0]\n>>> l[0] = float('-inf')\n>>> l.sort()\n>>> l[0] = tmp\n>>> l\n[2, 1, 3, 4, 5]\n", "  sort_u10 0.8149 seconds\nsort_chris 0.8569 seconds\n sort_heap 0.7550 seconds\nsort_heap2 0.5982 seconds   # using -1 instead of -inf\n", "  sort_u10 0.4778 seconds\nsort_chris 0.4786 seconds\n sort_heap 0.8106 seconds\nsort_heap2 0.4437 seconds   # using -1 instead of -inf\n", "import timeit, os\n\ndef sort_u10(l):\n    l[1:] = sorted(l[1:])\n\ndef sort_chris(l):\n    l = l[:1] + sorted(l[1:])\n\ndef sort_heap(l, smallest=float('-inf')):\n    tmp = l[0]\n    l[0] = smallest\n    l.sort()\n    l[0] = tmp\n\ndef sort_heap2(l):\n    tmp = l[0]\n    l[0] = -1\n    l.sort()\n    l[0] = tmp\n\nfor _ in range(3):\n    for sort in sort_u10, sort_chris, sort_heap, sort_heap2, sort_rev:\n        number, repeat = 1_000_000, 5\n        data = iter([[2, 4, 1, 3, 5] for _ in range(number * repeat)])\n        # number, repeat = 50_000, 5\n        # data = iter([[int(x) for x in os.urandom(100)] for _ in range(number * repeat)])\n        t = timeit.repeat(lambda: sort(next(data)), number=number, repeat=repeat)\n        print('%10s %.4f seconds' % (sort.__name__, min(t)))\n    print()\n"], ["l[1:] = l[:0:-1]\n"], ["def sortedList(li, start=0, end=None):\n        if end is None:\n                end = len(li)\n        fi = []\n        fi[:start] = li[:start]\n        fi[start:end] = sorted(li[start:end])\n        return fi\n\n\nli = [2, 1, 4, 3, 0]\nprint(li)\nprint(sortedList(li, 1))\n", "[2, 1, 4, 3, 0]\n[2, 0, 1, 3, 4]\n"], ["l[:1] + sorted(l[1:])\n", "[2, 1, 3, 4, 5]\n"], [], ["binance_futures = ccxt.binance({ 'option': { 'defaultMarket': 'futures' } })\n"], ["import win32com.client\n\noutlook = win32com.client.gencache.EnsureDispatch(\"Outlook.Application\")\n\nfolders = outlook.GetNamespace(\"MAPI\")\n\ninbox= folders.GetDefaultFolder(6)\n\nmessages=inbox.Items\n\nemail_ids = []\n\nfolder_id = inbox.StoreID \n\n# Here create a function to isolate/exclude. Below is just an example of filtering by a subject line.\n\nemail_subjects = ['Subj1','Subj2','Subj3']\n\nfor i in range(len(messages)):\n\n    if any(header in inbox.Items[i].Subject for header in email_subjects):\n\n        email_ids.append(inbox.Items[i].EntryID)\n\nfor id in email_ids:\n    folders.GetItemFromID(id, folder_id).Delete()\n"], ["FROM python:3.7-alpine\nRUN echo \"@testing http://dl-cdn.alpinelinux.org/alpine/edge/testing\" >> /etc/apk/repositories\nRUN apk add --update --no-cache py3-numpy py3-pandas@testing\n"], [], ["    instance = super(Foo, cls).__new__(cls,*args, **kwargs)\n", "class Foo:\n    def __new__(cls, <b>a, b,</b> *args, **kwargs):\n        print(\"Creating Instance\")\n        instance = super(Foo, cls).__new__(cls, *args, **kwargs)\n        return instance\n\n    def __init__(self, a, b, <b>*args, **kwargs</b>):\n            <b>super().__init__(*args, **kwargs)</b>\n            self.a = a\n            self.b = b"], [], [], ["import plotly.graph_objects as go\n\nfig = go.Figure(data=go.Heatmap(colorbar={\"title\": \"Your title\"},\n                                            z=[[1, 20, 30],\n                                              [20, 1, 60],\n                                              [30, 60, 1]]))\n fig.show()\n"], ["fig = go.Figure(\n    data=go.Heatmap(z=z_values, y=[str(x) for x in params_1], x=[str(x) for x in params_2]), \ncolorbar=dict(title='Title') , \n    layout=go.Layout(\n        title=\"Analysis results\",\n        xaxis=dict(title='Diameter'),\n        yaxis=dict(title='Max Distance')\n    ),\n)\nfig.show()\n"], ["def sms_encoding(data):\n    vowel = \"aeiouAEIOU\"\n    list1 = data.split()\n    list2 = []\n\n    for i in list1:\n        length=len(i)\n        if length == 1:\n            list2.append(i)\n            list2.append(\" \")#to add spaces between the words\n        else:\n            count=0\n            for a in i:\n                if a in vowel:\n                    count+=1 \n            if count==length: #to check if all the letters are vowels\n                list2.append(i)\n                list2.append(\" \")\n            for a in i:\n                if a not in vowel:\n                    list2.append(a)\n\n            list2.append(\" \")\n    list2.pop() #to remove the extra space at the end of the whole sentence\n    q=\"\".join(list2)\nreturn q\n\ndata = \"I love Python aeio\"\nprint(sms_encoding(data))\n"], [], ["if(K.common.image_dim_ordering() == 'th'):\n\n    input_tensor = Input(shape=(3, 299, 299))\n"], ["def str_td(td):\n    s = str(td).split(\", \", 1)\n    a = s[-1]\n    if a[1] == ':':\n        a = \"0\" + a\n    s2 = s[:-1] + [a]\n    return \", \".join(s2)\n\nprint(str_td(datetime.timedelta(minutes=10)))\nprint(str_td(datetime.timedelta(minutes=3200)))\nprint(str_td(datetime.timedelta(minutes=-1400)))\nprint(str_td(datetime.timedelta(seconds=4003.2)))\nprint(str_td(datetime.timedelta(seconds=86401.1)))\n", "00:10:00\n2 days, 05:20:00\n-1 day, 00:40:00\n01:06:43.200000\n1 day, 00:00:01.100000\n", "def str_td(td):\n    s = str(td).split(\", \", 1)\n    t = datetime.time(td.seconds // 3600,td.seconds // 60 % 60,td.seconds % 60, td.microseconds)\n    s2 = s[:-1] + [str(t)]\n    return \", \".join(s2)\n\nprint(str_td(datetime.timedelta(minutes=10)))\nprint(str_td(datetime.timedelta(minutes=3200)))\nprint(str_td(datetime.timedelta(minutes=-1400)))\nprint(str_td(datetime.timedelta(seconds=4003.2)))\nprint(str_td(datetime.timedelta(seconds=86401.1)))\n"], ["\"{:0>8}\".format(str(td))\n# result: \"00:10:00\"\n"], ["td = datetime.timedelta(minutes=10)\ntime = '0'+str(td)\nprint(time)\n", "00:10:00\n"], ["q = \"'1234' in parents\"\n"], ["pip3 install virtualenv\nvirtualenv env\ncall \".\\env\\Scripts\\activate.bat\"\nset requirements=\"./Requirements.txt\"\npip3 install -r %requirements%\npython\n"], ["    import math\n\nprint(\"Quadratics Equation Calculator\")\nrepeat = \"yes\"\nwhile repeat.lower() == \"yes\":\n\n    V = float(input(\"Enter how many Variables do you have in the question: \"))\n    print(V)\n    if V == 3:\n        a = float(input(\"Enter the first variable: \"))\n        print(a)\n        b = float(input(\"Enter the second variable: \"))\n        print(b)\n        c = float(input(\"Enter the third variable: \"))\n        print(c)\n        root_1 = ((-1 * b) + math.sqrt((b ** 2) - (4 * a * c))) / (2 * a)\n        root_2 = ((-1 * b) - math.sqrt((b ** 2) - (4 * a * c))) / (2 * a)\n        print(f\"The first result is {root_1} to {round(root_1)}\")\n        print(f\"The second result is {root_2} to {round(root_2)}\")\n        graph = str(input(\"Want minimum point: \"))\n        if graph == \"yes\":\n            x = ((b / 2) * -1)\n            y = c - b ** 2/4*a\n            print(f\"The minimum point is ({x}, {y})\")\n        elif graph == \"no\":\n            repeat = str(input(\"Do you wish to continue?: \"))\n            if repeat == \"no\":\n                break\n        else:\n            repeat = str(input(\"Do you wish to continue?: \"))\n            if repeat == \"no\":\n                break\n\n    elif V == 2:\n        a = float(input(\"Enter the first variable: \"))\n        print(a)\n        b = float(input(\"Enter the second variable: \"))\n        print(b)\n        root_1 = ((-1 * b) + math.sqrt((b ** 2) - (4 * a * 0))) / (2 * a)\n        root_2 = ((-1 * b) - math.sqrt((b ** 2) - (4 * a * 0))) / (2 * a)\n        print(f\"The first result is {root_1} to {round(root_1)}\")\n        print(f\"The second result is {root_2} to {round(root_2)}\")\n\n    else: \n        print(\"INVALID ERRORS, CHECK AGAIN YOUR VARIABLES\")\n        print(\"Type yes or no.\")\n\n    repeat = str(input(\"Do you wish to continue?: \"))\n    if repeat == \"no\":\n        break\n"], ["\n\nInput_Str = \"FOOTBALL\"\n\ndef replacing(Input_String, char_2_replace, replaced_char, n):\n    pattern = re.compile(char_2_replace)\n    if len(re.findall(pattern, Input_String)) >= n: \n        where = [m for m in pattern.finditer(Input_String)][n-1]\n        before = Input_String[:where.start()]\n        after = Input_String[where.end():]\n        newString = before + replaced_char + after\n    else: \n        newString = Input_String\n    return newString\n\nprint(replacing(Input_Str, 'L', 'X', 4))```\n"], [], ["driver.find_element_by_id(\"text-input-where\").click();\ndriver.find_element_by_id(\"text-input-where\").clear();\ndriver.find_element_by_id(\"text-input-where\").sendKeys(textContent);\n", "elem2 = WebDriverWait(browser, 60).until(EC.visibility_of_element_located((By.ID, 'text-input-where')))\nwebdriver.ActionChains(driver).move_to_element(elem2).click(elem2).perform()\nelem2.clear();\n", "driver.find_element_by_id(\"text-input-where\").click();\ndriver.find_element_by_id(\"text-input-where\").send_keys(Keys.CONTROL + \"a\");\ndriver.find_element_by_id(\"text-input-where\").send_keys(Keys.DELETE);\n"], ["def clear_text(element):\n    length = len(element.get_attribute('value'))\n    element.send_keys(length * Keys.BACKSPACE)\n"], ["from selenium import webdriver\n\nfrom selenium.webdriver.support.ui import WebDriverWait\n\nfrom selenium.webdriver.support import expected_conditions as EC\n\n    driver = webdriver.Chrome()\n    driver.get(\"https://www.indeed.com\")\n\n    WebDriverWait(browser, 60).until(EC.visibility_of_element_located((By.ID, 'text-input-where')))\n\n    elem2 = driver.find_element_by_id(\"text-input-where\")\n\n    driver.execute_script('arguments[0].value = \"\";', elem2)\n", "WebDriver driver = new ChromeDriver();\ndriver.get(\"https://www.indeed.com\");\nWebDriverWait waiter = new WebDriverWait(driver, 60);\nwaiter.until(ExpectedConditions.visibilityOfElementLocated(By.id(\"text-input-where\")));\nWebElement element = driver.findElement(By.id(\"text-input-where\"));\n\n((JavascriptExecutor) driver).executeScript(\"arguments[0].value ='';\", element);\n"], ["driver.execute_script('arguments[0].value = \"\";', driver.find_element_by_id(\"text-input-where\"))\n"], ["sudo apt-get install python3.7 \n", "sudo apt-get install python3-pip \n", "sudo update-alternatives --install /usr/bin/python3 python3 /usr/bin/python3.7 1\n"], [], ["C:\\Users\\PC_NAME\\AppData\\Local\\Programs\\Python\\Python37-32\\Scripts>\n\npip install PyQt5\n"], ["import math\n\n\nprint (\"Quadratic Equation Calculator\")\n\na = float(input(\"Enter the coefficient of term `x ^ 2` (degree 2), [a]: \"))\nb = float(input(\"Enter the coefficient of term `x` (degree 1), [b]: \"))\nc = float(input(\"Enter the constant term (degree 0), [c]: \"))\n\ndiscriminant = pow(b, 2) - 4.0 * a * c\n\nif discriminant == 0:\n    root1 = root2 = (-1 * b) / (2 * a)\nelif discriminant < 0:\n    root1 = ((-1 * b) - math.sqrt(-discriminant) * 1j) / (2 * a)\n    root2 = ((-1 * b) + math.sqrt(-discriminant) * 1j) / (2 * a)\nelse:\n    root1 = ((-1 * b) - math.sqrt(discriminant)) / (2 * a)\n    root2 = ((-1 * b) + math.sqrt(discriminant)) / (2 * a)\n\nprint (root1)\nprint (root2)\n", "import numpy as np\nprint (\"Quadratic Equation Calculator\")\n\na = float(input(\"Enter the coefficient of term `x ^ 2` (degree 2), [a]: \"))\nb = float(input(\"Enter the coefficient of term `x` (degree 1), [b]: \"))\nc = float(input(\"Enter the constant term (degree 0), [c]: \"))\n\ncoeffs = [a, b, c]  # or d, e and so on..\nroots = np.roots(coeffs)\nprint (roots)\n"], ["#Import package\nimport numpy as np\n\n#Define a new function called qes\ndef qes(a1,b1,c1):\n\n    ans1=((-1*b1)+np.lib.scimath.sqrt((b1**2)-(4*a1*c1)))/(2*a1)\n    ans2=((-1*b1)-np.lib.scimath.sqrt((b1**2)-(4*a1*c1)))/(2*a1)\n\n    return ans1,ans2\n\n#With the defined function perform a calculation and print the answer\nans1,ans2=qes(1,2,1)\nprint('Answer 1 is: ',ans1,' Answer 2 is: ',ans2)\n"], [], [], ["    def _recvAllMsg(self):\n    cont = True\n    allbuf = b\"\"\n\n    while cont and self.socket is not None:\n        try: #this line added\n            buf = self.socket.recv(4096)\n        except OSError: #this line added\n            buf = b'' #this line added\n        allbuf += buf\n        logger.debug(\"len %d raw:%s|\", len(buf), buf)\n\n        if len(buf) < 4096:\n            cont = False\n\n    return allbuf\n"], [], ["\nsudo apt-get -y update\n---------\nsudo apt-get install python3.7\n--------------\n python3.7\n-------------\n curl -O https://bootstrap.pypa.io/get-pip.py\n-----------------\nsudo apt install python3-pip\n-----------------\nsudo apt install python3.7-venv\n-----------------\n python3.7 -m venv /home/ubuntu/app\n-------------\n cd app   \n----------------\n source bin/activate\n"], [], [], ["RUN apk add --no-cache jpeg-dev zlib-dev\nRUN apk add --no-cache --virtual .build-deps build-base linux-headers \\\n    && pip install Pillow\n"], [], ["def expanding(l):\ndif=[]\nfor x,y in zip(l,l[1:]):\n    diff=abs(y-x)\n    dif.append(diff)\nreturn all(i<j for i,j in zip(dif,dif[1:]))\n"], ["def expanding(l):\n for i in range(0,len(l)-2):\n  if (abs(l[i+2]-l[i+1])>abs(l[i+1]-l[i])):\n   Answer=True\n  else:\n   Answer=False\n   return Answer\n return Answer\n\nexpanding([1,3,7,2,-3]) \n"], [], [], [], [], [], [], ["import pandas_profiling as pp\ndf = pd.read_csv('1234.csv')\npp.ProfileReport(df)\n"], ["    conda create --name py365 python=3.6.5 --channel conda-forge\n", "    conda activate py365\n", "C:\\Users\\Your_Name\\AppData\\Roaming\\Microsoft\\Windows\\Start Menu\\Programs\\Anaconda3 (64-bit)\n", "%windir%\\System32\\cmd.exe \"/K\" C:\\Users\\Your_Name\\Anaconda3\\Scripts\\activate.bat C:\\Users\\Your_Name\\Anaconda3\n", "%windir%\\System32\\cmd.exe \"/K\" C:\\Users\\Your_Name\\Anaconda3\\Scripts\\activate.bat C:\\Users\\Your_Name\\Anaconda3\\envs\\py365\n"], [], [], ["for i in range(1, num + 1):\n    sq = i * i\n    if sq == num:\n        print(f\"{i} squared is exactly {num}\")\n        break\n    if sq  > num:\n        print(f\"{num} is not a perfect square\")\n        break\n"], ["num=int(input(\"Enter a positive integer: \"))\nfor i in range(num + 1): # in case you enter 1, we need to make sure 1 is also checked\n    pow = i * i\n    if pow == num:\n        print('%d is a pefect square' % num)\n        break\n    elif pow > num:\n        print('%d is not a pefect square' % num)\n        break\n\n"], ["while num/base!=base:\n", "while num/base>base:\n"], ["def is_perfect_square(x):\n    i = 1\n    while i*i < x:\n        i += 1\n    return i*i == x\n\nprint(is_perfect_square(15))\n# False\nprint(is_perfect_square(16))\n# True\n"], [], ["MIDDLEWARE = MIDDLEWARE_CLASSES\n", "if not _contains_subclass(\n   'django.contrib.auth.middleware.AuthenticationMiddleware', \n   settings.MIDDLEWARE\n):\n   errors.append(checks.Error( ...\n"], [], ["import plotly.graph_objects as go\nfig = go.Figure( go.Scatter(x=[1,2,3], y=[1,3,2] ) )\nfig.show()\n"], ["apt update\napt-get install python3-setuptools\ncurl https://bootstrap.pypa.io/get-pip.py -o get-pip.py\npython3 get-pip.py\nrm -f get-pip.py\n"], ["n_list[i]\n", "n_list = []\nn = int(input(\"write list length: \\n\"))\nfor i in range (n):\n    item = [] #create the nested list for each loop\n\n    name = input(\"Write name : \\n\")\n    item.append(name)\n\n    val = int(input(\"write value : \\n\"))\n    item.append(val)\n\n    n_list.append(item)\n\nprint(n_list)\n"], ["n = int(input())\nn_list = n * [None]\n", "n_list[i] = the_value\n"], ["n_list = []\nn = int(input())\nfor i in range (0,n):\n    print(i)\n    name = input()\n    val = int(input())\n    n_list.append([name, val])\nprint(n_list)\n", "n_list = []\nn = int(input())\nfor i in range (0,n):\n    print(i)\n    name = input()\n    val = int(input())\n    n_list.append({'name': name, 'value': val})\nprint(n_list)\n"], ["n_list = []\nn = int(input())\nfor i in range (0,n):\n    print(i)\n    name = input()\n    n_list.append(name)\n    val = int(input())\n    n_list.append(val)\nprint(n_list)\n", "n_list = []\nn = int(input())\nfor i in range (0,n):\n    print(i)\n    inner_list = []\n    name = input()\n    inner_list.append(name)\n    val = int(input())\n    inner_list.append(val)\n    n_list.append(inner_list)\nprint(n_list)\n"], ["The append function works in the following way (syntax):\n    <list_name>.append(<item>)\n", "n_list[i].append(name)\n"], [], ["pip3 install jupyter notebook\n"], [], [], ["'Position\\t123,456'\n"], [], [], [], ["l = ['hello', 'goodbye', 'hi', 'how are you', 'hi']\n{a: b for b,a in enumerate(l)}\n"], [], ["my_list = [\"hello\", \"goodbye\", \"hi\", \"how are you\", \"hi\"]\nunique_list = list(set(my_list))\n\n['hi', 'hello', 'goodbye', 'how are you']\n", "my_dict = dict(zip(unique_list, range(len(unique_list))))\n\n{'hi': 0, 'hello': 1, 'goodbye': 2, 'how are you': 3}\n"], ["keys = list(set(original))\nmapping = {k:v for v,k in enumerate(keys)}\nresult = [mapping[k] for k in original]\n"], ["words = [\"hello\", \"goodbye\", \"hi\", \"how are you\", \"hi\"]\n\nd = dict()\ni = 0\nfor word in words:\n    if word not in d:\n        d[word] = i\n        i += 1\nprint(d)\n#print(sorted(d.items(), key=lambda kv: kv[1])) print them sorted\n"], [">>> w = [\"hello\", \"goodbye\", \"hi\", \"how are you\", \"hi\"]\n>>> l = [0, 1, 2, 3, 2]\n>>> trans = {l1:w1 for w1,l1 in zip(w,l)}\n>>> trans\n{0: 'hello', 1: 'goodbye', 2: 'hi', 3: 'how are you'}\n"], ["   if  condition >= 0:\n    Totmonth = condition \n  else:\n     Totmonth = 12+condition \n      age -= 1\n\n  print \"age is\" , age,\"years and\", Totmonth,\"months\"\n"], ["def logger(filename, level=None, format=None):\n    \"\"\"A wrapper to the logging python module\n\n    This module is useful for cases where we need to log in a for loop\n    different files. It also will allow more flexibility later on how the\n    logging format could evolve.\n\n    Parameters\n    ----------\n    filename : str\n        Name of logfile. \n    level : str, optional\n        Level of logging messages, by default 'info'. Supported are: 'info'\n        and 'debug'.\n    format : str, optional\n        Format of logging messages, by default '%(message)s'.\n\n    Returns\n    -------\n    logger\n        A logger object.\n    \"\"\"\n\n    levels = {\"info\": logging.INFO, \"debug\": logging.DEBUG}\n\n    if level is None:\n        level = levels[\"info\"]\n    else:\n        level = levels[level.lower()]\n\n    if format is None:\n        format = \"%(message)s\"\n\n    # https://stackoverflow.com/a/12158233/1995261\n    for handler in logging.root.handlers[:]:\n        logging.root.removeHandler(handler)\n\n    logger = logging.basicConfig(filename=filename, level=level, format=format)\n\n    return logger\n", "import logging\nimport other stuff\n\nlogger = logging.getLogger()\n\n\nclass SomeClass(object):\n    def some_method(self):\n        logger.info(\"Whatever\")\n        .... stuff\n", "if __name__ == \"__main__\":\n    for i in range(1, 11, 1):\n        directory = \"_{}\".format(i)\n\n        if not os.path.exists(directory):\n            os.makedirs(directory)\n        filename = directory + \"/training.log\"\n        logger(filename=filename)\n"], ["def years_of_age():\n    from datetime import date, datetime\n    dob = input(\"Please enter your DOB as mm-dd-yyyy: \")\n\n    #time delta in days\n    val = date.today().toordinal() - datetime.strptime(dob, \"%m-%d-%Y\").toordinal()\n\n    # this is just so you can confirm, comment out the following 4 lines\n    print(\"months {}, years {}\".format(\\\n                                       int(datetime.fromordinal(val).strftime(\"%m\")),\\\n                                       int(datetime.fromordinal(val).strftime(\"%Y\"))\\\n                                      ))\n\n    # conditional return based on the months figure\n    if int(datetime.fromordinal(val).strftime(\"%m\")) >=6:\n        return int(datetime.fromordinal(val).strftime(\"%Y\")) + 1\n    else:\n        return int(datetime.fromordinal(val).strftime(\"%Y\"))\n", "years_of_age()\n", "years_of_age()\n", "years_of_age()\n"], ["from datetime import date\n\n# Doby,Dobm,Dobd =input(\"enter your DOB : i.e year,month,days  1999,02,08   : \").split(\",\")\nDoby, Dobm, Dobd = 1999, 11, 1\nborn = date(year=int(Doby), month=int(Dobm), day=int(Dobd))\ntoday = date.today()\n\nprint(round((today-born).days/365.25))\n\n", "20\n"], ["days_in_year = 365.2425    \nage = (date.today() - born).days / days_in_year\ndecAge = age - int(age)\n", "if decAge > 0.5 :\n  age = int(age) + 1\nelse:\n  age = int(age)\n"], ["symbols = [\"`\", \"~\", \"!\", \"@\", \"#\", \"$\", \"%\", \"^\", \"&\", \"*\", \"(\", \")\", \"_\", \"-\", \"+\", \"=\", \"{\", \"[\", \"]\", \"}\", \"|\", \"\\\\\", \":\", \";\", \"\\\"\", \"<\", \",\", \">\", \".\", \"?\", \"/\"]\nremoveSymbols = str.maketrans(\"\",\"\",\"\".join(symbols))\n\ncleanText = \"[Hello World] *!\".translate(removeSymbols)\nprint(cleanText) # \"Hello World \"\n", "removeSymbols = str.maketrans(\"\".join(symbols),\" \"*len(symbols))\n"], ["symbols = [\"`\", \"~\", \"!\", \"@\", \"#\", \"$\", \"%\", \"^\", \"&\", \"*\", \"(\", \")\", \"_\", \"-\", \"+\",\n           \"=\", \"{\", \"[\", \"]\", \"}\", \"|\", \"\\\\\", \":\", \";\", \"\\\"\", \"<\", \",\", \">\", \".\", \"?\", \"/\"]\n", "d = dict.fromkeys(''.join(symbols), ' ')\n# {'`': ' ', ',': ' ', '~': ' ', '!': ' ', '@': ' '...\nt = str.maketrans(d)\n", "s = '~this@is!a^test@'\ns.translate(t)\n# ' this is a test '\n"], ["symbols = {\"`\", \"~\", \"!\", \"@\", \"#\", \"$\", \"%\", \"^\", \"&\", \"*\", \"(\", \")\", \"_\", \"-\", \"+\", \"=\", \"{\", \"[\", \"]\", \"}\", \"|\", \"\\\\\", \":\", \";\", \"\\\"\", \"<\", \",\", \">\", \".\", \"?\", \"/\"}\ntranslate_table = {126: None, 93: None, 91: None, 125: None, 92: None, 42: None, 45: None, 94: None, 62: None, 47: None, 35: None, 59: None, 44: None, 58: None, 60: None, 124: None, 61: None, 36: None, 95: None, 43: None, 96: None, 123: None, 64: None, 33: None, 38: None, 63: None, 46: None, 34: None, 41: None, 37: None, 40: None}\nregular_expression = \"[`~!@#$%^&*()_\\-+={[\\]}|\\\\:;\\\"<,>.?/]\"\nsmall_document = \"Some**r@an]]\\\"dom t##xt\"\nnormal_document = \"TbsX^Kt$FZ%haZe+sLxu:Al\\\"xNAL\\\\Kix[mHp_gn]PrG`DqGd~GdNc;BoEq.SYD?Rp>ukq,UfO<XdTc=RUH}oifc&oP!CB*me@Qv{Qf-Li)gmXL/IQH#mne(Khaj|\"\nbig_document = \"QOfY+dymyoGBAxTAoIeM+jEWlaECUZEUXuMvprJOqFtQR*OiHtTFZkUNbYipSTTDPOVkIdGTcjWrQmbmthKBHBSEOZ)lQAIJOrVgmGGFdtqbuFfj<Dls<JWtKczAFMPYMemiJBJHdPeeul\\\\x>lGIBvUsxBokagvVovrrdxdKMtAKx>MEexYv>DGqPUXYaBQKwiSIUobrPQYjilhHMQunE;RiqOZPTnyOEgRrpxcuobvvmGkFpTqgMxYYhrmRRnauiqgvCmZ\\\"UauceaXsgAMSakxewzPrlIrYkVCVZaEGh]qiizYyzbkcHPF@qQsQMfHPDEbEnWtrCFoARUYAloOcctqmL@hegZbfhsHaJOxOxzQhZAVjVDgokosATfhKMT!WYyPWKcKAHKCzQGGJOCglYGZbftsuyntXZUKNqgGlsLJqgN,pUcOoA/tStXFXgpoSErgvw/OUMPWjJwt=bhMAIDayOZXJm=ifYYUuAvSIZjwnBfktNvEvZmvQso%HiNZEVqoDR%nQBtCkhjSfVfDuRSRsvp-sCunjDDUYSEVLICQdisxhEfqkUTkiPlLiUNNwrvO#WTDmweZyMeIbgNXkIsvaJeHYXV(HvRcGNZM(PPRIAyyLWivGiqMVBtwObqLfEEISyyjGNEdUU:ys`dXcVawkIEAjFXky`RUXNTm`LDM}mwTOcmsSo}haJXPnkwOhKLYwve}SWifzKq}grw}fMSQXXWguUQtlWpPZQymR^wBKEyolFlZnzEEmehSNenOqDOHWRit[Npm?R?DIPXAmQYYBbmJofxUzzWBsVCoPI?VmpXhoMxCfXyHEHowXzIJvExThiffLhBTtma_jk_NrbkPCGGypXvOuBqBxDYfC{bwIHoaqnJSKytxwWXBNnKG~PKuQklGblEwH~rJoGpKZmm~tTEFnPLdmzfrqJibMYIykzL$RZLPmsZjB$AAbZwFnByOydEOIfFvTaEQaSjbpeBZuUGY&ZfPQgLihmPYrhZxSwMzLrNF.WjFiDCLyXksdkLeMHVCfrdgCAotElQ|\"\nno_match_document = \"XOtasggWqhtSLJpHEGoCmMRepFBlRfAGKTLPcEtKonFVsPgvWgAbvJVeMWILPgLapwAmTgXWVbxOJtUFmMygzIqYPqyAxzwElTFyYcGdtnNa\"\n", "def func1(doc):\n    for c in symbols:\n        doc = doc.replace(c, \"\")\n    return doc\n\n\ndef func2(doc):\n    return doc.translate(translate_table)\n\n\ndef func3(doc):\n    return re.sub(regular_expression, \"\", doc)\n\n\ndef func4(doc):\n    return \"\".join(c for c in doc if c not in symbols)\n", "func1(small_document):      0.701037002\nfunc1(normal_document):     1.1260866900000002\nfunc1(big_document):        3.4234831459999997\nfunc1(no_match_document):   0.7740780450000004\n\nfunc2(small_document):      0.14135037500000003\nfunc2(normal_document):     0.5368806810000004\nfunc2(big_document):        0.8128472860000002\nfunc2(no_match_document):   0.394245089\n\nfunc3(small_document):      0.3157141610000007\nfunc3(normal_document):     0.927359323000001\nfunc3(big_document):        1.9310377590000005\nfunc3(no_match_document):   0.18656399199999996\n\nfunc4(small_document):      0.3034549070000008\nfunc4(normal_document):     1.3695875739999988\nfunc4(big_document):        10.115730064\nfunc4(no_match_document):   1.2086623230000022\n", "translate_table = {ord(s): None for s in symbols}\n", "    if __name__ == '__main__':\n    import timeit\n    print(\"func1(small_document)\", timeit.timeit(\"func1(small_document)\", setup=\"from __main__ import func1, small_document\", number=100000))\n    print(\"func1(normal_document): \", timeit.timeit(\"func1(normal_document)\", setup=\"from __main__ import func1, normal_document\", number=100000))\n    print(\"func1(big_document): \", timeit.timeit(\"func1(big_document)\", setup=\"from __main__ import func1, big_document\", number=100000))\n    print(\"func1(no_match_document): \", timeit.timeit(\"func1(no_match_document)\", setup=\"from __main__ import func1, no_match_document\", number=100000))\n\n    print(\"func2(small_document): \", timeit.timeit(\"func2(small_document)\", setup=\"from __main__ import func2, small_document\", number=100000))\n    print(\"func2(normal_document): \", timeit.timeit(\"func2(normal_document)\", setup=\"from __main__ import func2, normal_document\", number=100000))\n    print(\"func2(big_document): \", timeit.timeit(\"func2(big_document)\", setup=\"from __main__ import func2, big_document\", number=100000))\n    print(\"func2(no_match_document): \", timeit.timeit(\"func2(no_match_document)\", setup=\"from __main__ import func2, no_match_document\", number=100000))\n\n    print(\"func3(small_document): \", timeit.timeit(\"func3(small_document)\", setup=\"from __main__ import func3, small_document\", number=100000))\n    print(\"func3(normal_document): \", timeit.timeit(\"func3(normal_document)\", setup=\"from __main__ import func3, normal_document\", number=100000))\n    print(\"func3(big_document): \", timeit.timeit(\"func3(big_document)\", setup=\"from __main__ import func3, big_document\", number=100000))\n    print(\"func3(no_match_document): \", timeit.timeit(\"func3(no_match_document)\", setup=\"from __main__ import func3, no_match_document\", number=100000))\n\n    print(\"func4(small_document): \", timeit.timeit(\"func4(small_document)\", setup=\"from __main__ import func4, small_document\", number=100000))\n    print(\"func4(normal_document): \", timeit.timeit(\"func4(normal_document)\", setup=\"from __main__ import func4, normal_document\", number=100000))\n    print(\"func4(big_document): \", timeit.timeit(\"func4(big_document)\", setup=\"from __main__ import func4, big_document\", number=100000))\n    print(\"func4(no_match_document): \", timeit.timeit(\"func4(no_match_document)\", setup=\"from __main__ import func4, no_match_document\", number=100000))\n"], ["text: '(Hello World)] *!'\nusing_replace                     0.046\nusing_join                        0.016\nusing_translate                   0.031\n\ntext: '~this@is!a^test@'\nusing_replace                     0.046\nusing_join                        0.017\nusing_translate                   0.029\n\ntext: '~/()&this@isasd!&=)(/as/dw&%#a^test@~/()&this@isasd!&=)(/as/dw&%#a^test@~/()&this@isasd!&=)(/as/dw&%#a^test@~/()&this@isasd!&=)(/as/dw&%#a^test@~/()&this@isasd!&=)(/as/dw&%#a^test@~/()&this@isasd!&=)(/as/dw&%#a^test@~/()&this@isasd!&=)(/as/dw&%#a^test@~/()&this@isasd!&=)(/as/dw&%#a^test@~/()&this@isasd!&=)(/as/dw&%#a^test@~/()&this@isasd!&=)(/as/dw&%#a^test@~/()&this@isasd!&=)(/as/dw&%#a^test@~/()&this@isasd!&=)(/as/dw&%#a^test@~/()&this@isasd!&=)(/as/dw&%#a^test@~/()&this@isasd!&=)(/as/dw&%#a^test@~/()&this@isasd!&=)(/as/dw&%#a^test@~/()&this@isasd!&=)(/as/dw&%#a^test@~/()&this@isasd!&=)(/as/dw&%#a^test@~/()&this@isasd!&=)(/as/dw&%#a^test@~/()&this@isasd!&=)(/as/dw&%#a^test@~/()&this@isasd!&=)(/as/dw&%#a^test@~/()&this@isasd!&=)(/as/dw&%#a^test@~/()&this@isasd!&=)(/as/dw&%#a^test@~/()&this@isasd!&=)(/as/dw&%#a^test@~/()&this@isasd!&=)(/as/dw&%#a^test@~/()&this@isasd!&=)(/as/dw&%#a^test@~/()&this@isasd!&=)(/as/dw&%#a^test@~/()&this@isasd!&=)(/as/dw&%#a^test@~/()&this@isasd!&=)(/as/dw&%#a^test@~/()&this@isasd!&=)(/as/dw&%#a^test@~/()&this@isasd!&=)(/as/dw&%#a^test@~/()&this@isasd!&=)(/as/dw&%#a^test@~/()&this@isasd!&=)(/as/dw&%#a^test@~/()&this@isasd!&=)(/as/dw&%#a^test@~/()&this@isasd!&=)(/as/dw&%#a^test@~/()&this@isasd!&=)(/as/dw&%#a^test@~/()&this@isasd!&=)(/as/dw&%#a^test@~/()&this@isasd!&=)(/as/dw&%#a^test@~/()&this@isasd!&=)(/as/dw&%#a^test@~/()&this@isasd!&=)(/as/dw&%#a^test@~/()&this@isasd!&=)(/as/dw&%#a^test@~/()&this@isasd!&=)(/as/dw&%#a^test@~/()&this@isasd!&=)(/as/dw&%#a^test@~/()&this@isasd!&=)(/as/dw&%#a^test@~/()&this@isasd!&=)(/as/dw&%#a^test@~/()&this@isasd!&=)(/as/dw&%#a^test@~/()&this@isasd!&=)(/as/dw&%#a^test@~/()&this@isasd!&=)(/as/dw&%#a^test@~/()&this@isasd!&=)(/as/dw&%#a^test@~/()&this@isasd!&=)(/as/dw&%#a^test@~/()&this@isasd!&=)(/as/dw&%#a^test@~/()&this@isasd!&=)(/as/dw&%#a^test@~/()&this@isasd!&=)(/as/dw&%#a^test@~/()&this@isasd!&=)(/as/dw&%#a^test@~/()&this@isasd!&=)(/as/dw&%#a^test@~/()&this@isasd!&=)(/as/dw&%#a^test@~/()&this@isasd!&=)(/as/dw&%#a^test@~/()&this@isasd!&=)(/as/dw&%#a^test@~/()&this@isasd!&=)(/as/dw&%#a^test@~/()&this@isasd!&=)(/as/dw&%#a^test@~/()&this@isasd!&=)(/as/dw&%#a^test@~/()&this@isasd!&=)(/as/dw&%#a^test@~/()&this@isasd!&=)(/as/dw&%#a^test@~/()&this@isasd!&=)(/as/dw&%#a^test@~/()&this@isasd!&=)(/as/dw&%#a^test@~/()&this@isasd!&=)(/as/dw&%#a^test@~/()&this@isasd!&=)(/as/dw&%#a^test@~/()&this@isasd!&=)(/as/dw&%#a^test@~/()&this@isasd!&=)(/as/dw&%#a^test@~/()&this@isasd!&=)(/as/dw&%#a^test@~/()&this@isasd!&=)(/as/dw&%#a^test@~/()&this@isasd!&=)(/as/dw&%#a^test@~/()&this@isasd!&=)(/as/dw&%#a^test@~/()&this@isasd!&=)(/as/dw&%#a^test@~/()&this@isasd!&=)(/as/dw&%#a^test@~/()&this@isasd!&=)(/as/dw&%#a^test@~/()&this@isasd!&=)(/as/dw&%#a^test@~/()&this@isasd!&=)(/as/dw&%#a^test@~/()&this@isasd!&=)(/as/dw&%#a^test@~/()&this@isasd!&=)(/as/dw&%#a^test@~/()&this@isasd!&=)(/as/dw&%#a^test@~/()&this@isasd!&=)(/as/dw&%#a^test@~/()&this@isasd!&=)(/as/dw&%#a^test@~/()&this@isasd!&=)(/as/dw&%#a^test@~/()&this@isasd!&=)(/as/dw&%#a^test@~/()&this@isasd!&=)(/as/dw&%#a^test@~/()&this@isasd!&=)(/as/dw&%#a^test@~/()&this@isasd!&=)(/as/dw&%#a^test@~/()&this@isasd!&=)(/as/dw&%#a^test@~/()&this@isasd!&=)(/as/dw&%#a^test@~/()&this@isasd!&=)(/as/dw&%#a^test@~/()&this@isasd!&=)(/as/dw&%#a^test@~/()&this@isasd!&=)(/as/dw&%#a^test@~/()&this@isasd!&=)(/as/dw&%#a^test@~/()&this@isasd!&=)(/as/dw&%#a^test@~/()&this@isasd!&=)(/as/dw&%#a^test@~/()&this@isasd!&=)(/as/dw&%#a^test@~/()&this@isasd!&=)(/as/dw&%#a^test@~/()&this@isasd!&=)(/as/dw&%#a^test@~/()&this@isasd!&=)(/as/dw&%#a^test@~/()&this@isasd!&=)(/as/dw&%#a^test@'\nusing_replace                     0.195\nusing_join                        2.327\nusing_translate                   0.061\n\ntext: 'a long text without chars to replacea long text without chars to replacea long text without chars to replacea long text without chars to replacea long text without chars to replacea long text without chars to replacea long text without chars to replacea long text without chars to replacea long text without chars to replacea long text without chars to replacea long text without chars to replacea long text without chars to replacea long text without chars to replacea long text without chars to replacea long text without chars to replacea long text without chars to replacea long text without chars to replacea long text without chars to replacea long text without chars to replacea long text without chars to replacea long text without chars to replacea long text without chars to replacea long text without chars to replacea long text without chars to replacea long text without chars to replacea long text without chars to replacea long text without chars to replacea long text without chars to replacea long text without chars to replacea long text without chars to replacea long text without chars to replacea long text without chars to replacea long text without chars to replacea long text without chars to replacea long text without chars to replacea long text without chars to replacea long text without chars to replacea long text without chars to replacea long text without chars to replacea long text without chars to replacea long text without chars to replacea long text without chars to replacea long text without chars to replacea long text without chars to replacea long text without chars to replacea long text without chars to replacea long text without chars to replacea long text without chars to replacea long text without chars to replacea long text without chars to replacea long text without chars to replacea long text without chars to replacea long text without chars to replacea long text without chars to replacea long text without chars to replacea long text without chars to replacea long text without chars to replacea long text without chars to replacea long text without chars to replacea long text without chars to replacea long text without chars to replacea long text without chars to replacea long text without chars to replacea long text without chars to replacea long text without chars to replacea long text without chars to replacea long text without chars to replacea long text without chars to replacea long text without chars to replacea long text without chars to replacea long text without chars to replacea long text without chars to replacea long text without chars to replacea long text without chars to replacea long text without chars to replacea long text without chars to replacea long text without chars to replacea long text without chars to replacea long text without chars to replacea long text without chars to replacea long text without chars to replacea long text without chars to replacea long text without chars to replacea long text without chars to replacea long text without chars to replacea long text without chars to replacea long text without chars to replacea long text without chars to replacea long text without chars to replacea long text without chars to replacea long text without chars to replacea long text without chars to replacea long text without chars to replacea long text without chars to replacea long text without chars to replacea long text without chars to replacea long text without chars to replacea long text without chars to replacea long text without chars to replacea long text without chars to replace'\nusing_replace                     0.051\nusing_join                        2.100\nusing_translate                   0.064\n", "def using_replace(text, symbols_to_replace, replacement=' '):\n    for char in symbols_to_replace:\n        text = text.replace(char, replacement)\n\n    return text\n\ndef using_join(text, symbols_to_replace, replacement=' '):\n    return ''.join(\n        replacement if char in symbols_to_replace else char\n        for char in text)\n\ndef using_translate(text, symbols_to_replace, replacement=' '):\n    translation_dict = str.maketrans(\n        dict.fromkeys(symbols_to_replace, replacement))\n\n    return text.translate(translation_dict)\n", "    # a 'set' for faster lookup\n    symbols = {\n        '`', '~', '!', '@', '#', '$', '%', '^', '&', '*',\n        '(', ')', '_', '-', '+', '=', '{', '[', ']', '}',\n        '|', '/', ':', ';', '\"', '<', ',', '>', '.', '?',\n        '\\\\',\n    }\n\n    text_list = [\n        '(Hello World)] *!',\n        '~this@is!a^test@',\n        '~/()&this@isasd!&=)(/as/dw&%#a^test@' * 1000,\n        'a long text without chars to replace' * 1000,\n    ]\n    for s in text_list:\n        assert (\n                using_replace(s, symbols)\n                == using_join(s, symbols)\n                == using_translate(s, symbols))\n\n    for s in text_list:\n        print()\n        print('text:', repr(s))\n        for func in [using_replace, using_join, using_translate]:\n            t = timeit.timeit(\n                'func(s, symbols)',\n                'from __main__ import func, s, symbols',\n                number=10000)\n            print('{:30s} {:8.3f}'.format(func.__name__, t))\n"], ["s = '''\ndef translate_():\n    symbols = '`,~,!,@,#,$,%,^,&,*,(,),_,-,+,=,{,[,],},|,\\,:,;,\",<,,,>,.,?,/'\n    s = '~this@is!a^test @'\n    t = str.maketrans(dict.fromkeys(symbols, ' '))\n    s.translate(t)\n    return s\n\ndef replace_():\n    symbols = '`,~,!,@,#,$,%,^,&,*,(,),_,-,+,=,{,[,],},|,\\,:,;,\",<,,,>,.,?,/'\n    s = '~this@is!a^test @'\n    for symbol in symbols:\n        s = s.replace(symbol, ' ')\n    return s\n'''\n\nprint(timeit.timeit('replace_()', setup=s, number=100000))\nprint(timeit.timeit('translate_()', setup=s, number=100000))\n"], ["apk update\napk --no-cache add curl gcc g++\nln -s /usr/include/locale.h /usr/include/xlocale.h\n"], ["import win32com.client\n\noutlook = win32com.client.Dispatch(\"Outlook.Application\").GetNamespace(\"MAPI\")\n\n# Select main Inbox\ninbox = outlook.GetDefaultFolder(6)\nmessages = inbox.Items\n\n# Delete all messages from a specific sender\nsender = 'myname@abc.com'\ntry:\n    for message in messages:\n        try:\n            s = message.sender\n            s = str(s)\n            if s == sender:\n                 message.Delete()\n        except:\n            pass\nexcept:\n    pass\n"], ["Collecting matplotlib\n  Downloading https://files.pythonhosted.org/packages/26/04/8b381d5b166508cc258632b225adbafec49bbe69aa9a4fa1f1b461428313/matplotlib-3.0.3.tar.gz (36.6MB)\n    Complete output from command python setup.py egg_info:\n    Download error on https://pypi.org/simple/numpy/: [SSL: CERTIFICATE_VERIFY_FAILED] certificate verify failed (_ssl.c:833) -- Some packages may not be found!\n    Couldn't find index page for 'numpy' (maybe misspelled?)\n    Download error on https://pypi.org/simple/: [SSL: CERTIFICATE_VERIFY_FAILED] certificate verify failed (_ssl.c:833) -- Some packages may not be found!\n    No local packages or working download links found for numpy>=1.10.0\n", "postgresql-dev libffi-dev libressl-dev libxml2 libxml2-dev libxslt libxslt-dev libjpeg-turbo-dev zlib-dev\n", "RUN apk del build-runtime && \\\n    find -type d -name __pycache__ -prune -exec rm -rf {} \\; && \\\n    rm -rf ~/.cache/pip\n"], ["import itertools as it\n\nmatches = iter([])\ntry:\n    probe = next(matches)\nexcept StopIteration:\n    print('empty')\nelse:\n    for m in it.chain([probe], matches):\n        print(m)\n", "matches = iter([])\nm = None\nfor m in matches:\n    print(m)\nif m is None:\n    print('empty')\n"], ["import itertools\nimport re\n\npattern = \"1\"\nstring = \"abc\"  \nmatched_iter = re.finditer(pattern, string)\n\ntry:\n    first_match = next(matched_iter)\nexcept StopIteration:\n    print(\"No match!\") # action for no match\nelse:\n    for m in itertools.chain([first_match], matched_iter):\n        print(m.group())\n"], [], ["import pandas as pd\nimport numpy as np\n\npd.set_option('display.float_format', lambda x: '%.5f' % x)\n\ndata = pd.DataFrame()\n\ndata['X'] = (np.random.rand(1000, ) + 10000000) * 0.587\n\ndata['X'].describe()\n\n# Output \ncount      1000.00000\nmean    5870000.47894\nstd           0.28447\nmin     5870000.00037\n25%     5870000.23637\n50%     5870000.45799\n75%     5870000.71652\nmax     5870000.99774\nName: X, dtype: float64\n", "import pandas as pd\nimport numpy as np\n\ndata = pd.DataFrame()\n\ndata['X'] = np.random.rand(1000, ) + 10000000 * 0.587\n\ndata['X'].describe().apply(\"{0:.5f}\".format)\n\n#output\n\ncount       1000.00000\nmean     5870000.48955\nstd            0.29247\nmin      5870000.00350\n25%      5870000.22416\n50%      5870000.50163\n75%      5870000.73457\nmax      5870000.99995\n"], ["import pandas as pd\n\npd.set_option('display.float_format', lambda x: '%.3f' % x)\n"], ["df[\"A\"].describe(include=['category'])\n"], ["pip3 install PyQt5\n"], [], [], ["\"terminal.integrated.env.osx\": {\n        \"PATH\": \"\"\n}\n"], [">>> test_list = [['abc','2'],['cds','333'],['efg']]\n>>> test_list[-1].append('444')\n>>> test_list\n[['abc', '2'], ['cds', '333'], ['efg', '444']]\n"], [">>> test_list = [['abc','2'],['cds','333'],['efg']]\n>>> test_list[2].append('444')\n>>> test_list\n[['abc', '2'], ['cds', '333'], ['efg', '444']]\n>>> \n", ">>> test_list = [['abc','2'],['cds','333'],['efg']]\n>>> test_list[2] += ['444']\n>>> test_list\n[['abc', '2'], ['cds', '333'], ['efg', '444']]\n>>> \n"], ["test_list = [['abc','2'], ['cds','333'], ['efg']]\ntest_list[2].append('444')\n# test_list is now: [['abc','2'], ['cds','333'], ['efg', '444']]\n"], ["test_list = [['abc','2'],['cds','333'],['efg']]\ntest_list[2].insert(1,\"444\")\nprint(test_list)\n"], [], ["sudo add-apt-repository ppa:deadsnakes/ppa\nsudo apt-get update\nsudo apt-get install python3.5\nsudo apt-get install python3.7\n", "sudo apt install python-minimal  # on Ubuntu 18.04 python-minimal maps to python2.7\n", "sudo apt install python-pip  # on Ubuntu 18.04 this refers to pip for python2.7\nsudo apt install python3-pip  # on Ubuntu 18.04 this refers to pip for python3.6\npython3.5 -m pip install pip # this will install pip only for the current user\npython3.7 -m pip install pip\n"], ["numpy==1.16.0\npandas==0.23.4\n"], [], [], [], [], [], ["import logging\ntargets = [\"a\", \"b\", \"c\"]\nlogger = logging.getLogger(__name__)\nlogger.setLevel(logging.INFO)\n\nfor target in targets:\n    log_file = \"{}.log\".format(target)\n    log_format = \"|%(levelname)s| : [%(filename)s]--[%(funcName)s] : %(message)s\"\n    formatter = logging.Formatter(log_format)\n\n    # create file handler and set the formatter\n    file_handler = logging.FileHandler(log_file)\n    file_handler.setFormatter(formatter)\n\n    # add handler to the logger\n    logger.addHandler(file_handler)\n\n    # sample message\n    logger.info(\"Log file: {}\".format(target))\n"], ["import logging\n\ntargets = [\"a.log\",\"b.log\",\"c.log\"]\nfor target in targets:\n\n    log = logging.getLogger(target)\n    formatter = logging.Formatter('%(asctime)s - %(levelname)s : %(message)s', datefmt='%Y-%m/%dT%H:%M:%S')\n    fileHandler = logging.FileHandler(target, mode='a')\n    fileHandler.setFormatter(formatter)\n    streamHandler = logging.StreamHandler()\n    streamHandler.setFormatter(formatter)\n    log.addHandler(fileHandler)\n    log.addHandler(streamHandler)\n\n    log.info('log target info...')\n"], ["call \"c:\\path\\to\\anaconda3\\Scripts\\activate\"\n"], ["x = ['ABC','GOOGLE','BCD','GOOGLY', 'A','A']\ndef make_object(arr):\n  lengths = (len(item) for item in arr);\n  obj = {}\n  for item in lengths:\n    obj[item] = obj[item] + 1 if item in obj else 1\n  return obj\n\nmake_object(x)\n"], ["from collections import defaultdict\n\nx = ['ABC','GOOGLE','BCD','GOOGLY', 'A','A']\n\nprint x\n\nd = defaultdict(int)\nfor a in x:\n   d[len(a)] += 1\n\nprint d\n", "['ABC', 'GOOGLE', 'BCD', 'GOOGLY', 'A', 'A']\ndefaultdict(<type 'int'>, {1: 2, 3: 2, 6: 2})\n"], ["from itertools import groupby\n\nd = dict()\n\nfor k, v in groupby(sorted(map(len, x))):\n    d[k] = len(list(v))\n\n{1: 2, 3: 2, 6: 2}\n"], ["from functools import reduce\n\nx = ['ABC','GOOGLE','BCD','GOOGLY', 'A','A']\nlength_counts = reduce(lambda accum, s: {**accum, len(s): accum.get(len(s), 0) + 1}, x, {})\n", "from functools import reduce\n\nx = ['ABC','GOOGLE','BCD','GOOGLY', 'A','A']\nlength_counts = reduce(lambda accum, i: {**accum, i: accum.get(i, 0) + 1}, map(len, x), {})\n"], ["c = [len(item) for item in x]\nd = {item:c.count(item) for item in c}\n"], ["from collections import Counter\nx = ['ABC','GOOGLE','BCD','GOOGLY', 'A','A']\ndic =Counter(list(map(len,x)))\nprint(dic)\n"], ["from collections import Counter\n\nx = ['ABC','GOOGLE','BCD','GOOGLY', 'A','A']\n\nlength_counts = Counter(len(word) for word in x)\n\nprint(length_counts)\n# Counter({3: 2, 6: 2, 1: 2})\n", "print(dict(length_counts))\n# {3: 2, 6: 2, 1: 2}\n"], [], [], [], ["for mail in folder.Items:\n    mail.Delete()\n", "for index, mail in enumerate(folder.Items, 1):\n    folder.Remove(index)\n", "for i in range(len(folder.Items)):\n    folder.Remove(1)\n", "ids = []\nfor i in range(len(folder.Items), 1):\n    if to_be_deleted(folder.Items[index]):\n        ids.append(index)\nfor id in ids:\n    outlook.GetEntryByID(id).Delete()\n"], ["from selenium import webdriver\nimport time\ndriver=webdriver.Chrome(\"Path of the chromdriver location\" + \"chromedriver.exe\" )\ndriver.get(\"https://www.instagram.com/accounts/login/?source=auth_switcher\")\nuser=driver.find_element_by_name(\"username\")\nuser.send_keys(\"kajal\")\npasswd=driver.find_element_by_name(\"password\")\npasswd.send_keys(\"1234\")\ntime.sleep(1)\nbutton=driver.find_element_by_xpath(\".//*[@id='react-root']/section/main/div/article/div/div[1]/div/form/div[3]/button\")\nbutton.click()\n"], ["from selenium import webdriver\nfrom selenium.webdriver.common.action_chains import ActionChains\nfrom selenium.webdriver.support import expected_conditions as EC\nfrom selenium.webdriver.common.by import By\nfrom selenium.webdriver.support.wait import WebDriverWait\n\nbrowser = webdriver.Chrome()\nbrowser.get('https://www.instragram.com')\n\nwait = WebDriverWait(browser, 10)\n\nlogin_elem = browser.find_element_by_xpath(\n   '//*[@id=\"react-root\"]/section/main/article/div[2]/div[2]/p/a')\n\nsecond_page_flag = wait.until(EC.presence_of_element_located(\n    (By.CLASS_NAME, \"KPnG0\")))  # util login page appear\n\n\nuser = browser.find_element_by_name(\"username\")\n\npassw = browser.find_element_by_name('password')\n\nActionChains(browser)\\\n    .move_to_element(user).click()\\\n    .send_keys('test')\\\n    .move_to_element(passw).click()\\\n    .send_keys('test')\\\n    .perform()\n\nlogin_button_ = browser.find_element_by_xpath(\n    \"//form[@class='HmktE']/div[3]/button\")\n\nlogin_button_.click()\n"], ["    WebDriverWait(browser, 10).until(EC.element_to_be_clickable((By.CSS_SELECTOR, \n    \"input[name='username']\"))).send_keys(\"test\")\n    WebDriverWait(browser, 10).until(EC.element_to_be_clickable((By.CSS_SELECTOR, \n    \"input[name='password']\"))).send_keys(\"test\")\n", "    user = browser.find_element_by_xpath(\"//input[@name='username']\")\n    user.send_keys('test')\n    passw = browser.find_element_by_xpath(\"//input[@name='password']\")\n    passw.send_keys('test')'\n"], ["def save_datetime(file='date.txt', user=getpass.getuser()):\n    with open(file, 'a+') as f:\n        f.write('register: ' + user + '\\t' + str(datetime.datetime.now().time()) + '\\n')\n", "def threadingtime_every_sec(sec=60):\n    import threading, time\n    def loop():\n        while True:\n            save_datetime()\n            time.sleep(sec)\n    threading.Thread(target=loop).start()\n", "import datetime\nimport getpass\nimport threading\nimport time\n\ndef save_datetime(file='date.txt', user=getpass.getuser()):\n    with open(file, 'a+') as f:\n        f.write('register: ' + user + '\\t' + str(datetime.datetime.now().time()) + '\\n')\n\ndef threadingtime_every_sec(sec=60):\n    def loop():\n        while True:\n            save_datetime()\n            time.sleep(sec)\n    threading.Thread(target=loop).start()\n\nif __name__ == '__main__':\n    threadingtime_every_sec(1)\n", "import threading\nimport time\nimport getpass\nimport datetime\n\nclass RepeatedTimer(object):\n  def __init__(self, interval, function, *args, **kwargs):\n    self._timer = None\n    self.interval = interval\n    self.function = function\n    self.args = args\n    self.kwargs = kwargs\n    self.is_running = False\n    self.next_call = time.time()\n    self.start()\n\n  def _run(self):\n    self.is_running = False\n    self.start()\n    self.function(*self.args, **self.kwargs)\n\n  def start(self):\n    if not self.is_running:\n      self.next_call += self.interval\n      self._timer = threading.Timer(self.next_call - time.time(), self._run)\n      self._timer.start()\n      self.is_running = True\n\n  def stop(self):\n    self._timer.cancel()\n    self.is_running = False\n\ndef save_datetime(file='date.txt', user=getpass.getuser()):\n    with open(file, 'a+') as f:\n        f.write('register: ' + user + '\\t' + str(datetime.datetime.now().time()) + '\\n')\n\nif __name__ == '__main__':\n    RepeatedTimer(1, save_datetime)\n", "register: james 11:51:54.988595\nregister: james 11:51:55.988939\nregister: james 11:51:56.988767\n"], [], [" import datetime\n\n start_time = datetime.datetime.now()\n print(start_time)\n while True:\n    if (datetime.datetime.now() - start_time).seconds == 1:\n       start_time = datetime.datetime.now()\n       print(start_time)\n"], ["from time import gmtime, strftime\nimport time\n\nwhile True:\n    print(strftime(\"%H:%M:%S\", gmtime()))\n    time.sleep(1)\n", "11:10:23                                                                                                               \n11:10:24                                                                                                               \n11:10:25                                                                                                               \n11:10:26                                                                                                               \n11:10:27                                                                                                               \n11:10:28                                                                                                               \n11:10:29                                                                                                               \n11:10:30 \n"], ["data = \"Have a Nice Day\"\n\nsplitted = data.split()\nfor i, x in enumerate(splitted):\n    if not all(y in 'aeiou' for y in x.lower()):\n        splitted[i] = ''.join([y for y in x if y.lower() not in 'aeiou'])\n\nprint(' '.join(splitted)) \n# Hv a Nc Dy\n"], [], ["import csv\nwith open('test.txt', 'r') as f:\n    content = f.readlines()\n    with open('test.csv', 'w+',  newline = '') as csvFile:\n        csvWriter = csv.writer(csvFile, delimiter = ' ')\n        for elem in content:\n            csvWriter.writerow([elem.strip()])\n"], ["subprocess.call(\"sed 's/[[:space:]]\\+/,/g' test.txt > test.csv\", shell=True) \n"], ["import pandas as pd\ndata = pd.read_csv('test.txt', sep=\" \", header=None)\ndf.to_csv(test.csv, sep=',')\n"], ["result = ''\n\nwith open('file.txt') as f:\n    result = '\\n'.join(f.readlines())\n\nwith open('output.csv') as f:\n    for line in result.split('\\n'):\n        line = line.replace(' ', ',')\n        f.write(line + '\\n')\n"], []]