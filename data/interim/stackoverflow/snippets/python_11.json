[["from google.colab import drive\ndrive.mount('/content/drive')\n", "with open('/content/drive/My Drive/foo.txt', 'w') as f:\n  f.write('Hello Google Drive!')\n  #other instructions\n\ndrive.flush_and_unmount()\n"], ["long getJumpCost(int arr[]) {\n    int length = arr.length;\n    long dp[] = new long[length];\n    for(int i=0; i<length; i++) {\n        dp[i] = Long.MAX_VALUE;\n    }\n    dp[0] = arr[0];\n    dp[2] = dp[0] + (long)arr[2];\n    dp[1] = dp[2] + (long)arr[1];\n    for(int i=3; i<length; i++) {\n        dp[i] = Math.min(dp[i], dp[i-2] + (long)arr[i]);\n        dp[i-1] = Math.min(dp[i-1], dp[i] + (long)arr[i-1]);\n    }\n    long result = Math.min( dp[length-1], dp[length-2]);\n    return result;\n}\n"], [], ["function solve(A_i) {\n    A_i.sort((a,b) => a-b);\n\n    let totalcost = A_i[0];\n    for(let i=2; i<A_i.length;i++) {\n        if(i + 1 == A_i.length -1) {\n            totalcost = totalcost + A_i[i];\n            break;\n        }\n        const preSum =  A_i[i] + A_i[i+2];\n        const postSum = A_i[i] + A_i[i-1] + A_i[i+1];\n        if(preSum <= postSum) {\n            totalcost = totalcost + A_i[i];\n            i++;\n        } else {\n            totalcost = totalcost + A_i[i];\n            i = i-2;\n            console.log(i)\n        }\n    }\n    return totalcost;\n}\n"], ["   sudo apt-get update\n   sudo apt-get install qt5-default\n   sudo apt-get install qtcreator\n"], [" def whatistheremainder(v):\n    remainderforone = v.split(' ', 1)\n    outcome=v if len(remainderforone)== 1 else ''.join(remainderforone[1:])\n    return outcome\n"], ["[5, 6, 1, 2]\n"], ["Selection = ChoiceArray [np.arange(X, N+X) % L]\n"], ["chepner: 0.10840400000000017 s\nnick: 0.2066781999999998 s\nop: 0.25887470000000024 s\nfountainhead: 0.3679908000000003 s\n", "import random\nfrom itertools import cycle, islice\nfrom time import perf_counter as pc\nimport numpy as np\n\n\ndef op(choice, x):\n    n = len(choice)\n    selection = []\n    for i in range(x, x + n):\n        selection.append(choice[i % n])\n    return selection\n\n\ndef nick(choice, x):\n    n = len(choice)\n    return [choice[i % n] for i in range(x, x + n)]\n\n\ndef fountainhead(choice, x):\n    n = len(choice)\n    return np.take(choice, range(x, x + n), mode='wrap')\n\n\ndef chepner(choice, x):\n    n = len(choice)\n    return list(islice(cycle(choice), x, x + n))\n\n\nresults = []\nn = 1_000_000\nchoice = random.sample(range(n), n)\nx = random.randint(0, n - 1)\n\n# Correctness\nassert op(choice, x) == nick(choice,x) == chepner(choice,x) == list(fountainhead(choice,x))\n\n# Benchmark\nfor f in op, nick, chepner, fountainhead:\n    t0 = pc()\n    f(choice, x)\n    t1 = pc()\n    results.append((t1 - t0, f))\n\nfor t, f in sorted(results):\n    print(f'{f.__name__}: {t} s')\n"], ["import numpy as np\n\nSelection = np.take(Choice, range(X,N+X), mode='wrap')\n"], ["start = random.randint(0, len(Choice) - 1)\nlist(islice(cycle(Choice), start, start + n))\n"], [">>> remainderforone\n['the', 'quick brown fox']\n>>> remainderforone[1:]\n['quick brown fox']\n", ">>> remainderforone[1]\n'quick brown fox'\n", "for s in ['the quick brown fox', 'hi there', 'single', '', 'abc\\tefg']:\n    first, sep, rest = s.partition(' ')\n    first, sep, rest\n\n('the', ' ', 'quick brown fox')\n('hi', ' ', 'there')\n('single', '', '')\n('', '', '')\n('abc\\tefg', '', '')\n", "def whatistheremainder(v):\n    first, sep, rest = v.partition(' ')\n    return rest\n\nfor s in ['the quick brown fox', 'hi there', 'single', '', 'abc\\tefg']:\n    whatistheremainder(s)\n\n'quick brown fox'\n'there'\n''\n''\n''\n", "def whatistheremainder(v):\n    first, sep, rest = v.partition(' ')\n    return rest if sep else first\n\nfor s in ['the quick brown fox', 'hi there', 'single', '', 'abc\\tefg']:\n    whatistheremainder(s)\n\n'quick brown fox'\n'there'\n'single'\n''\n'abc\\tefg'\n"], [">>> my_string = 'the quick brown fox'\n\n>>> my_string.split(' ', 1)[1]\n'quick brown fox'\n", ">>> my_string[my_string.index(' ')+1:]\n'quick brown fox'\n", ">>> ''.join(my_string.split(' ', 1)[1:])\n'quick brown fox'\n", "def whatistheremainder(v):\n    remainderforone = v.split(' ', 1)\n    outcome = remainderforone[1:]\n    return ' '.join(outcome)\n", ">>> whatistheremainder('the quick brown fox')\n'quick brown fox'\n", ">>> ' '.join(my_string.split()[1:])\n'quick brown fox'\n"], [" def whatistheremainder(v):\n    remainderforone = v.split(' ', 1)\n    outcome = ''.join(remainderforone[1:])\n    return outcome\n"], ["def whatistheremainder(v):\n    remainderforone = v.split(' ', 1)\n    outcome = remainderforone[1:][0]\n    return outcome\nprint(whatistheremainder('the quick brown fox'))\n", "quick brown fox\n"], [], ["import inspect\n\ni = [5]  # name \"i\" refers to an mutable Python list containing immutable integer object 5\nprint(f'i = {i} (id={id(i)})')  # Note value and ID\n\n# Create function \"f\" with a parameter whose default is the object\n# referred to by name \"i\" *at this point*.\ndef f(arg=i):\n    print(f'arg = {arg} (id={id(arg)})')\n\n# Use the inspect module to extract the defaults from the function.\n# Note the value and ID\ndefaults = dict(inspect.getmembers(f))['__defaults__']\nprint(f'defaults = {defaults} (id={id(defaults[0])})')\n\n# name \"i\" now refers to a different immutable Python integer object of value 6.\ni[0] = 6  # MUTATE the content of the object \"i\" refers to.\nprint(f'i = {i} (id={id(i)})') # Note value and ID (UNCHANGED!)\nf()  # default for function still refers to original list object, but content changed!\ni = [7]  # Create a different list object\nprint(f'i = {i} (id={id(i)})') # Note value and ID (changed)\nf(i)     # override the default currently refered to by name \"i\"\n"], ["brew install pyenv\nPYTHON_CONFIGURE_OPTS=\"--enable-framework\" pyenv install 3.9.1\n", "mkdir hello && cd hello\nnano hello.py\n", "pyenv local 3.9.1\npython3 -m venv venv\nsource venv/bin/activate\npip install pip pyside2 pyinstaller --upgrade\n", "python3 hello.py\n", "pyinstaller --windowed hello.py\n", "open dist/hello.app\n"], [], [], [], ["requests.utils.default_headers() \n"], [], [], [], ["sys.modules['module_A'] = Mock()\n\nfrom module_to_test import function_to_test # noqa\n"], [], ["import re\n\nfiledata = '''02/09/2020, 23:45 - +99 9999 9999: 02/09/2020\ntask A -Changes A\ntask b Changes b\ntask c Changes c\n03/09/2020, 01:55 - +88 8888 8888: 2-SEP-2020\ntask c -Changes c\ntask d Changes d\n03/09/2020, 01:55 - +99 9999 9999: 2-SEP-2020\ntask e -Changes e\ntask f Changes f'''\n\nnumber = '+99 9999 9999'\n\nfor line in filedata.split('\\n'):\n    z = re.match(r\"[+\\d{2} \\d{4} \\d{4}]\",line)\n    if z: found = number in line\n    if found: print (line)\n", "02/09/2020, 23:45 - +99 9999 9999: 02/09/2020\ntask A -Changes A\ntask b Changes b\ntask c Changes c\n03/09/2020, 01:55 - +99 9999 9999: 2-SEP-2020\ntask e -Changes e\ntask f Changes f\n", "import re\nnumber = \"+99 9999 9999\"\nwith open('text.txt') as input_data:\n    for line in input_data:\n        z = re.match(r\"[+\\d{2} \\d{4} \\d{4}]\",line)\n        if z: found = number in line\n        if found: print (line)\n", "import re\nfiledata = '''02/09/2020, 23:45 - John +99 9999 9999: 02/09/2020\ntask A -Changes A\ntask b Changes b\ntask c Changes c\n03/09/2020, 01:55 - Suzan +88 8888 8888: 2-SEP-2020\ntask c -Changes c\ntask d Changes d\n03/09/2020, 01:55 - Thomas +99 9999 9999: 2-SEP-2020\ntask e -Changes e\ntask f Changes f'''\n\nname = 'John'\nfor line in filedata.split('\\n'):\n    z = re.findall(r\"\\w+ \\+\\d{2} \\d{4} \\d{4}\",line)\n    if z: found = (name in line) and (line[:4] != 'task')\n    if found: print (line)\n", "02/09/2020, 23:45 - John +99 9999 9999: 02/09/2020\ntask A -Changes A\ntask b Changes b\ntask c Changes c\n", "02/09/2020, 23:45 - John , Salesman +99 9999 9999: 02/09/2020\n\n02/09/2020, 23:45 - John Salesman +99 9999 9999: 02/09/2020\n", "filedata = \"\"\"[23/9/20, 11:26:42 PM] John - Salesman: 23/09/2020\n-task a\n-task b\n[23/9/20, 11:30:03 PM] Shawn - Support: 23/09/2020\n-task c\n-task d\n[24/9/20, 9:54:44 PM]Shawn - Support: 24/09/2020\n-task e\n-task f\n[24/9/20, 10:06:58 PM] Damien - Support: 24/09/2020\n-task g\n-task h\n-task i\n-task j\n[24/9/20, 10:53:52 PM] John - Salesman: 24/09/2020\n-task k\n-task l\n-task m\n-task n\"\"\"\n\nimport re\nname = 'John - Salesman'\nfor line in filedata.split('\\n'):\n    z = re.findall(r\"([\\w+ \\- \\w+:]*\\d{2}\\/\\d{2}\\/\\d{4})\",line)\n    if z: found = (name in line) and (line[:4] != 'task')\n    if found: print (line)\n", "[23/9/20, 11:26:42 PM] John - Salesman: 23/09/2020\n-task a\n-task b\n[24/9/20, 10:53:52 PM] John - Salesman: 24/09/2020\n-task k\n-task l\n-task m\n-task n\n"], ["vc = df[['a', 'b']].drop_duplicates().value_counts()\n", "a  b\ny  z    1\n   w    1\nx  z    1\n   w    1\n", "df.groupby('c').filter(lambda x: x[['a', 'b']].value_counts().ge(vc).all())\n", "   a  b   c   d\n0  x  z  c1   1\n2  x  z  c3   3\n3  x  w  c1   4\n4  x  w  c3   5\n5  y  z  c1   6\n6  y  z  c3   7\n7  y  w  c1   8\n9  y  w  c3  10\n"], ["i = 5\ndef f(arg = None):\n    if (arg = None)\n        arg = i\n    print(arg)\n\ni = 6\nf()\n"], ["a = [1,2,3,4]\n\ndef rep(s, l, ab):\n    id = l.index(s)\n    q = s\n    del(l[id])\n    l.insert(ab, q)\n    return l\n\nl = rep(a[0], a, 2)\nprint(l)\n"], ["up, down = up.append(down[: (down.index(\"b\") + 1)]), down[...snipp...] \n#          ^^^^^^^^ returns None\n", "down = [\"a\", \"b\", \"c\", \"d\", \"b\", \"e\", \"r\"]\nup = []\nwhile 'b' in down:\n    b_index = down.index('b') + 1\n    up.append(down[:b_index])\n    down = down[b_index:]\nup.append(down)\n", "k = [\"a\", \"b\", \"c\", \"d\", \"b\", \"e\", \"r\"]\n\nresult = [[]]\nfor e in k:\n    if e != \"b\":\n        result[-1].append(e)\n    else:\n        result[-1].append(e)\n        result.append([])\n\nif result[-1] == []: \n    result.pop() # thx iBug's comment\n\nprint(result) # [['a', 'b'], ['c', 'd', 'b'], ['e', 'r']]\n", "k = [\"a\", \"b\", \"c\", \"d\", \"b\", \"e\", \"r\"]\nb = []\nwhile True:\n    try:\n        b_idx = k.index(\"b\")\n    except: \n        b.append(k)\n        break\n    else:\n        b,k = b+[k[:b_idx+1]],k[b_idx+1:]\nprint(b) \n"], [], ["i = 5\ndef f(arg=i)\n    print(arg)\n", "def f(arg=5)\n    print(arg)\n", "def f(arg)\n    print(arg)\n\ni = 6\nf(i)\n"], [], [], ["old_list= ['list4','this1','my3','is2']\norder = [1, 3, 2, 0]\nnew_list = [old_list[idx] for idx in order]\n", "old_list= ['list4','this1','my3','is2']\ndef extract_number(string):\n    digits = ''.join([c for c in string if c.isdigit()])\n    return int(digits)\n    \nnew_list = sorted(old_list, key = extract_number)\n"], ["list1 = ['list4','this1', 'he5re', 'my3','is2']\n\ndef mySort(string):\n    if any(char.isdigit() for char in string): #Check if theres a number in the string\n        return [float(char) for char in string if char.isdigit()][0] #Return list of numbers, and return the first one (we are expecting only one number in the string)\n\nlist1.sort(key = mySort)\n\nprint(list1)\n"], ["lst.insert(x, lst.pop(y))\n"], [">>> lst = ['list4','this1','my3','is2']\n>>> lst = sorted(lst, key=lambda x:int(x[-1]))\n>>> lst\n['this1', 'is2', 'my3', 'list4']\n", ">>> import re\n>>> lst = ['lis22t4','th2is21','my3','is2']\n>>> sorted(lst, key=lambda x:int(re.search(r'\\d+$', x).group(0)))\n['is2', 'my3', 'list4', 'this21']\n# or,\n>>> ['is2', 'my3', 'lis22t4', 'th2is21']\n", ">>> lst = [1,6,'one','six']\n>>> lst = [lst[2], lst[0], lst[3], lst[1]]\n>>> lst\n['one', 1, 'six', 6]\n"], ["import re\n\nd = [\"a\", \"b\", \"c\", \"d\", \"b\", \"e\", \"r\"]\n\ns = '(?<=b)'\n\nprint ([list(x) for x in re.split(s,\"\".join(d))])\n", "[['a', 'b'], ['c', 'd', 'b'], ['e', 'r']]\n"], ["       2000-01-01  2000-02-01\n   0           0           1\n"], ["df.loc[:,df.columns > pd.Timestamp('01 Jan 2000')]\n   2000-02-01  2001-03-01  2001-04-01  2002-05-01\n0           1           2           3           4\n\n\ndf.columns > pd.Timestamp('01 Jan 2000')\narray([False,  True,  True,  True,  True])\n"], [], [">>> df.loc[0, '2000']\n2000-01-01    0\n2000-02-01    1\nName: 0, dtype: int64\n", ">>> df\n   2000-01-01  2000-02-01  2001-03-01  2001-04-01  2002-05-01\n0           0           1           2           3           4\n1           0           1           2           3           4\n>>> df.T['2000'].T\n\n   2000-01-01  2000-02-01\n0           0           1\n1           0           1\n", ">>> df.loc[:, datetime.datetime(2000, 1, 1): datetime.datetime(2000, 12, 31)]\n   2000-01-01  2000-02-01\n0           0           1\n1           0           1\n"], [], ["inp = input(\"please, Enter your input that you want to search for: \")\n\n\ndef scanner (path, input):\n    with open(path) as file:\n         lines = file.readlines()\n         for index, line in enumerate(lines):\n             if line[0].isdigit() == True and line[20: -13] == input:\n                 print(line)\n                 lin = index+1\n                 try:\n                     while lines[lin][0].isdigit() is False:\n                         print(lines[lin])\n                         lin +=1\n                 except IndexError:\n                     break\n\nprint(\"=\"*40)\nprint(f\"*****History of {inp}*****\")        \nscanner(path, inp)\n", "please, Enter your input that you want to search for: +99 9999 9999\n========================================\n*****History of +99 9999 9999*****\n02/09/2020, 23:45 - +99 9999 9999: 02/09/2020\n\ntask A -Changes A\n\ntask b Changes b\n\n03/09/2020, 01:55 - +99 9999 9999: 2-SEP-2020\n\ntask e -Changes e\n\ntask f Changes f\n\n[Program finished]\n", "def scanner2(path, input):\n    with open(path) as file:\n         lines = file.readlines()\n         for index, line in enumerate(lines):\n             if line[1].isdigit() == True and line[22: -13].strip(\" \") == input:\n                 print(line)\n                 lin = index+1\n                 try:\n                     while lines[lin][1].isdigit() is False:\n                         print(lines[lin])\n                         lin +=1\n                 except IndexError:\n                     break\n\n\nprint(\"=\"*40)\nprint(f\"*****History of {inp}*****\")        \nscanner2(path2, inp)\n", "please, Enter your input that you want to search for: John - Salesman\n========================================\n*****History of John - Salesman*****\n[23/9/20, 11:26:42 PM] John - Salesman: 23/09/2020\n\n-task a\n\n-task b\n\n[24/9/20, 10:53:52 PM] John - Salesman: 24/09/2020\n\n-task k\n\n-task l\n\n-task m\n\n-task n\n\n[Program finished]\n"], ["df.pipe(lambda df: df.loc[:, df.sum().sort_values(ascending=False).index])\n", "new_df = (\n    df1\n    # Some example operations one might do:\n    .groupby('column')\n    .apply(sum).unstack()\n    .fillna(0).astype(int)\n    # Sort columns by total count:\n    .pipe(lambda df: df.loc[:, df.sum().sort_values(ascending=False).index])\n)\n"], ["from datetime import datetime\n\nfilename = datetime.now().strftime('filename_%H%M_%m%d%Y.csv')\n\nwith open(filename, \"w+\") as f_output:\n        csv_output = csv.writer(f_output)\n        csv_output.writerow([\"row1\", \"row2\"])\n", "filename_0620_01152021_.csv \n"], ["import datetime\n\nfilename = datetime.datetime.now().strftime('name_%H%_%d%m%Y.csv')\n", "open(filename, \"w\").write(\"blahblah\")\n"], ["import datetime\nname = f'name_{datetime.datetime.now().strftime(\"%H%M_%m%d%Y\")}.csv'\nprint(name)\n# prints 'name_0628_01152021.csv'\n"], ["from datetime import date\ntoday = date.today()\n# dd/mm/YY\nd1 = today.strftime(\"%d/%m/%Y\")\n\nfname = \"name_1224\" + d1 + \".csv\"\n#fname = \"name_1224\" + str(d1) + \".csv\"\n"], [], ["unq = [[x, len(df[(df[['a','b','c']].agg(','.join, axis=1)).str.contains(',' + x)]\n                   .drop_duplicates())] for x in df['c'].unique()]\nkeep = [lst[0] for lst in unq if lst[1] == max([lst[1] for lst in unq])]\ndf = df[df['c'].isin(keep)]\ndf\n\n   a  b   c   d\n0  x  z  c1   1\n2  x  z  c3   3\n3  x  w  c1   4\n4  x  w  c3   5\n5  y  z  c1   6\n6  y  z  c3   7\n7  y  w  c1   8\n9  y  w  c3  10\n"], ["df[df['a'].groupby(df['c']).transform('count').eq(4)]\n"], ["s = pd.crosstab([df['a'],df['b']],df.c).all()\nout = df.loc[df.c.isin(s.index[s])]\nOut[34]: \n   a  b   c   d\n0  x  z  c1   1\n2  x  z  c3   3\n3  x  w  c1   4\n4  x  w  c3   5\n5  y  z  c1   6\n6  y  z  c3   7\n7  y  w  c1   8\n9  y  w  c3  10\n"], ["from functools import reduce\nout = df[df['c'].isin(reduce(np.intersect1d,df.groupby(['a','b'])['c'].unique()))]\n", "s = df.groupby(['a','b'])['c'].unique()\ncommon_elements = reduce(np.intersect1d,s)\n#Returns :-> array(['c1', 'c3'], dtype=object)\n\nout = df[df['c'].isin(common_elements )]#.copy()\n", "   a  b   c   d\n0  x  z  c1   1\n2  x  z  c3   3\n3  x  w  c1   4\n4  x  w  c3   5\n5  y  z  c1   6\n6  y  z  c3   7\n7  y  w  c1   8\n9  y  w  c3  10\n"], ["df[df.c.isin(df.groupby(['a', 'b', 'c']).size().unstack(-1).dropna(axis=1).columns)]\n\n   a  b   c   d\n0  x  z  c1   1\n2  x  z  c3   3\n3  x  w  c1   4\n4  x  w  c3   5\n5  y  z  c1   6\n6  y  z  c3   7\n7  y  w  c1   8\n9  y  w  c3  10\n", "df.groupby(['a', 'b', 'c']).size().unstack(-1).dropna(axis=1)\n\n#c     c1   c3\n#a b          \n#x w  1.0  1.0\n#  z  1.0  1.0\n#y w  1.0  1.0\n#  z  1.0  1.0\n"], ["s = df['a'] + ',' + df['b'] # combination of a, b\nm = s.groupby(df['c']).transform('nunique').eq(s.nunique())\n", "df[m]\n\n   a  b   c   d\n0  x  z  c1   1\n2  x  z  c3   3\n3  x  w  c1   4\n4  x  w  c3   5\n5  y  z  c1   6\n6  y  z  c3   7\n7  y  w  c1   8\n9  y  w  c3  10\n"], ["all_data =(df.pivot(index=['a','b'], columns='c', values='c')\n             .loc[:, lambda x: x.notna().all()]\n             .columns)\ndf[df['c'].isin(all_data)]\n", "   a  b   c   d\n0  x  z  c1   1\n2  x  z  c3   3\n3  x  w  c1   4\n4  x  w  c3   5\n5  y  z  c1   6\n6  y  z  c3   7\n7  y  w  c1   8\n9  y  w  c3  10\n"], ["df.groupby(\"c\")[\"a\"].count() == df.groupby(\"c\")[\"a\"].count().max()\n", "c\nc1     True\nc2    False\nc3     True\nName: a, dtype: bool\n"], ["path = 'extractiondata.txt'\n\ndef scanner(path, input):\n    with open(path) as file:\n        lista  = file.readlines()\n        for index, each in enumerate(lista):\n            if each[20:-13] == input:\n                print(each)\n                print(lista[index+1])\n                print(lista[index+2])                \n        \n\ninp = input(\"please, Enter your input that you want to search for: \")                  \nscanner(path, inp)\n\n\n", "02/09/2020, 23:45 - +99 9999 9999: 02/09/2020\n\ntask A -Changes A\n\ntask b Changes b\n\n03/09/2020, 01:55 - +99 9999 9999: 2-SEP-2020\n\ntask e -Changes e\n\ntask f Changes f\n"], ["def func(n):\n    l = []\n    for i in range(n):\n        tmp = []\n        for j in range(n):\n            if j==i:\n                tmp.append(0)\n            elif j>i:\n                tmp.append(9)\n            elif j<n:\n                tmp.append(5)\n        l.append(tmp)\n    return l\n"], ["urlpatterns = [\n   url(r'^callback$', views.CallbackView.as_view())\n]\n", "class CallbackViews(APIView):\n    @csrf_exempt\n    def post(self, request):\n        # do something\n"], [], [], [], ["import re\n\nwith open('text.txt') as input_data:\n    lines = input_data.readlines()\n    re_number = re.compile(\"\\+\\d\\d \\d\\d\\d\\d \\d\\d\\d\\d\")\n    number = \"+99 9999 9999\"\n    blocks = []\n    tmp_block = []\n    for index, line in enumerate(lines):\n        if (re_number.search(line)):\n            if (tmp_block):\n                blocks.append(tmp_block.copy())\n                tmp_block.clear()\n                flag = 0\n            if (number in line):\n                flag = 1\n        if (flag):\n            tmp_block.append(line)\n    if (flag):\n        blocks.append(tmp_block.copy())\n\nprint (blocks)\n"], [], [], [], ["#urls.py\npath('payment/status/', views.check_status, name='payment_status') # the same full url to register in callback url in their website\n\n", "#views.py\n@csrf_exempt # API doesn't know how to send you csrf token\ndef check_status(request):\n    if request.method == 'POST':\n        print(request.POST)# examine the data returned from the API\n\n", "<input type=\"hidden\" name=\"next\" value=\"{% url 'payment_status' %}\" />\n", "# force the redirect to\nreturn redirect(request.POST.get('next') or 'where_ever_you_send_your_user')\n\n"], [], [], [], [], [], ["print(driver.find_element_by_css_selector(\"button[data-test-id='add-button'][aria-label='Add to bag'] span\").get_attribute(\"innerHTML\"))\n", "print(driver.find_element_by_xpath(\"//button[@data-test-id='add-button' and @aria-label='Add to bag']//span\").text)\n", "print(WebDriverWait(driver, 20).until(EC.visibility_of_element_located((By.CSS_SELECTOR, \"button[data-test-id='add-button'][aria-label='Add to bag'] span\"))).text)\n", "print(WebDriverWait(driver, 20).until(EC.visibility_of_element_located((By.XPATH, \"//button[@data-test-id='add-button' and @aria-label='Add to bag']//span\"))).get_attribute(\"innerHTML\"))\n", "from selenium.webdriver.support.ui import WebDriverWait\nfrom selenium.webdriver.common.by import By\nfrom selenium.webdriver.support import expected_conditions as EC\n"], ["from bs4 import BeautifulSoup\n\nhtml = \"\"\"<div class=\"is-add-item-saving\" data-bind=\"visible: isBusy\" style=\"display: none;\"></div>\n<span class=\"aria-live\" aria-role=\"status\" aria-live=\"polite\" data-bind=\"{ text: ariaLiveText }\"></span>\n<button data-bind=\"click: addToBag, css : buttonCss, attr: { 'aria-label': resources.pdp_cta_add_to_bag, disabled: isBusy }, markAndMeasure: 'pdp:add_to_bag_interactive'\" data-test-id=\"add-button\" aria-label=\"Add to bag\">\n    <span class=\"product-tick\" data-bind=\"visible: showProductTick\" style=\"display: none;\"></span>\n    <span data-bind=\"text: buttonText\">Add to bag</span>\n</button>\"\"\"\n\nsoup = BeautifulSoup(html)\n\ntag = soup.find('span',{'data-bind':'text: buttonText'})\nprint(tag.text)\n", "Add to bag\n"], ["value.get_attribute(\"textContent\")\n"], ["from lxml import html\n\nsample = \"\"\"<div class=\"is-add-item-saving\" data-bind=\"visible: isBusy\" style=\"display: none;\"></div>\n<span class=\"aria-live\" aria-role=\"status\" aria-live=\"polite\" data-bind=\"{ text: ariaLiveText }\"></span>\n<button data-bind=\"click: addToBag, css : buttonCss, attr: { 'aria-label': resources.pdp_cta_add_to_bag, disabled: isBusy }, markAndMeasure: 'pdp:add_to_bag_interactive'\" data-test-id=\"add-button\" aria-label=\"Add to bag\">\n    <span class=\"product-tick\" data-bind=\"visible: showProductTick\" style=\"display: none;\"></span>\n    <span data-bind=\"text: buttonText\">Add to bag</span>\n\n</button>\"\"\"\n\nprint(html.fromstring(sample).xpath(\"//*[@data-bind='text: buttonText']/text()\"))\n", "['Add to bag']\n"], ["# For example, 12345:\nnum = input(\"Enter number: \")\n\n# fastest and shortest:\nrev = num[::-1]\n\n# or (slower and longer)\nrev = \"\".join(reversed(num))\n\nprint(f\"The reverse of the number: {rev}\")\n# The reverse of the number: 54321\n"], ["input = \"12345\"\noutput = input[::-1]\n", "input = 12345\noutput = str(input)[::-1]\n", "int(output)\n"], ["rev = 0\nNow in the first iteration of the while loop n > 0\ndig = remainder of n divided by 10, So it is = 5\nrev = rev(0) * 10 + dig(5) = 5\nn = n // 10 = 1234\n", "rev = 5\ndig = remainder of n divided by 10, So it is = 4\nrev = rev(5) * 10 + dig(4) = 54\nn = n // 10 = 123\n", "rev = 54\ndig = remainder of n divided by 10, So it is = 3\nrev = rev(54) * 10 + dig(3) = 543\nn = n // 10 = 12\n", "rev = 543\ndig = remainder of n divided by 10, So it is = 2\nrev = rev(543) * 10 + dig(2) = 5432\nn = n // 10 = 1\n", "rev = 5432\ndig = remainder of n divided by 10, So it is = 1\nrev = rev(5432) * 10 + dig(1) = 54321\nn = n // 10 = 0\n"], [], ["class UserSchema(ma.ModelSchema):\n    class Meta:\n        model = User \n"], ["def pattern(size):\n    for i in range(size):\n        print('5'*i + '0' + '9'*(size-i-1))\n        \npattern(4)\n"], ["import numpy as np\n\nshape = (4, 4)\nnp.tril(np.full(shape, 5), -1) + np.triu(np.full(shape, 9), 1)\n"], ["for i in range(n):\n    for j in range(n):\n        # diagonal case\n        if i == j:\n            print(0, end='')\n        # upper diagonal case\n        elif i < j:\n            print(9, end='')\n        # lower diagonal case\n        else:\n            print(5, end='')\n    print('')\n"], [], [], ["[b[i] for i in range(len(a)) if a[i]]\n", "[b[i] for i,mask in enumerate(a) if maks]\n"], ["from itertools import compress\na = [True, False, True, False]\nb = [2, 3, 5, 7]\n\nresult_itertools = list(compress(b, a))\nprint(result_itertools)\n", "result_filter = list(filter(lambda x: x[0], zip(a, b)))\nfor item in result_filter:\n    print(item[1])\n# 2\n# 5\n", "result_comprehension = [value for bool_, value in zip(a, b) if bool_]\nprint(result_comprehension)\n# [2, 5]\n"], ["print([y for x, y in zip(a, b) if x])\n", "[2, 5]\n", "class index:\n    def __init__(self, seq):\n        self.seq = seq\n    def __getitem__(self, boolseq):\n        return [x for x, y in zip(boolseq, self.seq) if y]\nprint(index(a)[b])\n", "[2, 5]\n"], ["from pandas import Series\n\na = [True, False, True, False]\nb = [2, 3, 5, 7]\n\nres = Series(b)[a].tolist()\n\nprint(res)  # [2, 5]\n"], [">>> from itertools import compress\n>>> a = [True, False, True, False]\n>>> b = [2, 3, 5, 7]\n\n\n>>> list(compress(b, a))\n[2, 5]\n"], ["scrapy -> python[version='>=2.7,<2.8.0a0|>=3.6,<3.7.0a0|>=3.8,<3.9.0a0|>=3.7,<3.8.0a0|>=3.5,<3.6.0a0']\n"], ["book1= ['a','b','c','d','e','f','g','h','i','j','k','l','m','n','o']\ndef print_book(book,a,n):\n    printed = book\n    if printed != []:\n    \n        new_list=[]#i have created a list\n        for i in range(a,n+1):\n            new_list.append(book[i])#append is used to add elements to list\n        \n        for el in new_list:\n                print(el)\n    \nprint_book(book1,0,4)#prints a,b,c,d,e\nprint_book(book1,5,9)#prints f,g,h,i,j\n"], ["book1 = ['a','b','c','d','e','f','g','h','i','j','k','l','m','n','o']\n\nclass Printer:\n    def __init__(self, book):\n        self.index = 0\n        self.book = book\n\n    def print(self, n):\n\n        for i in range(0, n):\n            print(self.book[self.index % len(self.book)])\n            self.index += 1\n\n\nbook = Printer(book1)\nbook.print(5)\nprint(\"\")\nbook.print(5)\nprint(\"\")\nbook.print(7)\n\n", "a\nb\nc\nd\ne\n\nf\ng\nh\ni\nj\n\nk\nl\nm\nn\no\na\nb\n\n\n"], ["book_1 = ['a','b','c','d','e','f','g','h','i','j','k','l','m','n','o']\n\ndef printer_factory(book, n = 5):\n    i = 0\n    def printer():\n        nonlocal i\n        stop = min(i+n, len(book))\n        while i < stop:\n            print(book[i])\n            i += 1\n    return printer\n\nprinter_1 = printer_factory(book_1)\n\nprinter_1()\nprinter_1()\n"], [], ["def print_book(book):\n    cnt = 0\n    while cnt < 5:\n        try:\n            print(next(book))\n        except StopIteration:\n            print(\"You have reached the end!\")\n            break\n        cnt += 1\n", ">>> bk1 = iter(book1)\n>>> print_book(bk1)\na\nb\nc\nd\ne\n>>> print_book(bk1)\nf\ng\nh\ni\nj\n>>> print_book(bk1)\nk\nl\nm\nn\no\n>>> print_book(bk1)\nYou have reached the end!\n"], ["book1 = ['a','b','c','d','e','f','g','h','i','j','k','l','m','n','o']\n\ndef yield_book(book1):\n    for i in book1:\n        yield i;\n                \ndef print_n_item(gen, n):\n    count = 0\n    for i in gen:\n        if count == n:\n            return\n        print(i)\n        count += 1\n        \ngen = yield_book(book1)\nprint_n_item(gen, 5) # prints a,  b,  c, d, e\nprint_n_item(gen, 5) # prints f,  g,  h,  i,  j\nprint_n_item(gen, 5) # prints k,  l,  m,  n,  o\n\n"], [], ["myString = myString.replace(\"US40\",\"\")\n", "import re\nMystring = re.sub(\"US40\",\"\",myString)\n"], ["for img in imgSrc:\n    print(img)\n    img = img.replace('US40',\"\")\n    print(img)\n"], [], ["print(img)\n# https://images-na.ssl-images-amazon.com/images/I/51uUvUZNoUL._AC_US40_.jpg\nimg = img.replace('US40', '')\nprint(img)\n# 'https://images-na.ssl-images-amazon.com/images/I/51uUvUZNoUL._AC__.jpg'\n"], [], [], ["out = df[['col1']].assign(new_col=df.iloc[:,1:].agg(dict,1))\n", "out = df[['col1']].assign(new_col=df.iloc[:,1:].agg(pd.Series.to_json,1))\n", "print(out)\n\n   col1                                            new_col\n0   cat  {'col2': 'black', 'col3': 'small', 'col4': 'lo...\n1   dog  {'col2': 'white', 'col3': 'medium', 'col4': 'b...\n2  mice  {'col2': 'grey', 'col3': 'tinny', 'col4': 'fast'}\n"], ["import pandas as pd\ndf = pd.DataFrame({'col1': ['cat', 'dog', 'mice'], \n        'col2' : ['black', 'white', 'grey'], \n        'col3' : ['small', 'medium', 'tinny']})\n\n# create json column\n# data_json = df.iloc[:, 1:].to_json(orient='records')\n# data = json.loads(data_json)\ndata = df.iloc[:, 1:].to_dict(orient='records')\n\n# keep first column\ndfn = df.iloc[:, [0]].copy()\ndfn['newcol'] = data\n# dfn['newcol'] = pd.Series(data).map(json.dumps)\n", "   col1                               newcol\n0   cat   {\"col2\": \"black\", \"col3\": \"small\"}\n1   dog  {\"col2\": \"white\", \"col3\": \"medium\"}\n2  mice    {\"col2\": \"grey\", \"col3\": \"tinny\"}\n", "[{\"col2\":\"black\",\"col3\":\"small\"},{\"col2\":\"white\",\"col3\":\"medium\"},{\"col2\":\"grey\",\"col3\":\"tinny\"}]\n"], ["import pandas as pd \ndata = {'col1': ['cat', 'dog', 'mice'], 'col2' : ['black', 'white', 'grey'], 'col3' : ['small', 'medium', 'tinny'], 'col4': ['lovely','brave','fast']} \ndf = pd.DataFrame(data) \n\ndef getDictColumn_df1(df, new_col_name=\"newcol\", cols_from_start=1):\n    df[new_col_name] = tuple(map(lambda row: row._asdict(), df.iloc[:,cols_from_start:].itertuples()))\n    return df[['col1', new_col_name]]\n\ngetDictColumn_df1(df)\n", "def getDictColumn_df2(df, new_col_name=\"newcol\"):\n    df[new_col_name] = tuple(map(lambda row: row._asdict(), df.itertuples(index=False)))\n    return df[[new_col_name]]\n\ngetDictColumn_df2(df)\n"], [">>> import pandas as pd\n>>> d = {\"col1\": [\"cat\", 'dog', 'mice'], \"col2\": [\"black\", \"white\", \"grey\"], \"col3\": [\"small\", 'medium', 'tinny'], 'col4': ['lovely', 'brave','fast']}\n>>> df = pd.DataFrame(d)\n>>> pd.concat([df[['col1']], pd.DataFrame({\"newcol\": df[['col2','col3','col4']].to_dict(orient='records')})], axis=1)\n", ">>> pd.concat([df[['col1']], pd.DataFrame({\"newcol\": df.iloc[:, 1:].to_dict(orient='records')})], axis=1)\n"], ["data = {'col1': ['cat', 'dog', 'mice'], 'col2' : ['black', 'white', 'grey'], 'col3' : ['small', 'medium', 'tinny']}\nimport pandas as pd\ndf = pd.DataFrame(data)\ncol = list(df.columns)\n\n", "df.apply(lambda x: {col[1]:x[1], col[2]:x[2]}, axis =1)\n", "df['new_col'] = df.apply(lambda x: {col[1]:x[1], col[2]:x[2]}, axis =1)\n", "df\n   col1   col2    col3                              new_col\n0   cat  black   small   {'col2': 'black', 'col3': 'small'}\n1   dog  white  medium  {'col2': 'white', 'col3': 'medium'}\n2  mice   grey   tinny    {'col2': 'grey', 'col3': 'tinny'}\n\n", "\ndf.drop(['col2', 'col3'], axis = 1)\n   col1                              new_col\n0   cat   {'col2': 'black', 'col3': 'small'}\n1   dog  {'col2': 'white', 'col3': 'medium'}\n2  mice    {'col2': 'grey', 'col3': 'tinny'}\n"], [], ["mydict = {'id': '6576_926_1',\n'name': 'xyz',\n'm': 926,\n\n0: {'id': '2896_926_2',\n 'name': 'lmn',\n 'm': 926},\n\n1: {'id': '23_926_3',\n 'name': 'abc',\n 'm': 928}}\n\nimport pandas as pd\ndel mydict['id']\ndel mydict['name']\ndel mydict['m']\nd = pd.DataFrame(mydict).T\n\n"], ["(\n    df.set_index([\"year\", \"month\"])\n    .loc[lambda x: ~x.index.isin([(1990, 7), (1990, 8), (1991, 1)])]\n    .reset_index()\n)\n\n\nyear    month   data1\n0   1990    9   2500\n1   1990    9   1500\n2   1991    2   350\n3   1991    3   350\n4   1991    7   450\n", "(df.set_index([\"year\", \"month\"], drop = False)\n .drop([(1990, 7), (1990, 8), (1991, 1)])\n .reset_index(drop = True)\n  )\n"], ["driver.get('https://ca.iherb.com/pr/Life-Extension-BioActive-Complete-B-Complex-60-Vegetarian-Capsules/67051')\nprint([my_elem.text for my_elem in driver.find_elements_by_css_selector(\"div[itemprop='description']>ul li\")])\n", "['Contains Enzymatically Active B-Vitamins', 'Dietary Supplement', 'Non-GMO LE Certified ', 'Promotes healthy metabolism of glucose, fat & alcohol', 'Supports the healthy energy production your body needs', 'Encourages healthy organ function, cognitive health & more', 'Helps inhibit potential vitamin B deficiency']\n", "driver.get('https://ca.iherb.com/pr/Life-Extension-BioActive-Complete-B-Complex-60-Vegetarian-Capsules/67051')\nprint(', '.join([my_elem.text for my_elem in driver.find_elements_by_xpath(\"//div[@itemprop='description']/ul//li\")]))\n", "Contains Enzymatically Active B-Vitamins, Dietary Supplement, Non-GMO LE Certified , Promotes healthy metabolism of glucose, fat & alcohol, Supports the healthy energy production your body needs, Encourages healthy organ function, cognitive health & more, Helps inhibit potential vitamin B deficiency\n", "driver.get('https://ca.iherb.com/pr/Life-Extension-BioActive-Complete-B-Complex-60-Vegetarian-Capsules/67051')\nprint([my_elem.text for my_elem in WebDriverWait(driver, 20).until(EC.visibility_of_all_elements_located((By.CSS_SELECTOR, \"div[itemprop='description']>ul li\")))])\n", "['Contains Enzymatically Active B-Vitamins', 'Dietary Supplement', 'Non-GMO LE Certified ', 'Promotes healthy metabolism of glucose, fat & alcohol', 'Supports the healthy energy production your body needs', 'Encourages healthy organ function, cognitive health & more', 'Helps inhibit potential vitamin B deficiency']\n", "driver.get('https://ca.iherb.com/pr/Life-Extension-BioActive-Complete-B-Complex-60-Vegetarian-Capsules/67051')\nprint(', '.join([my_elem.text for my_elem in WebDriverWait(driver, 20).until(EC.visibility_of_all_elements_located((By.XPATH, \"//div[@itemprop='description']/ul//li\")))]))\n", "Contains Enzymatically Active B-Vitamins, Dietary Supplement, Non-GMO LE Certified , Promotes healthy metabolism of glucose, fat & alcohol, Supports the healthy energy production your body needs, Encourages healthy organ function, cognitive health & more, Helps inhibit potential vitamin B deficiency\n", "from selenium.webdriver.support.ui import WebDriverWait\nfrom selenium.webdriver.common.by import By\nfrom selenium.webdriver.support import expected_conditions as EC\n"], ["r = requests.get(\"https://ca.iherb.com/pr/Life-Extension-BioActive-Complete-B-Complex-60-Vegetarian-Capsules/67051\")\nsoup = BeautifulSoup(r.content, 'html.parser')\nlist_items = soup.find('div', itemprop=\"description\")\nfound = str(re.findall(r'itemprop=\"description\"><ul><li>(\\D+)', str(list_items)))\n", "newfound = re.sub(r\"</li>|[\\[']\", '', found)\nnewfound2 = re.sub(r\"<li>\", ', ', newfound)\nstripped = newfound2.split('\\\\xa0', 1)[0]\n"], ["from selenium import webdriver\n\nlink = 'https://ca.iherb.com/pr/Life-Extension-BioActive-Complete-B-Complex-60-Vegetarian-Capsules/67051'\n\nwith webdriver.Chrome() as driver:\n    driver.get(link)\n    elements = ', '.join([item.text for item in driver.find_elements_by_css_selector(\"[itemprop='description'] > ul:nth-of-type(1) > li\")])\n    print(elements)\n", "Contains Enzymatically Active B-Vitamins, Dietary Supplement, Non-GMO LE Certified \n"], ["from selenium import webdriver\nfrom shutil import which\nchrome_path = which('chromedriver.exe')\n\ndriver = webdriver.Chrome(executable_path = chrome_path)\n\nli_eliments = driver.find_elements_by_tag_name('li')\n\nelements = []\nfor e in li_eliments.text:\n    elements.append(e)\nprint(\", \".join(elements)) \n"], ["text = '''\n<ul>\n  <li>Contains Enzymatically Active B-Vitamins\n  </li>\n  <li>Dietary Supplement\n  </li>\n  <li>Non-GMO LE Certified\n  </li>\n</ul>'''\n\nimport selenium.webdriver\n\ndriver = selenium.webdriver.Firefox()\n\ndriver.get(\"data:text/html;charset=utf-8,\" + text)\n\nelements = driver.find_elements_by_tag_name('li')\n\nelements = [i.text for i in elements]\n\nprint(\", \".join(elements)) \n"], ["ElementNotInteractableException: Message: element not interactable\"\n", "(\"label[for=tab1code2]\")\n", "WebDriverWait(driver, 20).until(EC.element_to_be_clickable((By.CSS_SELECTOR, \"label[for=tab1code2]\"))).click()\n"], ["from selenium import webdriver\n\nif __name__ == '__main__':\n    driver = webdriver.Chrome(\"./chromedriver\")\n    driver.get('https://www.selenium.dev/documentation/en/')\n    driver.find_element_by_css_selector(\"label[for=tab1code2]\").click()\n"], ["class element_to_be_clickable(object):\n    \"\"\" An Expectation for checking an element is visible and enabled such that\n    you can click it.\"\"\"\n", "driver.find_element_by_css_selector(\"input[aria-controls='pythoncode2']\").is_enabled()\n", "driver.find_element_by_css_selector(\"input[aria-controls='pythoncode2']\").get_attribute('disabled') != \"true\"\n", "True\n", "driver.find_element_by_css_selector(\"input[aria-controls='pythoncode2']\").is_displayed()\n", "False\n", "driver.find_element_by_css_selector('[for=\"tab1code2\"]')\n", "driver.find_element_by_css_selector('[for=\"tab1code2\"]').is_enabled()\ndriver.find_element_by_css_selector('[for=\"tab1code2\"]').is_displayed()\n"], ["driver.get('https://www.selenium.dev/documentation/en/')\nWebDriverWait(driver, 20).until(EC.element_to_be_clickable((By.XPATH, \"//label[@for='tab1code2']\"))).click()\n"], ["WebDriverWait(browser, 20).until(EC.element_to_be_clickable((By.XPATH, '*//div[@class=\"tabset\"]/label[2]'))).click()\n", "WebDriverWait(browser, 20).until(EC.presence_of_element_located((By.XPATH, '*//div[@class=\"tabset\"]/label[2]'))).click()\n"], ["dates_to_avoid = [(1990, 7), (1990, 8), (1991, 1)])\nindex_to_delete = [row.index for row in df.itertuples() if (row.year, row.month) in dates_to_avoid]\n   \n", "df = df.loc[~df.index.isin(index_to_delete)]\n"], ["mask = ~(df.year*100 + df.month).isin({199007, 199008, 199101})\ndf[mask]\n\n# out:\n   year  month  data1\n2  1990      9   2500\n3  1990      9   1500\n5  1991      2    350\n6  1991      3    350\n7  1991      7    450\n"], ["out = df.drop(df.reset_index().merge(pd.DataFrame({'year':[1990,1990,1991],'month':[7,8,1]}))['index'])\n   year  month  data1\n2  1990      9   2500\n3  1990      9   1500\n5  1991      2    350\n6  1991      3    350\n7  1991      7    450\n", "out = df.merge(pd.DataFrame({'year':[1990,1990,1991],'month':[7,8,1]}),indicator=True,how='left').loc[lambda x : x['_merge']=='left_only']\n   year  month  data1     _merge\n2  1990      9   2500  left_only\n3  1990      9   1500  left_only\n5  1991      2    350  left_only\n6  1991      3    350  left_only\n7  1991      7    450  left_only\n"], ["df['yyyymm'] = df['year'].astype(str) + df['month'].astype(str).zfill(2)\ndf = df.loc[(df.yyyymm != '199007') & (df.yyyymm != '199008') & (df.yyyymm != '199101')]\n"], ["def filter(row):\n  # Add other conditions and just return row accordingly\n  if ((row.year != 1990) | (row.month != 7)):\n    return True\n  return False\n\nmask = df.apply(filter,axis=1)\ndf[mask]\n"], ["mask = ~df[['year', 'month']].apply(tuple, 1).isin([(1990, 7), (1990, 8), (1991, 1)])\nprint(df[mask])\n", "   year  month  data1\n2  1990      9   2500\n3  1990      9   1500\n5  1991      2    350\n6  1991      3    350\n7  1991      7    450\n"], ["for r, row in df.iterrows():\n    for i in range(len(row)):\n        if i>1 and row[i]!=None and row[i-1]!=None:\n            df.at[r,col[i]] = '|' + str(row[i])\n", "Name    Address1     Street     Town    Postcode\nWill     None        None       London   None\nPhil    19.0      |Long Road    None    None\n"], ["df_columns = list(df)\ncolumns = ','.join(df_columns)\nvalues = 'VALUES({})'.format(','.join(['%s' for col in df_columns]))\nupdate_list = ['{} = EXCLUDED.{}'.format(col, col) for col in df_columns]\nupdate_str = ','.join(update_list)\ninsert_stmt = \"INSERT INTO {} ({}) {} ON CONFLICT ([your_pkey_here]) DO UPDATE SET {}\".format(table, columns, values, update_str)\n"], ["export CLOUDSDK_PYTHON=python2\n"], [], ["import subprocess\np = subprocess.Popen([\"cpp_app\", stdin=subprocess.PIPE,stdout=subprocess.PIPE)\nout, _ = p.communicate(b\"1 2\")\nprint(out, err)\n"], ["import subprocess\nproc = subprocess.Popen(['whois', 'google.com'], stdout=subprocess.PIPE)\ndata = proc.communicate()[0]\nprint( data )\n"], ["python_program.py | cpp_program\n"], [], [], ["import numpy as np\nfor i in ['Address1','Street','Town']:\n    df[i] = np.where(df[i].notnull(),'|' + df[i].astype(str),'')\n", "print(df)\n\n   Name Address1       Street     Town  Postcode\n0  Will                        |London       nan\n1  Phil    |19.0  |Long Road                nan\n"], ["import numpy as np\nfor i in ['Address1','Street','Town']:\n    df[i] = np.where(df[i].notnull(),'|' + df[i].astype(str),'') \n"], ["for row in data \n   for i in row\n      if i != ''\n      i = \"|\" + i \n"], ["embed=discord.Embed(title='Hey', description=\"How are you?\", color=hex(value))\n"], ["sixteenIntegerHex = int(message.content.replace(\"#\", \"\"), 16)\nreadableHex = int(hex(sixteenIntegerHex), 0)\n\nembed = discord.Embed(\n    title = \"Hey\",\n    description = \"How are you?\",\n    color = readableHex\n)\n", "readableHex = int(hex(int(message.content.replace(\"#\", \"\"), 16)), 0)\n"], ["discord.Embed(title=\"Hey\", description=\"How are you?\", color=0x00ff00)\n", "color = int(message.content, 16)  # content should look like this: \"0x00ff00\"\ndiscord.Embed(title=\"Hey\", description=\"How are you?\", color=color)\n", "color_name = message.content  # content should look like this: \"green\"\n\ncolors = {\"green\": 0x00ff00, \"red\": 0xff0000, \"blue\": 0x0000ff}\n\ndiscord.Embed(title=\"Hey\", description=\"How are you?\", color=colors[color_name])\n"], ["questions = [\"What should be the name of the embed?\", \n            \"What should be the desc\",\n            \"What is the colour of the embed?\"]\n\nanswers = []\n\ndef check(m):\n    return m.author == ctx.author and m.channel == ctx.channel \n\nfor i in questions:\n    await ctx.send(i)\n\n    try:\n        msg = await client.wait_for('message', timeout=15.0, check=check)\n    except asyncio.TimeoutError:\n        await ctx.send('You didn\\'t answer in time, please be quicker next time!')\n        return\n    else:\n        answers.append(msg.content)\n\n\ntitle = answers[1]\ndesc = answers[2]\ncolour = answers[3]\n\n\nembed = discord.Embed(title = f\"{title}\", description = f\"{desc}\", color = colour)\n\nembed.set_footer(text = f\"My embed\")\n\nawait channel.send(embed = embed)\n"], ["@client.command()\nasync def embed(ctx, content, colour):\n\nembed=discord.Embed(title='Embed', description=f\"{content}\", color=colour)\nawait output.edit(content=None, embed=embed)\n"], ["sudo apt-get install qt5-default\nsudo apt-get install sip-dev\n\ncd /usr/src\nsudo wget https://www.riverbankcomputing.com/static/Downloads/sip/sip-5.5.1.dev2011271026.tar.gz\nsudo tar xzf sip-5.5.1.dev2011271026.tar.gz\ncd sip-5.5.1.dev2011271026\nsudo python3 setup.py build\nsudo python3 setup.py install\n\nsudo wget https://files.pythonhosted.org/packages/28/6c/640e3f5c734c296a7193079a86842a789edb7988dca39eab44579088a1d1/PyQt5-5.15.2.tar.gz\nsudo tar xzf PyQt5-5.15.2.tar.gz\ncd PyQt5-5.15.2\nsudo python3 configure.py\nsudo make\nsudo make install\n\n"], ["d = [['130', '2020-12-17 12:02:19', [52.1846976, 21.0525275]], ['213', '2020-12-17 12:02:22', [52.1757618, 21.2319711]]]\n\ndf = pd.DataFrame(d).set_index([0,1]).unstack(1).droplevel(0,1).rename_axis(None)\n", "print(df)\n\n1         2020-12-17 12:02:19       2020-12-17 12:02:22\n130  [52.1846976, 21.0525275]                       NaN\n213                       NaN  [52.1757618, 21.2319711]\n", "df = pd.DataFrame(d).set_index([0,1])\n\ndf = df.set_index(df.groupby(level=[0,1]).cumcount(),append=True).unstack(1)\n\n1           2020-12-17 12:02:19       2020-12-17 12:02:22\n130 0  [52.1846976, 21.0525275]                       NaN\n    1  [52.1846976, 21.0525275]                       NaN\n213 0                       NaN  [52.1757618, 21.2319711]\n"], ["brew install python@3.8\nexport CLOUDSDK_PYTHON=python3.8\nln -s /usr/local/Cellar/python@3.8/*/bin/python3.8 /usr/local/bin/python3.8\n\ngcloud components update\n\n# the issue is now resolved and you can return to python 3.9\nunset CLOUDSDK_PYTHON\n"], ["[[1]]\n\n[[0 0 1 0 0]\n [0 1 0 1 0]\n [1 0 0 0 1]\n [0 1 0 1 0]\n [0 0 1 0 0]]\n\n[[0 0 1 0 0]\n [0 1 0 1 0]\n [1 0 0 0 1]\n [0 1 0 1 0]\n [0 0 1 0 0]]\n\n[[0 0 0 1 0 0 0]\n [0 0 1 0 1 0 0]\n [0 1 0 0 0 1 0]\n [1 0 0 0 0 0 1]\n [0 1 0 0 0 1 0]\n [0 0 1 0 1 0 0]\n [0 0 0 1 0 0 0]]\n\n"], ["def diamond(n):\n    return np.pad(np.eye(n), ((n-1, 0), (0, n-1)), mode = 'reflect')\n    \n\ndiamond(3)\nOut: \narray([[0., 0., 1., 0., 0.],\n       [0., 1., 0., 1., 0.],\n       [1., 0., 0., 0., 1.],\n       [0., 1., 0., 1., 0.],\n       [0., 0., 1., 0., 0.]])\n\ndiamond(1)\nOut: array([[1.]])\n\ndiamond(5)\nOut: \narray([[0., 0., 0., 0., 1., 0., 0., 0., 0.],\n       [0., 0., 0., 1., 0., 1., 0., 0., 0.],\n       [0., 0., 1., 0., 0., 0., 1., 0., 0.],\n       [0., 1., 0., 0., 0., 0., 0., 1., 0.],\n       [1., 0., 0., 0., 0., 0., 0., 0., 1.],\n       [0., 1., 0., 0., 0., 0., 0., 1., 0.],\n       [0., 0., 1., 0., 0., 0., 1., 0., 0.],\n       [0., 0., 0., 1., 0., 1., 0., 0., 0.],\n       [0., 0., 0., 0., 1., 0., 0., 0., 0.]])\n"], [], [], ["dim = 8\nA = np.maximum(np.maximum(np.maximum(np.eye(dim, k=-(dim//2)), np.eye(dim, k=(dim//2))), np.fliplr(np.eye(dim, k=(dim//2)))), np.fliplr(np.eye(dim, k=-(dim//2))))\n"], ["import numpy as np\n\ndef diamond(n):\n    a, b = np.eye(n, dtype=int), np.eye(n, dtype=int)[:,::-1]\n\n    c, d = np.hstack((b,a[:,1:])), np.hstack((a,b[:,1:]))\n\n    return np.vstack((c, d[1:,:]))\n", ">>> print(diamond(3))\n\n[[0 0 1 0 0]\n [0 1 0 1 0]\n [1 0 0 0 1]\n [0 1 0 1 0]\n [0 0 1 0 0]]\n"], ["import numpy as np\narr = np.diagflat([1,1,1],2)  # now we have 1s in upper-right part\narr = np.maximum(arr,np.flip(arr,1))  # now we have 1s in upper part\narr = np.maximum(arr,np.flip(arr,0))  # now we have 1s everywhere\nprint(arr)\n", "[[0 0 1 0 0]\n [0 1 0 1 0]\n [1 0 0 0 1]\n [0 1 0 1 0]\n [0 0 1 0 0]]\n"], ["from itertools import compress\n\nfilter_ = map(lambda x: x > 60, version)\nlist(compress(useragents, filter_))\n", "s = 'ABCDEFG'\nnums = range(len(s))\n    \nfilter_ = map(lambda x: x > 3, nums)\nprint(list(compress(s, filter_)))\n# ['E', 'F', 'G']\n"], ["past_tense.append(words[i] + 'd')\n", "\nwords = [\"adopt\", \"bake\", \"beam\", \"confide\", \"grill\", \"plant\", \"time\", \"wave\", \"wish\"]\npast_tense = []\n\nfor i in words:    \n    if i[-1] == 'e':\n        past_tense.append(i + 'd')\n    else:\n        past_tense.append(i + 'ed')\n", "words = [\"adopt\", \"bake\", \"beam\", \"confide\", \"grill\", \"plant\", \"time\", \"wave\", \"wish\"]\npast_tense = []\n\nfor i in range(0,len(words)) :    \n    if words[i][-1] == 'e':\n        past_tense.append(words[i] + 'd')\n    else:\n        past_tense.append(words[i] + 'ed')\n"], ["import pandas as pd \ndata = [['130', '2020-12-17 12:02:19', [52.1846976, 21.0525275]], ['213', '2020-12-17 12:02:22', [52.1757618, 21.2319711]]] \ndf = pd.DataFrame.from_records(data, columns=['a', 'b', 'c'])\ndf = df.set_index('a')\ndf\n\n\n              b             c\na       \n130 2020-12-17 12:02:19 [52.1846976, 21.0525275]\n213 2020-12-17 12:02:22 [52.1757618, 21.2319711]\n"], ["{'130': {'2020-12-17 12:02:19': [52.1846976, 21.0525275]},\n '213': {'2020-12-17 12:02:22': [52.1757618, 21.2319711]}}\n", "u = {i[0]:{i[1]: i[2]} for i in l}   \ndf = pd.DataFrame(u).T\n", "            2020-12-17 12:02:19         2020-12-17 12:02:22\n130         [52.1846976, 21.0525275]    NaN\n213         NaN                         [52.1757618, 21.2319711]\n"], ["In [1]: import pandas as pd\n\nIn [2]: data = [['130', '2020-12-17 12:02:19', [52.1846976, 21.0525275]], ['213', '2020-12-17 12:02:22', [52.1757618, 21.2319711]]]\n\nIn [3]: pd.DataFrame([{col: val} for _, col, val in data], index=[item[0] for item in data])\nOut[3]:\n          2020-12-17 12:02:19       2020-12-17 12:02:22\n130  [52.1846976, 21.0525275]                       NaN\n213                       NaN  [52.1757618, 21.2319711]\n"], [], [" #**dbc_file** is the full path of dbc \n    db = cantools.database.load_file(dbc_file)\n    for msg in db.messages:\n        msg_name = msg.name\n        msg_id = msg.frame_id\n        msg_length = msg.length\n        sender = msg.senders\n        msg_group = db.get_message_by_name(msg_name)\n    \n        for signal in msg_group.signals:\n            \n            #name of signal\n            sig_name = signal.name\n            #unit of signal\n            sig_unit = signal.unit\n"], ["import requests\n\nresponse = requests.get(\"https://devnote.in/wp-content/uploads/2020/04/devnote.png\")\n\nfile = open(\"sample_image.png\", \"wb\")\nfile.write(response.content)\nprint (response.content)\nfile.close()\n", "<IfModule mod_security.c>\n  SecFilterEngine Off\n  SecFilterScanPOST Off\n</IfModule>\n"], ["file = open(r\"python.exe\", \"rb\")\nfileStream = file.read()\n\nprint(fileStream[0:2])\nfile.close()\n", "b'MZ'\n"], ["import struct\n\nfile = open(\"hello.bin\", \"rb\")\nfileStream = file.read()\n\nif(struct.unpack(\">H\", fileStream[0:2])[0] == 0xE42F):\n   print(\"yes\")\nelse:\n   print(\"no\")\n"], [], ["fileStream = bytes(file.read())\nif fileStream[0] == 0xE4 and fileStream[1] == 0x2F:\n  ...\n"], [], [], ["with open('your_file.txt', 'r+') as f:\n    sorted_contents =  ''.join(sorted(f.readlines(), key = lambda x: int(x.split(' ')[0])))\n    f.seek(0)\n    f.truncate()\n    f.write(sorted_contents)\n"], ["class my_dictionary(dict):\n\n    # __init__ function\n    def __init__(self):\n        self = dict()\n\n    # Function to add key:value\n    def add(self, key, value):\n        self[key] = value\n\n\n# Main Function\ndict_obj = my_dictionary()\n", "dict_obj.key = tmpkey\ndict_obj.value = tmpvalue\ndict_obj.add(dict_obj.key, dict_obj.value)\n", "dicMatrix = []\ndictionary_copy = dict_obj.copy()\ndicMatrix.append(dictionary_copy)\n"], ["def equal(a,b):\n    a = sorted(a)\n    b = sorted(b)\n    if a == b:\n        return True\n    return False\n"], ["def procedures(txt1, txt2):\n    str1 = txt1.lower()\n    str2 = txt2.lower()\n    for i in str1:\n        for j in str2:\n            if i == j:\n                str1 = str1.replace(i, \"\", 1)\n                str2 = str2.replace(j, \"\", 1)\n                print(\"did\")\n    if str1 == \"\" and str2 == \"\":\n        return True\n    else:\n        return False\n", "def procedures(txt1, txt2):\n    seq1 = list(txt1.lower())\n    seq2 = list(txt2.lower())\n\n    seq1.sort()\n    seq2.sort()\n\n    if seq1 == seq2:\n        return True\n    else:\n        return False\n"], [], ["def procedures(txt1, txt2):\nstr1 = txt1.lower()\nstr2 = txt2.lower()\n\nstr1 = list(str1)\nresult = False\n\nfor dt in str1:\n    if dt in str2:\n        result = True\n    else:\n        result = False\n\nreturn result \n\nprint(procedures('neeraj','prakash'))\nprint(procedures('neeraj','neeraj'))\n"], ["def procedures(txt1, txt2):\n    return sorted(txt1) == sorted(txt2)\n"], [], ["import bisect\n\ndef find_next(x, a):\n  i = bisect.bisect_right(x, a)\n  if i:\n    return x[i]\n  return None\n\ndef is_sequence(x):\n  ans = True\n  for i in x[:-1]:\n    next_num = find_next(x, i)\n    if next_num and i+1 != next_num:\n      ans = False\n      break\n  return ans\n\nprint(is_sequence([1,2,3,4])) # True\n"], [], ["df = pd.DataFrame({\n    'a': [1, 2, 1, 2],\n    'b': [1, np.nan, 2, 3],\n    'c': [1, np.nan, 2, np.nan],\n    'd': np.array([np.nan, np.nan, 2, np.nan]) * 1j,\n})\ngb = df.groupby('a')\n", "gb.sum()\n\nOut[]:\n     b    c                   d\na                              \n1  3.0  3.0  0.000000+2.000000j\n2  3.0  0.0  0.000000+0.000000j\n", "cnt = gb.count()\nsiz = gb.size()\nmask = siz.values[:, None] == cnt.values\ngb.sum().where(mask)\n\nOut[]:\n     b    c   d\na              \n1  3.0  3.0 NaN\n2  NaN  NaN NaN\n", "cnt = gb.count()\ngb.sum() * (cnt / cnt)\nout\n\nOut[]:\n     b    c                   d\na                              \n1  3.0  3.0  0.000000+2.000000j\n2  3.0  NaN                 NaN\n", "cnt = gb.count()\ngb.sum() / cnt\n\nOut[]:\n     b    c                   d\na                              \n1  1.5  1.5  0.000000+2.000000j\n2  3.0  NaN                 NaN\n"], ["git -C \"/usr/local/Homebrew/Library/Taps/homebrew/homebrew-core\" fetch --unshallow\ngit -C \"/usr/local/Homebrew/Library/Taps/homebrew/homebrew-cask\" fetch --unshallow\n"], [], [], ["    int minCost[] = new int[N];\n    Arrays.fill(minCost,Integer.MAX_VALUE);\n    for(int i=0;i<A.length;i++){\n        for(int j=0;j<A.length;j++){\n            if(j == 0){\n                minCost[j] = 0;\n                continue;\n            }\n            if(j-2>=0 && minCost[j-2]!=Integer.MAX_VALUE){\n                minCost[j] = Math.min(minCost[j-2]+A[j-2],minCost[j]);\n            }\n            if(j+1<A.length && minCost[j+1]!=Integer.MAX_VALUE){\n                minCost[j] = Math.min(minCost[j+1]+A[j+1],minCost[j]);\n            }\n        }\n    }\n\n    if(minCost[A.length-2]!= Integer.MAX_VALUE && minCost[A.length-1]!= Integer.MAX_VALUE){\n        return Math.min(A[A.length-2]+minCost[A.length-2],minCost[A.length-1]+A[A.length-1]);\n    }\n    if(minCost[A.length-2]!= Integer.MAX_VALUE){\n        return minCost[A.length-1]+A[A.length-1];\n    }\n    if(minCost[A.length-1]!= Integer.MAX_VALUE){\n        return A[A.length-2]+minCost[A.length-2];\n    }\n    return -1;\n"], ["def most_frequent_letter(s):\n    st = s.lower().replace(' ', '')\n    frequencies = {}\n    frequencies = {item: frequencies.setdefault(item, 0) + 1 for item in st}\n    rev_freq = {count: key for key, count in frequencies.items()}\n    return rev_freq[max(rev_freq)]\n\nprint(most_frequent_letter('nnmmmaaa'))  # -> a\n"], [], ["def most_frequent_letter(s):\n    st = s.lower().replace(' ', '')\n    frequencies = {}\n    for items in st:\n        if items in frequencies:\n            frequencies[items] += 1\n        else:\n            frequencies[items] = 1\n    max_val=max(frequencies.values())\n    result=\"\"\n    for key,value in frequencies.items():\n        if value==max_val:\n            result+=key\n\n    return result\n\n\nresult=most_frequent_letter('mmmaaa')\nprint(result)\n"], ["def most_frequent_letter(word):\n    letters = list(word)\n    return (max(set(letters), key = letters.count))\n\nprint(most_frequent_letter('mmmaaa'))\n# output:m\nprint(most_frequent_letter('some apples are green'))\n# output: e\n"], ["def most_frequent_letter(s):\n    st = s.lower().replace(' ', '')\n    st = st[::-1]\n    frequencies = {}\n    for items in st:\n        if items in frequencies:\n            frequencies[items] += 1\n        else:\n            frequencies[items] = 1\n\n    return max(frequencies, key=frequencies.get)\n"], ["def combinations(aList):\n    yield []\n    for i,v in enumerate(aList,1):\n        yield from ([v]+c for c in combinations(aList[i:]))\n    \n\nfor combo in combinations([1,2,3]): print(combo)\n\n[]\n[1]\n[1, 2]\n[1, 2, 3]\n[1, 3]\n[2]\n[2, 3]\n[3]\n", "def combinations(aList):\n    return [[]] + [ [v]+c for i,v in enumerate(aList,1) \n                          for c   in combinations(aList[i:]) ]\n\nprint( combinations([1,2,3]) )\n\n[[], [1], [1, 2], [1, 2, 3], [1, 3], [2], [2, 3], [3]]\n"], ["def combination(l, result=[]):\n    for item in range(len(l)):\n        cut_list = l[:item] + l[item + 1:]\n        if len(cut_list) > 1:\n            combination(cut_list, result)\n        elif len(cut_list) == 1:\n            result += cut_list\n    return result\n\n\nprint(combination([3, 22, 10, 15, 32, 10, 5]))\n", ">>> python3 test.py \n[5, 10, 5, 32, 10, 32, 5, 10, 5, 15, 10, 15, 5, 32, 5, 15, 32, ...\n", "import itertools\nstuff = [1, 2, 3]\nfor L in range(0, len(stuff)+1):\n    for subset in itertools.permutations(stuff, L):\n        print(subset)\n", ">>> python3 test.py \n()\n(1,)\n(2,)\n(3,)\n(1, 2)\n(1, 3)\n(2, 1)\n(2, 3)\n(3, 1)\n(3, 2)\n(1, 2, 3)\n(1, 3, 2)\n(2, 1, 3)\n(2, 3, 1)\n(3, 1, 2)\n(3, 2, 1)\n", "import itertools\nstuff = [1, 2, 3]\nfor L in range(0, len(stuff)+1):\n    for subset in itertools.combinations(stuff, L):\n        print(subset)\n", ">>> python3 test.py \n()\n(1,)\n(2,)\n(3,)\n(1, 2)\n(1, 3)\n(2, 3)\n(1, 2, 3)\n", "import itertools\n\ndef combination(l):\n    result = []\n    for L in range(0, len(l)+1):\n        for subset in itertools.combinations(l, L):\n            result.append(list(subset))\n    return result\n\nprint(combination([1, 2, 3]))\n", ">>> python3 test.py \n[[], [1], [2], [3], [1, 2], [1, 3], [2, 3], [1, 2, 3]]\n", "def combinations(return_len, iterable):\n    if not return_len:\n        return [[]]\n    if not iterable:\n        return []\n\n    head = [iterable[0]]\n    tail = iterable[1:]\n    new_comb = [head + list_ for list_ in combinations(return_len - 1, tail)]\n\n    return new_comb + combinations(return_len, tail)\n\n\ninput_list = [1, 2, 3]\nresult = []\n\nfor n in range(0, len(input_list) + 1):\n    for single_result in combinations(n, input_list):\n        result.append(single_result)\n\nprint(result)\n", ">>> python3 test.py \n[[], [1], [2], [3], [1, 2], [1, 3], [2, 3], [1, 2, 3]]\n"], [], ["l = [3, 22, 10, 15, 32, 10, 5]\n\n\ndef f(ml: list):\n    a = []\n    for i1 in ml:\n        for i2 in ml:\n            if not i1 + i2 in a:\n                a.append(i1 + i2)\n    return a\n\n\nprint(f(l))\n\n"], ["In [24]: import itertools\n\nIn [25]: l\nOut[25]: [1, 2, 3]\n\nIn [26]: [sublist for item in [[list(x) for x in itertools.combinations(l,n)] for n in range(len(l)+1)] for sublist in item]\nOut[26]: [[], [1], [2], [3], [1, 2], [1, 3], [2, 3], [1, 2, 3]]\n"], ["driver.find_element_by_css_selector(\"button.share-actions__primary-action[data-control-name='share.post']>span.artdeco-button__text\").click()\n", "driver.find_element_by_xpath(\"//button[contains(@class, 'share-actions__primary-action') and @data-control-name='share.post']/span[@class='artdeco-button__text' and contains(., 'Post')]\").click()\n", "WebDriverWait(driver, 20).until(EC.element_to_be_clickable((By.CSS_SELECTOR, \"button.share-actions__primary-action[data-control-name='share.post']>span.artdeco-button__text\"))).click()\n", "WebDriverWait(driver, 20).until(EC.element_to_be_clickable((By.XPATH, \"//button[contains(@class, 'share-actions__primary-action') and @data-control-name='share.post']/span[contains(., 'Post')]\"))).click()\n", "from selenium.webdriver.support.ui import WebDriverWait\nfrom selenium.webdriver.common.by import By\nfrom selenium.webdriver.support import expected_conditions as EC\n"], ["//button/span[contains(text(), \"Post\")]\n", "button = WebDriverWait(driver, 10).until(\n        EC.element_to_be_clickable((By.XPATH, \"//button/span[contains(text(), \"Post\")]\"))\n    )\n"], ["//span[contains(text(), 'Post')]/parent::button\n"], ["from selenium.webdriver.support import expected_conditions as EC\nfrom selenium.webdriver.support.ui import WebDriverWait\nfrom selenium.webdriver.common.by import By\n\n\nwait = WebDriverWait(driver, 10)\n\nbutton = wait.until(EC.element_to_be_clickable((By.XPATH, '[YOUR X_PATH TO THE BUTTON]')))\ndriver.execute_script(\"arguments[0].click()\", button)\n"], ["//button[@class=\"share-actions__primary-action artdeco-button artdeco-button--2 artdeco-button--primary ember-view\"]. \n", "//button[contains(@id,'ember')]\n"], ["pip install tube_dl\nfrom tube_dl import Youtube\nyt = Youtube('url')\nyt.Formats()[0].download()\n"], ["mystring = mystring.replace('\\t','')\n"], ["mystring = mystring.replace('\\t','')\n"], ["pip uninstall numpy\npip install numpy==1.19.3\n", "c:\\python39\\lib\\site-packages\\numpy-1.19.4.dist-info\\*\n\nc:\\python39\\lib\\site-packages\\numpy\\*\n\nc:\\python39\\scripts\\f2py.exe\n"], ["#! /usr/bin/env python3\n\nimport os\nimport cv2\nimport numpy as np\nfrom PIL import Image\n\npath = r'D:\\split'\nout = r'D:\\concat_test'\n\nfor root, _, files in os.walk( path ):\n    heads = {}\n    for file in files:\n        head, tail = file.split( '_', 1 )\n        version, extension = tail .split( '.', 1 )\n        if head not in heads or version > heads [head] ['vers']:\n            heads [head] = { 'vers':version, 'ext':extension }\n\n    for h in heads:  ##  AB, BC, CA\n        head = heads [h]  ##  local reference\n        images = []\n        for i in range( head ['vers'] )\n            imagename = h +i +head ['ext']\n            img = cv2.imread( os.path.join( root, imagename ), 0 )  ##  color, grey, alpha\n            images .append( img )\n\n        concat = cv2.vconcat( images )\n        concat_name = os.path.join( out,  h +'concat' +head ['ext'] )\n        cv2.imwrite( concat_name, concat )\n"], ["import os\nimport shutil\nimport tempfile\nimport itertools\nfrom PIL import Image\nfrom PIL import ImageOps\n\ndef create_temp_directory(name):\n    \"\"\"\n    This function create a temporary directory, which will\n    be used to store files based on specific parts of a filename.\n    :param name:\n    :return:\n    \"\"\"\n    temp_dir = tempfile.TemporaryDirectory(suffix=None, prefix=f'temp_directory_{name}', dir=None)\n    return temp_dir\n\n\ndef divide_list_into_chunks(input_list, len_of_chunk):\n    \"\"\"\n    This function will divide a list into chunks.\n    :param input_list:\n    :param len_of_chunk:\n    :return:\n    \"\"\"\n    for i in range(0, len(input_list), len_of_chunk):\n       yield input_list[i:i + len_of_chunk]\n \n\ndef add_blank_checks(input_list, temp_dir):\n    \"\"\"\n   :param input_list: \n   :param temp_dir: \n   :return: \n   \"\"\"\n   number_of_images = (5 - len(input_list))\n   for _ in range(number_of_images):\n      shutil.copy(f'blank_check.jpg', f'{temp_dir.name}/blank_check.jpg')\n      input_list.append(f'{temp_dir.name}/blank_check.jpg')\n   return input_list\n\n\ndef merge_images_vertically(list_of_images, file_name):\n    \"\"\"\n    This function is designed to merge images vertically\n    :param list_of_images: current list of images to process\n    :param file_name: file name for the new image\n    :return: \n    \"\"\"\n    # open images using Pillow\n    images = [Image.open(im) for im in list_of_images]\n    # Create separate lists to store the heights and widths\n    # of the images\n    widths, heights = zip(*(i.size for i in images))\n    width_of_new_image = min(widths)\n    height_of_new_image = sum(heights)\n    # create a new output image\n    new_im = Image.new('RGB', (width_of_new_image, height_of_new_image))\n    new_pos = 0\n    counter = 0\n    for im in images:\n       if counter == 0:\n          new_im.paste(im, (0, new_pos))\n          new_pos += im.size[1]\n          counter += 1\n       else:\n          color = \"black\"\n          border = (0, 10, 0, 0)\n          img_with_border = ImageOps.expand(im, border=border, fill=color)\n          new_im.paste(img_with_border, (0, new_pos))\n          new_pos += im.size[1]\n     new_im.save(f'{file_name}', \"JPEG\", quality=75, optimize=True, progressive=True)\n     return\n\n\nimage_directory = \"sample_images\"\nimage_directory_abspath = os.path.abspath(image_directory)\nimages = os.listdir(image_directory_abspath)\naccepted_extensions = ('.bmp', '.gif', '.jpg', '.jpeg', '.png', '.svg', '.tiff')\nvalid_image_extensions = [im for im in images if im.endswith(accepted_extensions)]\nimage_groups = [list(g) for _, g in itertools.groupby(sorted(valid_image_extensions), lambda x: x[0:2])]\nfor image_group in image_groups:\n   count = 0\n   name_group = image_group[0][:2]\n   temp_directory = create_temp_directory(name_group)\n   image_list = [shutil.copy(f'{image_directory_abspath}/{item}', f'{temp_directory.name}/{item}') for item in image_group]\n   max_number_of_items = 5\n   chunks = list(divide_list_into_chunks(image_list, max_number_of_items))\n   for chunk in chunks:\n      count += 1\n      if len(chunk) == 5:\n        merge_images_vertically(chunk, f'{name_group}_merged_{count}.jpeg')\n      else:\n        new_checks = add_blank_checks(chunk, temp_directory)\n        merge_images_vertically(new_checks, f'{name_group}_merged_{count}.jpeg')\n", "----------------------------------------\nSystem information\n----------------------------------------\nPlatform:    macOS Catalina\nPython:      3.8.0\nPillow:      8.0.1\n----------------------------------------\n"], [], [], ["def hill(lst):\n    lst = lst.copy()\n    last = cur = float('-inf')\n    while lst and last <= cur:\n        last, cur = cur, lst.pop()\n    while lst and last >= cur:\n        last, cur = cur, lst.pop()\n    return not lst\n\n\ndef valley(lst):\n    lst = lst.copy()\n    last = cur = float('inf')\n    while lst and last >= cur:\n        last, cur = cur, lst.pop()\n    while lst and last <= cur:\n        last, cur = cur, lst.pop()\n    return not lst\n", ">>> lst = [3, 2, 2, 1, 2, 3]\n>>> print(valley(lst), hill(lst))\nTrue False\n>>> lst = [3, 2, 1]\n>>> print(hill(lst), valley(lst))\nTrue True\n>>> lst = [4, 2, 1, 4, 3]\n>>> print(hill(lst), valley(lst))\nFalse False\n"], ["aList =  [[0, 1],[2, 3],[4, 5]]\n\nindex = next(i for i,s in enumerate(aList) if s[0]==2)\n\nprint(index) # 1\n", "index = [*zip(*aList)][0].index(2)\n", "index = [i for i,*_ in aList].index(2)\n"], ["def name_lists(n_list):\n    result_dict = {}\n    n_list.sort()\n    for name in n_list:\n        names = name.split(\" \")\n        if names[0] in result_dict:\n            result_dict[names[0]].append(name)\n        else:\n            result_dict[names[0]] = [name]\n    return result_dict\n"], ["public class MinimumCost {\npublic static void main(String ar[]){\n    int arr[]={9,4,6,8,5};\n    int startIndex=1;\n    int DP[]=new int[arr.length];\n    for(int i=0;i<arr.length;i++){\n        DP[i]=100000;//I just take this as maximum value .you can change it. \n    }\n    DP[startIndex] = arr[startIndex]   ;\n    DP[startIndex+2] = arr[startIndex] + arr[startIndex+2] + Math.min(arr[startIndex+2], arr[startIndex]);\n\n    int n=arr.length;\n    for(int i=0;i<n-1;i++){\n        if ((i+1)<n)\n            DP[i] = Math.min(DP[i], (DP[i+1]) + arr[i]);\n        if ((i + 2 )< n)                 \n            DP[i+2] = DP[i] + arr[i+2];\n    }\n    System.out.println(Math.min(DP[arr.length-1],DP[arr.length-2]));\n\n}\n"], ["def name_counts(name_list):\n    result_dict = {}\n    for name in name_list:\n        names = name.split(\" \")\n        if names[0] in result_dict:\n            result_dict[names[0]] += 1\n        else:\n            result_dict[names[0]] = 1\n    return result_dict \n"], ["def name_lists(name_list):\n    d = {}\n    \n    for name in name_list:\n                \n        first_name = name.split()[0]\n        if first_name in d:\n            \n            d[first_name].append(name)\n            d[first_name].sort()\n            \n        else:\n            d[first_name]=[name]\n\n    return d\n"], [], ["    data_dir = os.path.dirname(__file__)\n"], [], ["list2 = [{k: v for k,v in dic.items() if v} for dic in list1]\n"], ["numpy==1.19.3; platform_system == \"Windows\"\nnumpy>=1.19.4; platform_system == \"linux\"\n"], ["def digit(n):\n   even = 0\n   odd = 0\n   while (n != 0):\n       r = n % 10\n       if r % 2 == 0:\n          even = even + r\n       else:\n          odd = odd + r\n       n //= 10\n\n   return even - odd\n\n\nn = 412\nprint(digit(int(n)))\n", "def digit(n):\n   even = [int(i) if int(i) % 2 == 0 else 0 for i in str(n)]\n   odd = [int(i) if int(i) % 2 else 0 for i in str(n)]\n   return sum(even) - sum(odd)\n"], [], ["def digit(n):\n    even = 0\n    odd = 0\n    string = str(n)\n    for i in string:\n        if int(i) % 2 == 0:\n            even += int(i)\n        else:\n            odd += int(i)\n    return even - odd\nn = 282\nprint(digit(n)) #12\n"], [], ["def digitS(n):\n    even = 0\n    odd = 0\n    while (n!=0):\n        if n % 2 == 0:\n            even += (n%10)\n        else:\n            odd += (n%10)\n        n//=10\n\nreturn even - odd\nn = 412\nprint(digitS(n))\n"], [], ["#!/usr/bin/env python3\n\nimport glob, re\nimport numpy as np\nimport cv2\n\n# Get list of filename prefixes by looking for \"XX_1.jpg\" images\nprefixes = [ re.split('_', f)[0] for f in glob.glob('[A-Z][A-Z]_1.jpg') ]\n\n# Iterate over prefixes forming sequentially numbered filenames\nfor prefix in prefixes:\n   stack = cv2.imread(f'{prefix}_1.jpg', cv2.IMREAD_COLOR)\n   for N in range(2,6):\n      # Load image and concatenate onto stack\n      im = cv2.imread(f'{prefix}_{N}.jpg', cv2.IMREAD_COLOR)\n      stack = np.concatenate((stack, im), axis=0)\n   # Save concatenated stack\n   cv2.imwrite(f'{prefix}_concat.jpg', stack)\n", "import glob, re\nimport numpy as np\n\n# iterate over all \"XX_1.jpg\" files\nfor f in glob.glob('[A-Z][A-Z]_1.jpg'):\n    print(f)\n    stem = re.split('_', f)[0]\n    print(stem)\n", "DE_1.jpg\nDE\nBC_1.jpg\nBC\nAB_1.jpg\nAB\n"], [], [], [], ["import pandas as pd\nimport datetime\n\ndf = pd.read_csv('D:\\\\test.txt',sep='\\*0001')\n\ndf.columns = ['dates','val']\ndf.dates = pd.to_datetime(df.dates.str[1:-2])\ndf.to_csv(\"output.csv\",header=None,index=None)\n"], [], ["#! /usr/bin/env python3\n\nm = {'Jan':'01', 'Feb':'02', 'Mar':'03', 'Apr':'04', 'May':'05', 'Jun':'06', 'Jul':'07', 'Aug':'08', 'Sep':'09', 'Oct':'10', 'Nov':'11', 'Dec':'12'}\nwith open('dq_barorun_20180715_calibtest.log', 'r') as fh, open('output.txt' , 'w') as fh2:\n    for line in fh:\n        day = line[9:11]\n        month = m[line[5:8]]\n        year = line[25:29]\n        time = line[12:24]\n        val = line[36:44]\n        print('{}-{}-{} {}, {}'.format(month, day, year, time, val), file=fh2)\n"], ["import pandas as pd, datetime\n\ndf = pd.read_csv('dq_barorun_20180715_calibtest.log',header=None,sep=' ')\ndf[0] = df.apply(lambda x: x[0][1:],axis=1)\ndf[1] = df.apply(lambda x: datetime.datetime.strptime(x[1], '%b').strftime('%m'), axis=1)\ndf[4] = df.apply(lambda x: x[4][:-1],axis=1)\ndf[5] = df.apply(lambda x: ' ' + x[5][5:],axis=1)\ndf['timestamp'] = df.apply(lambda x: x[1]+\"-\"+str(x[2])+\"-\"+x[4]+\" \"+x[3], axis = 1)\ndf.to_csv('output.txt',columns=['timestamp',5],header=False, index=False)\n"], ["nums = [1, 2, 3, 4, 5]\nfor img in img_dir:\n    for i in nums:\n        if str(i) in img:\n            img = img.replace('i', 'Concat')\n\n        \n"], ["    int[] dp;\n    boolean[] visited;\n    \n    int func(int pos, int N, int[] cost){\n        \n        if(pos == 0) return 0;\n        if(dp[pos] != -1) return dp[pos];\n        \n        visited[pos] = true;\n\n        int dist = Integer.MAX_VALUE;\n        if(pos-2 > -1 && !visited[pos-2]) dist = Math.min(dist, cost[pos-2] + func(pos-2,N,cost));\n        if(pos+1 < N && !visited[pos+1]) dist = Math.min(dist, cost[pos+1] + func(pos+1,N,cost));\n        \n        return dp[pos] = dist;\n    }\n    \n    int min_cost_to_reach_the_end(int[] cost){\n        \n        int N = cost.length;\n        this.dp = new int[N];\n        this.visited = new boolean[N];\n        Arrays.fill(dp,-1);\n        return func(N-1, N, cost);\n    }\n"], ["df1=pd.DataFrame({\"Col\":[1,2,3],\"Row\":[2,3,4],\"value\":[6,5,7],\"ree\":[0,0,0]})\ndf1\n\n\n  Col Row  value ree\n0   1   2   6   0\n1   2   3   5   0\n2   3   4   7   0\n\ndf1['Col']\n0    1\n1    2     # Series object\n2    3\nName: Col, dtype: int64\n\ndf1[['Col']]\n    Col\n0   1\n1   2      # DataFrame object\n2   3\n\ndf1[[\"Col\",\"Row\",\"value\"]]\n    Col Row value\n0   1   2   6\n1   2   3   5         # DataFrame object\n2   3   4   7\n"], [], [], [], ["df = pd.DataFrame([\n    {'a': 1, 'b': 2, 'c': 4},\n    {'a': 3, 'b': 4, 'c': 6},\n])\n\nprint(df['a'])\n# That is a Series\n0    1\n1    3\nName: a, dtype: int64\n# -------------------------------------------\nprint(df[['a']])\n# That is a DataFrame\n   a\n0  1\n1  3\n# -------------------------------------------\nprint(df[['a', 'c']])\n# That is a DataFrame\n   a  c\n0  1  4\n1  3  6\n"], [], ["logs = [\"0:start:0\", \"1:start:2\", \"1:end:5\", \"0:end:6\"]\nsplit_logs = (log.split(':') for log in logs)\nresult = [(int(a), b, int(c)) for a, b, c in split_logs]\n"], [], ["a = [\"0:start:0\",\"1:start:2\",\"1:end:5\",\"0:end:6\"]\nb = [[int(x[0]), x[1], int(x[2])] for x in (item.split(\":\") for item in a)]\nprint(b)\n", "[[0, 'start', 0], [1, 'start', 2], [1, 'end', 5], [0, 'end', 6]]\n"], [], ["[(int(i), j, int(k)) for i, j, k  in map(lambda x: x.split(':'), lst)]\n"], [], ["n = 1000  # Example number\nx = None\nwhile True:\n    try:\n        x = int(input(f\"X (1 to {n}) :\"))\n    except ValueError:\n        print(f\"{x} is not a number, please enter a number\")\n    else:\n        if 1 <= x <= n:  # Inclusive of 1 and n, edit the comparisons if needed\n            break\n        else:\n            print(f\"{x} is not within range, please enter a valid number\")\n"], [], ["from psycopg2 import sql\n\ncur.execute(\nsql.SQL(\"insert into {} values (%s, %s)\")\n    .format(sql.Identifier('my_table')),\n[10, 20])\n"], [], [" with open('test.txt') as file: \n        print(file.read().split())\n"], ["a = open('test.txt', 'r')\nb = a.readlines()\nc = [a for n in str(b).split('\\n') for a in n.split(' ') if a != '']\nprint(c)\n\n>>> ['5*0', '4', '3', '2', '5', '7', '7', '3', '6', '3', '2', '6', '8*2', '4', '5', '6', '7', '8', '7', '3', '7', '7', '3']\n\n"], ["a = open('test.txt', 'r')\nb = a.read()\nc = b.replace('\\n', ' ').strip().split(' ')\na.close()\nprint(c)\n", "with open('test.txt', 'r') as a:\n    b = a.read()\nc = b.replace('\\n', ' ').strip().split(' ')\nprint(c)\n"], ["c=['5*0 4 3 2 5 7 7 3 6 3 2 6 ', ' 8*2 4 5 6 7 8 7 3 7 7 3']\nc=[j for i in c for j in i.split()]\nprint(c)\n", "['5*0', '4', '3', '2', '5', '7', '7', '3', '6', '3', '2', '6', '8*2', '4', '5', '6', '7', '8', '7', '3', '7', '7', '3']\n"], ["a = open('test.txt', 'r')\nb = a.readlines()\n\nnew_list = []\nfor line in b:\n    for item in line.strip().split():\n        new_list.append(item)\nprint(new_list)\n"], ["import numpy as np\n\nmatrix = np.array([[0.25656927,0.31030828,0.23430803,0.25999823,0.20450112,0.19383106,\n  0.35779405, 0.36355627, 0.16837767, 0.1933686, 0.20630316, 0.17804974,\n  0.06902786, 0.26209944, 0.21310201, 0.12016498, 0.14213449, 0.16639964,\n  0.33461425, 0.15897344, 0.20293266, 0.14630634, 0.2509769,  0.17211646,\n  0.3922994,  0.14036047, 0.12571093, 0.25565785, 0.18216616, 0.0728473,\n  0.25328827, 0.1476636,  0.1873344,  0.12253726, 0.16082433, 0.20678088,\n  0.33296013, 0.03104548, 0.14949016, 0.05495472, 0.1494042,  0.32033417,\n  0.05361898, 0.14325878, 0.16196126, 0.15796155, 0.10990247, 0.14499696]])\n\nn = len(matrix[matrix > 0.18])\nprint(n)\n"], ["arr=np.array([0.25656927,0.31030828,0.23430803,0.25999823,0.20450112,0.19383106,\n  0.35779405, 0.36355627, 0.16837767, 0.1933686,  0.20630316, 0.17804974,\n  0.06902786, 0.26209944, 0.21310201, 0.12016498, 0.14213449, 0.16639964,\n  0.33461425, 0.15897344, 0.20293266, 0.14630634 ,0.2509769 , 0.17211646,\n  0.3922994 , 0.14036047, 0.12571093, 0.25565785, 0.18216616, 0.0728473,\n  0.25328827, 0.1476636 , 0.1873344 , 0.12253726, 0.16082433, 0.20678088,\n  0.33296013, 0.03104548, 0.14949016, 0.05495472, 0.1494042 , 0.32033417,\n  0.05361898, 0.14325878 ,0.16196126, 0.15796155, 0.10990247, 0.14499696])\n", "arr[np.where(arr>0.19214945092486838)].shape[0]\n    \n"], [], ["import numpy as np\narrayToCheck=np.array([0.25656927, 0.31030828, 0.23430803, 0.25999823, 0.20450112, 0.19383106,\n  0.35779405, 0.36355627, 0.16837767, 0.1933686,  0.20630316, 0.17804974,\n  0.06902786, 0.26209944, 0.21310201, 0.12016498, 0.14213449, 0.16639964,\n  0.33461425, 0.15897344, 0.20293266, 0.14630634, 0.2509769,  0.17211646,\n  0.3922994,  0.14036047, 0.12571093, 0.25565785, 0.18216616, 0.0728473,\n  0.25328827, 0.1476636,  0.1873344,  0.12253726, 0.16082433, 0.20678088,\n  0.33296013, 0.03104548, 0.14949016, 0.05495472, 0.1494042,  0.32033417,\n  0.05361898, 0.14325878, 0.16196126, 0.15796155, 0.10990247, 0.14499696])\nprint (\"The number of float numbers above your threshold is \" + str(np.sum(a>0.19214945092486838)))\n"], [">>> import numpy as np\n>>> data = np.arange(12)\n>>> data > 5\narray([False, False, False, False, False, False,  True,  True,  True,\n        True,  True,  True])\n", ">>> (data > 5).sum()\n6\n"], ["Myarray= [ [ your array]]\nValue_to_search=0.19214945092486838\n\nArray_greater_than=Myarray>Value_to_search\nNb_Val_greater_than=Array_greater_than.sum()\nprint(Nb_Val_greater_than)\n"], [">>> import numpy as np\n>>> ar = np.array([0.25656927,0.31030828,0.23430803,0.25999823,0.20450112,0.19383106,0.35779405,0.36355627,0.16837767,0.1933686,0.20630316,0.17804974    ,0.06902786,0.26209944,0.21310201,0.12016498,0.14213449,0.16639964,0.33461425,0.15897344,0.20293266,0.14630634,0.2509769,0.17211646    ,0.3922994,0.14036047,0.12571093,0.25565785,0.18216616,0.0728473,0.25328827,0.1476636,0.1873344,0.12253726,0.16082433,0.20678088    ,0.33296013,0.03104548,0.14949016,0.05495472,0.1494042,0.32033417,0.05361898,0.14325878,0.16196126,0.15796155,0.10990247,0.14499696])\n\n>>> print(len(ar[ar>0.19214945092486838]))\n>>> 21\n"], ["my_array = ... the target array ...\nresult = sum(0.19214945092486838 < x for x in my_array)\n"], ["import numpy\n\narr = numpy.asarray([0.25656927, 0.31030828, 0.23430803, 0.25999823, 0.20450112, 0.19383106, 0.35779405, 0.36355627, 0.16837767, 0.1933686,  0.20630316, 0.17804974, 0.06902786, 0.26209944, 0.21310201, 0.12016498, 0.14213449, 0.16639964, 0.33461425, 0.15897344, 0.20293266, 0.14630634, 0.2509769,  0.17211646, 0.3922994,  0.14036047, 0.12571093, 0.25565785, 0.18216616, 0.0728473, 0.25328827, 0.1476636,  0.1873344,  0.12253726, 0.16082433, 0.20678088, 0.33296013, 0.03104548, 0.14949016, 0.05495472, 0.1494042,  0.32033417, 0.05361898, 0.14325878, 0.16196126, 0.15796155, 0.10990247, 0.14499696])\n\nprint((arr > 0.19214945092486838).sum())\n"], ["my_str = \"subject \\n property \\n subject \\n property\"\nmy_str2 = re.sub('\\n\\s', '', my_str)\nmy_str3 = re.sub('property', 'property, ', my_str2)\nmy_str4 = re.sub('  subject', 'subject', my_str3)\nmy_str4.split(\",\")\n", "['subject property', 'subject property', ' ']\n"], ["import sys\nwith open(sys.argv[1]) as file:\n    lines = len(file.readlines())\nprint(f\"Lines: {lines}\\n\")\n"], ["import sys, os\n\ndef file_len(fname):\n    if os.stat(file_path).st_size == 0:\n        print('File is empty')\n        return 0\n    with open(fname) as f:\n        for i, l in enumerate(f):\n            pass\n    return i + 1\n\nprint(file_len(sys.argv[1]))\n"], ["import sys\nfile = sys.argv[1]\n\nwith open(file, \"r\") as f:\n    num_lines = len(f.readlines())\n"], ["import sys\nfile = open(sys.argv[1],\"r\")\nlines = file.readlines()\nfile.close()\nline_count = len(lines)\nprint(f\"There are {line_count} lines\")\n"], [], ["out = df.reindex(df.index.tolist()+[df.index.max()+1]*5)#reset_index(drop=True)\nOut[93]: \n   cow  shark  pudle\n0  2.0    2.0   10.0\n1  4.0    0.0    2.0\n2  8.0    0.0    1.0\n3  NaN    NaN    NaN\n3  NaN    NaN    NaN\n3  NaN    NaN    NaN\n3  NaN    NaN    NaN\n3  NaN    NaN    NaN\n"], ["import pandas as pd\n\ndf = pd.DataFrame({'cow': [2, 4, 8],\n                  'shark': [2, 0, 0],\n                  'pudle': [10, 2, 1]})\n\nn = 10\ndf = df.append([[] for _ in range(n)], ignore_index=True)\nprint(df)\n", "    cow  shark  pudle\n0   2.0    2.0   10.0\n1   4.0    0.0    2.0\n2   8.0    0.0    1.0\n3   NaN    NaN    NaN\n4   NaN    NaN    NaN\n5   NaN    NaN    NaN\n6   NaN    NaN    NaN\n7   NaN    NaN    NaN\n8   NaN    NaN    NaN\n9   NaN    NaN    NaN\n10  NaN    NaN    NaN\n11  NaN    NaN    NaN\n12  NaN    NaN    NaN\n"], ["df.reindex(list(range(0, 10))).reset_index(drop=True)\n\n   cow  shark  pudle\n0  2.0    2.0   10.0\n1  4.0    0.0    2.0\n2  8.0    0.0    1.0\n3  NaN    NaN    NaN\n4  NaN    NaN    NaN\n5  NaN    NaN    NaN\n6  NaN    NaN    NaN\n7  NaN    NaN    NaN\n8  NaN    NaN    NaN\n9  NaN    NaN    NaN\n"], ["import numpy as np\ndf = df.append(pd.DataFrame([[np.nan] * df.shape[1]] * n,columns=df.columns), \n               ignore_index = True)\n"], ["for i in range(x):\n    df = df.append(pd.Series(), ignore_index = True)\n"], [">>> text = \"subject1\\nproperty1\\nsubject2\\nproperty2\"\n>>> lines = text.splitlines() \n>>> pairs = zip(lines[0::2], lines[1::2])\n>>> list(pairs)\n[('subject1', 'property1'), ('subject2', 'property2')]\n>>> list(map(\"\\n\".join, pairs))\n['subject1\\nproperty1', 'subject2\\nproperty2']\n"], ["def grouper(iterable, n, fillvalue=None):\n    \"Collect data into fixed-length chunks or blocks\"\n    # grouper('ABCDEFG', 3, 'x') --> ABC DEF Gxx\"\n    args = [iter(iterable)] * n\n    return zip_longest(*args, fillvalue=fillvalue)\n", "   from itertools import zip_longest\n   s = [text.split('\\n')] * n # here n = 2\n   result = [ '\\n'.join(lines).strip() for (*lines,) in zip_longest(*s, fill_value='') ]\n", "s = text.split('\\n')\nres = [ '\\n'.join(s[i:i+2]) for i in range(0, len(s) // 2, 2) ]\n"], ["def your_function(string): #Takes the combined string as input\n    list1 = string.splitlines()\n    list_to_return = []\n    for x in list1:\n        if list1.index(x) % 2 == 0:\n            list_to_return.append(f'{x} \\n {list1[list1.index(x) + 1]}')\n    return list_to_return\n"], ["s = \"subject \\nproperty \\n subject \\nproperty \\n etc\"\nprint(s.split(\" \\n \"))\n#['subject \\nproperty', 'subject \\nproperty', 'etc']\n"], ["s = \"subject \\n property \\n subject \\n property \\n\"\ns = s.split()\nres = []\nfor idx in range(0, len(s), 2):\n    res.append(f'{s[idx]} \\n {s[idx+1]}')   # you will have to ensure the number of elements is even, or protect against an Indexerror\n    \nres\n", "['subject \\n property', 'subject \\n property']\n"], ["my_str = \"subject \\n property \\n subject \\n property \\n etc\"\nall_splits = my_str.split('\\n')\nret = []\nfor i in range(0,len(all_splits),2):\n    ret.append(all_splits[i])\n    try:ret[-1]+=\"\\n\"+all_splits[i+1]\n    except: pass\nprint(ret)\n", "['subject \\n property ', ' subject \\n property ', ' etc']\n"], ["from turtle import Turtle, Screen\nfrom random import randrange\n\ndef run(turtle):\n    turtle.forward(5)\n\n    if turtle.xcor() < half_width:\n        screen.ontimer(lambda: run(turtle), randrange(20, 150))\n\nscreen = Screen()\n\nhalf_width = screen.window_width() / 2\nlane_width = 20\n\nfor order, color in enumerate(['red', 'green', 'blue']):\n    turtle = Turtle('turtle')\n    turtle.speed('fastest')\n    turtle.color(color)\n    turtle.penup()\n\n    turtle.goto(-half_width, (order | 1) * lane_width)\n    lane_width *= -1\n    run(turtle)\n\nscreen.exitonclick()\n"], ["{\"list_0\": [], \"list_1\": [], \"list_2\": [], \"list_3\":[], \"list_4\":[]}\n"], ["dic={}\nfor i in range(5):\n    dic[f\"list{i}\"]= []\n\nprint(dic)\n"], ["list_of_lists = []\nfor i in range(5)\n    list_of_lists.append([])\n", "list_of_lists[3]\n-> []\n", "dict_of_lists = {}\nfor i in range(5):\n    dict_of_lists[f'list_{i}'] = []\n", "dict_of_lists['list_1']\n-> []\n"], ["for x in range(5):\n    x += 1\n    list_name = \"list_\" + str(x)\n    list_item = []\n    print(\"Printing {0} = \".format(list_name), list_item)\n\n\n", "Printing list_1 =  []\nPrinting list_2 =  []\nPrinting list_3 =  []\nPrinting list_4 =  []\nPrinting list_5 =  []\n"], ["     for i in range(5):\n         exec(\"list_%d = []\" % (i+1))\n"], ["lists = {}\nlists[\"list_\" + str(i)] = []\nlists[\"list_\" + str(i)].append(somevalue)\n"], [], ["main_list = []\nfor i in range(5):\n    sub_list= []\n    main_list.append(sub_list)\nprint(main_list)\nprint(main_list[0])\n"], ["for i in range(5):\n  i += 1\n  globals()['list_'+str(i)] = []\n", "list_dicts = {}\nfor i in range(5):\n  i += 1\n  list_dicts['list_'+str(i)] = []\n", "list_dicts['list_2']\n", "list_dicts = {'list_'+str(i): [] for i in range(5)}\n"], ["--import [MODULE]\n++from [MODULE_NAME] import [MODULE]\n"], ["In [24]: from operator import itemgetter\n\nIn [25]: def remove_col(arr, ith):\n    ...:     itg = itemgetter(*filter((ith).__ne__, range(len(arr[0]))))\n    ...:     return list(map(list, map(itg, arr)))\n    ...: \n", "In [26]: remove_col(A, 1)\nOut[26]: [[1, 3, 4], ['a', 'c', 'd'], [12, 14, 15]]\n\nIn [27]: remove_col(A, 3)\nOut[27]: [[1, 2, 3], ['a', 'b', 'c'], [12, 13, 14]]\n", "In [31]: def remove_col(arr, ith):\n    ...:     return [[j for i,j in enumerate(sub) if i != ith] for sub in arr]\n"], ["import random\n\ntwerbles = list(zip(range(10), [0]*10)) #list of turtles all starting at position 0 (numbered 0-10)\nfinishline = 10 #the threshold they must pass\n\nwhile True:\n    twerbles = [(twerble, position+random.randint(1,2)) for twerble, position in twerbles] #move each turtle up a random amount.\n\n    print(twerbles) #this can be removed if you dont want to see their positions as they go\n\n    winners = [twerble for twerble, position in twerbles if position >= finishline] #list of turtles that passed the threshold (if any)\n    if winners: print(winners); break #if there are winners print them and stop looping\n", "[(0, 1), (1, 2), (2, 1), (3, 2), (4, 1), (5, 2), (6, 1), (7, 1), (8, 1), (9, 2)]\n[(0, 2), (1, 3), (2, 2), (3, 3), (4, 2), (5, 4), (6, 3), (7, 3), (8, 3), (9, 3)]\n[(0, 4), (1, 5), (2, 4), (3, 4), (4, 4), (5, 6), (6, 5), (7, 5), (8, 4), (9, 5)]\n[(0, 5), (1, 7), (2, 6), (3, 5), (4, 6), (5, 8), (6, 6), (7, 7), (8, 5), (9, 6)]\n[(0, 6), (1, 8), (2, 8), (3, 6), (4, 7), (5, 9), (6, 7), (7, 9), (8, 7), (9, 7)]\n[(0, 8), (1, 9), (2, 10), (3, 7), (4, 9), (5, 11), (6, 8), (7, 11), (8, 8), (9, 9)]\n\n[2, 5, 7] #winning turtles\n", "import turtle as trtl\nimport random\n\nfinishline = 30\n\ntwerbles = [(trtl.Turtle(\"turtle\"), 0) for i in range(10)]\n\nfor i,(twerble,position) in enumerate(twerbles):\n  twerble.penup()\n  twerble.goto(-150,150 - i*25)\n\nwhile True:\n    twerbles = [(twerble, position+random.randint(1,2)) for twerble, position in twerbles]\n\n    for twerble, position in twerbles:\n        twerble.forward(position)\n\n    winners = [twerble for twerble, position in twerbles if position >= finishline]\n    if winners:\n        break\n"], ["import turtle as trtl\nimport random as rand\n\nzoom1 = trtl.Turtle()\nzoom2 = trtl.Turtle()\nzoom3 = trtl.Turtle()\n\nzoomers = [zoom1, zoom2, zoom3]\n\nfor zoom in zoomers:\n  zoom.penup()\n\nzoom1.goto(-150, 150)\nzoom2.goto(-120, 150)\nzoom3.goto(-90, 150)\n\nfor zoom in zoomers:\n  zoom.pendown()\n  zoom.right(90)\n\nfor zoom in zoomers:\n  robux = rand.randrange(10,50)\n  zoom.forward(robux)\n\n"], ["import turtle as trtl\nimport random as rand\nzoomers = []\nzom = [0,1,2,3,4,5,6,7,8,9]\ntloc = -130\ntrtl.penup()\ntrtl.goto(-150, 150)\ntrtl.pendown()\ntrtl.goto(-150,-140)\ntrtl.penup()\ntrtl.goto(180,150)\ntrtl.pendown()\ntrtl.goto(180,-140)\ntrtl.hideturtle()\n\nzoomers = [trtl.Turtle(\"turtle\") for z in zom]\n\nfor i,t in enumerate(zoomers):\n  t.penup()\n  t.goto(-150,150 - i*25)\n\n\nfor i,z in enumerate(zom):\n  zoom = zoomers[i]   #trtl.Turtle(\"turtle\")\n  tloc += 25\n#  zoomers.append(zoom)\n\nrunning = True\nwhile running:\n    for zoom in zoomers:\n      robux = rand.randrange(0,20)\n      zoom.forward(robux)\n      if zoom.xcor() >= 180:\n        print(\"We have a winner!\")\n        running = False\n        break\n\ninput('Press enter to exit...')\n"], ["from turtle import Turtle, Screen\nfrom random import randrange\nfrom time import sleep\n\nwn = Screen()\nwn.tracer(0)\n\nt1 = Turtle('turtle')\nt2 = Turtle('turtle')\n\nt1.penup()\nt2.penup()\n\nt1.goto(-100, 50)\nt2.goto(-100, -50)\n\nwhile True:\n    sleep(0.1)\n    t1.forward(randrange(0, 20))\n    t2.forward(randrange(0, 20))\n    wn.update()\n"], [], [], [], ["number = monthdays[months[month]]\n"], [], [], ["{'https': '183.89.96.57:8080'}\n", "{'https': 'https://183.89.96.57:8080'}\n", "return {'https':              choice(...)}\n", "return {'https': 'https://' + choice(...)}\n", "def proxy_request(request_type, url, **kwargs):\n    proxy = get_proxy()\n    req = requests.request(request_type, url, proxies=proxy, timeout=5, **kwargs)\n    return req\n", "r = proxy_request('get', \"https://youtube.com\")\nprint(r)\n", "for __ in range(10):\n    try:\n        r = proxy_request('get', \"https://youtube.com\")\n    except (TimeoutError, OSError) as e:\n        print(\"Exception:\", e)\n        continue\n\n    print(r.status_code)\n    print(r.content)\n    break\n"], [], ["r = ProxyRequests('https://api.ipify.org')\nr.get()\n"], [], ["def proxy_request(request_type, url, **kwargs):\n    req = None  # <------------------------------- Here\n    while 1:\n        try:\n            proxy = get_proxy()\n            req = requests.request(request_type, url, proxies=proxy, timeout=5, **kwargs)\n            break\n        except:\n            pass\n            return req\n"], [], [], [], ["export PATH=\"/usr/local/opt/python@3.8/bin:$PATH\"\nalias python=/usr/local/opt/python@3.8/bin/python3\n"], ["def _win_os_check():\n    \"\"\"\n    Quick Sanity check for Windows OS: look for fmod bug issue 16744.\n    \"\"\"\n    try:\n        a = arange(13 * 13, dtype= float64).reshape(13, 13)\n        a = a % 17  # calls fmod\n        linalg.eig(a)\n    except Exception:\n        msg = (\"The current Numpy installation ({!r}) fails to \"\n                \"pass a sanity check due to a bug in the windows runtime. \"\n                \"See this issue for more information: \"\n                \"https://developercommunity.visualstudio.com/content/problem/1207405/fmod-after-an-update-to-windows-2004-is-causing-a.html\")\n        raise RuntimeError(msg.format(__file__)) from None\n\nif sys.platform == \"win32\" and sys.maxsize > 2**32:\n    _win_os_check()\n\ndel _win_os_check\n"], [], ["python -m pip install docutils pygments pypiwin32 kivy.deps.sdl2 kivy.deps.glew --extra-index-url` https://kivy.org/downloads/packages/simple\n\npip install kivy[base] kivy_examples --pre --extra-index-url` https://kivy.org/downloads/simple/\n"], ["pip install numpy==1.19.3\n"], ["pip install numpy==1.19.3\n"], [], [], ["import os, re\nimport youtube_dl\nfrom pytube import Playlist\n\nYOUTUBE_STREAM_AUDIO = '140'\nif os.name == 'posix':\n    targetAudioDir = '/storage/emulated/0/Download/Audiobooks/test_youtube_dl'\n    ydl_opts = {\n    'outtmpl': targetAudioDir + '/%(title)s.mp3',\n    'format': 'bestaudio/best',\n    'quiet': False\n    }\nelse:\n    targetAudioDir = 'D:\\\\Users\\\\Jean-Pierre\\\\Downloads\\\\Audiobooks\\\\test_youtube_dl'\n    ydl_opts = {\n    'outtmpl': targetAudioDir + '\\\\%(title)s.%(ext)s',\n    'format': 'bestaudio/best',\n    'postprocessors': [{\n                        'key': 'FFmpegExtractAudio',\n                        'preferredcodec': 'mp3',\n                        'preferredquality': '128',\n                    }],\n    'quiet': False\n    }\n\nplaylistUrl = 'https://www.youtube.com/playlist?list=PLzwWSJNcZTMSFWGrRGKOypqN29MlyuQvn'\nplaylistObject = Playlist(playlistUrl)\nplaylistObject._video_regex = re.compile(r\"\\\"url\\\":\\\"(/watch\\?v=[\\w-]*)\")\n    \nwith youtube_dl.YoutubeDL(ydl_opts) as ydl:\n    for videoUrl in playlistObject.video_urls:\n        meta = ydl.extract_info(videoUrl, download=False)\n        videoTitle = meta['title']\n        print('Video title: ' + videoTitle)\n        ydl.download([videoUrl])\n"], ["def get_ytplayer_js(html: str) -> Any:\n    \"\"\"Get the YouTube player base JavaScript path.\n\n    :param str html\n    The html contents of the watch page.\n    :rtype: str\n    :returns:\n    Path to YouTube's base.js file.\n    \"\"\"\n    js_url_patterns = [\n        r\"\\\"jsUrl\\\":\\\"([^\\\"]*)\\\"\",\n    ]\n    for pattern in js_url_patterns:\n        regex = re.compile(pattern)\n        function_match = regex.search(html)\n        if function_match:\n            logger.debug(\"finished regex search, matched: %s\", pattern)\n            yt_player_js = function_match.group(1)\n            return yt_player_js\n\n    raise RegexMatchError(\n       caller=\"get_ytplayer_js\", pattern=\"js_url_patterns\"\n    )\n", "def js_url(html: str) -> str:\n    \"\"\"Get the base JavaScript url.\n\n    Construct the base JavaScript url, which contains the decipher\n    \"transforms\".\n\n    :param str html:\n        The html contents of the watch page.\n    \"\"\"\n    base_js = get_ytplayer_config(html)[\"assets\"][\"js\"]\n    return \"https://youtube.com\" + base_js\n", "def js_url(html: str) -> str:\n    \"\"\"Get the base JavaScript url.\n\n    Construct the base JavaScript url, which contains the decipher\n    \"transforms\".\n\n    :param str html:\n        The html contents of the watch page.\n    \"\"\"\n    base_js = get_ytplayer_js(html)\n    return \"https://youtube.com\" + base_js\n"], [], [], [], ["sudo dnf install python3.8\n", "python3.8 --version\n", "export CLOUDSDK_PYTHON=python3.8\n"], ["#Example ---------------\nVars = {\n    'name':'luis'\n    'age':'27'\n}\nprint(Vars['name'])\n\nresult: 'luis'\n\n#Extract.py Code -------\n\ndef js_url(html: str) -> str:\n\"\"\"Get the base JavaScript url.\n\nConstruct the base JavaScript url, which contains \nthe decipher\n\"transforms\".\n\n:param str html:\n    The html contents of the watch page.\n\"\"\"\nbase_js = get_ytplayer_config(html)[\"assets\"][\"js\"]\nreturn \"https://youtube.com\" + base_js\n", "base_js = get_ytplayer_config(html)[\"assets\"][\"js\"]\nKeyError: 'assets'\n", "def js_url(html: str) -> str:\n\"\"\"Get the base JavaScript url.\n\nConstruct the base JavaScript url, which contains \nthe decipher\n\"transforms\".\n\n:param str html:\n    The html contents of the watch page.\n\"\"\"\nbase_js = html[html.find('js') + 4:html.find('.js') \n+ 4]\nreturn \"https://youtube.com\" + base_js\n"], ["    base_js = get_ytplayer_config(html)[\"assets\"][\"js\"]\n", "    try:\n        base_js = get_ytplayer_config(html)[\"assets\"][\"js\"]\n    except Exception:\n        pass\n"], ["    # Python3 snippet  \n    # Inputs: startIndex, array A of non negative integers\n    # Below snippet assumes A has min length 3 beginning from the startIndex. We can handle smaller arrays with base cases - thus, not listing them out explicitly\n\n    import math\n\n    costs = [math.inf] * len(A)\n    costs[startIndex] = A[startIndex]   \n    costs[startIndex+1] = A[startIndex] + A[startIndex+1] + min(A[startIndex+1], A[startIndex-1] if startIndex >=0 else A[startIndex+1])\n\n    N = len(A)\n    for i in range(startIndex, N):\n        if i+1 < N:\n            costs[i] = min(costs[i], costs[i+1] + A[i])\n        if i + 2 < N:                 \n            costs[i+2] = costs[i] + A[i+2]\n\n    print(min(costs[-1], costs[-2]))\n"], [], ["conda install -y tensorboard\n"], ["data =  [[0, 1], [2, 3], [4, 5]]\n\ndata_by_first_value = {lst[0]: lst for lst in data}\n", "print(data_by_first_value)\n# {0: [0, 1], 2: [2, 3], 4: [4, 5]}\n", "print(data_by_first_value[2])\n# [2, 3]\n"], ["array  = [[0, 1],[2, 3],[4, 5]] \n\ndef get_index(array):\n  i = 0\n\n  for element in array:\n    if(element[0]==2):\n      break\n    i+=1\n\n  return i \n\nprint(str(get_index(array)))\n"], [], ["for i in list:\n    if i[0]==2:\n        print(list.index(i))\n"], [], [], ["#!/bin/sh\npython3 -m venv venv\n. venv/bin/activate\npip install PySide2\npip install py2app\npython setup.py py2app      \ncp ./venv/lib/python3.8/site-packages/shiboken2/libshiboken2.abi3.5.15.dylib ./dist/app.app/Contents/Resources/lib/python3.8/lib-dynload/shiboken2\n"], [], ["mkvirtualenv --python=\"PATH/TO/PYTHON3.6.5/python.exe\" venv\n", "# Install qt via homebrew\nbrew install qt\n# Switch to version 5.11.1\nbrew switch qt 5.11.1\n# Do this to link qmake with qt\nbrew link qt5 --force\n", "git clone --recursive https://code.qt.io/pyside/pyside-setup\n", " cd pyside-setup && git checkout 5.11\n", "#To get the path\n which qmake\n# Make sure that your virtual environment is activated\n# Build PySide2 from source\npython setup.py install --qmake=<PATH/TO/QMAKE> --build-tests --ignore-git --jobs=8\n# Install PySide2\npython setup.py build --qmake=/path/to/qmake --build-tests --ignore-git --jobs=8\n", "sudo easy_install py2app\n#or\npip install -U git+https://github.com/metachris/py2app.git@master\n", "py2applet --make-setup app.py\nWrote setup.py\n", "from setuptools import setup\n\nAPP = ['app.py']\nDATA_FILES = []\nOPTIONS = {\n    'argv_emulation': True,\n    'iconfile': 'app.icns'\n}\n\nsetup(\n    app=APP,\n    data_files=DATA_FILES,\n    options={'py2app': OPTIONS},\n    setup_requires=['py2app'],\n)\n", "python setup.py py2app -A\n", "./dist/app.app/Contents/MacOS/app\n", "rm -rf build dist\npython setup.py py2app\n"], [], [], ["import sys\ninfi = sys.maxsize\n\n\ndef optimum_jump_recurse(arr, curr_pos, cost, path, res):\n    if curr_pos in path or cost > res or curr_pos < 0:\n        return infi\n    elif curr_pos > len(arr) - 1:\n        if cost < res:\n            res = cost\n        return cost\n\n    res = optimum_jump_recurse(arr, curr_pos + 2, cost + arr[curr_pos],\n                               path | {curr_pos}, res)\n    backward_cost = optimum_jump_recurse(arr, curr_pos - 1,\n                                         cost + arr[curr_pos],\n                                        path | {curr_pos}, res)\n    if res == backward_cost == infi:\n        return res\n    res = min(res, backward_cost)\n    actual_cost = res - cost\n    return res\n\n\nnums = [1, 2, 3, 4, 100]\n# nums = [1, 2, 3]\n# nums = [1]\n# nums = [1, 2]\n# nums = [1, 2, 3, 100, 200]\n# nums = [1, 1000, 3, 100, 200]\n# nums = [1, 1, 3, 100, 200]\n# nums = [1, 1, 3, 5, 100, 200]\n# nums = [1, 2, 3, 100, 4]\n\n\ndef optimum_jump(nums):\n    return optimum_jump_recurse(nums, 0, 0, set(), infi)\n\n\nprint(optimum_jump(nums))\n"], ["from functools import reduce # for python 3\n\nl = df.Genre.dropna().tolist()\nsets = [ set(i) for i in l ]\nfinal_set = reduce(lambda x, y: x.union(y), sets)\n"], [" unsupported frontend protocol 255.255: server supports 2.0\n unsupported frontend protocol 0.0: server supports 2.0 to\n", "  psql -h localhost -U postgres -d \"dbname=belez gssencmode=disable\";\n"], ["class UserSchema(ma.ModelSchema):\nclass Meta:\n    model = User \n", "class UserSchema(ma.SQLAlchemyAutoSchema):\nclass Meta:\n    model=User\n    load_instance=True\n"], [], ["n = 10\nx = n + 1 \n\nwhile x not in range(1, n + 1): # The loop keeps going until x is in range.\n    x = input('Please enter a valid input in the range of (1, '+ str(n) +'): ')\n    try:\n        x = int(float(x)) # e.g 5.0 string literal gets converted to 5.\n    except ValueError:\n        x = n + 1 # Re-initialize x to keep iterating, until we get a valid input.\n    if x in range(1, n + 1):\n        print('Number in range ->', x)\n", "Please enter a valid input in the range of (1, 10): 11.0\nPlease enter a valid input in the range of (1, 10): 0.0\nPlease enter a valid input in the range of (1, 10): 5.0\nNumber in range -> 5\n"], ["x = ''\nn = 10\n\nwhile not (x.isdigit() and int(x) in range(1, n + 1)):\n    x = input(f'X (1 to {n}): ')\n", "n = 10\nx = None\n\nwhile True:\n    try:\n        x = int(input(f\"X (1 to {n}): \"))\n\n        if x not in range(n + 1):\n            raise Exception(\"ERROR: Not in range\")\n\n        break  # If no errors are thrown, break from the loop\n\n    except:\n        print('Please enter a valid number')\n\n...\n"], [], ["x = 1\nn = 3\nwhile x in range(n+1):\n    x = int(input(\"X (1 to \"+ str(n)+ \") :\"))\n    if x not in range(n+1):\n        print(\"please enter a valid input\")\n        x = 1\n", "X (1 to 3) :3\nX (1 to 3) :4\nplease enter a valid input\nX (1 to 3) :3\nX (1 to 3) :2\nX (1 to 3) :1\nX (1 to 3) :6\nplease enter a valid input\nX (1 to 3) :\n"], ["x = 0\nwhile True:\n    try:\n        x = int(input(\"Enter a number\"))\n    except:\n        print(\"Please enter a valid input\")\n\n    if x not in range(n+1):\n        print(\"Please enter a valid input\")\n    else:\n        break\n"], [], ["python text_detection.py --image images/car_wash.png --east frozen_east_text_detection.pb\n"], ["pip install --upgrade pip setuptools wheel\n\npip install https://github.com/kivy/kivy/archive/master.zip\n\npip install kivy.deps.glew\n\npip install docutils pygments pypiwin32 kivy.deps.sdl2\n\n"], ["int minDist(vector<bool> &visited, vector<int> &dist, int n){\n    int m = INT_MAX, res = 0;\n\n    for(int i = 0; i < n; i++)\n        if(!visited[i] && m > dist[i])\n            m = dist[i], res = i;\n    return res;\n}\n\nint minJump(int *arr, int n){\n    vector<bool> visited(n, false);\n    vector<int> dist(n, INT_MAX);\n\n    dist[0] = 0;\n    for(int c = 0; c < n - 1; c++){\n        int u = minDist(visited, dist, n);\n        visited[u] = true;\n\n        if(u + 2 < n && !visited[u + 2] && dist[u] + arr[u + 2] < dist[u + 2])\n            dist[u + 2] = dist[u] + arr[u + 2];\n        if(u - 1 >= 0 && !visited[u - 1] && dist[u] + arr[u - 1] < dist[u - 1])\n            dist[u - 1] = dist[u] + arr[u - 1];\n    }\n    return dist[n - 1];\n}\n"], ["import cv2\nimport numpy as np\n\n# read image\nimg = cv2.imread(\"cartoon_hidden_marks.png\")\n\n# separate channels\nb,g,r = cv2.split(img)\n\n# combine replacing b with g\nimg_new = cv2.merge([g,g,r])\n\n# write results to disk\ncv2.imwrite(\"cartoon_hidden_marks_result2.png\", img_new)\n\n# display it\ncv2.imshow(\"result\", img_new)\ncv2.waitKey(0)\n"], ["import cv2\nimport numpy as np\n\n# read image\nimg = cv2.imread(\"cartoon_hidden_marks.png\")\n\n# separate channels\nb,g,r = cv2.split(img)\n\n# median filter blue\nmedian = cv2.medianBlur(b, 21)\n\n# threshold blue image to extract black lines\nthresh = cv2.threshold(b, 20, 255, cv2.THRESH_BINARY)[1]\n\n# apply thresh to median\nb_new = cv2.bitwise_and(median, thresh)\n\n# combine b_new, g, b\nimg_new = cv2.merge([b_new,g,r])\n\n# write results to disk\ncv2.imwrite(\"cartoon_hidden_marks_median.jpg\", median)\ncv2.imwrite(\"cartoon_hidden_marks_thresh.jpg\", thresh)\ncv2.imwrite(\"cartoon_hidden_marks_new_blue.jpg\", b_new)\ncv2.imwrite(\"cartoon_hidden_marks_result.png\", img_new)\n\n# display it\ncv2.imshow(\"median\", median)\ncv2.imshow(\"thresh\", thresh)\ncv2.imshow(\"b_new\", b_new)\ncv2.imshow(\"img_new\", img_new)\ncv2.waitKey(0)\n"], [], ["table = \"led_status\"\nfield = \"test_led\"\nvalue = False\n\ncursor.execute(\"UPDATE `%s` SET `%s` = %s\", (table, field, value))\n"], ["python manage.py runserver --nothreading --noreload\n"], [], ["# Detect edges visible in original image and auto-level\nconvert watermarked.png -colorspace gray -auto-level -canny 0x1+1%+3% -auto-level  RGB-edges.png\n", "# Find visible edges in H, S and V colourspace, generate mean across all three and auto-level\nconvert watermarked.png -colorspace hsv -separate -canny 0x1+1%+3% -evaluate-sequence mean -auto-level HSV-edges.png\n", "# Find changemask between the two sets of edges\nconvert RGB-edges.png HSV-edges.png -compose changemask -composite result.png\n"], ["    clean_image = cv2.inpaint(marked_image, mask_of_marks, 3, cv2.INPAINT_TELEA)\n"], ["pip install -U --ignore-installed wrapt\npip install tensorflow\n"], ["//cur will the final destination that is last element at first execution\n//N is no of elements\nint Dp[N]={0};\nDp[0]=element[0]; //initial condition\nleast_path(cur,*elements,N)\n{\n   if(cur>N-1 || cur<0)\n     return INT_MAX;\n  if(Dp[cur])\n   return Dp[cur];\n  int temp1=least_path(cur-2,*elements,N)+element[cur];\n  int temp2=least_path(cur+1,*elements,N)+element[cur];\n  Dp[cur]=min(temp1,temp2);\n  return Dp[cur];\n}\n"], [], [], ["class MyList:\n    def __init__(self,list):\n        self.list=list\n\n    def __getitem__(self, index):\n        return self.list[index]\n    \n    def __setitem__(self, index, value):\n        self.list[index] = value\n"], ["class MyList:\n    def __init__(self,list):\n        self.list=list\n\n    def __setitem__(self, i, elem):\n        self.list[i] = elem\n"], [], [], [], ["pip install <file.whl>\n"], ["import logging as log\nimport google.cloud.logging as logging\n\ndef doSomething(param):\n    logging_client = logging.Client()\n    logging_client.setup_logging()\nlog.info(f\"Some log here: {param}\") \n"], ["if __name__ == '__main__':\napp.run(debug=False,threaded=False)\n"], [], ["export JAVA_HOME=$(/usr/libexec/java_home -v 1.8)\n"], [], [], [], [], ["pip insatll bottle\n", "from bottle import route, run, template\n\n@route('/hello')\ndef index():\n    return \"Hello World\"\n\nrun(host='localhost', port=8080)\n"], ["global graph\ngraph = tf.compat.v1.get_default_graph()\n"], ["   from sqlalchemy import create_engine\n\n   db_user = 'user'\n   db_pwd = 'secret'\n   db_host = 'hostname'\n   db_port = '5432'\n   db_name = 'test'\n\n   cnn = f'postgresql://{db_user}:{db_pwd}@{db_host}:{db_port}/{db_name}'\n   ssl_args = {\n       'gssencmode': 'disable',\n       'sslmode': 'verify-ca',\n       'sslrootcert': 'server-ca.pem',\n       'sslcert': 'client-cert.pem',\n       'sslkey': 'client-key.pem',\n   }\n   \n   engine = create_engine(cnn, connect_args=ssl_args)\n", "   df.to_sql('my_table', con=engine)\n"], ["sudo apt-get update\nsudo apt-get install qt5-default\nsudo apt-get install sip-dev\n\ncd /usr/src\nsudo wget https://www.riverbankcomputing.com/static/Downloads/sip/4.19.23/sip-4.19.23.tar.gz\nsudo tar xzf sip-4.19.23.tar.gz\ncd sip-4.19.23\nsudo python3 configure.py --sip-module PyQt5.sip\nsudo make\nsudo make install\n\ncd /usr/src\nsudo wget https://www.riverbankcomputing.com/static/Downloads/PyQt5/5.13.2/PyQt5-5.13.2.tar.gz\nsudo tar xzf PyQt5-5.13.2.tar.gz\ncd PyQt5-5.13.2\nsudo python3  configure.py\nsudo make\nsudo make install\n"], ["app = Flask(__name__)\nfrom . import views  # isort:skip\n"], ["import findspark\nimport os\nspark_location='/opt/spark-2.4.3/' # Set your own\njava8_location= '/usr/lib/jvm/java-8-openjdk-amd64' # Set your own\nos.environ['JAVA_HOME'] = java8_location\nfindspark.init(spark_home=spark_location) \n"], [], [], ["!pip install --upgrade protobuf\n"], ["Click==7.0\nFlask==1.1.1\nFlask-Cors==3.0.8\nFlask-Login==0.5.0\nflask-marshmallow==0.9.0\nFlask-SQLAlchemy==2.4.1\nFlask-WTF==0.14.3\nitsdangerous==1.1.0\nJinja2==2.11.1\nMarkupSafe==1.1.1\nmarshmallow==2.20.5\nmarshmallow-sqlalchemy==0.18.0\nsix==1.14.0\nSQLAlchemy==1.3.13\nWerkzeug==1.0.0\nWTForms==2.2.1\n"], [], [], ["import pandas as pd\nimport os\n\ncurrentPath = os.path.dirname(__file__)\n\n# Load the CSV data into DataFrames\nsuper_bowls = pd.read_csv(currentPath + '/datasets/super_bowls.csv')\n", "'/Users/ivanparra/AprendizajePython/Jupyter'\n"], ["\"cwd\": \"${fileDirname}\"\n"], [], ["import pandas as pd\nimport os\n\n__location__ = os.path.realpath(os.path.join(os.getcwd(), os.path.dirname(__file__)))\n\nsuper_bowls = pd.read_csv(__location__ + '/datasets/super_bowls.csv')\n"], ["super_bowls = pd.read_csv( os.getcwd() + '/datasets/super_bowls.csv')\n"], ["pip install --upgrade pip\nconda update --all\npip install tensorflow\n\n"], [], [], ["$ conda install -c conda-forge tensorboard\n", "$ conda install -c conda-forge protobuf\n"], [], ["pip install wrapt --upgrade --ignore-installed\npip install tensorflow-gpu\n"], [], [], ["python3 -m pip install pattern\n", "from pattern.en import conjugate\npast_tense = []\n\nfor word in words:\n    past_tense.append(conjugate(word, tense='past'))\n"], ["words = [\"adopt\", \"bake\", \"beam\", \"confide\", \"grill\", \"plant\", \"time\", \"wave\", \"wish\"]\npast_tense = []\n\nfor word in words:\n# changed i to word, to reflect what the variable will actually contain.\n    if word.endswith('e'):\n    # endswith is a nice string method that makes the code very readable.\n        past_tense.append(word + 'd')\n    else:\n        past_tense.append(word + 'ed')\n", ">>> print(past_tense)\n['adopted', 'baked', 'beamed', 'confided', 'grilled', 'planted', 'timed', 'waved', 'wished']\n"], ["past_tense = [word + (\"d\" if word.endswith(\"e\") else \"ed\")\n              for word in words]\nprint(past_tense)\n", "['adopted', 'baked', 'beamed', 'confided', 'grilled', 'planted', 'timed', 'waved', 'wished']\n", "for word in words:\n    if word.endswith(\"e\"):\n        past_tense.append(word + \"d\")\n    else:\n        past_tense.append(word + \"ed\")\n", "for word in words:\n    suffix = \"d\" if word.endswith(\"e\") else \"ed\"\n    past_tense.append(word + suffix)\n"], ["for word in words:    \n    if word[-1] == 'e':\n        past_tense.append(word + 'd')\n    else:\n        past_tense.append(word + 'ed')\n", "past_tense = [word + ('d' if word[-1]=='e' else 'ed') for word in words]\n"], ["words = [\"adopt\", \"bake\", \"beam\", \"confide\", \"grill\", \"plant\", \"time\", \"wave\", \"wish\"]\npast_tense = []\n\nfor word in words:    \n    if word[-1] == 'e':\n        past_tense.append(word + 'd')\n    else:\n        past_tense.append(word + 'ed')\n\nprint(past_tense)\n# ['adopted', 'baked', 'beamed', 'confided', 'grilled', 'planted', 'timed', 'waved', 'wished']\n", "past_tense = [word + 'd' if word[-1] == 'e' else word + 'ed' for word in words]\n\nprint(past_tense)\n# ['adopted', 'baked', 'beamed', 'confided', 'grilled', 'planted', 'timed', 'waved', 'wished']\n"], ["for i in words: \n", "words = [\"adopt\", \"bake\", \"beam\", \"confide\", \"grill\", \"plant\", \"time\", \"wave\", \"wish\"]\npast_tense = []\n\nfor index,word in enumerate(words):    \n    if word[-1] == 'e':\n        past_tense.append(words[index] + 'd')\n    else:\n        past_tense.append(words[index] + 'ed')\n"], [], ["from flask_sqlalchemy import SQLAlchemy\nfrom flask_marshmallow import Marshmallow\n\ndb = SQLAlchemy(app)\nma = Marshmallow(app) \n", "class UserSchema(ma.ModelSchema):\n      class Meta:\n            model = User\n", "from conf import ma\nclass UserSchema(ma.SQLAlchemyAutoSchema):\n      class Meta:\n            model = User\n            load_instance = True\n", "from marshmallow_sqlalchemy import ModelSchema\nclass UserSchema(ModelSchema):\n      class Meta:\n            model = User\n            sql_session = db.session\n"], ["!pip install -U protobuf==3.11.3\n"], [], ["from flask_marshmallow import Marshmallow\nfrom .models import Author\n\nma = Marshmallow()\n\nclass AuthorSchema(ma.SQLAlchemySchema):\n    class Meta:\n        model = Author\n\n    id = ma.auto_field()\n    name = ma.auto_field()\n    books = ma.auto_field()\n"], ["pip uninstall marshmallow-sqlalchemy\npip install marshmallow-sqlalchemy==0.22.3\n"], ["class ImageFolder(Dataset):\n    def __init__(self, root, transform=None):\n        #Call make_dataset to collect files. \n        self.samples = make_dataset(opt.dataroot)\n        self.imgs = self.samples\n        self.transformA = transformA\n\n        ...\n", "def make_dataset(dir):\n    import os\n    images = []\n    d = os.path.expanduser(dir)\n\n    if not os.path.exists(dir):\n        print('path does not exist')\n\n    for root, _, fnames in sorted(os.walk(d)):\n        for fname in sorted(fnames):\n            path = os.path.join(root, fname)\n            images.append(path)\n    return images    \n"], ["if name == 'main':\n    app.run(threaded=False)\n"], ["from keras.models import Sequential\n\nfrom keras.layers import Dense, Dropout, LSTM\n", "from tensorflow.keras.models import Sequential\nfrom tensorflow.keras.layers import Dense, Dropout, LSTM\n"], ["conda update --all\npip install tensorflow\n"], [], ["import pyodbc\nfrom sqlalchemy import create_engine\n\nengine = create_engine(f'postgresql://{user}:{password}@localhost:5432/database_name?gssencmode=disable')\n"], ["params = urllib.parse.quote_plus(\"DRIVER={SQL Server};SERVER=servername;DATABASE=database;UID=user;PWD=pass\")\nengine = sqlalchemy.create_engine(\"mssql+pyodbc:///?odbc_connect=%s\" % params)\nengine.connect()\nquery = query\ndf = pd.read_sql_query(query, connection)\ndf.to_sql(name='new_table',con=engine, index=False, if_exists='append')\n"], ["import pyodbc\nimport sqlalchemy\n\nengine = sqlalchemy.create_engine('mssql+pyodbc://{0}:{1}@{2}:{3}/{4}?driver={5}'.format(username,password,server,port,bdName,driver))\npd.to_sql(\"TableName\",con=engine,if_exists=\"append\")\n"], ["# PREPARED STATEMENT\nsql = '''INSERT INTO [dbo].[new_date] (Col1, Col2, Col3, ...)\n         VALUES (?, ?, ?, ...)\n      '''\n\n#  EXECUTE PARAMETERIZED QUERY\ncursor.executemany(sql, df.to_numpy().tolist())   \nconn.commit()\n"], ["cols = \"`,`\".join([str(i) for i in df.columns.tolist()])\n\n# Insert DataFrame recrds one by one.\nfor i,row in df.iterrows():\n    sql = \"INSERT INTO `[dbo].[new_date]` (`\" +cols + \"`) VALUES (\" + \"?,\"*(len(row)-1) + \"%s)\"\n    cursor.execute(sql, tuple(row))\n"], ["print(json.dumps(entry))\nimport sys\nsys.stdout.flush()\n"], [], [], [" const {Logging} = require('@google-cloud/logging');\n const express = require('express');\n const app = express();\n\n app.get('/', (req, res) => {\n  console.log('Hello world received a request.');\n\n  const target = process.env.TARGET || 'World';\n  const projectId = 'your-project';\n  const logging = new Logging({projectId});\n\n  // Selects the log to write to\n  const log = logging.log(\"Cloud_Run_Logs\");\n\n  // The data to write to the log\n  const text = 'Hello, world!';\n\n  // The metadata associated with the entry\n  const metadata = {\n    resource: {type: 'global'},\n    // See: https://cloud.google.com/logging/docs/reference/v2/rest/v2/LogEntry#logseverity\n    severity: 'INFO',\n  };\n\n  // Prepares a log entry\n  const entry = log.entry(metadata, text);\n\n   async function writeLog() {\n    // Writes the log entry\n    await log.write(entry);\n    console.log(`Logged the log that you just created: ${text}`);\n  }\n  writeLog();\n\n\n\n\n  res.send(`Hello ${target}!`);\n});\n\nconst port = process.env.PORT || 8080;\napp.listen(port, () => {\n  console.log('Hello world listening on port', port);\n});\n   \n", "\nimport os\nimport google.cloud.logging\nimport logging\n\n\nfrom flask import Flask\n\napp = Flask(__name__)\n\n@app.route('/')\ndef hello_world():\n    target = os.environ.get('TARGET', 'World')\n    # Instantiates a client\n    client = google.cloud.logging.Client()\n\n    # Connects the logger to the root logging handler; by default this captures\n    # all logs at INFO level and higher\n    client.setup_logging()\n\n    # The data to log\n    text = 'Hello, these are logs from cloud run!'\n\n    # Emits the data using the standard logging module\n    logging.warning(text)\n    return 'Hello {}!\\n'.format(text)\n"], ["import re\n\nresult = []\nwith open('file_name.txt') as fp:\n    for line in fp.readlines():\n        if re.search(r'\\d{4}', line):\n            result.append(line.strip())\n\nprint(result)\n", "['974 35 3578 4467', '325 765 355 5466']\n"], ["import re\n\np = re.compile(r'[\\d]{4}') # \\d matches for single digit and {4} will look for 4 continuous occurrences.\nfile = open('data.txt', 'r') # Opening the file\nline_with_digits = [] \nfor line in file:  # reading file line by line\n    if p.search(line): # searching for pattern in line\n        line_with_digits.append(line.strip())  # if pattern matches adding to list\n\nprint(line_with_digits) \n", "text text text\n\n567 45 32 468\n974 35 3578 4467\n325 765 355 5466\n\ntext text text\n1 3 6\ntext text\n\ntext  5566 text 45 text\ntext text 564 text 458 25 text\n", "['974 35 3578 4467', '325 765 355 5466', 'text  5566 text 45 text']\n"], ["A=open(your file here,'r').read().splitlines()\n"], ["import re\nwith open('yourfile.txt', 'r') as f:\n    txt = f.read()\nlines_w_4_numbers = re.findall(r'^\\d+\\s\\d+\\s\\d+\\s\\d+$', txt, re.M)\nprint(lines_w_4_numbers)\n", "['567 45 32 468', '974 35 3578 4467', '325 765 355 5466']\n"], [], [], ["\nnums = []\nwith open('filename.txt') as f:\n    for line in f:\n        line = line.split()\n        if len(line) == 4 and all([c.isdigit() for c in line]):\n            # use [float(c) for c in line] if needed\n            nums.append([int(c) for c in line])\n\nprint(nums)\n"], ["results = []\nwith open (filename) as f:\n    for line in f:\n        line = line.strip().split()\n        if len(line) != 4:\n            continue  # line has != 4 elements\n\n        try: \n            numbers = map(int,line)\n        except ValueError:\n            continue # line is not all numbers\n\n        # do something with line\n        results.append(line)  # or append(list(numbers)) to add the integers\n\nprint(*results, sep=\"\\n\")\n", "['567', '45', '32', '468']\n['974', '35', '3578', '4467']\n['325', '765', '355', '5466']\n"], [], ["pip install -U protobuf==3.8.0\n"], [], ["s = df.sum()\n\ndf = df[s[s > 4].nlargest(2).index]\nprint (df)\n            Australia  Austria\ndate                          \n2020-01-30          9        0\n2020-01-31          9        9\n", "print (s)\nAustralia    18.0\nAustria       9.0\nUnited        5.0\nKingdom       4.0\nVietnam       0.0\ndtype: float64\n\nprint (s[s > 4])\nAustralia    18.0\nAustria       9.0\nUnited        5.0\ndtype: float64\n\nprint (s[s > 4].nlargest(2))\nAustralia    18.0\nAustria       9.0\ndtype: float64\n\nprint (s[s > 4].nlargest(2).index)\nIndex(['Australia', 'Austria'], dtype='object')\n"], ["s = df.sum()\ndf[s.sort_values(ascending=False).index[:2]]\n", "            Australia  Austria\ndate                          \n2020-01-30          9        0\n2020-01-31          9        9\n"], ["cols = df[[i for i in df.columns if int(df[i].sum()) > 4]].stack().groupby(level=1).sum().head(2).index\n\n#would yield the same result df.stack().groupby(level=1).sum().head(2).index\n\n\ndf[cols]\n\n            Australia  Austria\ndate                          \n2020-01-30          9        0\n2020-01-31          9        9\n"], ["df[df.sum(0).sort_values(ascending=False)[:2].index]\n\n\n               Australia  Austria\n2020-01-30          9        0\n2020-01-31          9        9\n"], [], ["from heapq import nsmallest\n\n[nsmallest(2, e)[-1] for e in zip(*A)]\n", "[54, 53, 50, 36, 40, 44]\n", "from simple_benchmark import BenchmarkBuilder\nfrom heapq import nsmallest\n\n\nb = BenchmarkBuilder()\n\n@b.add_function()\ndef MehrdadPedramfar(A):\n    return [sorted(i)[1] for i in zip(*A)]\n\n@b.add_function()\ndef NicolasGervais(A):\n    return np.sort(A, axis=0)[1, :]\n\n@b.add_function()\ndef imcrazeegamerr(A):\n    rotated = zip(*A[::-1])\n\n    result = []\n    for arr in rotated:\n        # sort each 1d array from min to max\n        arr = sorted(list(arr))\n        # add the second minimum value to result array\n        result.append(arr[1])\n\n    return result\n\n@b.add_function()\ndef Daweo(A):\n    return np.apply_along_axis(lambda x:heapq.nsmallest(2,x)[-1], 0, A)\n\n@b.add_function()       \ndef kederrac(A):\n    return [nsmallest(2, e)[-1] for e in zip(*A)]\n\n\n@b.add_arguments('Number of row/cols (A is  square matrix)')\ndef argument_provider():\n    for exp in range(2, 18):\n        size = 2**exp\n        yield size, [[randint(0, 1000) for _ in range(size)] for _ in range(size)]\n\nr = b.run()\nr.plot()\n"], [], ["import heap\nimport numpy as np\nA = np.array([[72, 76, 44, 62, 81, 31],\n              [54, 36, 82, 71, 40, 45],\n              [63, 59, 84, 36, 34, 51],\n              [58, 53, 59, 22, 77, 64],\n              [35, 77, 60, 76, 57, 44]])\nsecond_mins = np.apply_along_axis(lambda x:heapq.nsmallest(2,x)[-1], 0, A)\nprint(second_mins)  # [54 53 59 36 40 44]\n"], ["[sorted(i)[1] for i in zip(*A)]\n", "In [12]: A = [[72, 76, 44, 62, 81, 31], \n    ...:      [54 ,36 ,82 ,71 ,40, 45], \n    ...:      [63 ,59, 84, 36, 34 ,51], \n    ...:      [58, 53, 59, 22, 77 ,64], \n    ...:      [35 ,77, 60, 76, 57, 44]] \n\nIn [18]: [sorted(i)[1] for i in zip(*A)]                                                                                                                                                                           \nOut[18]: [54, 53, 59, 36, 40, 44]\n", "In [19]: A = [[72, 76, 44, 62, 81, 31], \n    ...:  [54 ,36 ,82 ,71 ,40, 45], \n    ...:  [63 ,59, 84, 36, 34 ,51], \n    ...:  [35, 53, 59, 22, 77 ,64],   # 35\n    ...:  [35 ,77, 50, 76, 57, 44],]  # 35\n", "In [29]: [sorted(list(set(i)))[1] for i in zip(*A)]                                                                                                                                                                \nOut[29]: [54, 53, 50, 36, 40, 44]\n"], ["A = [[72,76,44,62,81,31]\n ,[54,36,82,71,40,45]\n ,[63,59,84,36,34,51]\n ,[58,53,59,22,77,64]\n ,[35,77,50,76,57,44]]\n\n#rotate the array 90deg\nrotated = zip(*A[::-1])\n\nresult = []\nfor arr in rotated:\n    # sort each 1d array from min to max\n    arr = sorted(list(arr))\n    # add the second minimum value to result array\n    result.append(arr[1])\nprint(result)\n"], ["np.sort(A, axis=0)[1, :]\n", "Out[61]: array([54, 53, 59, 36, 40, 44])\n"], [], [], ["python3 find_spark_home.py \n\n/usr/local/lib/python3.7/site-packages/pyspark\n", "vim ~/.bashrc\n", "export JAVA_HOME=/Library/java/JavaVirtualMachines/adoptopenjdk-8.jdk/contents/Home/\n\nexport SPARK_HOME=/usr/local/lib/python3.7/site-packages/pyspark\n\nexport PYSPARK_PYTHON=/usr/local/bin/python3\n", "source ~/.bashrc\n"], ["from keras.models import model_from_json\n", "from tensorflow.keras.models import model_from_json\n"], [], [], ["def ascending(l):\n    if len(l) <= 1:\n        return(True)\n    else:\n        return(l[0] < l[1] and ascending(l[1:]))\n\ndef descending(l):\n    if len(l) <= 1:\n        return(True)\n    else:\n        return(l[0] > l[1] and descending(l[1:]))\n\ndef hill(l):\n    for i in range(1,len(l)-1):\n        if ascending(l[:i+1]) and descending(l[i:]):\n            return(True)\n    return(False)\n\ndef valley(l):\n    for i in range(1,len(l)-1):\n        if descending(l[:i+1]) and ascending(l[i:]):\n            return(True)\n    return(False)\n\ndef hillvalley(l):\n    return(hill(l) or valley(l))\n"], ["    def hill(l):\n        bol = 0\n        count = 0\n        for i in range(0,len(l)-1):\n            if l[i+1] == l[i]:\n                return False\n            elif l[i+1] > l[i] and bol == 0:\n                count = 1\n            elif l[i+1] < l[i] and bol == 0:\n                bol = 1\n            elif l[i+1] > l[i] and bol == 1:\n                return False\n\n        if bol == 0 or count == 0:\n            return False\n        else:\n            return True\n\n    def valley(l):\n        bol = 0\n        count = 0\n        for i in range(0,len(l)-1):\n            if l[i+1] == l[i]:\n                return False\n            elif l[i+1] < l[i] and bol == 0:\n                count = 1\n            elif l[i+1] > l[i] and bol == 0:\n                bol = 1\n            elif l[i+1] < l[i] and bol == 1:\n                return False\n        if bol == 0 or count == 0:\n            return False\n        else:\n            return True\n\n    def hillvalley(l):\n        if hill(l):\n            print (\"True\")\n            return True\n        elif valley(l):\n            print (\"True\")\n            return True\n        else:\n            print(\"False\")\n            return False\n"], [], ["def hillValey(A):\n    if len(A)<3: return\n    p1,p2,p3 = A[:3]\n    for p in A[3:]:\n        if p==p3 : continue\n        if  p1==p2 or (p1>p2) == (p2>p3):\n            p1,p2,p3 = p2,p3,p\n        elif (p3>p) == (p2>p3) :\n            p3=p\n        else: return\n    if p1==p2 or p2==p3:   return\n    if (p1<p2) != (p2>p3): return\n    return \"Valley\" if p1>p2 else \"Hill\"\n", "def check(A): print(A,hillValey(A))\n\ncheck([1,2,3,5,4])\ncheck([5,4,1,2,3])\ncheck([1,2,3,5,4,3,2,1])\ncheck([9,5,4,-1,-2,3,7])\ncheck([1, 1, 1, 1, 1])\ncheck([1, 1])\ncheck([1])\ncheck([1, 2, 3, 5, 5])\ncheck([9, -1, 4, -1, -2, 3])\ncheck([3,2,2])\ncheck([3,2,2,4])\ncheck([3,3,2])\ncheck([1,1,2])\ncheck([1,1,2,1])\ncheck([1,1,2,2,1])\ncheck([1,1,1,2,2,1])\ncheck([2,2,2,1,2,2])\n", "[1, 2, 3, 5, 4] Hill\n[5, 4, 1, 2, 3] Valley\n[1, 2, 3, 5, 4, 3, 2, 1] Hill\n[9, 5, 4, -1, -2, 3, 7] Valley\n[1, 1, 1, 1, 1] None\n[1, 1] None\n[1] None\n[1, 2, 3, 5, 5] None\n[9, -1, 4, -1, -2, 3] None\n[3, 2, 2] None\n[3, 2, 2, 4] Valley\n[3, 3, 2] None\n[1, 1, 2] None\n[1, 1, 2, 1] Hill\n[1, 1, 2, 2, 1] Hill\n[1, 1, 1, 2, 2, 1] Hill\n[2, 2, 2, 1, 2, 2] Valley\n"], ["enter code heredef hillvalley(l):\nc=0\ns=0\nif(l[0]<l[1]):\n    for i in range(1,len(l)):\n        if(l[i-1]<l[i]):\n            c+=1\n    for i in range(c,len(l)-1):\n        if(l[i]>l[i+1]):\n            s+=1\n    if(c>0 and s>0 and(s+c==len(l)-1)):\n        return True\n    else:\n        return False\nelse:\n    for i in range(1,len(l)):\n        if(l[i-1]>l[i]):\n            c+=1\n    for i in range(c,len(l)-1):\n        if(l[i]<l[i+1]):\n            s+=1\n    if(c>0 and s>0 and(s+c==len(l)-1)):\n        return True\n    else:\n        return False\n"], [], ["def hillorvalley(seq):\n    is_dec, is_inc = False, False\n    inflections = 0\n    for i in range(len(seq)-1):\n        if inflections > 1:\n            # Early stop if more than 1 inflection\n            return False\n        right = seq[i+1]\n        middle = seq[i]\n        diff = right - middle\n        if diff > 0:\n            if is_dec:\n                inflections += 1\n            is_inc = True\n            is_dec = False\n        elif diff < 0:\n            if is_inc:\n                inflections += 1\n            is_dec = True\n            is_inc = False\n    if inflections == 1:\n        return True\n    return False\n\nassert hillorvalley([1, 1, 1, 1, 1]) is False\nassert hillorvalley([1, 1]) is False\nassert hillorvalley([1]) is False\nassert hillorvalley([1, 2, 3, 5, 4]) is True\nassert hillorvalley([5, 4, 1, 2, 3]) is True\nassert hillorvalley([1, 2, 3, 5, 5]) is False\nassert hillorvalley([9, 5, 4, -1, -2, 3, 7]) is True\nassert hillorvalley([1, 2, 3, 5, 4, 3, 2, 1]) is True\nassert hillorvalley([9, -1, 4, -1, -2, 3]) is False\n"], ["pip install -U protobuf==3.8.0\n", "!pip install -U protobuf==3.8.0\n"], [], [], [], ["def find_correct(word_dict):\n\n    correct_count=0\n    almost_correct_count=0\n    wrong_count=0\n    list1=[]\n    for k,v in word_dict.items():\n        if len(k)<=10:\n            if len(k)==len(v):\n                if k==v:\n                    correct_count+=1\n                else:\n                    x=[]\n                    y=[]\n                    for i in k:\n                        x.append(i)\n                    for i in v:\n                        y.append(i)\n                    count=0\n                    for i in x:\n                        if not(y[x.index(i)]==i):\n                            count+=1\n                    if count<=2:\n                        almost_correct_count+=1\n                    else:\n                        wrong_count+=1\n            else:\n                wrong_count+=1 \n        else:\n                wrong_count+=1          \n    list1.append(correct_count)\n    list1.append(almost_correct_count)  \n    list1.append(wrong_count)      \n    return list1       \nword_dict={'MOST': 'MICE', 'GET': 'GOT', 'COME': 'COME', 'THREE': 'TRICE'}\nprint(find_correct(word_dict))\n"], [], [], ["sudo apt install openjdk-8-jdk\n", " update-java-alternatives --list\n", "sudo update-alternatives --config java\n", "cd ~\ngedit .bashrc\n", "## SETTING JAVA HOME\nexport JAVA_HOME=/usr/lib/jvm/java-8-openjdk-amd64\nexport PATH=$PATH:$JAVA_HOME/bin\n"], ["from keras.models import model_from_json\n", "from tensorflow.keras.models import model_from_json\n"], [" python -m pip install pip==<previous version>\n"], [], ["import keras.backend.tensorflow_backend as tb\ntb._SYMBOLIC_SCOPE.value = True\n"], ["    c.groupby('b').apply(lambda g: g.mean(skipna=False))\n", "    c.groupby('b').agg({'a': lambda x: x.mean(skipna=False)})\n", "    method3 = c.groupby('b').sum()\n    nan_index = c[c['b'].isna()].index.to_list()\n    method3.loc[method3.index.isin(nan_index)] = np.nan\n"], [], [], ["python -m pip install pip==19.0.3 --user\n"], ["python -m pip install pip==19.0.3\n"], [], [], [], ["$ conda update wrapt\n", "[jalal@goku examples]$ pip install tensorflow-gpu~=1.14\nCollecting tensorflow-gpu~=1.14\n  Using cached https://files.pythonhosted.org/packages/a5/ad/933140e74973fb917a194ab814785e7c23680ca5dee6d663a509fe9579b6/tensorflow_gpu-1.15.0-cp36-cp36m-manylinux2010_x86_64.whl\nRequirement already satisfied: numpy<2.0,>=1.16.0 in /home/grad3/jalal/.local/lib/python3.6/site-packages (from tensorflow-gpu~=1.14) (1.17.4)\nRequirement already satisfied: google-pasta>=0.1.6 in /scratch/sjn-p3/anaconda/anaconda3/lib/python3.6/site-packages (from tensorflow-gpu~=1.14) (0.1.8)\nRequirement already satisfied: wrapt>=1.11.1 in /scratch/sjn-p3/anaconda/anaconda3/lib/python3.6/site-packages (from tensorflow-gpu~=1.14) (1.11.2)\nRequirement already satisfied: absl-py>=0.7.0 in /scratch/sjn-p3/anaconda/anaconda3/lib/python3.6/site-packages (from tensorflow-gpu~=1.14) (0.8.1)\nCollecting keras-applications>=1.0.8\n  Using cached https://files.pythonhosted.org/packages/71/e3/19762fdfc62877ae9102edf6342d71b28fbfd9dea3d2f96a882ce099b03f/Keras_Applications-1.0.8-py3-none-any.whl\nRequirement already satisfied: six>=1.10.0 in /scratch/sjn-p3/anaconda/anaconda3/lib/python3.6/site-packages (from tensorflow-gpu~=1.14) (1.13.0)\nRequirement already satisfied: keras-preprocessing>=1.0.5 in /scratch/sjn-p3/anaconda/anaconda3/lib/python3.6/site-packages (from tensorflow-gpu~=1.14) (1.0.5)\nRequirement already satisfied: opt-einsum>=2.3.2 in /scratch/sjn-p3/anaconda/anaconda3/lib/python3.6/site-packages (from tensorflow-gpu~=1.14) (3.1.0)\nRequirement already satisfied: protobuf>=3.6.1 in /scratch/sjn-p3/anaconda/anaconda3/lib/python3.6/site-packages (from tensorflow-gpu~=1.14) (3.11.0)\nRequirement already satisfied: tensorboard<1.16.0,>=1.15.0 in /scratch/sjn-p3/anaconda/anaconda3/lib/python3.6/site-packages (from tensorflow-gpu~=1.14) (1.15.0)\nRequirement already satisfied: wheel>=0.26 in /scratch/sjn-p3/anaconda/anaconda3/lib/python3.6/site-packages (from tensorflow-gpu~=1.14) (0.33.6)\nRequirement already satisfied: termcolor>=1.1.0 in /scratch/sjn-p3/anaconda/anaconda3/lib/python3.6/site-packages (from tensorflow-gpu~=1.14) (1.1.0)\nCollecting tensorflow-estimator==1.15.1\n  Using cached https://files.pythonhosted.org/packages/de/62/2ee9cd74c9fa2fa450877847ba560b260f5d0fb70ee0595203082dafcc9d/tensorflow_estimator-1.15.1-py2.py3-none-any.whl\nProcessing /home/grad3/jalal/.cache/pip/wheels/5c/2e/7e/a1d4d4fcebe6c381f378ce7743a3ced3699feb89bcfbdadadd/gast-0.2.2-cp36-none-any.whl\nRequirement already satisfied: astor>=0.6.0 in /scratch/sjn-p3/anaconda/anaconda3/lib/python3.6/site-packages (from tensorflow-gpu~=1.14) (0.8.0)\nRequirement already satisfied: grpcio>=1.8.6 in /scratch/sjn-p3/anaconda/anaconda3/lib/python3.6/site-packages (from tensorflow-gpu~=1.14) (1.25.0)\nRequirement already satisfied: h5py in /scratch/sjn-p3/anaconda/anaconda3/lib/python3.6/site-packages (from keras-applications>=1.0.8->tensorflow-gpu~=1.14) (2.7.1)\nRequirement already satisfied: setuptools in /scratch/sjn-p3/anaconda/anaconda3/lib/python3.6/site-packages (from protobuf>=3.6.1->tensorflow-gpu~=1.14) (42.0.2.post20191201)\nRequirement already satisfied: werkzeug>=0.11.15 in /scratch/sjn-p3/anaconda/anaconda3/lib/python3.6/site-packages (from tensorboard<1.16.0,>=1.15.0->tensorflow-gpu~=1.14) (0.16.0)\nRequirement already satisfied: markdown>=2.6.8 in /scratch/sjn-p3/anaconda/anaconda3/lib/python3.6/site-packages (from tensorboard<1.16.0,>=1.15.0->tensorflow-gpu~=1.14) (3.1.1)\nInstalling collected packages: keras-applications, tensorflow-estimator, gast, tensorflow-gpu\n  Found existing installation: Keras-Applications 1.0.6\n    Uninstalling Keras-Applications-1.0.6:\n      Successfully uninstalled Keras-Applications-1.0.6\n  Found existing installation: gast 0.3.2\n    Uninstalling gast-0.3.2:\n      Successfully uninstalled gast-0.3.2\nSuccessfully installed gast-0.2.2 keras-applications-1.0.8 tensorflow-estimator-1.15.1 tensorflow-gpu-1.15.0\n"], ["pip install tensorboard==1.14.0\n", "pip install tensorflow==1.14.0\n"], [], ["li1 = [6, 0, 4, 8, 7, 6]\nli2 = [1, 4, 1, 2, 4, 3, 5, 4, 0]\n\ndef inc_seq(li1):\n  lix = []\n  li_t = [] \n  for i in range(len(li1)):\n    #print (i)\n    if i < (len(li1) - 1) and li1[i] >= li1[i + 1]:\n      li_t.append(li1[i])\n      lix.append(li_t)\n      li_t = []\n    else:\n      li_t.append(li1[i])\n\n\n  print (lix)\n\ninc_seq(li1)\ninc_seq(li2)\n"], ["result_list = []\nsublist = []\nprevious_number = None\n\nfor current_number in inp:\n    if previous_number is None or current_number > previous_number:\n        # still ascending, add to the current sublist\n        sublist.append(current_number)\n    else:\n        # no longer ascending, add the current sublist \n        result_list.append(sublist)\n\n        # start a new sublist\n        sublist = [current_number]\n    previous_number = current_number\nif sublist:\n    # add the last sublist, if there's anything there\n    result_list.append(sublist)\n"], ["# define the two output layer names for the EAST detector model that\n# we are interested -- the first is the output probabilities and the\n# second can be used to derive the bounding box coordinates of text\nlayerNames = [\n    \"feature_fusion/Conv_7/Sigmoid\",\n    \"feature_fusion/concat_3\"]\n# load the pre-trained EAST text detector\nprint(\"[INFO] loading EAST text detector...\")\nnet = cv.dnn.readNet(east_network)\n\n# construct a blob from the image and then perform a forward pass of\n# the model to obtain the two output layer sets\nblob = cv.dnn.blobFromImage(image, 1.0, (W, H),\n    (123.68, 116.78, 103.94), swapRB=True, crop=False)\nstart = time.time()\nnet.setInput(blob)\n(scores, geometry) = net.forward(layerNames)\nend = time.time()\n\n# show timing information on text prediction\nprint(\"[INFO] text detection took {:.6f} seconds\".format(end - start))\n", "[INFO] loading EAST text detector...\n\n---------------------------------------------------------------------------\nerror                                     Traceback (most recent call last)\n<ipython-input-11-cb4226399d04> in <module>\n     15 start = time.time()\n     16 net.setInput(blob)\n---> 17 (scores, geometry) = net.forward(layerNames)\n     18 end = time.time()\n     19 \n\nerror: OpenCV(4.1.1) /io/opencv/modules/dnn/src/layers/concat_layer.cpp:95: error: (-201:Incorrect size of input array) Inconsistent shape for ConcatLayer in function 'getMemoryShapes'\n"], ["import itertools\n\n>>> np.unique([*itertools.chain.from_iterable(df.Genre)])\narray(['action', 'crime', 'drama'], dtype='<U6')\n", ">>> set(itertools.chain.from_iterable(df.Genre))\n{'action', 'crime', 'drama'}\n", "df = pd.DataFrame({'Genre':[['crime','drama'],['action','crime','drama']]})\ndf = pd.concat([df]*10000)\n\n%timeit set(itertools.chain.from_iterable(df.Genre))\n100 loops, best of 3: 2.55 ms per loo\n    \n%timeit set([x for y in df['Genre'] for x in y])\n100 loops, best of 3: 4.09 ms per loop\n\n%timeit np.unique([*itertools.chain.from_iterable(df.Genre)])\n100 loops, best of 3: 12.8 ms per loop\n\n%timeit np.unique(df['Genre'].sum())\n1 loop, best of 3: 1.65 s per loop\n\n%timeit set(df['Genre'].sum())\n1 loop, best of 3: 1.66 s per loop\n"], [], ["(newW, newH) = (375, 500)\n", "(newW, newH) = (320,320)\n"], [], [], ["with open('sampleDictionary.json', 'w') as f:\n  json.dump(dict, f)\ntime.sleep(10)\nfiles.download('sampleDictionary.json')\n"], [], [], [], ["from marshmallow_sqlalchemy import ModelSchema\n\nclass UserSchema(ModelSchema):\n    class Meta:\n        model = User\n"], [], ["array(['crime', 'drama', 'action'], dtype=object)\n"], [], ["import pandas as pd\ndf = pd.DataFrame({'movie':[[1,2,3],[1,2,6]]})\nout = set()\nfor row in df['movie']:\n    out.update({item for item in row})\nprint(out)\n", "out = set()\ndf['movie'].apply(lambda x: out.update({item for item in x}))\n"], [], [], [], [], [], [], ["pipenv install marshmallow-sqlalchemy\n"], ["from datetime import datetime\n\ntoday = datetime.today()\n\nmonth = [\"January\", \"February\", \"March\", \"April\",\n            \"May\", \"June\", \"July\", \"August\", \"September\", \"October\", \"November\", \"December\"]\n\nprint( month[today.month-1:] )\n"], ["import calendar\nimport datetime\n\nMONTHS_NUM = 6\ntoday_month = datetime.datetime.now().month\nfirst_month = max(today_month - MONTHS_NUM, 0)\nlast_months = calendar.month_name[1:][first_month:today_month][::-1]\nprint(last_months)\n", "['September', 'August', 'July', 'June', 'May', 'April']\n", "['May', 'April', 'March', 'February', 'January']\n", "import calendar\nimport datetime\n\nMONTHS_NUM = 6\ndouble_months_list = calendar.month_name[1:] * 2\ntoday_month = datetime.datetime.now().month + 12\nfirst_month = today_month - MONTHS_NUM\nlast_months = double_months_list[first_month:today_month][::-1]\nprint(last_months)\n", "['May', 'April', 'March', 'February', 'January', 'December']\n"], ["import datetime\nnow = datetime.datetime.now()\nresult = [now.strftime(\"%B\")]\nfor _ in range(0, 6):\n    now = now.replace(day=1) - datetime.timedelta(days=1)\n    result.append(now.strftime(\"%B\"))\nprint(result)\n", "['September', 'August', 'July', 'June', 'May', 'April', 'March']\n"], [], ["    def find_correct(word_dict):\n    correct=0\n    almost_correct=0\n    wrong=0\n    for key,val in word_dict.items():\n        key1=key;val1=val\n        if(len(key)!=len(val)):\n            wrong+=1\n        elif(key==val):\n            correct+=1\n        else:\n            var=0;count=0\n            for i in range(len(key1)):\n                for j in range(i+1):\n                    var=j\n                if(key1[i]!=val1[j]):\n                    count+=1\n            if(count<=2):\n                almost_correct+=1\n            else:\n                wrong+=1\n    li=[correct,almost_correct,wrong]\n    return li\nword_dict={\"THEIR\": \"THEIR\",\"BUSINESS\":\"BISINESS\",\"WINDOWS\":\"WINDMILL\",\"WERE\":\"WEAR\",\"SAMPLE\":\"SAMPLE\"}\nprint(find_correct(word_dict))\n"], ["import pandas as pd\ndata={'id': '6576_926_1','name': 'xyz','m': 926,0: {'id': '2896_926_2', 'name': 'lmn', 'm': 926},1: {'id': '23_926_3', 'name': 'abc','m': 928}}    \nId=[]\nName=[]\nM=[]\nfor k,val in data.items():\n    if type(val) is dict:\n        Id.append(val['id'])\n        Name.append(val['name'])\n        M.append(val['m'])\n"], ["import pandas as pd\nlis = []\ndata = {\n     0: {'id': '2896_926_2', 'name': 'lmn', 'm': 926},\n\n     1: {'id': '23_926_3', 'name': 'abc', 'm': 928}\n   }\n\nfor key,val in data.iteritems():  \n    lis.append(val)\nd = pd.DataFrame(lis)\nprint d   \n", "           id    m name\n    0  2896_926_2  926  lmn\n    1    23_926_3  928  abc\n", "for i,j in data.iteritems():  \n    lis.append(j)\nd = pd.DataFrame(lis)\nd = d.set_index('id')\nprint d  \n", "              m name\nid                  \n2896_926_2  926  lmn\n23_926_3    928  abc\n"], ["my_dict.pop('id')\nmy_dict.pop('name')\nmy_dict.pop('m')\ndata = [ row.values() for row in my_dict.values()]\npd.DataFrame(data=data, columns=['id','name','m'])\n"], ["import pandas as pd\ndata = pd.Dataframe(dict)\ndata = data.drop(0, axis=1)\ndata = data.drop(1, axis=1)\n", "import pandas as pd\n\ndel dict['id']\ndel dict['name']\ndel dict['m']\npd.DataFrame(dict)\n"], [">>> data = {'col_1': [3, 2, 1, 0], 'col_2': ['a', 'b', 'c', 'd']}\n>>> pd.DataFrame.from_dict(data)\n   col_1 col_2\n0      3     a\n1      2     b\n2      1     c\n3      0     d\n"], ["import pylint.lint\noptions = [\n    filename, \n    \"--output-format=mypackage.mymodule.MyReporterClass\" \n]\nresults = pylint.lint.Run(options, do_exit=False)\nmessages = results.linter.reporter.messages\n", "import html\nfrom pylint.interfaces import IReporter\nfrom pylint.reporters import *\n\nclass MyReporterClass(BaseReporter):\n    \"\"\"Report messages and layouts.\"\"\"\n\n    __implements__ = IReporter\n    name = \"myreporter\"\n    extension = \"myreporter\"\n\n    def __init__(self, output=sys.stdout):\n        BaseReporter.__init__(self, output)\n        self.messages = []\n\n    def handle_message(self, msg):\n        \"\"\"Manage message of different type and in the context of path.\"\"\"\n        self.messages.append(\n            {\n                \"type\": msg.category,\n                \"module\": msg.module,\n                \"obj\": msg.obj,\n                \"line\": msg.line,\n                \"column\": msg.column,\n                \"path\": msg.path,\n                \"symbol\": msg.symbol,\n                \"message\": html.escape(msg.msg or \"\", quote=False),\n                \"message-id\": msg.msg_id,\n            }\n        )\n\n    def display_messages(self, layout):\n        \"\"\"Do nothing.\"\"\"\n\n    def display_reports(self, layout):\n        \"\"\"Do nothing.\"\"\"\n\n    def _display(self, layout):\n        \"\"\"Do nothing.\"\"\"\n\n\ndef register(linter):\n    \"\"\"Register the reporter classes with the linter.\"\"\"\n    linter.register_reporter(MyReporterClass)\n"], [], [], ["Creating /glue/lib/installation/site.py\nProcessing psycopg2-2.8.3-py2.7.egg\nCopying psycopg2-2.8.3-py2.7.egg to /glue/lib/installation\nAdding psycopg2 2.8.3 to easy-install.pth file\nInstalled /glue/lib/installation/psycopg2-2.8.3-py2.7.egg\nProcessing dependencies for psycopg2==2.8.3\nSearching for psycopg2==2.8.3\nReading https://pypi.org/simple/psycopg2/\nDownloading https://files.pythonhosted.org/packages/5c/1c/6997288da181277a0c29bc39a5f9143ff20b8c99f2a7d059cfb55163e165/psycopg2-2.8.3.tar.gz#sha256=897a6e838319b4bf648a574afb6cabcb17d0488f8c7195100d48d872419f4457\nBest match: psycopg2 2.8.3\nProcessing psycopg2-2.8.3.tar.gz\nWriting /tmp/easy_install-dml23ld7/psycopg2-2.8.3/setup.cfg\nRunning psycopg2-2.8.3/setup.py -q bdist_egg --dist-dir /tmp/easy_install-dml23ld7/psycopg2-2.8.3/egg-dist-tmp-9qwen3l_\ncreating /glue/lib/installation/psycopg2-2.8.3-py3.6-linux-x86_64.egg\nExtracting psycopg2-2.8.3-py3.6-linux-x86_64.egg to /glue/lib/installation\nRemoving psycopg2 2.8.3 from easy-install.pth file\nAdding psycopg2 2.8.3 to easy-install.pth file\nInstalled /glue/lib/installation/psycopg2-2.8.3-py3.6-linux-x86_64.egg\nFinished processing dependencies for psycopg2==2.8.3\n"], [], [], [], ["import re\ndata_xls = data_xls.replace('\\n', ' ', regex=True)\n", "data_xls = data_xls.replace('\\s', ' ', regex=True)\n"], ["import subprocess\nimport commands\n\n\ndef dbc2csv(raw_filename):\ndbc2csv_path = \"/path/to/script/dbc2csv.R \" + raw_files_dir + \" \" + converted_files_dir + \" \" + raw_filename\n\ntry:\n    r_script_path = commands.getstatusoutput('which Rscript')[1]\n    subprocess.call(r_script_path + \" --vanilla \" + dbc2csv_path, shell=True)\n    return True\nexcept:\n    print(\"(Rscript) Error converting file: \" + raw_filename)\n\nreturn False\n", "#install.packages(\"read.dbc\") You need this package\nlibrary(\"read.dbc\")\n\n\ndbc2dbf <- function(rawDir, convertedDir, file) {\n    # reads dbc file\n    x <- read.dbc(paste(rawDir, file, sep=\"\"))\n    # write it to csv\n    write.csv(x, file=paste(convertedDir, file, \".csv\", sep=\"\"))\n}\n\nargs = commandArgs(trailingOnly=TRUE)\ntry(dbc2dbf(args[1], args[2], args[3]), TRUE)\n"], ["def find_correct(word_dict):\n    correct,almost,incorrect=0,0,0\n    for key,value in word_dict.items():\n        count=0\n        if(key==value):\n            correct+=1\n        elif(len(key)==len(value)):\n            for i in range(0,len(key)):\n                if(key[i]!=value[i]):\n                    count+=1\n            if(count<=2):\n                almost+=1\n            else:\n                incorrect+=1\n        else:\n            incorrect+=1\n    list=[correct,almost,incorrect]\n    return list \n\n    word_dict={'WHIZZY': 'MIZZLY', 'PRETTY': 'PRESEN'}\n    print(find_correct(word_dict))\n"], [], [], ["import sys\n\nin_path = sys.argv[1]\nout_path = sys.argv[2]\n", "with open(in_path, 'r') as fh:\n    rows = [line for i, line in enumerate(fh) if i > 1]\n    rows.sort(key = lambda x: int(x.split(None, 1)[0]))\n", "with open(out_path, 'w') as fh:\n    for r in rows:\n        fh.write(r)\n"], ["fn = 'filename.txt'\nsorted_fn = 'sorted_filename.txt'\n\nwith open(fn,'r') as first_file:\n    rows = first_file.readlines()\n    sorted_rows = sorted(rows, key=lambda x: int(x.split()[0]), reverse=False)\n    with open(sorted_fn,'w') as second_file:\n        for row in sorted_rows:\n            second_file.write(row)\n"], ["my_data = {\n 2: ['0', '4', '0d', '07:00:38.0400009155273'],\n 3: ['0', '4', '0d', '07:00:38.0400009155273'],\n 1: ['0', '4', '0d', '07:00:38.0400009155273']\n}\n", "for i in range(1, max(list(my_data.keys())) + 1):\n    pass # do some computation\n", "with open(\"foo.txt\", \"r\") as file:\n    in_data = file.readlines()\n\nmy_data = {}\nfor data in in_data:\n    split_info = data.split(\" \")\n    useful_data = [item.strip() for item in split_info[1:] if item != \"\"]\n    my_data.update({split_info[0]: useful_data})\n\nfor key in sorted(my_data.keys()):\n    print(\"{}: {}\".format(key, my_data[key]))\n"], ["import pandas as pd\ndf = pd.read_csv('to/file', sep='\\t', index='Name of column with index')  # Guessing that your file is tab separated\ndf.sort_index(inplace=True)\n"], ["with open(\"foo.txt\") as file:\n    lines = file.readlines()\n    sorted(lines, key=lambda line: int(line.split()[0]))\n"], [], ["$ sudo apt install openjdk-8-jdk\n", "$ sudo update-alternatives --config java\n", "$ java -version\n", "openjdk version \"1.8.0_191\"\nOpenJDK Runtime Environment (build 1.8.0_191-8u191-b12-2ubuntu0.18.04.1-b12)\nOpenJDK 64-Bit Server VM (build 25.191-b12, mixed mode)\n"], [], [], ["from itertools import zip_longest\n\nnums = [1, 4, 1, 2, 4, 3, 5, 4, 0]\n\nresults = []\nstart = 0\nfor i, (a, b) in enumerate(zip_longest(nums, nums[1:])):\n    if b is None or b <= a:\n        results.append(nums[start:i+1])\n        start = i + 1\n\nprint(results)\n# [[1, 4], [1, 2, 4], [3, 5], [4], [0]]\n"], ["seq = [1, 4, 1, 2, 4, 3, 5, 4, 0]\ndict_seq = {i:j for i,j in enumerate(seq)}\n\n# Get the index where numbers start to decrease\nidx = [0] # Adding a zero seems counter-intuitive now; we'll see the benefit later.\nfor k, v in dict_seq.items():\n    if k>0:\n        if dict_seq[k]<dict_seq[k-1]:\n            idx.append(k)\n\n# Using zip, slice and handling the last entry\ninc_seq = [seq[i:j] for i, j in zip(idx, idx[1:])] + [seq[idx[-1:]]]\n", "print(inc_seq)\n>>> [[1, 4], [1, 2, 4], [3, 5], [4], [0]]\n", ">>> print(idx)\n>>> [0, 2, 5, 7, 8]\n\n>>> for i, j in zip(idx, idx[1:]):\n       print('[{}:{}]'.format(i,j))\n\n[0:2]\n[2:5]\n[5:7]\n[7:8]   # <-- need to add the last slide [8:]\n"], ["def breakIntoList(inp):\n    if not inp:\n        return []\n\n    sublist = [inp[0]]\n    output = []\n    for a in inp[1:]:\n        if a > sublist[-1]:\n            sublist.append(a)\n        else:\n            output.append(sublist);\n            sublist = [a]\n\n\n    output.append(sublist)\n    return output\n\n\n\nlist = [1, 4, 1, 2, 4, 3, 5, 4, 0]\nprint(list)\nprint(breakIntoList(list))\n"], ["seq = [6, 0, 4, 8, 7, 6]\nseq_by_incr_groups = []  # Will hold the result\nincr_seq = []  # Needed to create groups of increasing values.\nprevious_value = 0  # Needed to assert whether or not it's an increasing value. \nfor curr_value in seq: # Iterate over the list\n    if curr_value > previous_value: # It's an increasing value and belongs to the group of increasing values.\n        incr_seq.append(curr_value)\n    else:  # It was lower, lets append the previous group of increasing values to the result and reset the group so that we can create a new one.\n        if incr_seq:  # It could be that it's empty, in the case that the first number in the input list is a negative.\n            seq_by_incr_groups.append(incr_seq)\n        incr_seq = []\n        incr_seq.append(curr_value)\n    previous_value = curr_value # Needed so that we in the next iteration can assert that the value is increasing compared to the prior one.\n\nif incr_seq:  # Check if we have to add any more increasing number groups.\n    seq_by_incr_groups.append(incr_seq)  # Add them.\n\nprint(seq_by_incr_groups)\n"], [], ["    \"python.formatting.provider\": \"autopep8\",\n    \"python.formatting.autopep8Args\": [\n        \"--ignore\",\n        \"E402\"\n    ],\n"], [], [], [], [], [], [], [], ["sudo apt-get update\nsudo apt-get install qt5-default\nsudo apt-get install sip-dev\n\ncd /usr/src\nsudo wget https://www.riverbankcomputing.com/static/Downloads/sip/sip-4.19.14.tar.gz\nsudo tar xzf sip-4.19.14.tar.gz\ncd sip-4.19.14\nsudo python3.6 configure.py --sip-module PyQt5.sip\nsudo make\nsudo make install\n\ncd /usr/src\nsudo wget https://www.riverbankcomputing.com/static/Downloads/PyQt5/PyQt5_gpl-5.12.tar.gz\nsudo tar xzf PyQt5_gpl-5.12.tar.gz\ncd PyQt5_gpl-5.12\nsudo python3.6 configure.py\nsudo make\nsudo make install\n"], ["seq = list(input())\nseq1 = seq[1:]\nseq2 = seq[:-1]\n\ndiff = [x-y for x,y in zip([int(x) if int(x)>0 else 10 for x in seq1],[int(x) if int(x)>0 else 10 for x in seq2])]\n\nif any (t != 1 for t in diff) :\n    print('not <<<<<')\nelse :\n    print('<<<<<<')\n"], ["import sys\n\n\norder = dict(enumerate(range(10)))\norder[0] = 10\n\ndef increasing(n):\n    n = abs(n)\n    o = order[n % 10] + 1\n    while n:\n        n, r = divmod(n, 10)\n        if o - order[r] != 1:\n            return False\n        o = order[r]\n    return True\n\n\nfor n in sys.argv[1:]:\n    print n, increasing(int(n))\n"], ["5   6   7   8\n8   7   6   5\n-------------\n13  13  13  13\n\n9   0   1\n1   0   9\n---------\n10  0   10\n\n\n9   0   1   2\n2   1   0   9\n-------------\n11  1   1   11\n", "pos_test_data = [5678, 901, 9012, 9012345678901]\nneg_test_data = [5876, 910, 9021]\n\ndef monotonic_by_one(n):\n    fwd = str(n)\n    tgt = ord(fwd[0]) + ord(fwd[-1])\n    return all([ord(f) + ord(r) in (tgt, tgt - 10) for f, r in zip(fwd, reversed(fwd))])\n\n\nprint(\"Positive: \", all([monotonic_by_one(n) for n in pos_test_data]))\nprint(\"Negative: \", all([not monotonic_by_one(n) for n in neg_test_data]))\n", "Positive:  True\nNegative:  True\n"], [], ["str(num) in '1234567890'\n"], ["from itertools import cycle, islice\n\nnum = 5678901234\n\nnum = tuple(str(num))\nprint(num == tuple(islice(cycle(map(str, range(10))), int(num[0]), int(num[0]) + len(num))))\n", "def digits(num):\n    while num:\n        yield num % 10\n        num //= 10\n\ndef check(num):\n    num = list(digits(num))\n    num.reverse()\n    for i, j in zip(islice(cycle(range(10)), num[0], num[0] + len(num)), num):\n        if i != j:\n          return False\n    return True\n"], ["num = 7890\n\nresult = all((int(y)-int(x))%10 == 1 for x,y in zip(str(num),str(num)[1:]))\n"], [], ["list2 = [{k:v for k,v in i.items() if v!= '' or v.strip() != ''} for i in list1]\n", "list2 = [{k:v for k,v in i.items() if v} for i in list1]\n"], ["list1 = [{'l1k1': 'l1v1', 'l1k2': 'l1v2'}, {'l2k1': 'l2v1', 'l2k2': ''}]\nlist2 = [{ k: v for k, v in d.items() if v and v.strip() } for d in list1]\n", "list2\n=> [{'l1k1': 'l1v1', 'l1k2': 'l1v2'}, {'l2k1': 'l2v1'}]\n"], ["list1 = [{'l1k1': 'l1v1', 'l1k2': 'l1v2'}, {'l2k1': 'l2v1', 'l2k2': ''}]\nfor item in list1:\n    for key in list(item.keys()):\n        if not item[key].strip():\n            del item[key]\n"], ["for d in list1:\n  for k in d.keys():\n      if d[k] != '':\n          list2.append({k:d[k]})\n"], [], [], [], [], ["ssl_verify:  false\n", "proxy_servers:\n   http: http://www.proxy.com:8080\n   https: https://www.proxy.com:8080\n"], ["img_dir\n|_class1\n  |_a.jpg\n  |_b.jpg\n|_class2\n  |_a.jpg\n  |_b.jpg\n...\n"], [], [], [">>> A = [[1,2,3,4],['a','b','c','d'] , [12,13,14,15]]\n>>> k = 2\n>>> [[x for i, x in enumerate(a) if i != k] for a in A]\n[[1, 2, 4], ['a', 'b', 'd'], [12, 13, 15]]\n"], ["import numpy\n\nA = [[1,2,3,4],['a','b','c','d'] , [12,13,14,15]]\n\nna = numpy.array(A)\n\nprint(na[:,:-1])   # remove last column\nprint(na[:,1:])    # remove first column\n\nprint(numpy.concatenate((na[:,:2],na[:,3:]),axis=1)) # build from 2 slices: remove third column\n", "[['1' '2' '3']\n ['a' 'b' 'c']\n ['12' '13' '14']]\n\n[['2' '3' '4']\n ['b' 'c' 'd']\n ['13' '14' '15']]\n\n[['1' '2' '4']\n ['a' 'b' 'd']\n ['12' '13' '15']]\n"], ["A = [[1,2,3,4],['a','b','c','d'] , [12,13,14,15]]\nk = 1\n\nB = [l[:k]+l[k+1:] for l in A]\n\nprint(B) # >> returns [[1, 3, 4], ['a', 'c', 'd'], [12, 14, 15]]\n"], ["A = [[1, 2, 3, 4], ['a', 'b', 'c', 'd'], [12, 13, 14, 15]]\nB = list(zip(*A))\nB.pop(i)\nC = list(map(list, zip(*B)))\n", "[[1, 2, 4], ['a', 'b', 'd'], [12, 13, 15]]\n", "B = list(map(lambda l: l[:i] + l[i + 1:], A))\n"], ["[link for ver in version for link in useragents if ver > 60]\n", "for ver in version:\n    for link in useragents:\n        if ver > 60:\n            # append(link)\n", "[link for (link, ver) in zip(useragents, version) if ver > 60]\n"], ["[a for b in bs for a in as]\n", "for b in bs:\n    for a in as:\n        lst.append(a)\n"], ["res = []\nfor ver in version:\n    for link in useragents:\n        if ver > 60:\n            res.append(link)\n", "res = [link for link, ver in zip(useragents, version) if ver > 60]\n"], ["[link for (link, ver) in zip(useragents, version) if ver > 60]\n"], ["data_xls = pd.read_excel(excel_file, 'Untitled', index=0,skiprows=1, sep='|',encoding='utf-8')\ndata_xls.columns = data_xls.columns.map(lambda x: x.replace('\\r','').replace('\\n', ''))\n"], ["import re\nre.sub(\"\\n|\\r\", \"\", mystring)\n"], ["mystring = mystring.replace('\\n', ' ').replace('\\r', '')\n"], ["chrome://settings/content/cookies\n", "colab.research.google.com\n"], ["import csv\n\ncontain= 'PT [GEV]'\nList=[]\nm=false\nwith open('Users.csv', 'rt') as f:\n     reader = csv.reader(f, delimiter=',') \n     for row in reader:\n          for field in row:\n              if field == contain:\n              m=true\n          if m==true:\n             List.append(row)            \n"], [], ["def remove_comments_from_file():\n\n    file_name = \"super_secret_file.csv\"\n    file = open(file_name, 'rU')\n\n    csv_read_file = csv.reader(file)        \n\n    for row in csv_read_file:\n        if row[0] == \"PT [GEV]\"\n            break\n\n    return csv_read_file\n"], ["with open(file, 'r') as data_file:\n    while True:\n        position = data_file.tell()\n        line = next(data_file)\n        if line.count(',') == 3: # or whatever condition your header line satisfies\n            data_file.seek(position) # reset file pointer to the beginning of the header line\n            break\n    data_pipe = csv.DictReader(data_file)\n    ...\n"], ["import os\nimport pandas as pd\n\n...\ncsvs = []\nfor file in files:\n    with open(file) as f:\n        for i, l in enumerate(f):\n            if l.startswith('PT [GEV]'):\n                csvs.append(pd.read_csv(file, skiprows = i))\n                break\ndf = pd.concat(csvs)\n"], [">>> c = pd.DataFrame({'a':[1,np.inf,2,3],'b':[1,2,1,2]})\n>>> c.groupby('b').mean()\n          a\nb          \n1  1.500000\n2       inf\n"], ["In [215]: c.groupby('b').agg({'a': lambda x: x.mean(skipna=False)})\nOut[215]: \n     a\nb     \n1  1.5\n2  NaN\n"], ["c.groupby('b').apply(lambda g: g.mean(skipna=False))\n"], ["[{'value': k, 'score': v} for k, v in [my_list[i: i + 2] for i in range(0, len(my_list), 2)]]\n\n[{'score': 2.75, 'value': 35}, {'score': 3.45, 'value': 67}]\n", "[{'value': k, 'score': v} for k,v in zip(my_list[::2], my_list[1::2])]\n", "from operator import itemgetter\n\ngetters = [itemgetter(slice(i, i + 2)) for i in range(0, len(my_list), 2)]\nvals = [g(my_list) for g in getters]\n\n\ndef score_vals(s):\n    k, v = s\n    return {'value': k, 'score': v}\n\nlist(map(score_vals, vals))\n"], ["my_list = [35, 2.75, 67, 3.45]\nlist_of_dicts = [{'value': k, 'score': v} for k, v in zip(iter(my_list), iter(my_list))]\nprint(list_of_dicts)\n", "[{'value': 35, 'score': 2.75}, {'value': 67, 'score': 3.45}]\n"], [">>> my_list = [35, 2.75, 67, 3.45]\n>>> [dict(value=x,score=y) for x,y in zip(my_list[::2], my_list[1::2])]\n[{'value': 35, 'score': 2.75}, {'value': 67, 'score': 3.45}]\n>>> \n"], [">>> my_list = [35, 2.75, 67, 3.45]\n>>> my_dict = [{'value': my_list[i], 'score': my_list[i+1]} for i in range(0, len(my_list), 2)]\n>>> my_dict\n[{'score': 2.75, 'value': 35}, {'score': 3.45, 'value': 67}]\n"], ["d = map(dict, map(lambda t:zip(('value','score'),t), zip(my_list[::2], my_list[1::2])))\nprint(list(d))\n"], ["my_list = [35, 2.75, 67, 3.45] \n\n[{'value': v, 'score': s} for v, s in zip(my_list[::2], my_list[1::2])]\n", "[{'value': 35, 'score': 2.75}, {'value': 67, 'score': 3.45}]\n"], [], ["cursor.execute(\"UPDATE {} SET {} = %s\".format(table, field), value)\n", "cursor.execute(\"UPDATE %s SET %s = %%s\" % (table, field), value)\n", "valid_fields = {\n   'table_1': ['field_1', 'field_2'],\n   'table_2': ['field_a', 'field_b'],\n   'table_3': ['field_x', 'field_y']\n}\n"], ["table = \"led_status\"\nfield = \"test_led\"\nvalue = \"FALSE\"\n\nsql_update = \"UPDATE \" + table + \" SET \" + column + \" = %s\"\ncursor.execute(sql_update, (value,))\n"], ["from psycopg2.extensions import AsIs\n\ncmd = \"\"\"\n      UPDATE %(table)s SET %(column)s = %(val)s\n      \"\"\"\n\nkwargs = {\n    'table': AsIs('led_status'),\n    'column': AsIs('test_led'),\n    'val': False\n}\n\ncursor.execute(cmd, kwargs)\n"], [], ["from itertools import groupby\n\nclass CountKey:\n    def __init__(self, what):\n        self.what = what\n        self.count = 0\n    def __call__(self, item):\n        count = self.count\n        if item == self.what:\n            self.count += 1\n        return count\n\nup = [list(g) for k, g in groupby(down, CountKey('b'))]\n"], ["down = [\"a\", \"b\", \"c\", \"d\", \"b\", \"e\", \"r\"]\n\nn = len(down)\nidx = [index+1 for index, value in enumerate(down) if value == 'b']\n\nres = [down[i: j] for i, j in zip([0] + idx, idx + ([n] if idx[-1] != n else []))]\n\n# [['a', 'b'], ['c', 'd', 'b'], ['e', 'r']]\n"], ["down = [\"a\", \"b\", \"c\", \"d\", \"b\", \"e\", \"r\"]\nup = []\nwhile True:\n    if 'b' in down: # make sure there is a 'b' in the list\n        index = down.index(\"b\") # get the index of the first \"b\"\n        up.append(down[:index + 1]) # save first sublist in up\n        down = down [index + 1:] # trim the sublist you already saved \n    else:\n        up.append(down) # add the rest of down\n        break # leave the loop \nprint(up)\n"], ["In [59]: k\nOut[59]: ['a', 'b', 'c', 'd', 'b', 'e', 'r', 'l', 'f', 'b', 's']\n\nIn [60]: indices = [i for i, x in enumerate(k) if x == \"b\"]  # all index of 'b'\n\nIn [61]: aa = k[:indices[0]+1] # first list\n\nIn [62]: bb = k[indices[len(indices)-1]+1:]  # last list\n\nIn [63]: for i in range(0, len(indices)-1):\n    ...:     print(k[indices[i]+1:indices[i+1]+1]) # remaining list\n    ...: \n['c', 'd', 'b']\n['e', 'r', 'l', 'f', 'b']\n\nIn [64]: aa\nOut[64]: ['a', 'b']\n\nIn [65]: bb\nOut[65]: ['s']\n"], ["down = [\"a\", \"b\", \"c\", \"d\", \"b\", \"e\", \"r\"]\nindices = [i for i, x in enumerate(down ) if x == \"b\"]\ncurr=0\nmaster_list=[]\nfor item in indices:\n    master_list.append(down[curr:item+1])\n    print(master_list)\n    curr=item+1\nif curr !=len(down):\n    master_list.append(down[curr:len(down)])\nprint(master_list)\n"], ["down = [\"a\", \"b\", \"c\", \"d\", \"b\", \"e\", \"r\"]\nposlist = []\nfor pos, item in enumerate(down):\n    if item == 'b':\n        poslist.append(pos)\nanswerlist = []\nfor i in range(len(poslist)):\n    if i == 0:\n        answerlist.append(down[:poslist[i]+1])\n    else:\n        answerlist.append(down[poslist[i-1]+1:poslist[i]+1])\nanswerlist.append(down[poslist[i]+1:])\nprint (answerlist)\n# [['a', 'b'], ['c', 'd', 'b'], ['e', 'r']]\n"], ["from collections import defaultdict\n\nname_list = [\"David Joyner\", \"David Zuber\", \"Brenton Joyner\",\n             \"Brenton Zuber\", \"Nicol Barthel\", \"Shelba Barthel\",\n             \"Shelba Crowley\", \"Shelba Fernald\", \"Shelba Odle\",\n             \"Shelba Fry\", \"Maren Fry\"]\n\nrv = defaultdict(list)\nfor elem in name_list:\n    rv[elem.split()[0]].append(elem) \n\nprint(dict(rv))\n", "{'David':  ['David Joyner', 'David Zuber'], \n 'Brenton':['Brenton Joyner', 'Brenton Zuber'], \n 'Nicol':  ['Nicol Barthel'], \n 'Shelba': ['Shelba Barthel','Shelba Crowley','Shelba Fernald','Shelba Odle','Shelba Fry'], \n 'Maren':  ['Maren Fry']}\n", "d = {key:[n for n in name_list if n.startswith(key)] \n          for key in set( p.split()[0] for p in name_list)}\n", "# sorting the data afterwards\nfor k in rv:\n    rv[k].sort(key = lambda x:x.split()[1]) # to sort by last names\n", "# only difference when sorted: see key `Shelba`\n{'David':  ['David Joyner', 'David Zuber'], \n 'Brenton':['Brenton Joyner', 'Brenton Zuber'], \n 'Nicol':  ['Nicol Barthel'], \n 'Shelba': ['Shelba Barthel','Shelba Crowley','Shelba Fernald','Shelba Fry','Shelba Odle'], \n 'Maren':  ['Maren Fry']}\n"], ["def build_dict(name_list)\nresult_dict = {}\nfor name in name_list:\n    names = name.split(\" \")\n    if names[0] in result_dict:\n        result_dict[names[0]].append(names[1])\n    else:\n        result_dict[names[0]] = [names[1]]\n\nreturn result_dict\n"], ["from collections import defaultdict\n\nname_list = [\"David Joyner\", \"David Zuber\", \"Brenton Joyner\",\n             \"Brenton Zuber\", \"Nicol Barthel\", \"Shelba Barthel\",\n             \"Shelba Crowley\", \"Shelba Fernald\", \"Shelba Odle\",\n             \"Shelba Fry\", \"Maren Fry\"]\n\nname_dict = defaultdict(list)\n\nfor first_name in set([name.split()[0] for name in name_list]):\n    name_dict[first_name] = [name for name in name_list if name.split()[0] == first_name]\n\nprint(name_dict)\n#defaultdict(<class 'list'>, {'Maren': ['Maren Fry'], 'David': ['David Joyner', 'David Zuber'], 'Nicol': ['Nicol Barthel'], 'Shelba': ['Shelba Barthel', 'Shelba Crowley', 'Shelba Fernald', 'Shelba Odle', 'Shelba Fry'], 'Brenton': ['Brenton Joyner', 'Brenton Zuber']})\n"], ["WORD_DICT = {\"THEIR\":\"THEIR\",\n             \"BUSINESS\":\"BISINESS\",\n             \"WINDOWS\":\"WINDMILL\",\n             \"WERE\":\"WEAR\",\n             \"SAMPLE\":\"SAMPLE\"}\n\nsecond_dict = {'WHIZZY': 'MIZZLY', 'PRETTY': 'PRESEN'}\n\ndef find_correct(k, v):\n\n    k, v = list(k), list(v)\n    for k_letter in k:\n        if k_letter in v:\n            idx = v.index(k_letter)\n            v.pop(idx)\n    if len(v) == 0:\n        return \"correct\"\n    elif len(v) == 1:\n        return \"almost correct\"\n    else:\n        return \"incorrect\"\n\ndef top_level_func(word_dict):\n\n    d = {\"correct\":0, \"almost correct\":0, \"incorrect\":0}\n    for k, v in word_dict.items():\n        response = find_correct(k, v)\n        d[response] += 1\n\n    return d\n\nresults = top_level_func(second_dict)\nfor item in results.items():\n    print(\"{} = {} instances\".format(*item))\n"], ["WORD_DICT = {\"THEIR\":\"THEIR\",\n             \"BUSINESS\":\"BISINESS\",\n             \"WINDOWS\":\"WINDMILL\",\n             \"WERE\":\"WEAR\",\n             \"SAMPLE\":\"SAMPLE\"}\n\ndef find_correct(word_dict):\n\n    correct, almost_correct, incorrect = 0, 0, 0\n\n    for key, value in WORD_DICT.items():\n\n        diff_list = set(list(key)).symmetric_difference(set(list(value)))  \n        diff = len(diff_list)\n\n        if diff == 0:\n            correct += 1\n        elif diff <= 2:\n            almost_correct += 1\n        elif diff > 2:\n            incorrect += 1\n\n\n    print(correct, almost_correct, incorrect)\n\n\nfind_correct(WORD_DICT)\n"]]